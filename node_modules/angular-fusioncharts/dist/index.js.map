{"version":3,"file":"index.js","sources":["v:/jad-admin-go/mazat_admin_panel/node_modules/angular-fusioncharts/dist/index.js"],"sourcesContent":["(function (global, factory) {\r\n\ttypeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core')) :\r\n\ttypeof define === 'function' && define.amd ? define(['exports', '@angular/core'], factory) :\r\n\t(factory((global.ng = global.ng || {}, global.ng['angular-fusioncharts'] = {}),global.ng.core));\r\n}(this, (function (exports,_angular_core) { 'use strict';\r\n\r\nvar FusionChartsStatic = /** @class */ (function () {\r\n    function FusionChartsStatic() {\r\n    }\r\n    FusionChartsStatic.decorators = [\r\n        { type: _angular_core.Injectable },\r\n    ];\r\n    /** @nocollapse */\r\n    FusionChartsStatic.ctorParameters = function () { return []; };\r\n    return FusionChartsStatic;\r\n}());\r\nvar FusionChartsService = /** @class */ (function () {\r\n    function FusionChartsService(FCStatic) {\r\n        var fcRoot;\r\n        if (FusionChartsService.isFCRootSet()) {\r\n            fcRoot = FusionChartsService.getFCRoot();\r\n        }\r\n        else {\r\n            fcRoot = {\r\n                core: FCStatic.core,\r\n                modules: FCStatic.modules\r\n            };\r\n        }\r\n        this.resolveFusionCharts(fcRoot.core, fcRoot.modules);\r\n    }\r\n    FusionChartsService.setFCRoot = function (fcRoot) {\r\n        FusionChartsService._fcRoot = fcRoot;\r\n    };\r\n    FusionChartsService.getFCRoot = function () {\r\n        return FusionChartsService._fcRoot;\r\n    };\r\n    FusionChartsService.isFCRootSet = function () {\r\n        return !!FusionChartsService._fcRoot;\r\n    };\r\n    FusionChartsService.prototype.resolveFusionCharts = function (core, modules) {\r\n        if (core && core.id && core.id === 'FusionCharts') {\r\n            this._fusionchartsStatice = core;\r\n        }\r\n        else {\r\n            this._fusionchartsStatice = core();\r\n        }\r\n        if (modules) {\r\n            modules.forEach(function (FusionChartsModules) {\r\n                if ((FusionChartsModules.getName && FusionChartsModules.getType) ||\r\n                    (FusionChartsModules.name && FusionChartsModules.type)) {\r\n                    core.addDep(FusionChartsModules);\r\n                }\r\n                else {\r\n                    FusionChartsModules(core);\r\n                }\r\n            });\r\n        }\r\n    };\r\n    FusionChartsService.prototype.getFusionChartsStatic = function () {\r\n        return this._fusionchartsStatice;\r\n    };\r\n    FusionChartsService.prototype.getNextItemCount = function () {\r\n        FusionChartsService.itemCount++;\r\n        return FusionChartsService.itemCount;\r\n    };\r\n    FusionChartsService._fcRoot = null;\r\n    FusionChartsService.itemCount = 0;\r\n    FusionChartsService.decorators = [\r\n        { type: _angular_core.Injectable },\r\n    ];\r\n    /** @nocollapse */\r\n    FusionChartsService.ctorParameters = function () { return [\r\n        { type: FusionChartsStatic, },\r\n    ]; };\r\n    return FusionChartsService;\r\n}());\r\n\r\nfunction FusionChartsConstructor(fusionchartsService, chartConfig) {\r\n    var FusionCharts = fusionchartsService.getFusionChartsStatic();\r\n    return new FusionCharts(chartConfig);\r\n}\r\n\r\nvar eventList = [\r\n    \"beforeLinkedItemOpen\",\r\n    \"linkedItemOpened\",\r\n    \"beforeLinkedItemClose\",\r\n    \"linkedItemClosed\",\r\n    \"printReadyStateChange\",\r\n    \"dataLoadRequestCompleted\",\r\n    \"dataLoadError\",\r\n    \"dataLoadCancelled\",\r\n    \"dataLoadRequestCancelled\",\r\n    \"dataUpdated\",\r\n    \"dataUpdateCancelled\",\r\n    \"dataLoadRequested\",\r\n    \"beforeDataUpdate\",\r\n    \"realTimeUpdateComplete\",\r\n    \"chartCleared\",\r\n    \"slicingEnd\",\r\n    \"slicingStart\",\r\n    \"entityRollOut\",\r\n    \"entityRollOver\",\r\n    \"entityClick\",\r\n    \"connectorRollOver\",\r\n    \"connectorRollOut\",\r\n    \"connectorClick\",\r\n    \"markerRollOver\",\r\n    \"markerRollOut\",\r\n    \"markerClick\",\r\n    \"pageNavigated\",\r\n    \"rotationEnd\",\r\n    \"rotationStart\",\r\n    \"centerLabelRollover\",\r\n    \"centerLabelRollout\",\r\n    \"centerLabelClick\",\r\n    \"centerLabelChanged\",\r\n    \"chartClick\",\r\n    \"chartMouseMove\",\r\n    \"chartRollOver\",\r\n    \"chartRollOut\",\r\n    \"backgroundLoaded\",\r\n    \"backgroundLoadError\",\r\n    \"legendItemClicked\",\r\n    \"legendItemRollover\",\r\n    \"legendItemRollout\",\r\n    \"logoRollover\",\r\n    \"logoRollout\",\r\n    \"logoClick\",\r\n    \"logoLoaded\",\r\n    \"logoLoadError\",\r\n    \"beforeExport\",\r\n    \"exported\",\r\n    \"exportCancelled\",\r\n    \"beforePrint\",\r\n    \"printComplete\",\r\n    \"printCancelled\",\r\n    \"dataLabelClick\",\r\n    \"dataLabelRollOver\",\r\n    \"dataLabelRollOut\",\r\n    \"scrollStart\",\r\n    \"scrollEnd\",\r\n    \"onScroll\",\r\n    \"zoomReset\",\r\n    \"zoomedOut\",\r\n    \"zoomedIn\",\r\n    \"zoomed\",\r\n    \"zoomModeChanged\",\r\n    \"pinned\",\r\n    \"dataRestored\",\r\n    \"beforeDataSubmit\",\r\n    \"dataSubmitError\",\r\n    \"dataSubmitted\",\r\n    \"dataSubmitCancelled\",\r\n    \"chartUpdated\",\r\n    \"nodeAdded\",\r\n    \"nodeUpdated\",\r\n    \"nodeDeleted\",\r\n    \"connectorAdded\",\r\n    \"connectorUpdated\",\r\n    \"connectorDeleted\",\r\n    \"labelAdded\",\r\n    \"labelDeleted\",\r\n    \"selectionRemoved\",\r\n    \"selectionStart\",\r\n    \"selectionEnd\",\r\n    \"labelClick\",\r\n    \"labelRollOver\",\r\n    \"labelRollOut\",\r\n    \"labelDragStart\",\r\n    \"labelDragEnd\",\r\n    \"dataplotDragStart\",\r\n    \"dataplotDragEnd\",\r\n    \"processClick\",\r\n    \"processRollOver\",\r\n    \"processRollOut\",\r\n    \"categoryClick\",\r\n    \"categoryRollOver\",\r\n    \"categoryRollOut\",\r\n    \"milestoneClick\",\r\n    \"milestoneRollOver\",\r\n    \"milestoneRollOut\",\r\n    \"chartTypeChanged\",\r\n    \"overlayButtonClick\",\r\n    \"loaded\",\r\n    \"rendered\",\r\n    \"drawComplete\",\r\n    \"renderComplete\",\r\n    \"dataInvalid\",\r\n    \"dataXMLInvalid\",\r\n    \"dataLoaded\",\r\n    \"noDataToDisplay\",\r\n    \"legendPointerDragStart\",\r\n    \"legendPointerDragStop\",\r\n    \"legendRangeUpdated\",\r\n    \"alertComplete\",\r\n    \"realTimeUpdateError\",\r\n    \"dataplotRollOver\",\r\n    \"dataplotRollOut\",\r\n    \"dataplotClick\",\r\n    \"linkClicked\",\r\n    \"beforeRender\",\r\n    \"renderCancelled\",\r\n    \"beforeResize\",\r\n    \"resized\",\r\n    \"resizeCancelled\",\r\n    \"beforeDispose\",\r\n    \"disposed\",\r\n    \"disposeCancelled\",\r\n    \"linkedChartInvoked\",\r\n    \"beforeDrillDown\",\r\n    \"drillDown\",\r\n    \"beforeDrillUp\",\r\n    \"drillUp\",\r\n    \"drillDownCancelled\",\r\n    \"drillUpCancelled\",\r\n];\r\n\r\nvar FusionChartsComponent = /** @class */ (function () {\r\n    function FusionChartsComponent(element, fusionchartsService, differs, zone) {\r\n        this.differs = differs;\r\n        this.zone = zone;\r\n        /**\r\n         * All Events List\r\n         */\r\n        this.eventList = eventList;\r\n        /**\r\n         * All events emitter\r\n         */\r\n        this.beforeLinkedItemOpen = new _angular_core.EventEmitter();\r\n        this.linkedItemOpened = new _angular_core.EventEmitter();\r\n        this.beforeLinkedItemClose = new _angular_core.EventEmitter();\r\n        this.linkedItemClosed = new _angular_core.EventEmitter();\r\n        this.printReadyStateChange = new _angular_core.EventEmitter();\r\n        this.dataLoadRequestCompleted = new _angular_core.EventEmitter();\r\n        this.dataLoadError = new _angular_core.EventEmitter();\r\n        this.dataLoadCancelled = new _angular_core.EventEmitter();\r\n        this.dataLoadRequestCancelled = new _angular_core.EventEmitter();\r\n        this.dataUpdated = new _angular_core.EventEmitter();\r\n        this.dataUpdateCancelled = new _angular_core.EventEmitter();\r\n        this.dataLoadRequested = new _angular_core.EventEmitter();\r\n        this.beforeDataUpdate = new _angular_core.EventEmitter();\r\n        this.realTimeUpdateComplete = new _angular_core.EventEmitter();\r\n        this.chartCleared = new _angular_core.EventEmitter();\r\n        this.slicingEnd = new _angular_core.EventEmitter();\r\n        this.slicingStart = new _angular_core.EventEmitter();\r\n        this.entityRollOut = new _angular_core.EventEmitter();\r\n        this.entityRollOver = new _angular_core.EventEmitter();\r\n        this.entityClick = new _angular_core.EventEmitter();\r\n        this.connectorRollOver = new _angular_core.EventEmitter();\r\n        this.connectorRollOut = new _angular_core.EventEmitter();\r\n        this.connectorClick = new _angular_core.EventEmitter();\r\n        this.markerRollOver = new _angular_core.EventEmitter();\r\n        this.markerRollOut = new _angular_core.EventEmitter();\r\n        this.markerClick = new _angular_core.EventEmitter();\r\n        this.pageNavigated = new _angular_core.EventEmitter();\r\n        this.rotationEnd = new _angular_core.EventEmitter();\r\n        this.rotationStart = new _angular_core.EventEmitter();\r\n        this.centerLabelRollover = new _angular_core.EventEmitter();\r\n        this.centerLabelRollout = new _angular_core.EventEmitter();\r\n        this.centerLabelClick = new _angular_core.EventEmitter();\r\n        this.centerLabelChanged = new _angular_core.EventEmitter();\r\n        this.chartClick = new _angular_core.EventEmitter();\r\n        this.chartMouseMove = new _angular_core.EventEmitter();\r\n        this.chartRollOver = new _angular_core.EventEmitter();\r\n        this.chartRollOut = new _angular_core.EventEmitter();\r\n        this.backgroundLoaded = new _angular_core.EventEmitter();\r\n        this.backgroundLoadError = new _angular_core.EventEmitter();\r\n        this.legendItemClicked = new _angular_core.EventEmitter();\r\n        this.legendItemRollover = new _angular_core.EventEmitter();\r\n        this.legendItemRollout = new _angular_core.EventEmitter();\r\n        this.logoRollover = new _angular_core.EventEmitter();\r\n        this.logoRollout = new _angular_core.EventEmitter();\r\n        this.logoClick = new _angular_core.EventEmitter();\r\n        this.logoLoaded = new _angular_core.EventEmitter();\r\n        this.logoLoadError = new _angular_core.EventEmitter();\r\n        this.beforeExport = new _angular_core.EventEmitter();\r\n        this.exported = new _angular_core.EventEmitter();\r\n        this.exportCancelled = new _angular_core.EventEmitter();\r\n        this.beforePrint = new _angular_core.EventEmitter();\r\n        this.printComplete = new _angular_core.EventEmitter();\r\n        this.printCancelled = new _angular_core.EventEmitter();\r\n        this.dataLabelClick = new _angular_core.EventEmitter();\r\n        this.dataLabelRollOver = new _angular_core.EventEmitter();\r\n        this.dataLabelRollOut = new _angular_core.EventEmitter();\r\n        this.scrollStart = new _angular_core.EventEmitter();\r\n        this.scrollEnd = new _angular_core.EventEmitter();\r\n        this.onScroll = new _angular_core.EventEmitter();\r\n        this.zoomReset = new _angular_core.EventEmitter();\r\n        this.zoomedOut = new _angular_core.EventEmitter();\r\n        this.zoomedIn = new _angular_core.EventEmitter();\r\n        this.zoomed = new _angular_core.EventEmitter();\r\n        this.zoomModeChanged = new _angular_core.EventEmitter();\r\n        this.pinned = new _angular_core.EventEmitter();\r\n        this.dataRestored = new _angular_core.EventEmitter();\r\n        this.beforeDataSubmit = new _angular_core.EventEmitter();\r\n        this.dataSubmitError = new _angular_core.EventEmitter();\r\n        this.dataSubmitted = new _angular_core.EventEmitter();\r\n        this.dataSubmitCancelled = new _angular_core.EventEmitter();\r\n        this.chartUpdated = new _angular_core.EventEmitter();\r\n        this.nodeAdded = new _angular_core.EventEmitter();\r\n        this.nodeUpdated = new _angular_core.EventEmitter();\r\n        this.nodeDeleted = new _angular_core.EventEmitter();\r\n        this.connectorAdded = new _angular_core.EventEmitter();\r\n        this.connectorUpdated = new _angular_core.EventEmitter();\r\n        this.connectorDeleted = new _angular_core.EventEmitter();\r\n        this.labelAdded = new _angular_core.EventEmitter();\r\n        this.labelDeleted = new _angular_core.EventEmitter();\r\n        this.selectionRemoved = new _angular_core.EventEmitter();\r\n        this.selectionStart = new _angular_core.EventEmitter();\r\n        this.selectionEnd = new _angular_core.EventEmitter();\r\n        this.labelClick = new _angular_core.EventEmitter();\r\n        this.labelRollOver = new _angular_core.EventEmitter();\r\n        this.labelRollOut = new _angular_core.EventEmitter();\r\n        this.labelDragStart = new _angular_core.EventEmitter();\r\n        this.labelDragEnd = new _angular_core.EventEmitter();\r\n        this.dataplotDragStart = new _angular_core.EventEmitter();\r\n        this.dataplotDragEnd = new _angular_core.EventEmitter();\r\n        this.processClick = new _angular_core.EventEmitter();\r\n        this.processRollOver = new _angular_core.EventEmitter();\r\n        this.processRollOut = new _angular_core.EventEmitter();\r\n        this.categoryClick = new _angular_core.EventEmitter();\r\n        this.categoryRollOver = new _angular_core.EventEmitter();\r\n        this.categoryRollOut = new _angular_core.EventEmitter();\r\n        this.milestoneClick = new _angular_core.EventEmitter();\r\n        this.milestoneRollOver = new _angular_core.EventEmitter();\r\n        this.milestoneRollOut = new _angular_core.EventEmitter();\r\n        this.chartTypeChanged = new _angular_core.EventEmitter();\r\n        this.overlayButtonClick = new _angular_core.EventEmitter();\r\n        this.loaded = new _angular_core.EventEmitter();\r\n        this.rendered = new _angular_core.EventEmitter();\r\n        this.drawComplete = new _angular_core.EventEmitter();\r\n        this.renderComplete = new _angular_core.EventEmitter();\r\n        this.dataInvalid = new _angular_core.EventEmitter();\r\n        this.dataXMLInvalid = new _angular_core.EventEmitter();\r\n        this.dataLoaded = new _angular_core.EventEmitter();\r\n        this.noDataToDisplay = new _angular_core.EventEmitter();\r\n        this.legendPointerDragStart = new _angular_core.EventEmitter();\r\n        this.legendPointerDragStop = new _angular_core.EventEmitter();\r\n        this.legendRangeUpdated = new _angular_core.EventEmitter();\r\n        this.alertComplete = new _angular_core.EventEmitter();\r\n        this.realTimeUpdateError = new _angular_core.EventEmitter();\r\n        this.dataplotRollOver = new _angular_core.EventEmitter();\r\n        this.dataplotRollOut = new _angular_core.EventEmitter();\r\n        this.dataplotClick = new _angular_core.EventEmitter();\r\n        this.linkClicked = new _angular_core.EventEmitter();\r\n        this.beforeRender = new _angular_core.EventEmitter();\r\n        this.renderCancelled = new _angular_core.EventEmitter();\r\n        this.beforeResize = new _angular_core.EventEmitter();\r\n        this.resized = new _angular_core.EventEmitter();\r\n        this.resizeCancelled = new _angular_core.EventEmitter();\r\n        this.beforeDispose = new _angular_core.EventEmitter();\r\n        this.disposed = new _angular_core.EventEmitter();\r\n        this.disposeCancelled = new _angular_core.EventEmitter();\r\n        this.linkedChartInvoked = new _angular_core.EventEmitter();\r\n        this.beforeDrillDown = new _angular_core.EventEmitter();\r\n        this.drillDown = new _angular_core.EventEmitter();\r\n        this.beforeDrillUp = new _angular_core.EventEmitter();\r\n        this.drillUp = new _angular_core.EventEmitter();\r\n        this.drillDownCancelled = new _angular_core.EventEmitter();\r\n        this.drillUpCancelled = new _angular_core.EventEmitter();\r\n        this.initialized = new _angular_core.EventEmitter();\r\n        this.oldDataSource = this.dataSource;\r\n        this.constructerParams = {\r\n            type: true,\r\n            id: true,\r\n            width: true,\r\n            height: true,\r\n            renderAt: true,\r\n            dataFormat: true,\r\n            dataSource: true,\r\n            events: true,\r\n            link: true,\r\n            showDataLoadingMessage: true,\r\n            showChartLoadingMessage: true,\r\n            baseChartMessageFont: true,\r\n            baseChartMessageFontSize: true,\r\n            baseChartMessageColor: true,\r\n            dataLoadStartMessage: true,\r\n            dataLoadErrorMessage: true,\r\n            dataInvalidMessage: true,\r\n            dataEmptyMessage: true,\r\n            typeNotSupportedMessage: true,\r\n            loadMessage: true,\r\n            renderErrorMessage: true,\r\n            containerBackgroundColor: true,\r\n            containerBackgroundOpacity: true,\r\n            containerClassName: true,\r\n            baseChartMessageImageHAlign: true,\r\n            baseChartMessageImageVAlign: true,\r\n            baseChartMessageImageAlpha: true,\r\n            baseChartMessageImageScale: true,\r\n            typeNotSupportedMessageImageHAlign: true,\r\n            typeNotSupportedMessageImageVAlign: true,\r\n            typeNotSupportedMessageImageAlpha: true,\r\n            typeNotSupportedMessageImageScale: true,\r\n            dataLoadErrorMessageImageHAlign: true,\r\n            dataLoadErrorMessageImageVAlign: true,\r\n            dataLoadErrorMessageImageAlpha: true,\r\n            dataLoadErrorMessageImageScale: true,\r\n            dataLoadStartMessageImageHAlign: true,\r\n            dataLoadStartMessageImageVAlign: true,\r\n            dataLoadStartMessageImageAlpha: true,\r\n            dataLoadStartMessageImageScale: true,\r\n            dataInvalidMessageImageHAlign: true,\r\n            dataInvalidMessageImageVAlign: true,\r\n            dataInvalidMessageImageAlpha: true,\r\n            dataInvalidMessageImageScale: true,\r\n            dataEmptyMessageImageHAlign: true,\r\n            dataEmptyMessageImageVAlign: true,\r\n            dataEmptyMessageImageAlpha: true,\r\n            dataEmptyMessageImageScale: true,\r\n            renderErrorMessageImageHAlign: true,\r\n            renderErrorMessageImageVAlign: true,\r\n            renderErrorMessageImageAlpha: true,\r\n            renderErrorMessageImageScale: true,\r\n            loadMessageImageHAlign: true,\r\n            loadMessageImageVAlign: true,\r\n            loadMessageImageAlpha: true,\r\n            loadMessageImageScale: true,\r\n            chartConfig: true\r\n        };\r\n        this.element = element;\r\n        this.fusionchartsService = fusionchartsService;\r\n        this.containerId = fusionchartsService.getNextItemCount();\r\n    }\r\n    // @ViewChild('samplediv') chartContainer: ElementRef;\r\n    FusionChartsComponent.prototype.checkIfDataTableExists = function (dataSource) {\r\n        if (dataSource && dataSource.data && dataSource.data._dataStore) {\r\n            return true;\r\n        }\r\n        return false;\r\n    };\r\n    FusionChartsComponent.prototype.cloneDataSource = function (obj) {\r\n        var type = typeof obj;\r\n        if (type === 'string' ||\r\n            type === 'number' ||\r\n            type === 'function' ||\r\n            type === 'boolean') {\r\n            return obj;\r\n        }\r\n        if (obj === null || obj === undefined) {\r\n            return obj;\r\n        }\r\n        if (Array.isArray(obj)) {\r\n            var arr = [];\r\n            for (var i = 0; i < obj.length; i++) {\r\n                arr.push(this.cloneDataSource(obj[i]));\r\n            }\r\n            return arr;\r\n        }\r\n        if (typeof obj === 'object') {\r\n            var clonedObj = {};\r\n            for (var prop in obj) {\r\n                // Edge case handling for DataTable\r\n                if (prop === 'data') {\r\n                    if (obj[prop]._dataStore) {\r\n                        clonedObj[prop] = \"-\";\r\n                    }\r\n                    else {\r\n                        clonedObj[prop] = this.cloneDataSource(obj[prop]);\r\n                    }\r\n                    continue;\r\n                }\r\n                clonedObj[prop] = this.cloneDataSource(obj[prop]);\r\n            }\r\n            return clonedObj;\r\n        }\r\n    };\r\n    FusionChartsComponent.prototype.ngOnInit = function () {\r\n        if (this.checkIfDataTableExists(this.dataSource)) {\r\n            this.oldDataSource = JSON.stringify(this.cloneDataSource(this.dataSource));\r\n        }\r\n        else {\r\n            this.oldDataSource = JSON.stringify(this.dataSource);\r\n        }\r\n        this.placeholder = this.placeholder || 'FusionCharts will render here';\r\n    };\r\n    FusionChartsComponent.prototype.ngOnChanges = function (changes) {\r\n        for (var _i = 0, _a = Object.keys(changes); _i < _a.length; _i++) {\r\n            var i = _a[_i];\r\n            var key = i.charAt(0).toUpperCase() + i.slice(1), THIS = this, fnName = \"update\" + key;\r\n            if (THIS[fnName]) {\r\n                THIS[fnName]();\r\n            }\r\n        }\r\n    };\r\n    FusionChartsComponent.prototype.ngDoCheck = function () {\r\n        var data;\r\n        if (this.checkIfDataTableExists(this.dataSource)) {\r\n            data = JSON.stringify(this.cloneDataSource(this.dataSource));\r\n        }\r\n        else {\r\n            data = JSON.stringify(this.dataSource);\r\n        }\r\n        if (this.oldDataSource !== data ||\r\n            this.oldDataTable !== this.dataSource.data) {\r\n            this.oldDataTable = this.dataSource && this.dataSource.data;\r\n            this.oldDataSource = data;\r\n            this.updateChartData();\r\n        }\r\n    };\r\n    FusionChartsComponent.prototype.updateChartData = function () {\r\n        var dataFormat = this.configObj && this.configObj.dataFormat\r\n            ? this.configObj.dataFormat\r\n            : 'json', data = this.dataSource;\r\n        if (this.chartObj) {\r\n            this.chartObj.setChartData(data, dataFormat);\r\n        }\r\n    };\r\n    FusionChartsComponent.prototype.updateWidth = function () {\r\n        if (this.chartObj) {\r\n            this.chartObj.resizeTo({\r\n                w: this.width\r\n            });\r\n        }\r\n    };\r\n    FusionChartsComponent.prototype.updateHeight = function () {\r\n        if (this.chartObj) {\r\n            this.chartObj.resizeTo({\r\n                h: this.height\r\n            });\r\n        }\r\n    };\r\n    FusionChartsComponent.prototype.updateType = function () {\r\n        if (this.chartObj) {\r\n            this.chartObj.chartType(this.type);\r\n        }\r\n    };\r\n    FusionChartsComponent.prototype.generateEventsCallback = function (eventList$$1) {\r\n        var _this_1 = this;\r\n        var events = {};\r\n        eventList$$1.forEach(function (eventName) {\r\n            events[eventName] = function (eventObj, dataObj) {\r\n                var fEventObj = { eventObj: {}, dataObj: {} };\r\n                if (eventObj)\r\n                    fEventObj.eventObj = eventObj;\r\n                if (dataObj)\r\n                    fEventObj.dataObj = dataObj;\r\n                _this_1[eventName].emit(fEventObj);\r\n            };\r\n        });\r\n        return events;\r\n    };\r\n    FusionChartsComponent.prototype.ngAfterViewInit = function () {\r\n        var _this_1 = this;\r\n        var _this = this, params = _this.constructerParams, configObj = _this.configObj || (_this.configObj = {});\r\n        var _chartConfig = _this.chartConfig || {};\r\n        if (typeof _chartConfig === 'string') {\r\n            _chartConfig = JSON.parse(_chartConfig);\r\n        }\r\n        for (var _i = 0, _a = Object.keys(params); _i < _a.length; _i++) {\r\n            var i = _a[_i];\r\n            var value = _this[i] || _chartConfig[i];\r\n            if (value) {\r\n                configObj[i] = value;\r\n            }\r\n        }\r\n        if (configObj['type']) {\r\n            var events = _this.generateEventsCallback(_this.eventList);\r\n            if (!configObj['events']) {\r\n                configObj['events'] = events;\r\n            }\r\n            else {\r\n                configObj['events'] = Object.assign(events, configObj['events']);\r\n            }\r\n            // configObj['renderAt'] = 'container-' + _this.chartObj.id;\r\n            // _this.containerId = _this.chartObj.id;\r\n            this.zone.runOutsideAngular(function () {\r\n                setTimeout(function () {\r\n                    _this.chartObj = FusionChartsConstructor(_this.fusionchartsService, configObj);\r\n                    _this_1.initialized.emit({ chart: _this.chartObj });\r\n                    _this.chartObj.render(_this.element.nativeElement.querySelector('div'));\r\n                }, 1);\r\n            });\r\n        }\r\n    };\r\n    FusionChartsComponent.prototype.ngOnDestroy = function () {\r\n        this.chartObj && this.chartObj.dispose();\r\n    };\r\n    FusionChartsComponent.decorators = [\r\n        { type: _angular_core.Component, args: [{\r\n                    selector: 'fusioncharts',\r\n                    template: \"\\n    <div attr.id=\\\"container-{{ containerId }}\\\" style=\\\"width:100%;height:100%\\\">\\n      {{ placeholder }}\\n    </div>\\n  \",\r\n                    providers: [FusionChartsService]\r\n                },] },\r\n    ];\r\n    /** @nocollapse */\r\n    FusionChartsComponent.ctorParameters = function () { return [\r\n        { type: _angular_core.ElementRef, },\r\n        { type: FusionChartsService, },\r\n        { type: _angular_core.KeyValueDiffers, },\r\n        { type: _angular_core.NgZone, },\r\n    ]; };\r\n    FusionChartsComponent.propDecorators = {\r\n        'placeholder': [{ type: _angular_core.Input },],\r\n        'dataSource': [{ type: _angular_core.Input },],\r\n        'type': [{ type: _angular_core.Input },],\r\n        'id': [{ type: _angular_core.Input },],\r\n        'width': [{ type: _angular_core.Input },],\r\n        'height': [{ type: _angular_core.Input },],\r\n        'renderAt': [{ type: _angular_core.Input },],\r\n        'dataFormat': [{ type: _angular_core.Input },],\r\n        'events': [{ type: _angular_core.Input },],\r\n        'link': [{ type: _angular_core.Input },],\r\n        'showDataLoadingMessage': [{ type: _angular_core.Input },],\r\n        'showChartLoadingMessage': [{ type: _angular_core.Input },],\r\n        'baseChartMessageFont': [{ type: _angular_core.Input },],\r\n        'baseChartMessageFontSize': [{ type: _angular_core.Input },],\r\n        'baseChartMessageColor': [{ type: _angular_core.Input },],\r\n        'dataLoadStartMessage': [{ type: _angular_core.Input },],\r\n        'dataLoadErrorMessage': [{ type: _angular_core.Input },],\r\n        'dataInvalidMessage': [{ type: _angular_core.Input },],\r\n        'dataEmptyMessage': [{ type: _angular_core.Input },],\r\n        'typeNotSupportedMessage': [{ type: _angular_core.Input },],\r\n        'loadMessage': [{ type: _angular_core.Input },],\r\n        'renderErrorMessage': [{ type: _angular_core.Input },],\r\n        'containerBackgroundColor': [{ type: _angular_core.Input },],\r\n        'containerBackgroundOpacity': [{ type: _angular_core.Input },],\r\n        'containerClassName': [{ type: _angular_core.Input },],\r\n        'baseChartMessageImageHAlign': [{ type: _angular_core.Input },],\r\n        'baseChartMessageImageVAlign': [{ type: _angular_core.Input },],\r\n        'baseChartMessageImageAlpha': [{ type: _angular_core.Input },],\r\n        'baseChartMessageImageScale': [{ type: _angular_core.Input },],\r\n        'typeNotSupportedMessageImageHAlign': [{ type: _angular_core.Input },],\r\n        'typeNotSupportedMessageImageVAlign': [{ type: _angular_core.Input },],\r\n        'typeNotSupportedMessageImageAlpha': [{ type: _angular_core.Input },],\r\n        'typeNotSupportedMessageImageScale': [{ type: _angular_core.Input },],\r\n        'dataLoadErrorMessageImageHAlign': [{ type: _angular_core.Input },],\r\n        'dataLoadErrorMessageImageVAlign': [{ type: _angular_core.Input },],\r\n        'dataLoadErrorMessageImageAlpha': [{ type: _angular_core.Input },],\r\n        'dataLoadErrorMessageImageScale': [{ type: _angular_core.Input },],\r\n        'dataLoadStartMessageImageHAlign': [{ type: _angular_core.Input },],\r\n        'dataLoadStartMessageImageVAlign': [{ type: _angular_core.Input },],\r\n        'dataLoadStartMessageImageAlpha': [{ type: _angular_core.Input },],\r\n        'dataLoadStartMessageImageScale': [{ type: _angular_core.Input },],\r\n        'dataInvalidMessageImageHAlign': [{ type: _angular_core.Input },],\r\n        'dataInvalidMessageImageVAlign': [{ type: _angular_core.Input },],\r\n        'dataInvalidMessageImageAlpha': [{ type: _angular_core.Input },],\r\n        'dataInvalidMessageImageScale': [{ type: _angular_core.Input },],\r\n        'dataEmptyMessageImageHAlign': [{ type: _angular_core.Input },],\r\n        'dataEmptyMessageImageVAlign': [{ type: _angular_core.Input },],\r\n        'dataEmptyMessageImageAlpha': [{ type: _angular_core.Input },],\r\n        'dataEmptyMessageImageScale': [{ type: _angular_core.Input },],\r\n        'renderErrorMessageImageHAlign': [{ type: _angular_core.Input },],\r\n        'renderErrorMessageImageVAlign': [{ type: _angular_core.Input },],\r\n        'renderErrorMessageImageAlpha': [{ type: _angular_core.Input },],\r\n        'renderErrorMessageImageScale': [{ type: _angular_core.Input },],\r\n        'loadMessageImageHAlign': [{ type: _angular_core.Input },],\r\n        'loadMessageImageVAlign': [{ type: _angular_core.Input },],\r\n        'loadMessageImageAlpha': [{ type: _angular_core.Input },],\r\n        'loadMessageImageScale': [{ type: _angular_core.Input },],\r\n        'chartConfig': [{ type: _angular_core.Input },],\r\n        'beforeLinkedItemOpen': [{ type: _angular_core.Output },],\r\n        'linkedItemOpened': [{ type: _angular_core.Output },],\r\n        'beforeLinkedItemClose': [{ type: _angular_core.Output },],\r\n        'linkedItemClosed': [{ type: _angular_core.Output },],\r\n        'printReadyStateChange': [{ type: _angular_core.Output },],\r\n        'dataLoadRequestCompleted': [{ type: _angular_core.Output },],\r\n        'dataLoadError': [{ type: _angular_core.Output },],\r\n        'dataLoadCancelled': [{ type: _angular_core.Output },],\r\n        'dataLoadRequestCancelled': [{ type: _angular_core.Output },],\r\n        'dataUpdated': [{ type: _angular_core.Output },],\r\n        'dataUpdateCancelled': [{ type: _angular_core.Output },],\r\n        'dataLoadRequested': [{ type: _angular_core.Output },],\r\n        'beforeDataUpdate': [{ type: _angular_core.Output },],\r\n        'realTimeUpdateComplete': [{ type: _angular_core.Output },],\r\n        'chartCleared': [{ type: _angular_core.Output },],\r\n        'slicingEnd': [{ type: _angular_core.Output },],\r\n        'slicingStart': [{ type: _angular_core.Output },],\r\n        'entityRollOut': [{ type: _angular_core.Output },],\r\n        'entityRollOver': [{ type: _angular_core.Output },],\r\n        'entityClick': [{ type: _angular_core.Output },],\r\n        'connectorRollOver': [{ type: _angular_core.Output },],\r\n        'connectorRollOut': [{ type: _angular_core.Output },],\r\n        'connectorClick': [{ type: _angular_core.Output },],\r\n        'markerRollOver': [{ type: _angular_core.Output },],\r\n        'markerRollOut': [{ type: _angular_core.Output },],\r\n        'markerClick': [{ type: _angular_core.Output },],\r\n        'pageNavigated': [{ type: _angular_core.Output },],\r\n        'rotationEnd': [{ type: _angular_core.Output },],\r\n        'rotationStart': [{ type: _angular_core.Output },],\r\n        'centerLabelRollover': [{ type: _angular_core.Output },],\r\n        'centerLabelRollout': [{ type: _angular_core.Output },],\r\n        'centerLabelClick': [{ type: _angular_core.Output },],\r\n        'centerLabelChanged': [{ type: _angular_core.Output },],\r\n        'chartClick': [{ type: _angular_core.Output },],\r\n        'chartMouseMove': [{ type: _angular_core.Output },],\r\n        'chartRollOver': [{ type: _angular_core.Output },],\r\n        'chartRollOut': [{ type: _angular_core.Output },],\r\n        'backgroundLoaded': [{ type: _angular_core.Output },],\r\n        'backgroundLoadError': [{ type: _angular_core.Output },],\r\n        'legendItemClicked': [{ type: _angular_core.Output },],\r\n        'legendItemRollover': [{ type: _angular_core.Output },],\r\n        'legendItemRollout': [{ type: _angular_core.Output },],\r\n        'logoRollover': [{ type: _angular_core.Output },],\r\n        'logoRollout': [{ type: _angular_core.Output },],\r\n        'logoClick': [{ type: _angular_core.Output },],\r\n        'logoLoaded': [{ type: _angular_core.Output },],\r\n        'logoLoadError': [{ type: _angular_core.Output },],\r\n        'beforeExport': [{ type: _angular_core.Output },],\r\n        'exported': [{ type: _angular_core.Output },],\r\n        'exportCancelled': [{ type: _angular_core.Output },],\r\n        'beforePrint': [{ type: _angular_core.Output },],\r\n        'printComplete': [{ type: _angular_core.Output },],\r\n        'printCancelled': [{ type: _angular_core.Output },],\r\n        'dataLabelClick': [{ type: _angular_core.Output },],\r\n        'dataLabelRollOver': [{ type: _angular_core.Output },],\r\n        'dataLabelRollOut': [{ type: _angular_core.Output },],\r\n        'scrollStart': [{ type: _angular_core.Output },],\r\n        'scrollEnd': [{ type: _angular_core.Output },],\r\n        'onScroll': [{ type: _angular_core.Output },],\r\n        'zoomReset': [{ type: _angular_core.Output },],\r\n        'zoomedOut': [{ type: _angular_core.Output },],\r\n        'zoomedIn': [{ type: _angular_core.Output },],\r\n        'zoomed': [{ type: _angular_core.Output },],\r\n        'zoomModeChanged': [{ type: _angular_core.Output },],\r\n        'pinned': [{ type: _angular_core.Output },],\r\n        'dataRestored': [{ type: _angular_core.Output },],\r\n        'beforeDataSubmit': [{ type: _angular_core.Output },],\r\n        'dataSubmitError': [{ type: _angular_core.Output },],\r\n        'dataSubmitted': [{ type: _angular_core.Output },],\r\n        'dataSubmitCancelled': [{ type: _angular_core.Output },],\r\n        'chartUpdated': [{ type: _angular_core.Output },],\r\n        'nodeAdded': [{ type: _angular_core.Output },],\r\n        'nodeUpdated': [{ type: _angular_core.Output },],\r\n        'nodeDeleted': [{ type: _angular_core.Output },],\r\n        'connectorAdded': [{ type: _angular_core.Output },],\r\n        'connectorUpdated': [{ type: _angular_core.Output },],\r\n        'connectorDeleted': [{ type: _angular_core.Output },],\r\n        'labelAdded': [{ type: _angular_core.Output },],\r\n        'labelDeleted': [{ type: _angular_core.Output },],\r\n        'selectionRemoved': [{ type: _angular_core.Output },],\r\n        'selectionStart': [{ type: _angular_core.Output },],\r\n        'selectionEnd': [{ type: _angular_core.Output },],\r\n        'labelClick': [{ type: _angular_core.Output },],\r\n        'labelRollOver': [{ type: _angular_core.Output },],\r\n        'labelRollOut': [{ type: _angular_core.Output },],\r\n        'labelDragStart': [{ type: _angular_core.Output },],\r\n        'labelDragEnd': [{ type: _angular_core.Output },],\r\n        'dataplotDragStart': [{ type: _angular_core.Output },],\r\n        'dataplotDragEnd': [{ type: _angular_core.Output },],\r\n        'processClick': [{ type: _angular_core.Output },],\r\n        'processRollOver': [{ type: _angular_core.Output },],\r\n        'processRollOut': [{ type: _angular_core.Output },],\r\n        'categoryClick': [{ type: _angular_core.Output },],\r\n        'categoryRollOver': [{ type: _angular_core.Output },],\r\n        'categoryRollOut': [{ type: _angular_core.Output },],\r\n        'milestoneClick': [{ type: _angular_core.Output },],\r\n        'milestoneRollOver': [{ type: _angular_core.Output },],\r\n        'milestoneRollOut': [{ type: _angular_core.Output },],\r\n        'chartTypeChanged': [{ type: _angular_core.Output },],\r\n        'overlayButtonClick': [{ type: _angular_core.Output },],\r\n        'loaded': [{ type: _angular_core.Output },],\r\n        'rendered': [{ type: _angular_core.Output },],\r\n        'drawComplete': [{ type: _angular_core.Output },],\r\n        'renderComplete': [{ type: _angular_core.Output },],\r\n        'dataInvalid': [{ type: _angular_core.Output },],\r\n        'dataXMLInvalid': [{ type: _angular_core.Output },],\r\n        'dataLoaded': [{ type: _angular_core.Output },],\r\n        'noDataToDisplay': [{ type: _angular_core.Output },],\r\n        'legendPointerDragStart': [{ type: _angular_core.Output },],\r\n        'legendPointerDragStop': [{ type: _angular_core.Output },],\r\n        'legendRangeUpdated': [{ type: _angular_core.Output },],\r\n        'alertComplete': [{ type: _angular_core.Output },],\r\n        'realTimeUpdateError': [{ type: _angular_core.Output },],\r\n        'dataplotRollOver': [{ type: _angular_core.Output },],\r\n        'dataplotRollOut': [{ type: _angular_core.Output },],\r\n        'dataplotClick': [{ type: _angular_core.Output },],\r\n        'linkClicked': [{ type: _angular_core.Output },],\r\n        'beforeRender': [{ type: _angular_core.Output },],\r\n        'renderCancelled': [{ type: _angular_core.Output },],\r\n        'beforeResize': [{ type: _angular_core.Output },],\r\n        'resized': [{ type: _angular_core.Output },],\r\n        'resizeCancelled': [{ type: _angular_core.Output },],\r\n        'beforeDispose': [{ type: _angular_core.Output },],\r\n        'disposed': [{ type: _angular_core.Output },],\r\n        'disposeCancelled': [{ type: _angular_core.Output },],\r\n        'linkedChartInvoked': [{ type: _angular_core.Output },],\r\n        'beforeDrillDown': [{ type: _angular_core.Output },],\r\n        'drillDown': [{ type: _angular_core.Output },],\r\n        'beforeDrillUp': [{ type: _angular_core.Output },],\r\n        'drillUp': [{ type: _angular_core.Output },],\r\n        'drillDownCancelled': [{ type: _angular_core.Output },],\r\n        'drillUpCancelled': [{ type: _angular_core.Output },],\r\n        'initialized': [{ type: _angular_core.Output },],\r\n    };\r\n    return FusionChartsComponent;\r\n}());\r\n\r\nvar FusionChartsDirective = /** @class */ (function () {\r\n    function FusionChartsDirective(el) {\r\n        this.el = el;\r\n    }\r\n    FusionChartsDirective.decorators = [\r\n        { type: _angular_core.Directive, args: [{\r\n                    selector: '[appFusionchartsDirective]'\r\n                },] },\r\n    ];\r\n    /** @nocollapse */\r\n    FusionChartsDirective.ctorParameters = function () { return [\r\n        { type: _angular_core.ElementRef, },\r\n    ]; };\r\n    return FusionChartsDirective;\r\n}());\r\n\r\n/**\r\n * Transforms any input value\r\n */\r\nvar FusionChartsPipe = /** @class */ (function () {\r\n    function FusionChartsPipe() {\r\n    }\r\n    FusionChartsPipe.prototype.transform = function (value, args) {\r\n        return value;\r\n    };\r\n    FusionChartsPipe.decorators = [\r\n        { type: _angular_core.Pipe, args: [{\r\n                    name: 'fusionchartsPipe'\r\n                },] },\r\n        { type: _angular_core.Injectable },\r\n    ];\r\n    /** @nocollapse */\r\n    FusionChartsPipe.ctorParameters = function () { return []; };\r\n    return FusionChartsPipe;\r\n}());\r\n\r\nvar FusionChartsModule = /** @class */ (function () {\r\n    function FusionChartsModule() {\r\n    }\r\n    // Keep this for backward compatible\r\n    FusionChartsModule.forRoot = function (fcCore) {\r\n        var fcModules = [];\r\n        for (var _i = 1; _i < arguments.length; _i++) {\r\n            fcModules[_i - 1] = arguments[_i];\r\n        }\r\n        return {\r\n            ngModule: FusionChartsModule,\r\n            providers: [{\r\n                    provide: FusionChartsStatic,\r\n                    useValue: {\r\n                        core: fcCore,\r\n                        modules: fcModules\r\n                    }\r\n                }]\r\n        };\r\n    };\r\n    FusionChartsModule.fcRoot = function (fcCore) {\r\n        var fcModules = [];\r\n        for (var _i = 1; _i < arguments.length; _i++) {\r\n            fcModules[_i - 1] = arguments[_i];\r\n        }\r\n        FusionChartsService.setFCRoot({\r\n            core: fcCore,\r\n            modules: fcModules\r\n        });\r\n    };\r\n    FusionChartsModule.decorators = [\r\n        { type: _angular_core.NgModule, args: [{\r\n                    declarations: [\r\n                        FusionChartsComponent,\r\n                        FusionChartsDirective,\r\n                        FusionChartsPipe\r\n                    ],\r\n                    exports: [\r\n                        FusionChartsComponent,\r\n                        FusionChartsDirective,\r\n                        FusionChartsPipe\r\n                    ],\r\n                    providers: [\r\n                        FusionChartsService,\r\n                        FusionChartsStatic\r\n                    ]\r\n                },] },\r\n    ];\r\n    /** @nocollapse */\r\n    FusionChartsModule.ctorParameters = function () { return []; };\r\n    return FusionChartsModule;\r\n}());\r\n\r\nexports.FusionChartsComponent = FusionChartsComponent;\r\nexports.FusionChartsDirective = FusionChartsDirective;\r\nexports.FusionChartsPipe = FusionChartsPipe;\r\nexports.FusionChartsStatic = FusionChartsStatic;\r\nexports.FusionChartsModule = FusionChartsModule;\r\n\r\nObject.defineProperty(exports, '__esModule', { value: true });\r\n\r\n})));\r\n"],"names":[],"mappings":"AAAA;kIACyG;;6GAEX;+CACtD;;AAAI;;;;KAIvC,AAGC;;;;;;0CAE6D;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;sCAqD7B,AAGhC;;;;;;;;wyfH,AAOA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;cAwMA;;;;;;;KAOD,AAKC;;;;;;;;;;;kFAIG;;;;;;;;;;;;MAYH,AAMA;;;;;;;;;;;;;;;;;;;;uDAE2D;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;MAiC3D,AAkBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;SAE6D;;;;;;;;;;;;;"}