{"version":3,"sources":["v:/jad-admin-go/mazat_admin_panel/node_modules/angular-fusioncharts/src/fusioncharts.component.js"],"names":[],"mappings":"AAAA;;;;;;;AAIA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;MAycAwMA","file":"fusioncharts.component.js","sourcesContent":["import { Component, Input, ElementRef, KeyValueDiffers, NgZone, Output, EventEmitter } from '@angular/core';\r\nimport { FusionChartsService } from './fusioncharts.service';\r\nimport { FusionChartsConstructor } from './fusioncharts.constructor';\r\nimport EventsList from '../events/events';\r\nvar FusionChartsComponent = /** @class */ (function () {\r\n    function FusionChartsComponent(element, fusionchartsService, differs, zone) {\r\n        this.differs = differs;\r\n        this.zone = zone;\r\n        /**\r\n         * All Events List\r\n         */\r\n        this.eventList = EventsList;\r\n        /**\r\n         * All events emitter\r\n         */\r\n        this.beforeLinkedItemOpen = new EventEmitter();\r\n        this.linkedItemOpened = new EventEmitter();\r\n        this.beforeLinkedItemClose = new EventEmitter();\r\n        this.linkedItemClosed = new EventEmitter();\r\n        this.printReadyStateChange = new EventEmitter();\r\n        this.dataLoadRequestCompleted = new EventEmitter();\r\n        this.dataLoadError = new EventEmitter();\r\n        this.dataLoadCancelled = new EventEmitter();\r\n        this.dataLoadRequestCancelled = new EventEmitter();\r\n        this.dataUpdated = new EventEmitter();\r\n        this.dataUpdateCancelled = new EventEmitter();\r\n        this.dataLoadRequested = new EventEmitter();\r\n        this.beforeDataUpdate = new EventEmitter();\r\n        this.realTimeUpdateComplete = new EventEmitter();\r\n        this.chartCleared = new EventEmitter();\r\n        this.slicingEnd = new EventEmitter();\r\n        this.slicingStart = new EventEmitter();\r\n        this.entityRollOut = new EventEmitter();\r\n        this.entityRollOver = new EventEmitter();\r\n        this.entityClick = new EventEmitter();\r\n        this.connectorRollOver = new EventEmitter();\r\n        this.connectorRollOut = new EventEmitter();\r\n        this.connectorClick = new EventEmitter();\r\n        this.markerRollOver = new EventEmitter();\r\n        this.markerRollOut = new EventEmitter();\r\n        this.markerClick = new EventEmitter();\r\n        this.pageNavigated = new EventEmitter();\r\n        this.rotationEnd = new EventEmitter();\r\n        this.rotationStart = new EventEmitter();\r\n        this.centerLabelRollover = new EventEmitter();\r\n        this.centerLabelRollout = new EventEmitter();\r\n        this.centerLabelClick = new EventEmitter();\r\n        this.centerLabelChanged = new EventEmitter();\r\n        this.chartClick = new EventEmitter();\r\n        this.chartMouseMove = new EventEmitter();\r\n        this.chartRollOver = new EventEmitter();\r\n        this.chartRollOut = new EventEmitter();\r\n        this.backgroundLoaded = new EventEmitter();\r\n        this.backgroundLoadError = new EventEmitter();\r\n        this.legendItemClicked = new EventEmitter();\r\n        this.legendItemRollover = new EventEmitter();\r\n        this.legendItemRollout = new EventEmitter();\r\n        this.logoRollover = new EventEmitter();\r\n        this.logoRollout = new EventEmitter();\r\n        this.logoClick = new EventEmitter();\r\n        this.logoLoaded = new EventEmitter();\r\n        this.logoLoadError = new EventEmitter();\r\n        this.beforeExport = new EventEmitter();\r\n        this.exported = new EventEmitter();\r\n        this.exportCancelled = new EventEmitter();\r\n        this.beforePrint = new EventEmitter();\r\n        this.printComplete = new EventEmitter();\r\n        this.printCancelled = new EventEmitter();\r\n        this.dataLabelClick = new EventEmitter();\r\n        this.dataLabelRollOver = new EventEmitter();\r\n        this.dataLabelRollOut = new EventEmitter();\r\n        this.scrollStart = new EventEmitter();\r\n        this.scrollEnd = new EventEmitter();\r\n        this.onScroll = new EventEmitter();\r\n        this.zoomReset = new EventEmitter();\r\n        this.zoomedOut = new EventEmitter();\r\n        this.zoomedIn = new EventEmitter();\r\n        this.zoomed = new EventEmitter();\r\n        this.zoomModeChanged = new EventEmitter();\r\n        this.pinned = new EventEmitter();\r\n        this.dataRestored = new EventEmitter();\r\n        this.beforeDataSubmit = new EventEmitter();\r\n        this.dataSubmitError = new EventEmitter();\r\n        this.dataSubmitted = new EventEmitter();\r\n        this.dataSubmitCancelled = new EventEmitter();\r\n        this.chartUpdated = new EventEmitter();\r\n        this.nodeAdded = new EventEmitter();\r\n        this.nodeUpdated = new EventEmitter();\r\n        this.nodeDeleted = new EventEmitter();\r\n        this.connectorAdded = new EventEmitter();\r\n        this.connectorUpdated = new EventEmitter();\r\n        this.connectorDeleted = new EventEmitter();\r\n        this.labelAdded = new EventEmitter();\r\n        this.labelDeleted = new EventEmitter();\r\n        this.selectionRemoved = new EventEmitter();\r\n        this.selectionStart = new EventEmitter();\r\n        this.selectionEnd = new EventEmitter();\r\n        this.labelClick = new EventEmitter();\r\n        this.labelRollOver = new EventEmitter();\r\n        this.labelRollOut = new EventEmitter();\r\n        this.labelDragStart = new EventEmitter();\r\n        this.labelDragEnd = new EventEmitter();\r\n        this.dataplotDragStart = new EventEmitter();\r\n        this.dataplotDragEnd = new EventEmitter();\r\n        this.processClick = new EventEmitter();\r\n        this.processRollOver = new EventEmitter();\r\n        this.processRollOut = new EventEmitter();\r\n        this.categoryClick = new EventEmitter();\r\n        this.categoryRollOver = new EventEmitter();\r\n        this.categoryRollOut = new EventEmitter();\r\n        this.milestoneClick = new EventEmitter();\r\n        this.milestoneRollOver = new EventEmitter();\r\n        this.milestoneRollOut = new EventEmitter();\r\n        this.chartTypeChanged = new EventEmitter();\r\n        this.overlayButtonClick = new EventEmitter();\r\n        this.loaded = new EventEmitter();\r\n        this.rendered = new EventEmitter();\r\n        this.drawComplete = new EventEmitter();\r\n        this.renderComplete = new EventEmitter();\r\n        this.dataInvalid = new EventEmitter();\r\n        this.dataXMLInvalid = new EventEmitter();\r\n        this.dataLoaded = new EventEmitter();\r\n        this.noDataToDisplay = new EventEmitter();\r\n        this.legendPointerDragStart = new EventEmitter();\r\n        this.legendPointerDragStop = new EventEmitter();\r\n        this.legendRangeUpdated = new EventEmitter();\r\n        this.alertComplete = new EventEmitter();\r\n        this.realTimeUpdateError = new EventEmitter();\r\n        this.dataplotRollOver = new EventEmitter();\r\n        this.dataplotRollOut = new EventEmitter();\r\n        this.dataplotClick = new EventEmitter();\r\n        this.linkClicked = new EventEmitter();\r\n        this.beforeRender = new EventEmitter();\r\n        this.renderCancelled = new EventEmitter();\r\n        this.beforeResize = new EventEmitter();\r\n        this.resized = new EventEmitter();\r\n        this.resizeCancelled = new EventEmitter();\r\n        this.beforeDispose = new EventEmitter();\r\n        this.disposed = new EventEmitter();\r\n        this.disposeCancelled = new EventEmitter();\r\n        this.linkedChartInvoked = new EventEmitter();\r\n        this.beforeDrillDown = new EventEmitter();\r\n        this.drillDown = new EventEmitter();\r\n        this.beforeDrillUp = new EventEmitter();\r\n        this.drillUp = new EventEmitter();\r\n        this.drillDownCancelled = new EventEmitter();\r\n        this.drillUpCancelled = new EventEmitter();\r\n        this.initialized = new EventEmitter();\r\n        this.oldDataSource = this.dataSource;\r\n        this.constructerParams = {\r\n            type: true,\r\n            id: true,\r\n            width: true,\r\n            height: true,\r\n            renderAt: true,\r\n            dataFormat: true,\r\n            dataSource: true,\r\n            events: true,\r\n            link: true,\r\n            showDataLoadingMessage: true,\r\n            showChartLoadingMessage: true,\r\n            baseChartMessageFont: true,\r\n            baseChartMessageFontSize: true,\r\n            baseChartMessageColor: true,\r\n            dataLoadStartMessage: true,\r\n            dataLoadErrorMessage: true,\r\n            dataInvalidMessage: true,\r\n            dataEmptyMessage: true,\r\n            typeNotSupportedMessage: true,\r\n            loadMessage: true,\r\n            renderErrorMessage: true,\r\n            containerBackgroundColor: true,\r\n            containerBackgroundOpacity: true,\r\n            containerClassName: true,\r\n            baseChartMessageImageHAlign: true,\r\n            baseChartMessageImageVAlign: true,\r\n            baseChartMessageImageAlpha: true,\r\n            baseChartMessageImageScale: true,\r\n            typeNotSupportedMessageImageHAlign: true,\r\n            typeNotSupportedMessageImageVAlign: true,\r\n            typeNotSupportedMessageImageAlpha: true,\r\n            typeNotSupportedMessageImageScale: true,\r\n            dataLoadErrorMessageImageHAlign: true,\r\n            dataLoadErrorMessageImageVAlign: true,\r\n            dataLoadErrorMessageImageAlpha: true,\r\n            dataLoadErrorMessageImageScale: true,\r\n            dataLoadStartMessageImageHAlign: true,\r\n            dataLoadStartMessageImageVAlign: true,\r\n            dataLoadStartMessageImageAlpha: true,\r\n            dataLoadStartMessageImageScale: true,\r\n            dataInvalidMessageImageHAlign: true,\r\n            dataInvalidMessageImageVAlign: true,\r\n            dataInvalidMessageImageAlpha: true,\r\n            dataInvalidMessageImageScale: true,\r\n            dataEmptyMessageImageHAlign: true,\r\n            dataEmptyMessageImageVAlign: true,\r\n            dataEmptyMessageImageAlpha: true,\r\n            dataEmptyMessageImageScale: true,\r\n            renderErrorMessageImageHAlign: true,\r\n            renderErrorMessageImageVAlign: true,\r\n            renderErrorMessageImageAlpha: true,\r\n            renderErrorMessageImageScale: true,\r\n            loadMessageImageHAlign: true,\r\n            loadMessageImageVAlign: true,\r\n            loadMessageImageAlpha: true,\r\n            loadMessageImageScale: true,\r\n            chartConfig: true\r\n        };\r\n        this.element = element;\r\n        this.fusionchartsService = fusionchartsService;\r\n        this.containerId = fusionchartsService.getNextItemCount();\r\n    }\r\n    // @ViewChild('samplediv') chartContainer: ElementRef;\r\n    FusionChartsComponent.prototype.checkIfDataTableExists = function (dataSource) {\r\n        if (dataSource && dataSource.data && dataSource.data._dataStore) {\r\n            return true;\r\n        }\r\n        return false;\r\n    };\r\n    FusionChartsComponent.prototype.cloneDataSource = function (obj) {\r\n        var type = typeof obj;\r\n        if (type === 'string' ||\r\n            type === 'number' ||\r\n            type === 'function' ||\r\n            type === 'boolean') {\r\n            return obj;\r\n        }\r\n        if (obj === null || obj === undefined) {\r\n            return obj;\r\n        }\r\n        if (Array.isArray(obj)) {\r\n            var arr = [];\r\n            for (var i = 0; i < obj.length; i++) {\r\n                arr.push(this.cloneDataSource(obj[i]));\r\n            }\r\n            return arr;\r\n        }\r\n        if (typeof obj === 'object') {\r\n            var clonedObj = {};\r\n            for (var prop in obj) {\r\n                // Edge case handling for DataTable\r\n                if (prop === 'data') {\r\n                    if (obj[prop]._dataStore) {\r\n                        clonedObj[prop] = \"-\";\r\n                    }\r\n                    else {\r\n                        clonedObj[prop] = this.cloneDataSource(obj[prop]);\r\n                    }\r\n                    continue;\r\n                }\r\n                clonedObj[prop] = this.cloneDataSource(obj[prop]);\r\n            }\r\n            return clonedObj;\r\n        }\r\n    };\r\n    FusionChartsComponent.prototype.ngOnInit = function () {\r\n        if (this.checkIfDataTableExists(this.dataSource)) {\r\n            this.oldDataSource = JSON.stringify(this.cloneDataSource(this.dataSource));\r\n        }\r\n        else {\r\n            this.oldDataSource = JSON.stringify(this.dataSource);\r\n        }\r\n        this.placeholder = this.placeholder || 'FusionCharts will render here';\r\n    };\r\n    FusionChartsComponent.prototype.ngOnChanges = function (changes) {\r\n        for (var _i = 0, _a = Object.keys(changes); _i < _a.length; _i++) {\r\n            var i = _a[_i];\r\n            var key = i.charAt(0).toUpperCase() + i.slice(1), THIS = this, fnName = \"update\" + key;\r\n            if (THIS[fnName]) {\r\n                THIS[fnName]();\r\n            }\r\n        }\r\n    };\r\n    FusionChartsComponent.prototype.ngDoCheck = function () {\r\n        var data;\r\n        if (this.checkIfDataTableExists(this.dataSource)) {\r\n            data = JSON.stringify(this.cloneDataSource(this.dataSource));\r\n        }\r\n        else {\r\n            data = JSON.stringify(this.dataSource);\r\n        }\r\n        if (this.oldDataSource !== data ||\r\n            this.oldDataTable !== this.dataSource.data) {\r\n            this.oldDataTable = this.dataSource && this.dataSource.data;\r\n            this.oldDataSource = data;\r\n            this.updateChartData();\r\n        }\r\n    };\r\n    FusionChartsComponent.prototype.updateChartData = function () {\r\n        var dataFormat = this.configObj && this.configObj.dataFormat\r\n            ? this.configObj.dataFormat\r\n            : 'json', data = this.dataSource;\r\n        if (this.chartObj) {\r\n            this.chartObj.setChartData(data, dataFormat);\r\n        }\r\n    };\r\n    FusionChartsComponent.prototype.updateWidth = function () {\r\n        if (this.chartObj) {\r\n            this.chartObj.resizeTo({\r\n                w: this.width\r\n            });\r\n        }\r\n    };\r\n    FusionChartsComponent.prototype.updateHeight = function () {\r\n        if (this.chartObj) {\r\n            this.chartObj.resizeTo({\r\n                h: this.height\r\n            });\r\n        }\r\n    };\r\n    FusionChartsComponent.prototype.updateType = function () {\r\n        if (this.chartObj) {\r\n            this.chartObj.chartType(this.type);\r\n        }\r\n    };\r\n    FusionChartsComponent.prototype.generateEventsCallback = function (eventList) {\r\n        var _this_1 = this;\r\n        var events = {};\r\n        eventList.forEach(function (eventName) {\r\n            events[eventName] = function (eventObj, dataObj) {\r\n                var fEventObj = { eventObj: {}, dataObj: {} };\r\n                if (eventObj)\r\n                    fEventObj.eventObj = eventObj;\r\n                if (dataObj)\r\n                    fEventObj.dataObj = dataObj;\r\n                _this_1[eventName].emit(fEventObj);\r\n            };\r\n        });\r\n        return events;\r\n    };\r\n    FusionChartsComponent.prototype.ngAfterViewInit = function () {\r\n        var _this_1 = this;\r\n        var _this = this, params = _this.constructerParams, configObj = _this.configObj || (_this.configObj = {});\r\n        var _chartConfig = _this.chartConfig || {};\r\n        if (typeof _chartConfig === 'string') {\r\n            _chartConfig = JSON.parse(_chartConfig);\r\n        }\r\n        for (var _i = 0, _a = Object.keys(params); _i < _a.length; _i++) {\r\n            var i = _a[_i];\r\n            var value = _this[i] || _chartConfig[i];\r\n            if (value) {\r\n                configObj[i] = value;\r\n            }\r\n        }\r\n        if (configObj['type']) {\r\n            var events = _this.generateEventsCallback(_this.eventList);\r\n            if (!configObj['events']) {\r\n                configObj['events'] = events;\r\n            }\r\n            else {\r\n                configObj['events'] = Object.assign(events, configObj['events']);\r\n            }\r\n            // configObj['renderAt'] = 'container-' + _this.chartObj.id;\r\n            // _this.containerId = _this.chartObj.id;\r\n            this.zone.runOutsideAngular(function () {\r\n                setTimeout(function () {\r\n                    _this.chartObj = FusionChartsConstructor(_this.fusionchartsService, configObj);\r\n                    _this_1.initialized.emit({ chart: _this.chartObj });\r\n                    _this.chartObj.render(_this.element.nativeElement.querySelector('div'));\r\n                }, 1);\r\n            });\r\n        }\r\n    };\r\n    FusionChartsComponent.prototype.ngOnDestroy = function () {\r\n        this.chartObj && this.chartObj.dispose();\r\n    };\r\n    FusionChartsComponent.decorators = [\r\n        { type: Component, args: [{\r\n                    selector: 'fusioncharts',\r\n                    template: \"\\n    <div attr.id=\\\"container-{{ containerId }}\\\" style=\\\"width:100%;height:100%\\\">\\n      {{ placeholder }}\\n    </div>\\n  \",\r\n                    providers: [FusionChartsService]\r\n                },] },\r\n    ];\r\n    /** @nocollapse */\r\n    FusionChartsComponent.ctorParameters = function () { return [\r\n        { type: ElementRef, },\r\n        { type: FusionChartsService, },\r\n        { type: KeyValueDiffers, },\r\n        { type: NgZone, },\r\n    ]; };\r\n    FusionChartsComponent.propDecorators = {\r\n        'placeholder': [{ type: Input },],\r\n        'dataSource': [{ type: Input },],\r\n        'type': [{ type: Input },],\r\n        'id': [{ type: Input },],\r\n        'width': [{ type: Input },],\r\n        'height': [{ type: Input },],\r\n        'renderAt': [{ type: Input },],\r\n        'dataFormat': [{ type: Input },],\r\n        'events': [{ type: Input },],\r\n        'link': [{ type: Input },],\r\n        'showDataLoadingMessage': [{ type: Input },],\r\n        'showChartLoadingMessage': [{ type: Input },],\r\n        'baseChartMessageFont': [{ type: Input },],\r\n        'baseChartMessageFontSize': [{ type: Input },],\r\n        'baseChartMessageColor': [{ type: Input },],\r\n        'dataLoadStartMessage': [{ type: Input },],\r\n        'dataLoadErrorMessage': [{ type: Input },],\r\n        'dataInvalidMessage': [{ type: Input },],\r\n        'dataEmptyMessage': [{ type: Input },],\r\n        'typeNotSupportedMessage': [{ type: Input },],\r\n        'loadMessage': [{ type: Input },],\r\n        'renderErrorMessage': [{ type: Input },],\r\n        'containerBackgroundColor': [{ type: Input },],\r\n        'containerBackgroundOpacity': [{ type: Input },],\r\n        'containerClassName': [{ type: Input },],\r\n        'baseChartMessageImageHAlign': [{ type: Input },],\r\n        'baseChartMessageImageVAlign': [{ type: Input },],\r\n        'baseChartMessageImageAlpha': [{ type: Input },],\r\n        'baseChartMessageImageScale': [{ type: Input },],\r\n        'typeNotSupportedMessageImageHAlign': [{ type: Input },],\r\n        'typeNotSupportedMessageImageVAlign': [{ type: Input },],\r\n        'typeNotSupportedMessageImageAlpha': [{ type: Input },],\r\n        'typeNotSupportedMessageImageScale': [{ type: Input },],\r\n        'dataLoadErrorMessageImageHAlign': [{ type: Input },],\r\n        'dataLoadErrorMessageImageVAlign': [{ type: Input },],\r\n        'dataLoadErrorMessageImageAlpha': [{ type: Input },],\r\n        'dataLoadErrorMessageImageScale': [{ type: Input },],\r\n        'dataLoadStartMessageImageHAlign': [{ type: Input },],\r\n        'dataLoadStartMessageImageVAlign': [{ type: Input },],\r\n        'dataLoadStartMessageImageAlpha': [{ type: Input },],\r\n        'dataLoadStartMessageImageScale': [{ type: Input },],\r\n        'dataInvalidMessageImageHAlign': [{ type: Input },],\r\n        'dataInvalidMessageImageVAlign': [{ type: Input },],\r\n        'dataInvalidMessageImageAlpha': [{ type: Input },],\r\n        'dataInvalidMessageImageScale': [{ type: Input },],\r\n        'dataEmptyMessageImageHAlign': [{ type: Input },],\r\n        'dataEmptyMessageImageVAlign': [{ type: Input },],\r\n        'dataEmptyMessageImageAlpha': [{ type: Input },],\r\n        'dataEmptyMessageImageScale': [{ type: Input },],\r\n        'renderErrorMessageImageHAlign': [{ type: Input },],\r\n        'renderErrorMessageImageVAlign': [{ type: Input },],\r\n        'renderErrorMessageImageAlpha': [{ type: Input },],\r\n        'renderErrorMessageImageScale': [{ type: Input },],\r\n        'loadMessageImageHAlign': [{ type: Input },],\r\n        'loadMessageImageVAlign': [{ type: Input },],\r\n        'loadMessageImageAlpha': [{ type: Input },],\r\n        'loadMessageImageScale': [{ type: Input },],\r\n        'chartConfig': [{ type: Input },],\r\n        'beforeLinkedItemOpen': [{ type: Output },],\r\n        'linkedItemOpened': [{ type: Output },],\r\n        'beforeLinkedItemClose': [{ type: Output },],\r\n        'linkedItemClosed': [{ type: Output },],\r\n        'printReadyStateChange': [{ type: Output },],\r\n        'dataLoadRequestCompleted': [{ type: Output },],\r\n        'dataLoadError': [{ type: Output },],\r\n        'dataLoadCancelled': [{ type: Output },],\r\n        'dataLoadRequestCancelled': [{ type: Output },],\r\n        'dataUpdated': [{ type: Output },],\r\n        'dataUpdateCancelled': [{ type: Output },],\r\n        'dataLoadRequested': [{ type: Output },],\r\n        'beforeDataUpdate': [{ type: Output },],\r\n        'realTimeUpdateComplete': [{ type: Output },],\r\n        'chartCleared': [{ type: Output },],\r\n        'slicingEnd': [{ type: Output },],\r\n        'slicingStart': [{ type: Output },],\r\n        'entityRollOut': [{ type: Output },],\r\n        'entityRollOver': [{ type: Output },],\r\n        'entityClick': [{ type: Output },],\r\n        'connectorRollOver': [{ type: Output },],\r\n        'connectorRollOut': [{ type: Output },],\r\n        'connectorClick': [{ type: Output },],\r\n        'markerRollOver': [{ type: Output },],\r\n        'markerRollOut': [{ type: Output },],\r\n        'markerClick': [{ type: Output },],\r\n        'pageNavigated': [{ type: Output },],\r\n        'rotationEnd': [{ type: Output },],\r\n        'rotationStart': [{ type: Output },],\r\n        'centerLabelRollover': [{ type: Output },],\r\n        'centerLabelRollout': [{ type: Output },],\r\n        'centerLabelClick': [{ type: Output },],\r\n        'centerLabelChanged': [{ type: Output },],\r\n        'chartClick': [{ type: Output },],\r\n        'chartMouseMove': [{ type: Output },],\r\n        'chartRollOver': [{ type: Output },],\r\n        'chartRollOut': [{ type: Output },],\r\n        'backgroundLoaded': [{ type: Output },],\r\n        'backgroundLoadError': [{ type: Output },],\r\n        'legendItemClicked': [{ type: Output },],\r\n        'legendItemRollover': [{ type: Output },],\r\n        'legendItemRollout': [{ type: Output },],\r\n        'logoRollover': [{ type: Output },],\r\n        'logoRollout': [{ type: Output },],\r\n        'logoClick': [{ type: Output },],\r\n        'logoLoaded': [{ type: Output },],\r\n        'logoLoadError': [{ type: Output },],\r\n        'beforeExport': [{ type: Output },],\r\n        'exported': [{ type: Output },],\r\n        'exportCancelled': [{ type: Output },],\r\n        'beforePrint': [{ type: Output },],\r\n        'printComplete': [{ type: Output },],\r\n        'printCancelled': [{ type: Output },],\r\n        'dataLabelClick': [{ type: Output },],\r\n        'dataLabelRollOver': [{ type: Output },],\r\n        'dataLabelRollOut': [{ type: Output },],\r\n        'scrollStart': [{ type: Output },],\r\n        'scrollEnd': [{ type: Output },],\r\n        'onScroll': [{ type: Output },],\r\n        'zoomReset': [{ type: Output },],\r\n        'zoomedOut': [{ type: Output },],\r\n        'zoomedIn': [{ type: Output },],\r\n        'zoomed': [{ type: Output },],\r\n        'zoomModeChanged': [{ type: Output },],\r\n        'pinned': [{ type: Output },],\r\n        'dataRestored': [{ type: Output },],\r\n        'beforeDataSubmit': [{ type: Output },],\r\n        'dataSubmitError': [{ type: Output },],\r\n        'dataSubmitted': [{ type: Output },],\r\n        'dataSubmitCancelled': [{ type: Output },],\r\n        'chartUpdated': [{ type: Output },],\r\n        'nodeAdded': [{ type: Output },],\r\n        'nodeUpdated': [{ type: Output },],\r\n        'nodeDeleted': [{ type: Output },],\r\n        'connectorAdded': [{ type: Output },],\r\n        'connectorUpdated': [{ type: Output },],\r\n        'connectorDeleted': [{ type: Output },],\r\n        'labelAdded': [{ type: Output },],\r\n        'labelDeleted': [{ type: Output },],\r\n        'selectionRemoved': [{ type: Output },],\r\n        'selectionStart': [{ type: Output },],\r\n        'selectionEnd': [{ type: Output },],\r\n        'labelClick': [{ type: Output },],\r\n        'labelRollOver': [{ type: Output },],\r\n        'labelRollOut': [{ type: Output },],\r\n        'labelDragStart': [{ type: Output },],\r\n        'labelDragEnd': [{ type: Output },],\r\n        'dataplotDragStart': [{ type: Output },],\r\n        'dataplotDragEnd': [{ type: Output },],\r\n        'processClick': [{ type: Output },],\r\n        'processRollOver': [{ type: Output },],\r\n        'processRollOut': [{ type: Output },],\r\n        'categoryClick': [{ type: Output },],\r\n        'categoryRollOver': [{ type: Output },],\r\n        'categoryRollOut': [{ type: Output },],\r\n        'milestoneClick': [{ type: Output },],\r\n        'milestoneRollOver': [{ type: Output },],\r\n        'milestoneRollOut': [{ type: Output },],\r\n        'chartTypeChanged': [{ type: Output },],\r\n        'overlayButtonClick': [{ type: Output },],\r\n        'loaded': [{ type: Output },],\r\n        'rendered': [{ type: Output },],\r\n        'drawComplete': [{ type: Output },],\r\n        'renderComplete': [{ type: Output },],\r\n        'dataInvalid': [{ type: Output },],\r\n        'dataXMLInvalid': [{ type: Output },],\r\n        'dataLoaded': [{ type: Output },],\r\n        'noDataToDisplay': [{ type: Output },],\r\n        'legendPointerDragStart': [{ type: Output },],\r\n        'legendPointerDragStop': [{ type: Output },],\r\n        'legendRangeUpdated': [{ type: Output },],\r\n        'alertComplete': [{ type: Output },],\r\n        'realTimeUpdateError': [{ type: Output },],\r\n        'dataplotRollOver': [{ type: Output },],\r\n        'dataplotRollOut': [{ type: Output },],\r\n        'dataplotClick': [{ type: Output },],\r\n        'linkClicked': [{ type: Output },],\r\n        'beforeRender': [{ type: Output },],\r\n        'renderCancelled': [{ type: Output },],\r\n        'beforeResize': [{ type: Output },],\r\n        'resized': [{ type: Output },],\r\n        'resizeCancelled': [{ type: Output },],\r\n        'beforeDispose': [{ type: Output },],\r\n        'disposed': [{ type: Output },],\r\n        'disposeCancelled': [{ type: Output },],\r\n        'linkedChartInvoked': [{ type: Output },],\r\n        'beforeDrillDown': [{ type: Output },],\r\n        'drillDown': [{ type: Output },],\r\n        'beforeDrillUp': [{ type: Output },],\r\n        'drillUp': [{ type: Output },],\r\n        'drillDownCancelled': [{ type: Output },],\r\n        'drillUpCancelled': [{ type: Output },],\r\n        'initialized': [{ type: Output },],\r\n    };\r\n    return FusionChartsComponent;\r\n}());\r\nexport { FusionChartsComponent };\r\n"]}