{"version":3,"sources":["v:/jad-admin-go/mazat_admin_panel/node_modules/angular-star-rating/esm2015/angular-star-rating.js"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAQA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CA+2BC,gTAsDC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CA8MD,6gBAyDC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CAoCD,gLAOC","file":"angular-star-rating.js","sourcesContent":["import { Component, EventEmitter, forwardRef, NgModule } from '@angular/core';\r\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\r\nimport { CommonModule } from '@angular/common';\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\nclass StarRatingConfig {\r\n}\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\nclass StarRatingUtils {\r\n    /**\r\n     * @param {?} numOfStars\r\n     * @return {?}\r\n     */\r\n    static getStarsArray(numOfStars) {\r\n        let /** @type {?} */ stars = [];\r\n        for (let /** @type {?} */ i = 0; i < numOfStars; i++) {\r\n            stars.push(i + 1);\r\n        }\r\n        return stars;\r\n    }\r\n    /**\r\n     * @param {?} rating\r\n     * @return {?}\r\n     */\r\n    static getHalfStarVisible(rating) {\r\n        return Math.abs(rating % 1) > 0;\r\n    }\r\n    /**\r\n     * @param {?} rating\r\n     * @param {?} numOfStars\r\n     * @param {?=} staticColor\r\n     * @return {?}\r\n     */\r\n    static getColor(rating, numOfStars, staticColor) {\r\n        rating = rating || 0;\r\n        //if a fix color is set use this one\r\n        if (staticColor) {\r\n            return staticColor;\r\n        }\r\n        //calculate size of smallest fraction\r\n        let /** @type {?} */ fractionSize = numOfStars / 3;\r\n        //apply color by fraction\r\n        let /** @type {?} */ color = 'default';\r\n        if (rating > 0) {\r\n            color = 'negative';\r\n        }\r\n        if (rating > fractionSize) {\r\n            color = 'ok';\r\n        }\r\n        if (rating > fractionSize * 2) {\r\n            color = 'positive';\r\n        }\r\n        return color;\r\n    }\r\n    /**\r\n     * @param {?} eventCode\r\n     * @return {?}\r\n     */\r\n    static isDigitKeyEventCode(eventCode) {\r\n        return eventCode.indexOf('Digit') === 0;\r\n    }\r\n}\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\nclass StarRating {\r\n    /**\r\n     * @param {?} value\r\n     * @return {?}\r\n     */\r\n    set rating(value) {\r\n        this.setRating(value);\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    get showHalfStars() {\r\n        return this._showHalfStars;\r\n    }\r\n    /**\r\n     * @param {?} value\r\n     * @return {?}\r\n     */\r\n    set showHalfStars(value) {\r\n        this._showHalfStars = !!value;\r\n        //update halfStarVisible\r\n        this.setHalfStarVisible();\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    get id() {\r\n        return this._id;\r\n    }\r\n    /**\r\n     * @param {?} value\r\n     * @return {?}\r\n     */\r\n    set id(value) {\r\n        this._id = value || '';\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    get focus() {\r\n        return this._focus;\r\n    }\r\n    /**\r\n     * @param {?} value\r\n     * @return {?}\r\n     */\r\n    set focus(value) {\r\n        this._focus = !!value;\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    get labelText() {\r\n        return this._labelText;\r\n    }\r\n    /**\r\n     * @param {?} value\r\n     * @return {?}\r\n     */\r\n    set labelText(value) {\r\n        this._labelText = value;\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    get labelPosition() {\r\n        return this._labelPosition;\r\n    }\r\n    /**\r\n     * @param {?} value\r\n     * @return {?}\r\n     */\r\n    set labelPosition(value) {\r\n        this._labelPosition = value || this.config.labelPosition;\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    get labelVisible() {\r\n        return this._labelVisible;\r\n    }\r\n    /**\r\n     * @param {?} value\r\n     * @return {?}\r\n     */\r\n    set labelVisible(value) {\r\n        this._labelVisible = !!value;\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    get hoverEnabled() {\r\n        return this._hoverEnabled;\r\n    }\r\n    /**\r\n     * @param {?} value\r\n     * @return {?}\r\n     */\r\n    set hoverEnabled(value) {\r\n        this._hoverEnabled = value !== undefined ? !!value : false;\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    get staticColor() {\r\n        return this._staticColor || this.config.staticColor || undefined;\r\n    }\r\n    /**\r\n     * @param {?} value\r\n     * @return {?}\r\n     */\r\n    set staticColor(value) {\r\n        this._staticColor = value;\r\n        //update color.\r\n        this.setColor();\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    get direction() {\r\n        return this._direction;\r\n    }\r\n    /**\r\n     * @param {?} value\r\n     * @return {?}\r\n     */\r\n    set direction(value) {\r\n        this._direction = value || undefined;\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    get numOfStars() {\r\n        return this._numOfStars;\r\n    }\r\n    /**\r\n     * @param {?} value\r\n     * @return {?}\r\n     */\r\n    set numOfStars(value) {\r\n        this._numOfStars = value > 0 ? value : this.config.numOfStars;\r\n        //update stars array\r\n        this.stars = StarRatingUtils.getStarsArray(this.numOfStars);\r\n        //update color\r\n        this.setColor();\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    get hoverRating() {\r\n        return this._hoverRating;\r\n    }\r\n    /**\r\n     * @param {?} value\r\n     * @return {?}\r\n     */\r\n    set hoverRating(value) {\r\n        this._hoverRating = value > 0 ? value : 0;\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    get speed() {\r\n        return this._speed;\r\n    }\r\n    /**\r\n     * @param {?} value\r\n     * @return {?}\r\n     */\r\n    set speed(value) {\r\n        this._speed = value || this.config.speed;\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    get size() {\r\n        return this._size || this.config.size;\r\n    }\r\n    /**\r\n     * @param {?} value\r\n     * @return {?}\r\n     */\r\n    set size(value) {\r\n        this._size = value;\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    get starType() {\r\n        return this._starType || this.config.starType;\r\n    }\r\n    /**\r\n     * @param {?} value\r\n     * @return {?}\r\n     */\r\n    set starType(value) {\r\n        this._starType = value;\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    get space() {\r\n        return this._space;\r\n    }\r\n    /**\r\n     * @param {?} value\r\n     * @return {?}\r\n     */\r\n    set space(value) {\r\n        this._space = value;\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    get readOnly() {\r\n        return this._readOnly;\r\n    }\r\n    /**\r\n     * @param {?} value\r\n     * @return {?}\r\n     */\r\n    set readOnly(value) {\r\n        this._readOnly = !!value;\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    get disabled() {\r\n        return this._disabled;\r\n    }\r\n    /**\r\n     * @param {?} value\r\n     * @return {?}\r\n     */\r\n    set disabled(value) {\r\n        this._disabled = !!value;\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    get step() {\r\n        return this._step;\r\n    }\r\n    /**\r\n     * @param {?} value\r\n     * @return {?}\r\n     */\r\n    set step(value) {\r\n        this._step = value > 0 ? value : 1;\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    get rating() {\r\n        return this._rating;\r\n    }\r\n    /**\r\n     * setRating\r\n     * I use a setter function instead of a set method to enable overrides for this function.\r\n     * @param {?} value\r\n     * @return {?}\r\n     */\r\n    setRating(value) {\r\n        //validate and apply newRating\r\n        let /** @type {?} */ newRating = 0;\r\n        if (value >= 0 && value <= this.numOfStars) {\r\n            newRating = value;\r\n        }\r\n        //limit max value to max number of stars\r\n        if (value > this.numOfStars) {\r\n            newRating = this.numOfStars;\r\n        }\r\n        this._rating = newRating;\r\n        //update ratingAsInteger. rating parsed to int for the value-[n] modifier\r\n        this.ratingAsInteger = parseInt(this._rating.toString(), 10);\r\n        //update halfStarsVisible\r\n        this.setHalfStarVisible();\r\n        //update calculated Color\r\n        this.setColor();\r\n    }\r\n    /**\r\n     * @param {?} config\r\n     */\r\n    constructor(config) {\r\n        this.config = config;\r\n        //set default ctrl props\r\n        this.classEmpty = this.config.classEmpty;\r\n        this.classHalf = this.config.classHalf;\r\n        this.classFilled = this.config.classFilled;\r\n        this.pathEmpty = this.config.svgPathEmpty;\r\n        this.pathHalf = this.config.svgPathHalf;\r\n        this.pathFilled = this.config.svgPathFilled;\r\n        //set default Component Inputs\r\n        if ('getColor' in this.config &&\r\n            typeof this.config.getColor === 'function') {\r\n            this.getColor = this.config.getColor;\r\n        }\r\n        if ('getHalfStarVisible' in this.config &&\r\n            typeof this.config.getHalfStarVisible === 'function') {\r\n            this.getHalfStarVisible = this.config.getHalfStarVisible;\r\n        }\r\n        this.numOfStars = this.config.numOfStars;\r\n        this.rating = 0;\r\n        this.step = 1;\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    svgVisible() {\r\n        return this.starType === 'svg';\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    interactionPossible() {\r\n        return !this.readOnly && !this.disabled;\r\n    }\r\n    /**\r\n     * @param {?=} useHoverValue\r\n     * @return {?}\r\n     */\r\n    setColor(useHoverValue = false) {\r\n        //check if custom function is given\r\n        const /** @type {?} */ ratingValue = useHoverValue ? this.hoverRating : this.rating;\r\n        if (typeof this.getColor === 'function') {\r\n            this.color = this.getColor(ratingValue, this.numOfStars, this.staticColor);\r\n        }\r\n        else {\r\n            this.color = StarRatingUtils.getColor(ratingValue, this.numOfStars, this.staticColor);\r\n        }\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    setHalfStarVisible() {\r\n        //update halfStarVisible\r\n        if (this.showHalfStars) {\r\n            //check if custom function is given\r\n            if (typeof this.getHalfStarVisible === 'function') {\r\n                this.halfStarVisible = this.getHalfStarVisible(this.rating);\r\n            }\r\n            else {\r\n                this.halfStarVisible = StarRatingUtils.getHalfStarVisible(this.rating);\r\n            }\r\n        }\r\n        else {\r\n            this.halfStarVisible = false;\r\n        }\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    getComponentClassNames() {\r\n        const /** @type {?} */ classNames = [];\r\n        classNames.push(this.rating ? 'value-' + this.ratingAsInteger : 'value-0');\r\n        classNames.push(this.halfStarVisible ? 'half' : '');\r\n        classNames.push(this.hoverEnabled ? 'hover' : '');\r\n        const /** @type {?} */ hoverRating = this.hoverRating\r\n            ? 'hover-' + this.hoverRating\r\n            : 'hover-0';\r\n        classNames.push(this.hoverEnabled ? hoverRating : '');\r\n        classNames.push(this.space ? 'space-' + this.space : '');\r\n        classNames.push(this.labelPosition ? 'label-' + this.labelPosition : '');\r\n        classNames.push(this.color ? 'color-' + this.color : '');\r\n        classNames.push(this.starType ? 'star-' + this.starType : '');\r\n        classNames.push(this.speed);\r\n        classNames.push(this.size);\r\n        classNames.push(this.readOnly ? 'read-only' : '');\r\n        classNames.push(this.disabled ? 'disabled' : '');\r\n        classNames.push(this.direction ? 'direction-' + this.direction : '');\r\n        return classNames.join(' ');\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    increment() {\r\n        //increment to next higher step\r\n        const /** @type {?} */ absDiff = Math.abs(this.rating % this.step);\r\n        this.rating = this.rating + (absDiff > 0 ? this.step - absDiff : this.step);\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    decrement() {\r\n        //decrement to next lower step\r\n        const /** @type {?} */ absDiff = Math.abs(this.rating % this.step);\r\n        this.rating = this.rating - (absDiff > 0 ? absDiff : this.step);\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    reset() {\r\n        this.rating = 0;\r\n    }\r\n}\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * Configuration service for the StarRating component.\r\n * You can inject this service, typically in your root component, and customize the values of its properties in\r\n * order to provide default values for all the star ratings used in the application.\r\n */\r\nclass StarRatingConfigService {\r\n    constructor() {\r\n        this._classEmpty = 'default-star-empty-icon';\r\n        this._classHalf = 'default-star-half-icon';\r\n        this._classFilled = 'default-star-filled-icon';\r\n        this._numOfStars = 5;\r\n        this._size = 'medium';\r\n        this._labelPosition = 'left';\r\n        this._speed = 'noticeable';\r\n        this._starType = 'svg';\r\n        this._assetsPath = 'assets/images/';\r\n        this._svgPath = this.assetsPath + 'star-rating.icons.svg';\r\n        this._svgEmptySymbolId = 'star-empty';\r\n        this._svgHalfSymbolId = 'star-half';\r\n        this._svgFilledSymbolId = 'star-filled';\r\n        this._svgPathEmpty = this.svgPath + '#' + this.svgEmptySymbolId;\r\n        this._svgPathHalf = this.svgPath + '#' + this.svgHalfSymbolId;\r\n        this._svgPathFilled = this.svgPath + '#' + this.svgFilledSymbolId;\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    get classEmpty() {\r\n        return this._classEmpty;\r\n    }\r\n    /**\r\n     * @param {?} classEmpty\r\n     * @return {?}\r\n     */\r\n    set classEmpty(classEmpty) {\r\n        this._classEmpty = classEmpty;\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    get classHalf() {\r\n        return this._classHalf;\r\n    }\r\n    /**\r\n     * @param {?} classHalf\r\n     * @return {?}\r\n     */\r\n    set classHalf(classHalf) {\r\n        this._classHalf = classHalf;\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    get classFilled() {\r\n        return this._classFilled;\r\n    }\r\n    /**\r\n     * @param {?} classFilled\r\n     * @return {?}\r\n     */\r\n    set classFilled(classFilled) {\r\n        this._classFilled = classFilled;\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    get numOfStars() {\r\n        return this._numOfStars;\r\n    }\r\n    /**\r\n     * @param {?} numOfStars\r\n     * @return {?}\r\n     */\r\n    set numOfStars(numOfStars) {\r\n        this._numOfStars = numOfStars;\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    get size() {\r\n        return this._size;\r\n    }\r\n    /**\r\n     * @param {?} size\r\n     * @return {?}\r\n     */\r\n    set size(size) {\r\n        this._size = size;\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    get staticColor() {\r\n        return this._staticColor;\r\n    }\r\n    /**\r\n     * @param {?} value\r\n     * @return {?}\r\n     */\r\n    set staticColor(value) {\r\n        this._staticColor = value;\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    get labelPosition() {\r\n        return this._labelPosition;\r\n    }\r\n    /**\r\n     * @param {?} labelPosition\r\n     * @return {?}\r\n     */\r\n    set labelPosition(labelPosition) {\r\n        this._labelPosition = labelPosition;\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    get speed() {\r\n        return this._speed;\r\n    }\r\n    /**\r\n     * @param {?} speed\r\n     * @return {?}\r\n     */\r\n    set speed(speed) {\r\n        this._speed = speed;\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    get starType() {\r\n        return this._starType;\r\n    }\r\n    /**\r\n     * @param {?} starType\r\n     * @return {?}\r\n     */\r\n    set starType(starType) {\r\n        this._starType = starType;\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    get assetsPath() {\r\n        return this._assetsPath;\r\n    }\r\n    /**\r\n     * @param {?} assetsPath\r\n     * @return {?}\r\n     */\r\n    set assetsPath(assetsPath) {\r\n        this._assetsPath = assetsPath;\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    get svgPath() {\r\n        return this._svgPath;\r\n    }\r\n    /**\r\n     * @param {?} svgPath\r\n     * @return {?}\r\n     */\r\n    set svgPath(svgPath) {\r\n        this._svgPath = svgPath;\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    get svgEmptySymbolId() {\r\n        return this._svgEmptySymbolId;\r\n    }\r\n    /**\r\n     * @param {?} svgEmptySymbolId\r\n     * @return {?}\r\n     */\r\n    set svgEmptySymbolId(svgEmptySymbolId) {\r\n        this._svgEmptySymbolId = svgEmptySymbolId;\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    get svgHalfSymbolId() {\r\n        return this._svgHalfSymbolId;\r\n    }\r\n    /**\r\n     * @param {?} svgHalfSymbolId\r\n     * @return {?}\r\n     */\r\n    set svgHalfSymbolId(svgHalfSymbolId) {\r\n        this._svgHalfSymbolId = svgHalfSymbolId;\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    get svgFilledSymbolId() {\r\n        return this._svgFilledSymbolId;\r\n    }\r\n    /**\r\n     * @param {?} svgFilledSymbolId\r\n     * @return {?}\r\n     */\r\n    set svgFilledSymbolId(svgFilledSymbolId) {\r\n        this._svgFilledSymbolId = svgFilledSymbolId;\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    get svgPathEmpty() {\r\n        return this._svgPathEmpty;\r\n    }\r\n    /**\r\n     * @param {?} svgPathEmpty\r\n     * @return {?}\r\n     */\r\n    set svgPathEmpty(svgPathEmpty) {\r\n        this._svgPathEmpty = svgPathEmpty;\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    get svgPathHalf() {\r\n        return this._svgPathHalf;\r\n    }\r\n    /**\r\n     * @param {?} svgPathHalf\r\n     * @return {?}\r\n     */\r\n    set svgPathHalf(svgPathHalf) {\r\n        this._svgPathHalf = svgPathHalf;\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    get svgPathFilled() {\r\n        return this._svgPathFilled;\r\n    }\r\n    /**\r\n     * @param {?} svgPathFilled\r\n     * @return {?}\r\n     */\r\n    set svgPathFilled(svgPathFilled) {\r\n        this._svgPathFilled = svgPathFilled;\r\n    }\r\n    /**\r\n     * @param {?} rating\r\n     * @param {?} numOfStars\r\n     * @param {?=} staticColor\r\n     * @return {?}\r\n     */\r\n    getColor(rating, numOfStars, staticColor) {\r\n        rating = rating || 0;\r\n        // if a fix color is set use this one\r\n        if (staticColor) {\r\n            return staticColor;\r\n        }\r\n        // calculate size of smallest fraction\r\n        const /** @type {?} */ fractionSize = numOfStars / 3;\r\n        // apply color by fraction\r\n        let /** @type {?} */ color = 'default';\r\n        if (rating > 0) {\r\n            color = 'negative';\r\n        }\r\n        if (rating > fractionSize) {\r\n            color = 'ok';\r\n        }\r\n        if (rating > fractionSize * 2) {\r\n            color = 'positive';\r\n        }\r\n        return color;\r\n    }\r\n    /**\r\n     * @param {?} rating\r\n     * @return {?}\r\n     */\r\n    getHalfStarVisible(rating) {\r\n        return Math.abs(rating % 1) > 0;\r\n    }\r\n}\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\nclass StarRatingComponent extends StarRating {\r\n    /**\r\n     * @param {?} config\r\n     */\r\n    constructor(config) {\r\n        super(config);\r\n        //Outputs\r\n        this.starClickChange = new EventEmitter();\r\n        this.ratingChange = new EventEmitter();\r\n        this.hoverRatingChange = new EventEmitter();\r\n    }\r\n    /**\r\n     * @param {?} $event\r\n     * @return {?}\r\n     */\r\n    saveOnClick($event) {\r\n        if (this.starClickChange) {\r\n            this.starClickChange.emit($event);\r\n        }\r\n    }\r\n    /**\r\n     * @param {?} $event\r\n     * @return {?}\r\n     */\r\n    saveOnRatingChange($event) {\r\n        if (this.ratingChange) {\r\n            this.ratingChange.emit($event);\r\n        }\r\n    }\r\n    /**\r\n     * @param {?} $event\r\n     * @return {?}\r\n     */\r\n    saveOnHover($event) {\r\n        if (this.hoverRatingChange) {\r\n            this.hoverRatingChange.emit($event);\r\n        }\r\n    }\r\n    /**\r\n     * ACCESSIBILITY *\r\n     * @param {?} event\r\n     * @return {?}\r\n     */\r\n    onKeyDown(event) {\r\n        if (!this.interactionPossible()) {\r\n            return;\r\n        }\r\n        const /** @type {?} */ handlers = {\r\n            //Decrement\r\n            Minus: () => this.decrement(),\r\n            ArrowDown: () => this.decrement(),\r\n            ArrowLeft: () => this.decrement(),\r\n            //Increment\r\n            Plus: () => this.increment(),\r\n            ArrowRight: () => this.increment(),\r\n            ArrowUp: () => this.increment(),\r\n            //Reset\r\n            Backspace: () => this.reset(),\r\n            Delete: () => this.reset(),\r\n            Digit0: () => this.reset()\r\n        };\r\n        const /** @type {?} */ handleDigits = (eventCode) => {\r\n            const /** @type {?} */ dStr = 'Digit';\r\n            const /** @type {?} */ digit = parseInt(eventCode.substr(dStr.length, eventCode.length - 1), 10);\r\n            this.rating = digit;\r\n        };\r\n        if (handlers[event['code']] ||\r\n            StarRatingUtils.isDigitKeyEventCode(event['code'])) {\r\n            if (StarRatingUtils.isDigitKeyEventCode(event['code'])) {\r\n                handleDigits(event['code']);\r\n            }\r\n            else {\r\n                handlers[event['code']]();\r\n            }\r\n            event.preventDefault();\r\n            event.stopPropagation();\r\n        }\r\n    }\r\n    /**\r\n     * @param {?=} rating\r\n     * @return {?}\r\n     */\r\n    onStarHover(rating) {\r\n        if (!this.interactionPossible() || !this.hoverEnabled) {\r\n            return;\r\n        }\r\n        this.hoverRating = rating ? parseInt(rating.toString(), 10) : 0;\r\n        //update calculated Color\r\n        this.setColor(true);\r\n        //fire onHoverRatingChange event\r\n        const /** @type {?} */ $event = { hoverRating: this.hoverRating };\r\n        this.saveOnHover($event);\r\n    }\r\n    /**\r\n     * @param {?} value\r\n     * @return {?}\r\n     */\r\n    setRating(value) {\r\n        const /** @type {?} */ initValue = this.rating;\r\n        super.setRating(value);\r\n        //if value changed trigger valueAccessor events and outputs\r\n        if (initValue !== this.rating) {\r\n            const /** @type {?} */ $event = { rating: this.rating };\r\n            this.saveOnRatingChange($event);\r\n        }\r\n    }\r\n    /**\r\n     * onStarClicked\r\n     *\r\n     * Is fired when a star is clicked. And updated the rating value.\r\n     * This function returns if the disabled or readOnly\r\n     * property is set. If provided it emits the onClick event\r\n     * handler with the actual rating value.\r\n     *\r\n     * @param {?} rating\r\n     * @return {?}\r\n     */\r\n    onStarClicked(rating) {\r\n        //fire onClick event\r\n        if (!this.interactionPossible()) {\r\n            return;\r\n        }\r\n        this.rating = rating;\r\n        const /** @type {?} */ onClickEventObject = {\r\n            rating: this.rating\r\n        };\r\n        this.saveOnClick(onClickEventObject);\r\n    }\r\n}\r\nStarRatingComponent.decorators = [\r\n    { type: Component, args: [{\r\n                selector: 'star-rating',\r\n                inputs: [\r\n                    'getHalfStarVisible',\r\n                    'getColor',\r\n                    'showHalfStars',\r\n                    'hoverEnabled',\r\n                    'rating',\r\n                    'step',\r\n                    'disabled',\r\n                    'readOnly',\r\n                    'space',\r\n                    'starType',\r\n                    'size',\r\n                    'speed',\r\n                    'numOfStars',\r\n                    'direction',\r\n                    'staticColor',\r\n                    'labelPosition',\r\n                    'labelText',\r\n                    'id'\r\n                ],\r\n                outputs: ['starClickChange', 'ratingChange', 'hoverRatingChange'],\r\n                styles: [],\r\n                template: `<div id=\"{{id}}\"\r\n  class=\"rating {{getComponentClassNames()}}\"\r\n  tabindex=\"0\"\r\n  (keydown)=\"onKeyDown($event)\"\r\n  (mouseleave)=\"onStarHover(0)\">\r\n    <div *ngIf=\"labelText\" class=\"label-value\">{{labelText}}</div>\r\n    <div class=\"star-container\">\r\n        <div class=\"star\"\r\n          (mouseenter)=\"onStarHover(star)\"\r\n          *ngFor=\"let star of stars\"\r\n          (click)=\"onStarClicked(star)\">\r\n            <i *ngIf=\"!svgVisible()\" class=\"star-empty {{classEmpty}}\"></i>\r\n            <i *ngIf=\"!svgVisible()\" class=\"star-half {{classHalf}}\"></i>\r\n            <i *ngIf=\"!svgVisible()\" class=\"star-filled {{classFilled}}\"></i>\r\n            <svg *ngIf=\"svgVisible()\" class=\"star-empty\">\r\n                <use xmlns:xlink=\"http://www.w3.org/1999/xlink\" [attr.xlink:href]=\"pathEmpty\"></use>\r\n            </svg>\r\n            <svg *ngIf=\"svgVisible()\" class=\"star-half\">\r\n                <use xmlns:xlink=\"http://www.w3.org/1999/xlink\" [attr.xlink:href]=\"pathHalf\"></use>\r\n            </svg>\r\n            <svg *ngIf=\"svgVisible()\" class=\"star-filled\">\r\n                <use xmlns:xlink=\"http://www.w3.org/1999/xlink\" [attr.xlink:href]=\"pathFilled\"></use>\r\n            </svg>\r\n        </div>\r\n    </div>\r\n</div>\r\n`\r\n            },] },\r\n];\r\n/** @nocollapse */\r\nStarRatingComponent.ctorParameters = () => [\r\n    { type: StarRatingConfigService, },\r\n];\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\nconst STAR_RATING_CONTROL_ACCESSOR = {\r\n    provide: NG_VALUE_ACCESSOR,\r\n    useExisting: forwardRef(() => StarRatingControlComponent),\r\n    multi: true\r\n};\r\nclass StarRatingControlComponent extends StarRating {\r\n    /**\r\n     * @param {?} config\r\n     */\r\n    constructor(config) {\r\n        super(config);\r\n        //Outputs\r\n        this.starClickChange = new EventEmitter();\r\n        this.ratingChange = new EventEmitter();\r\n        this.hoverRatingChange = new EventEmitter();\r\n        this.onModelChangeRegistered = false;\r\n        this.onTouchRegistered = false;\r\n    }\r\n    /**\r\n     * @param {?} $event\r\n     * @return {?}\r\n     */\r\n    saveOnClick($event) {\r\n        if (this.starClickChange) {\r\n            this.starClickChange.emit($event);\r\n        }\r\n    }\r\n    /**\r\n     * @param {?} $event\r\n     * @return {?}\r\n     */\r\n    saveOnRatingChange($event) {\r\n        if (this.ratingChange) {\r\n            this.ratingChange.emit($event);\r\n        }\r\n    }\r\n    /**\r\n     * @param {?} $event\r\n     * @return {?}\r\n     */\r\n    saveOnHover($event) {\r\n        if (this.hoverRatingChange) {\r\n            this.hoverRatingChange.emit($event);\r\n        }\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    saveOnTouch() {\r\n        if (this.onTouchRegistered) {\r\n            this.onTouch();\r\n        }\r\n    }\r\n    /**\r\n     * @param {?} value\r\n     * @return {?}\r\n     */\r\n    saveOnModelChange(value) {\r\n        if (this.onModelChangeRegistered) {\r\n            this.onModelChange(value);\r\n        }\r\n    }\r\n    /**\r\n     * ACCESSIBILITY *\r\n     * @param {?} event\r\n     * @return {?}\r\n     */\r\n    onKeyDown(event) {\r\n        if (!this.interactionPossible()) {\r\n            return;\r\n        }\r\n        const /** @type {?} */ handlers = {\r\n            //Decrement\r\n            Minus: () => this.decrement(),\r\n            ArrowDown: () => this.decrement(),\r\n            ArrowLeft: () => this.decrement(),\r\n            //Increment\r\n            Plus: () => this.increment(),\r\n            ArrowRight: () => this.increment(),\r\n            ArrowUp: () => this.increment(),\r\n            //Reset\r\n            Backspace: () => this.reset(),\r\n            Delete: () => this.reset(),\r\n            Digit0: () => this.reset()\r\n        };\r\n        const /** @type {?} */ handleDigits = (eventCode) => {\r\n            const /** @type {?} */ dStr = 'Digit';\r\n            const /** @type {?} */ digit = parseInt(eventCode.substr(dStr.length, eventCode.length - 1), 10);\r\n            this.rating = digit;\r\n        };\r\n        if (handlers[event['code']] ||\r\n            StarRatingUtils.isDigitKeyEventCode(event['code'])) {\r\n            if (StarRatingUtils.isDigitKeyEventCode(event['code'])) {\r\n                handleDigits(event['code']);\r\n            }\r\n            else {\r\n                handlers[event['code']]();\r\n            }\r\n            event.preventDefault();\r\n            event.stopPropagation();\r\n        }\r\n        this.saveOnTouch();\r\n    }\r\n    /**\r\n     * @param {?} event\r\n     * @return {?}\r\n     */\r\n    onBlur(event) {\r\n        this.focus = false;\r\n        event.preventDefault();\r\n        event.stopPropagation();\r\n        this.saveOnTouch();\r\n    }\r\n    /**\r\n     * @param {?} event\r\n     * @return {?}\r\n     */\r\n    onFocus(event) {\r\n        this.focus = true;\r\n        event.preventDefault();\r\n        event.stopPropagation();\r\n        this.saveOnTouch();\r\n    }\r\n    /**\r\n     * @param {?=} rating\r\n     * @return {?}\r\n     */\r\n    onStarHover(rating) {\r\n        if (!this.interactionPossible() || !this.hoverEnabled) {\r\n            return;\r\n        }\r\n        this.hoverRating = rating ? parseInt(rating.toString(), 10) : 0;\r\n        //fire onHoverRatingChange event\r\n        const /** @type {?} */ $event = { hoverRating: this.hoverRating };\r\n        this.saveOnHover($event);\r\n    }\r\n    /**\r\n     * Form Control - ControlValueAccessor implementation*\r\n     * @param {?} obj\r\n     * @return {?}\r\n     */\r\n    writeValue(obj) {\r\n        this.rating = obj;\r\n    }\r\n    /**\r\n     * @param {?} fn\r\n     * @return {?}\r\n     */\r\n    registerOnChange(fn) {\r\n        this.onModelChange = fn;\r\n        this.onModelChangeRegistered = true;\r\n    }\r\n    /**\r\n     * @param {?} fn\r\n     * @return {?}\r\n     */\r\n    registerOnTouched(fn) {\r\n        this.onTouch = fn;\r\n        this.onTouchRegistered = true;\r\n    }\r\n    /**\r\n     * @param {?} value\r\n     * @return {?}\r\n     */\r\n    setRating(value) {\r\n        const /** @type {?} */ initValue = this.rating;\r\n        super.setRating(value);\r\n        //if value changed trigger valueAccessor events and outputs\r\n        if (initValue !== this.rating) {\r\n            const /** @type {?} */ $event = { rating: this.rating };\r\n            this.saveOnRatingChange($event);\r\n            this.saveOnModelChange(this.rating);\r\n        }\r\n    }\r\n    /**\r\n     * onStarClicked\r\n     *\r\n     * Is fired when a star is clicked. And updated the rating value.\r\n     * This function returns if the disabled or readOnly\r\n     * property is set. If provided it emits the onClick event\r\n     * handler with the actual rating value.\r\n     *\r\n     * @param {?} rating\r\n     * @return {?}\r\n     */\r\n    onStarClicked(rating) {\r\n        //fire onClick event\r\n        if (!this.interactionPossible()) {\r\n            return;\r\n        }\r\n        this.rating = rating;\r\n        const /** @type {?} */ onClickEventObject = {\r\n            rating: this.rating\r\n        };\r\n        this.saveOnClick(onClickEventObject);\r\n    }\r\n}\r\nStarRatingControlComponent.decorators = [\r\n    { type: Component, args: [{\r\n                selector: 'star-rating-control',\r\n                providers: [STAR_RATING_CONTROL_ACCESSOR],\r\n                inputs: [\r\n                    'getHalfStarVisible',\r\n                    'getColor',\r\n                    'showHalfStars',\r\n                    'hoverEnabled',\r\n                    'rating',\r\n                    'step',\r\n                    'disabled',\r\n                    'readOnly',\r\n                    'space',\r\n                    'starType',\r\n                    'size',\r\n                    'speed',\r\n                    'numOfStars',\r\n                    'direction',\r\n                    'staticColor',\r\n                    'labelPosition',\r\n                    'labelText',\r\n                    'id'\r\n                ],\r\n                outputs: ['starClickChange', 'ratingChange', 'hoverRatingChange'],\r\n                styles: [],\r\n                template: `<div id=\"{{id}}\"\r\n  class=\"rating {{getComponentClassNames()}}\"\r\n  tabindex=\"0\"\r\n  (keydown)=\"onKeyDown($event)\"\r\n  (blur)=\"onBlur($event)\"\r\n  (focus)=\"onFocus($event)\"\r\n  (mouseleave)=\"onStarHover(0)\">\r\n    <div *ngIf=\"labelText\" class=\"label-value\">{{labelText}}</div>\r\n    <div class=\"star-container\">\r\n        <div class=\"star\"\r\n          (mouseenter)=\"onStarHover(star)\"\r\n          *ngFor=\"let star of stars\"\r\n          (click)=\"onStarClicked(star)\">\r\n            <i *ngIf=\"!svgVisible()\" class=\"star-empty {{classEmpty}}\"></i>\r\n            <i *ngIf=\"!svgVisible()\" class=\"star-half {{classHalf}}\"></i>\r\n            <i *ngIf=\"!svgVisible()\" class=\"star-filled {{classFilled}}\"></i>\r\n            <svg *ngIf=\"svgVisible()\" class=\"star-empty\">\r\n                <use xmlns:xlink=\"http://www.w3.org/1999/xlink\" [attr.xlink:href]=\"pathEmpty\"></use>\r\n            </svg>\r\n            <svg *ngIf=\"svgVisible()\" class=\"star-half\">\r\n                <use xmlns:xlink=\"http://www.w3.org/1999/xlink\" [attr.xlink:href]=\"pathHalf\"></use>\r\n            </svg>\r\n            <svg *ngIf=\"svgVisible()\" class=\"star-filled\">\r\n                <use xmlns:xlink=\"http://www.w3.org/1999/xlink\" [attr.xlink:href]=\"pathFilled\"></use>\r\n            </svg>\r\n        </div>\r\n    </div>\r\n</div>\r\n`\r\n            },] },\r\n];\r\n/** @nocollapse */\r\nStarRatingControlComponent.ctorParameters = () => [\r\n    { type: StarRatingConfigService, },\r\n];\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\nconst DECLARATIONS = [\r\n    StarRatingComponent,\r\n    StarRatingControlComponent\r\n];\r\nconst EXPORTS = [DECLARATIONS];\r\nclass StarRatingModule {\r\n    /**\r\n     * @return {?}\r\n     */\r\n    static forRoot() {\r\n        return {\r\n            ngModule: StarRatingModule,\r\n            providers: [\r\n                StarRatingConfigService\r\n            ]\r\n        };\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    static forChild() {\r\n        return {\r\n            ngModule: StarRatingModule,\r\n            providers: []\r\n        };\r\n    }\r\n}\r\nStarRatingModule.decorators = [\r\n    { type: NgModule, args: [{\r\n                imports: [CommonModule],\r\n                declarations: [DECLARATIONS],\r\n                exports: [EXPORTS]\r\n            },] },\r\n];\r\n/** @nocollapse */\r\nStarRatingModule.ctorParameters = () => [];\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * Generated bundle index. Do not edit.\r\n */\r\n\r\nexport { StarRatingConfig, StarRatingUtils, StarRating, StarRatingConfigService, StarRatingComponent, StarRatingControlComponent, StarRatingModule };\r\n\r\n"]}