import * as ɵngcc0 from '@angular/core';
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
import { Injectable } from '@angular/core';
import { StorageUtil, isBrowser } from './util';
import * as i0 from "@angular/core";
export class StorageService {
    constructor(storage) {
        this.storage = storage;
    }
    get(key) {
        return StorageUtil.get(this.storage, key);
    }
    set(key, value, expiredAt = 0, expiredUnit = 'd') {
        return StorageUtil.set(this.storage, key, value, expiredAt, expiredUnit);
    }
    /**
     * 删除指定key，如：
     * - `remove('key')` 删除 `key` 键
     * - `remove(/BMap_\w+/)` 批量删除所有 BMap_ 开头的键
     * @param key 键名或正则表达式
     */
    remove(key) {
        if (typeof key === 'string') {
            StorageUtil.remove(this.storage, key);
            return;
        }
        let index = 0;
        let next = StorageUtil.key(this.storage, index);
        const ls = [];
        while (next) {
            if (key.test(next))
                ls.push(next);
            next = StorageUtil.key(this.storage, ++index);
        }
        ls.forEach(v => StorageUtil.remove(this.storage, v));
    }
    clear() {
        this.storage.clear();
    }
}
let LocalStorageService = class LocalStorageService extends StorageService {
    constructor() {
        super(isBrowser ? localStorage : null);
    }
}
LocalStorageService.ngInjectableDef = ɵngcc0.ɵɵdefineInjectable({ token: LocalStorageService, factory: function LocalStorageService_Factory(t) { return new (t || LocalStorageService)(); }, providedIn: 'root' });
/*@__PURE__*/ ɵngcc0.ɵsetClassMetadata(LocalStorageService, [{
        type: Injectable,
        args: [{ providedIn: 'root' }]
    }], function () { return []; }, { constructor: [] });;
LocalStorageService.ngInjectableDef = i0.defineInjectable({ factory: function LocalStorageService_Factory() { return new LocalStorageService(); }, token: LocalStorageService, providedIn: "root" });
LocalStorageService = __decorate([
    __metadata("design:paramtypes", [])
], LocalStorageService);
export { LocalStorageService };
let SessionStorageService = class SessionStorageService extends StorageService {
    constructor() {
        super(isBrowser ? sessionStorage : null);
    }
}
SessionStorageService.ngInjectableDef = ɵngcc0.ɵɵdefineInjectable({ token: SessionStorageService, factory: function SessionStorageService_Factory(t) { return new (t || SessionStorageService)(); }, providedIn: 'root' });
/*@__PURE__*/ ɵngcc0.ɵsetClassMetadata(SessionStorageService, [{
        type: Injectable,
        args: [{ providedIn: 'root' }]
    }], function () { return []; }, { constructor: [] });;
SessionStorageService.ngInjectableDef = i0.defineInjectable({ factory: function SessionStorageService_Factory() { return new SessionStorageService(); }, token: SessionStorageService, providedIn: "root" });
SessionStorageService = __decorate([
    __metadata("design:paramtypes", [])
], SessionStorageService);
export { SessionStorageService };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInY6L2phZC1hZG1pbi1nby9tYXphdF9hZG1pbl9wYW5lbC9ub2RlX21vZHVsZXMvYW5ndWxhci13ZWItc3RvcmFnZS9lc20yMDE1L3NyYy9zZXJ2aWNlLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7eURBbURDOztrQ0FFaUMsQUFDSzs7Ozs7Ozs7Ozs7Ozt5REFRdEM7O29DQUVtQyxBQUNHIiwiZmlsZSI6InNlcnZpY2UuanMiLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgX19kZWNvcmF0ZSA9ICh0aGlzICYmIHRoaXMuX19kZWNvcmF0ZSkgfHwgZnVuY3Rpb24gKGRlY29yYXRvcnMsIHRhcmdldCwga2V5LCBkZXNjKSB7XHJcbiAgICB2YXIgYyA9IGFyZ3VtZW50cy5sZW5ndGgsIHIgPSBjIDwgMyA/IHRhcmdldCA6IGRlc2MgPT09IG51bGwgPyBkZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcih0YXJnZXQsIGtleSkgOiBkZXNjLCBkO1xyXG4gICAgaWYgKHR5cGVvZiBSZWZsZWN0ID09PSBcIm9iamVjdFwiICYmIHR5cGVvZiBSZWZsZWN0LmRlY29yYXRlID09PSBcImZ1bmN0aW9uXCIpIHIgPSBSZWZsZWN0LmRlY29yYXRlKGRlY29yYXRvcnMsIHRhcmdldCwga2V5LCBkZXNjKTtcclxuICAgIGVsc2UgZm9yICh2YXIgaSA9IGRlY29yYXRvcnMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIGlmIChkID0gZGVjb3JhdG9yc1tpXSkgciA9IChjIDwgMyA/IGQocikgOiBjID4gMyA/IGQodGFyZ2V0LCBrZXksIHIpIDogZCh0YXJnZXQsIGtleSkpIHx8IHI7XHJcbiAgICByZXR1cm4gYyA+IDMgJiYgciAmJiBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIHIpLCByO1xyXG59O1xyXG52YXIgX19tZXRhZGF0YSA9ICh0aGlzICYmIHRoaXMuX19tZXRhZGF0YSkgfHwgZnVuY3Rpb24gKGssIHYpIHtcclxuICAgIGlmICh0eXBlb2YgUmVmbGVjdCA9PT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgUmVmbGVjdC5tZXRhZGF0YSA9PT0gXCJmdW5jdGlvblwiKSByZXR1cm4gUmVmbGVjdC5tZXRhZGF0YShrLCB2KTtcclxufTtcclxuaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBTdG9yYWdlVXRpbCwgaXNCcm93c2VyIH0gZnJvbSAnLi91dGlsJztcclxuaW1wb3J0ICogYXMgaTAgZnJvbSBcIkBhbmd1bGFyL2NvcmVcIjtcclxuZXhwb3J0IGNsYXNzIFN0b3JhZ2VTZXJ2aWNlIHtcclxuICAgIGNvbnN0cnVjdG9yKHN0b3JhZ2UpIHtcclxuICAgICAgICB0aGlzLnN0b3JhZ2UgPSBzdG9yYWdlO1xyXG4gICAgfVxyXG4gICAgZ2V0KGtleSkge1xyXG4gICAgICAgIHJldHVybiBTdG9yYWdlVXRpbC5nZXQodGhpcy5zdG9yYWdlLCBrZXkpO1xyXG4gICAgfVxyXG4gICAgc2V0KGtleSwgdmFsdWUsIGV4cGlyZWRBdCA9IDAsIGV4cGlyZWRVbml0ID0gJ2QnKSB7XHJcbiAgICAgICAgcmV0dXJuIFN0b3JhZ2VVdGlsLnNldCh0aGlzLnN0b3JhZ2UsIGtleSwgdmFsdWUsIGV4cGlyZWRBdCwgZXhwaXJlZFVuaXQpO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiDliKDpmaTmjIflrpprZXnvvIzlpoLvvJpcclxuICAgICAqIC0gYHJlbW92ZSgna2V5JylgIOWIoOmZpCBga2V5YCDplK5cclxuICAgICAqIC0gYHJlbW92ZSgvQk1hcF9cXHcrLylgIOaJuemHj+WIoOmZpOaJgOaciSBCTWFwXyDlvIDlpLTnmoTplK5cclxuICAgICAqIEBwYXJhbSBrZXkg6ZSu5ZCN5oiW5q2j5YiZ6KGo6L6+5byPXHJcbiAgICAgKi9cclxuICAgIHJlbW92ZShrZXkpIHtcclxuICAgICAgICBpZiAodHlwZW9mIGtleSA9PT0gJ3N0cmluZycpIHtcclxuICAgICAgICAgICAgU3RvcmFnZVV0aWwucmVtb3ZlKHRoaXMuc3RvcmFnZSwga2V5KTtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICBsZXQgaW5kZXggPSAwO1xyXG4gICAgICAgIGxldCBuZXh0ID0gU3RvcmFnZVV0aWwua2V5KHRoaXMuc3RvcmFnZSwgaW5kZXgpO1xyXG4gICAgICAgIGNvbnN0IGxzID0gW107XHJcbiAgICAgICAgd2hpbGUgKG5leHQpIHtcclxuICAgICAgICAgICAgaWYgKGtleS50ZXN0KG5leHQpKVxyXG4gICAgICAgICAgICAgICAgbHMucHVzaChuZXh0KTtcclxuICAgICAgICAgICAgbmV4dCA9IFN0b3JhZ2VVdGlsLmtleSh0aGlzLnN0b3JhZ2UsICsraW5kZXgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBscy5mb3JFYWNoKHYgPT4gU3RvcmFnZVV0aWwucmVtb3ZlKHRoaXMuc3RvcmFnZSwgdikpO1xyXG4gICAgfVxyXG4gICAgY2xlYXIoKSB7XHJcbiAgICAgICAgdGhpcy5zdG9yYWdlLmNsZWFyKCk7XHJcbiAgICB9XHJcbn1cclxubGV0IExvY2FsU3RvcmFnZVNlcnZpY2UgPSBjbGFzcyBMb2NhbFN0b3JhZ2VTZXJ2aWNlIGV4dGVuZHMgU3RvcmFnZVNlcnZpY2Uge1xyXG4gICAgY29uc3RydWN0b3IoKSB7XHJcbiAgICAgICAgc3VwZXIoaXNCcm93c2VyID8gbG9jYWxTdG9yYWdlIDogbnVsbCk7XHJcbiAgICB9XHJcbn07XHJcbkxvY2FsU3RvcmFnZVNlcnZpY2UubmdJbmplY3RhYmxlRGVmID0gaTAuZGVmaW5lSW5qZWN0YWJsZSh7IGZhY3Rvcnk6IGZ1bmN0aW9uIExvY2FsU3RvcmFnZVNlcnZpY2VfRmFjdG9yeSgpIHsgcmV0dXJuIG5ldyBMb2NhbFN0b3JhZ2VTZXJ2aWNlKCk7IH0sIHRva2VuOiBMb2NhbFN0b3JhZ2VTZXJ2aWNlLCBwcm92aWRlZEluOiBcInJvb3RcIiB9KTtcclxuTG9jYWxTdG9yYWdlU2VydmljZSA9IF9fZGVjb3JhdGUoW1xyXG4gICAgSW5qZWN0YWJsZSh7IHByb3ZpZGVkSW46ICdyb290JyB9KSxcclxuICAgIF9fbWV0YWRhdGEoXCJkZXNpZ246cGFyYW10eXBlc1wiLCBbXSlcclxuXSwgTG9jYWxTdG9yYWdlU2VydmljZSk7XHJcbmV4cG9ydCB7IExvY2FsU3RvcmFnZVNlcnZpY2UgfTtcclxubGV0IFNlc3Npb25TdG9yYWdlU2VydmljZSA9IGNsYXNzIFNlc3Npb25TdG9yYWdlU2VydmljZSBleHRlbmRzIFN0b3JhZ2VTZXJ2aWNlIHtcclxuICAgIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgICAgIHN1cGVyKGlzQnJvd3NlciA/IHNlc3Npb25TdG9yYWdlIDogbnVsbCk7XHJcbiAgICB9XHJcbn07XHJcblNlc3Npb25TdG9yYWdlU2VydmljZS5uZ0luamVjdGFibGVEZWYgPSBpMC5kZWZpbmVJbmplY3RhYmxlKHsgZmFjdG9yeTogZnVuY3Rpb24gU2Vzc2lvblN0b3JhZ2VTZXJ2aWNlX0ZhY3RvcnkoKSB7IHJldHVybiBuZXcgU2Vzc2lvblN0b3JhZ2VTZXJ2aWNlKCk7IH0sIHRva2VuOiBTZXNzaW9uU3RvcmFnZVNlcnZpY2UsIHByb3ZpZGVkSW46IFwicm9vdFwiIH0pO1xyXG5TZXNzaW9uU3RvcmFnZVNlcnZpY2UgPSBfX2RlY29yYXRlKFtcclxuICAgIEluamVjdGFibGUoeyBwcm92aWRlZEluOiAncm9vdCcgfSksXHJcbiAgICBfX21ldGFkYXRhKFwiZGVzaWduOnBhcmFtdHlwZXNcIiwgW10pXHJcbl0sIFNlc3Npb25TdG9yYWdlU2VydmljZSk7XHJcbmV4cG9ydCB7IFNlc3Npb25TdG9yYWdlU2VydmljZSB9O1xyIl19