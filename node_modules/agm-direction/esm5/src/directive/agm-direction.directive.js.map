{"version":3,"sources":["v:/jad-admin-go/mazat_admin_panel/node_modules/agm-direction/esm5/src/directive/agm-direction.directive.js"],"names":[],"mappings":"AAAA;;;;;;;AAMA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;MAuVM,AAKA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;cA4BA","file":"agm-direction.directive.js","sourcesContent":["/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\r\n */\r\nimport { Directive, Input, Output, EventEmitter } from '@angular/core';\r\nimport { GoogleMapsAPIWrapper } from '@agm/core';\r\nvar AgmDirection = /** @class */ (function () {\r\n    function AgmDirection(gmapsApi) {\r\n        this.gmapsApi = gmapsApi;\r\n        // Options\r\n        this.travelMode = 'DRIVING';\r\n        this.transitOptions = undefined;\r\n        this.drivingOptions = undefined;\r\n        this.waypoints = [];\r\n        this.optimizeWaypoints = true;\r\n        this.provideRouteAlternatives = false;\r\n        this.avoidHighways = false;\r\n        this.avoidTolls = false;\r\n        // Remove or draw direction\r\n        this.visible = true;\r\n        // Direction change event handler\r\n        this.onChange = new EventEmitter();\r\n        // Direction response for the new request\r\n        this.onResponse = new EventEmitter();\r\n        // Send a custom infowindow\r\n        this.sendInfoWindow = new EventEmitter();\r\n        // Status of Directions Query (google.maps.DirectionsStatus.OVER_QUERY_LIMIT)\r\n        this.status = new EventEmitter();\r\n        // Marker drag event handler\r\n        this.originDrag = new EventEmitter();\r\n        this.destinationDrag = new EventEmitter();\r\n        this.directionsService = undefined;\r\n        this.directionsDisplay = undefined;\r\n        this.waypointsMarker = [];\r\n        // Use for visible flag\r\n        this.isFirstChange = true;\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    AgmDirection.prototype.ngOnInit = /**\r\n     * @return {?}\r\n     */\r\n    function () {\r\n        if (this.visible === true) {\r\n            this.directionDraw();\r\n        }\r\n    };\r\n    /**\r\n     * @param {?} obj\r\n     * @return {?}\r\n     */\r\n    AgmDirection.prototype.ngOnChanges = /**\r\n     * @param {?} obj\r\n     * @return {?}\r\n     */\r\n    function (obj) {\r\n        /**\r\n         * When visible is false then remove the direction layer\r\n         */\r\n        if (!this.visible) {\r\n            try {\r\n                this.removeMarkers();\r\n                this.removeDirections();\r\n            }\r\n            catch (e) { }\r\n        }\r\n        else {\r\n            if (this.isFirstChange) {\r\n                /**\r\n                 * When visible is false at the first time\r\n                 */\r\n                if (typeof this.directionsDisplay === 'undefined') {\r\n                    this.directionDraw();\r\n                }\r\n                this.isFirstChange = false;\r\n                return;\r\n            }\r\n            /**\r\n             * When renderOptions are not first change then reset the display\r\n             */\r\n            if (typeof obj.renderOptions !== 'undefined') {\r\n                if (obj.renderOptions.firstChange === false) {\r\n                    this.removeMarkers();\r\n                    this.removeDirections();\r\n                }\r\n            }\r\n            this.directionDraw();\r\n        }\r\n    };\r\n    /**\r\n     * @return {?}\r\n     */\r\n    AgmDirection.prototype.ngOnDestroy = /**\r\n     * @return {?}\r\n     */\r\n    function () {\r\n        this.destroyMarkers();\r\n        this.removeDirections();\r\n    };\r\n    /**\r\n     * This event is fired when the user creating or updating this direction\r\n     */\r\n    /**\r\n     * This event is fired when the user creating or updating this direction\r\n     * @return {?}\r\n     */\r\n    AgmDirection.prototype.directionDraw = /**\r\n     * This event is fired when the user creating or updating this direction\r\n     * @return {?}\r\n     */\r\n    function () {\r\n        var _this = this;\r\n        this.gmapsApi.getNativeMap().then(function (map) {\r\n            if (typeof _this.directionsDisplay === 'undefined') {\r\n                _this.directionsDisplay = new google.maps.DirectionsRenderer(_this.renderOptions);\r\n                _this.directionsDisplay.setMap(map);\r\n                _this.directionsDisplay.addListener('directions_changed', function () {\r\n                    _this.onChange.emit(_this.directionsDisplay.getDirections());\r\n                });\r\n            }\r\n            if (typeof _this.directionsService === 'undefined') {\r\n                _this.directionsService = new google.maps.DirectionsService;\r\n            }\r\n            if (typeof _this.panel === 'undefined') {\r\n                _this.directionsDisplay.setPanel(null);\r\n            }\r\n            else {\r\n                _this.directionsDisplay.setPanel(_this.panel);\r\n            }\r\n            // Render exist direction\r\n            if (typeof _this.renderRoute === 'object' && _this.renderRoute !== null) {\r\n                _this.directionsDisplay.setDirections(_this.renderRoute);\r\n                _this.renderRoute = null; // or set undefined, ''\r\n            }\r\n            else {\r\n                // Request new direction\r\n                _this.directionsService.route({\r\n                    origin: _this.origin,\r\n                    destination: _this.destination,\r\n                    travelMode: _this.travelMode,\r\n                    transitOptions: _this.transitOptions,\r\n                    drivingOptions: _this.drivingOptions,\r\n                    waypoints: _this.waypoints,\r\n                    optimizeWaypoints: _this.optimizeWaypoints,\r\n                    provideRouteAlternatives: _this.provideRouteAlternatives,\r\n                    avoidHighways: _this.avoidHighways,\r\n                    avoidTolls: _this.avoidTolls,\r\n                }, function (response, status) {\r\n                    _this.onResponse.emit(response);\r\n                    // Emit Query Status\r\n                    _this.status.emit(status);\r\n                    /**\r\n                     * DirectionsStatus\r\n                     * https://developers.google.com/maps/documentation/javascript/directions#DirectionsStatus\r\n                     */\r\n                    switch (status) {\r\n                        case 'OK':\r\n                            _this.directionsDisplay.setDirections(response);\r\n                            /**\r\n                             * Emit The DirectionsResult Object\r\n                             * https://developers.google.com/maps/documentation/javascript/directions?hl=en#DirectionsResults\r\n                             */\r\n                            // Custom Markers\r\n                            if (typeof _this.markerOptions !== 'undefined') {\r\n                                _this.destroyMarkers();\r\n                                // Set custom markers\r\n                                /** @type {?} */\r\n                                var _route_1 = response.routes[0].legs[0];\r\n                                try {\r\n                                    // Origin Marker\r\n                                    if (typeof _this.markerOptions.origin !== 'undefined') {\r\n                                        _this.markerOptions.origin.map = map;\r\n                                        _this.markerOptions.origin.position = _route_1.start_location;\r\n                                        _this.originMarker = _this.setMarker(map, _this.originMarker, _this.markerOptions.origin, _route_1.start_address);\r\n                                        if (_this.markerOptions.origin.draggable) {\r\n                                            _this.originMarker.addListener('dragend', function () {\r\n                                                _this.origin = _this.originMarker.position;\r\n                                                _this.directionDraw();\r\n                                                _this.originDrag.emit(_this.origin);\r\n                                            });\r\n                                        }\r\n                                    }\r\n                                    // Destination Marker\r\n                                    if (typeof _this.markerOptions.destination !== 'undefined') {\r\n                                        _this.markerOptions.destination.map = map;\r\n                                        _this.markerOptions.destination.position = _route_1.end_location;\r\n                                        _this.destinationMarker = _this.setMarker(map, _this.destinationMarker, _this.markerOptions.destination, _route_1.end_address);\r\n                                        if (_this.markerOptions.destination.draggable) {\r\n                                            _this.destinationMarker.addListener('dragend', function () {\r\n                                                _this.destination = _this.destinationMarker.position;\r\n                                                _this.directionDraw();\r\n                                                _this.destinationDrag.emit(_this.destination);\r\n                                            });\r\n                                        }\r\n                                    }\r\n                                    // Waypoints Marker\r\n                                    if (typeof _this.markerOptions.waypoints !== 'undefined') {\r\n                                        _this.waypoints.forEach(function (waypoint, index) {\r\n                                            // If waypoints are not array then set all the same\r\n                                            if (!Array.isArray(_this.markerOptions.waypoints)) {\r\n                                                _this.markerOptions.waypoints.map = map;\r\n                                                _this.markerOptions.waypoints.position = _route_1.via_waypoints[index];\r\n                                                _this.waypointsMarker.push(_this.setMarker(map, waypoint, _this.markerOptions.waypoints, _route_1.via_waypoints[index]));\r\n                                            }\r\n                                            else {\r\n                                                _this.markerOptions.waypoints[index].map = map;\r\n                                                _this.markerOptions.waypoints[index].position = _route_1.via_waypoints[index];\r\n                                                _this.waypointsMarker.push(_this.setMarker(map, waypoint, _this.markerOptions.waypoints[index], _route_1.via_waypoints[index]));\r\n                                            }\r\n                                        }); // End forEach\r\n                                    }\r\n                                }\r\n                                catch (err) {\r\n                                    console.error('MarkerOptions error.', err);\r\n                                }\r\n                            }\r\n                            break;\r\n                        default:\r\n                            // console.warn(status);\r\n                            break;\r\n                    } // End switch\r\n                });\r\n            }\r\n        });\r\n    };\r\n    /**\r\n     * Custom Origin and Destination Icon\r\n     * @param map map\r\n     * @param marker marker\r\n     * @param markerOpts properties\r\n     * @param content marker's infowindow content\r\n     * @returns new marker\r\n     * @memberof AgmDirection\r\n     */\r\n    /**\r\n     * Custom Origin and Destination Icon\r\n     * \\@memberof AgmDirection\r\n     * @param {?} map map\r\n     * @param {?} marker marker\r\n     * @param {?} markerOpts properties\r\n     * @param {?} content marker's infowindow content\r\n     * @return {?} new marker\r\n     */\r\n    AgmDirection.prototype.setMarker = /**\r\n     * Custom Origin and Destination Icon\r\n     * \\@memberof AgmDirection\r\n     * @param {?} map map\r\n     * @param {?} marker marker\r\n     * @param {?} markerOpts properties\r\n     * @param {?} content marker's infowindow content\r\n     * @return {?} new marker\r\n     */\r\n    function (map, marker, markerOpts, content) {\r\n        var _this = this;\r\n        if (typeof this.infoWindow === 'undefined') {\r\n            this.infoWindow = new google.maps.InfoWindow({});\r\n            this.sendInfoWindow.emit(this.infoWindow);\r\n        }\r\n        marker = new google.maps.Marker(markerOpts);\r\n        // https://developers.google.com/maps/documentation/javascript/reference/marker?hl=zh-tw#MarkerOptions.clickable\r\n        if (marker.clickable) {\r\n            marker.addListener('click', function () {\r\n                /** @type {?} */\r\n                var infowindoContent = typeof markerOpts.infoWindow === 'undefined' ? content : markerOpts.infoWindow;\r\n                _this.infoWindow.setContent(infowindoContent);\r\n                _this.infoWindow.open(map, marker);\r\n            });\r\n        }\r\n        return marker;\r\n    };\r\n    /**\r\n     * This event is fired when remove markers\r\n     */\r\n    /**\r\n     * This event is fired when remove markers\r\n     * @return {?}\r\n     */\r\n    AgmDirection.prototype.removeMarkers = /**\r\n     * This event is fired when remove markers\r\n     * @return {?}\r\n     */\r\n    function () {\r\n        if (typeof this.originMarker !== 'undefined') {\r\n            this.originMarker.setMap(null);\r\n        }\r\n        if (typeof this.destinationMarker !== 'undefined') {\r\n            this.destinationMarker.setMap(null);\r\n        }\r\n        this.waypointsMarker.forEach(function (w) {\r\n            if (typeof w !== 'undefined') {\r\n                w.setMap(null);\r\n            }\r\n        });\r\n    };\r\n    /**\r\n     * This event is fired when remove directions\r\n     */\r\n    /**\r\n     * This event is fired when remove directions\r\n     * @return {?}\r\n     */\r\n    AgmDirection.prototype.removeDirections = /**\r\n     * This event is fired when remove directions\r\n     * @return {?}\r\n     */\r\n    function () {\r\n        if (this.directionsDisplay !== undefined) {\r\n            this.directionsDisplay.setPanel(null);\r\n            this.directionsDisplay.setMap(null);\r\n            this.directionsDisplay = undefined;\r\n        }\r\n    };\r\n    /**\r\n     * This event is fired when destroy markers\r\n     */\r\n    /**\r\n     * This event is fired when destroy markers\r\n     * @return {?}\r\n     */\r\n    AgmDirection.prototype.destroyMarkers = /**\r\n     * This event is fired when destroy markers\r\n     * @return {?}\r\n     */\r\n    function () {\r\n        // Remove origin markers\r\n        try {\r\n            if (typeof this.originMarker !== 'undefined') {\r\n                google.maps.event.clearListeners(this.originMarker, 'click');\r\n                if (this.markerOptions.origin.draggable) {\r\n                    google.maps.event.clearListeners(this.originMarker, 'dragend');\r\n                }\r\n            }\r\n            if (typeof this.destinationMarker !== 'undefined') {\r\n                google.maps.event.clearListeners(this.destinationMarker, 'click');\r\n                if (this.markerOptions.origin.draggable) {\r\n                    google.maps.event.clearListeners(this.destinationMarker, 'dragend');\r\n                }\r\n            }\r\n            this.waypointsMarker.forEach(function (w) {\r\n                if (typeof w !== 'undefined') {\r\n                    google.maps.event.clearListeners(w, 'click');\r\n                }\r\n            });\r\n            this.removeMarkers();\r\n        }\r\n        catch (err) {\r\n            console.error('Can not reset custom marker.', err);\r\n        }\r\n    };\r\n    AgmDirection.decorators = [\r\n        { type: Directive, args: [{\r\n                    selector: 'agm-direction',\r\n                },] }\r\n    ];\r\n    /** @nocollapse */\r\n    AgmDirection.ctorParameters = function () { return [\r\n        { type: GoogleMapsAPIWrapper }\r\n    ]; };\r\n    AgmDirection.propDecorators = {\r\n        origin: [{ type: Input }],\r\n        destination: [{ type: Input }],\r\n        travelMode: [{ type: Input }],\r\n        transitOptions: [{ type: Input }],\r\n        drivingOptions: [{ type: Input }],\r\n        waypoints: [{ type: Input }],\r\n        optimizeWaypoints: [{ type: Input }],\r\n        provideRouteAlternatives: [{ type: Input }],\r\n        avoidHighways: [{ type: Input }],\r\n        avoidTolls: [{ type: Input }],\r\n        renderOptions: [{ type: Input }],\r\n        panel: [{ type: Input }],\r\n        markerOptions: [{ type: Input }],\r\n        infoWindow: [{ type: Input }],\r\n        visible: [{ type: Input }],\r\n        renderRoute: [{ type: Input }],\r\n        onChange: [{ type: Output }],\r\n        onResponse: [{ type: Output }],\r\n        sendInfoWindow: [{ type: Output }],\r\n        status: [{ type: Output }],\r\n        originDrag: [{ type: Output }],\r\n        destinationDrag: [{ type: Output }]\r\n    };\r\n    return AgmDirection;\r\n}());\r\nexport { AgmDirection };\r\nif (false) {\r\n    /** @type {?} */\r\n    AgmDirection.prototype.origin;\r\n    /** @type {?} */\r\n    AgmDirection.prototype.destination;\r\n    /** @type {?} */\r\n    AgmDirection.prototype.travelMode;\r\n    /** @type {?} */\r\n    AgmDirection.prototype.transitOptions;\r\n    /** @type {?} */\r\n    AgmDirection.prototype.drivingOptions;\r\n    /** @type {?} */\r\n    AgmDirection.prototype.waypoints;\r\n    /** @type {?} */\r\n    AgmDirection.prototype.optimizeWaypoints;\r\n    /** @type {?} */\r\n    AgmDirection.prototype.provideRouteAlternatives;\r\n    /** @type {?} */\r\n    AgmDirection.prototype.avoidHighways;\r\n    /** @type {?} */\r\n    AgmDirection.prototype.avoidTolls;\r\n    /** @type {?} */\r\n    AgmDirection.prototype.renderOptions;\r\n    /** @type {?} */\r\n    AgmDirection.prototype.panel;\r\n    /** @type {?} */\r\n    AgmDirection.prototype.markerOptions;\r\n    /** @type {?} */\r\n    AgmDirection.prototype.infoWindow;\r\n    /** @type {?} */\r\n    AgmDirection.prototype.visible;\r\n    /** @type {?} */\r\n    AgmDirection.prototype.renderRoute;\r\n    /** @type {?} */\r\n    AgmDirection.prototype.onChange;\r\n    /** @type {?} */\r\n    AgmDirection.prototype.onResponse;\r\n    /** @type {?} */\r\n    AgmDirection.prototype.sendInfoWindow;\r\n    /** @type {?} */\r\n    AgmDirection.prototype.status;\r\n    /** @type {?} */\r\n    AgmDirection.prototype.originDrag;\r\n    /** @type {?} */\r\n    AgmDirection.prototype.destinationDrag;\r\n    /** @type {?} */\r\n    AgmDirection.prototype.directionsService;\r\n    /** @type {?} */\r\n    AgmDirection.prototype.directionsDisplay;\r\n    /** @type {?} */\r\n    AgmDirection.prototype.originMarker;\r\n    /** @type {?} */\r\n    AgmDirection.prototype.destinationMarker;\r\n    /** @type {?} */\r\n    AgmDirection.prototype.waypointsMarker;\r\n    /** @type {?} */\r\n    AgmDirection.prototype.isFirstChange;\r\n    /** @type {?} */\r\n    AgmDirection.prototype.gmapsApi;\r\n}\r\n"]}