{"version":3,"sources":["v:/jad-admin-go/mazat_admin_panel/node_modules/agm-direction/bundles/agm-direction.umd.js"],"names":[],"mappings":"AAAA;iLACwJ;8IAC1B;;uDAE9E;;;;;AAAI;;;;SAI3C;;;;0CAGC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;UAyLA,AAGA;;;;;;;;;siBAKG;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;UAmFH,AAGA;;;;;;;;;iVAKG;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;UA2FH,AAGA;;;;;;;;;6SAKG;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;UAsFH,AAGA;;;;;;;;;4ZAKG;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;UAmFH,AAGA;;;;;;;;;;kUAMG;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;UA0DH,AAGA;;;;;;;;;iPAKG;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;UAgEH,AAGA;;;;;;;;;4PAKG;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;UA8DH,AAGA;;;;;;;;;mNAKG;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;UAiHH,AAGA;;;;;;;;;iQAKG;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;UAsDH,AAGA;;;;;;;;yQAIG;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;UAwZH,AAgBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;cAkDA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;UA4LA,AAKA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;cAiCA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;UAqMA,AAKA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;cAiCA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;gFA2HsE,AAMtE;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;cAcA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;mIA0GyH,AAKzH;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;uIAeA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;wDAoQ8C,AAK9C;;;;;;;;;;;;;;;;;;;;;;cASA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;UAyNA,AAaA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;cAuBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;UA0MA,AAKA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;cA6BA;;;;;;;;;;;;;;;;;;;;;;;UAuBA,AAGA;;;;;;;;;;;;;;;;;;cAOA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;UA0LA,AAKA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;cA2BA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;UAiFA,AAKA;;;;;;;;;;;;;;;;;;;+HAQA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;UAmIA,AAGA;;;;;;;;;;;;;;;+JAMG;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;UAqWH,AAKA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;cA4BA;;;;;;;;;;;;;;;;;;;;;UAqBA;;;;;;;;;;;;;;;2KAWA;;;;;;;;oCAOwD","file":"agm-direction.umd.js","sourcesContent":["(function (global, factory) {\r\n    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('rxjs'), require('rxjs/operators')) :\r\n    typeof define === 'function' && define.amd ? define('agm-direction', ['exports', '@angular/core', 'rxjs', 'rxjs/operators'], factory) :\r\n    (global = global || self, factory((global.ng = global.ng || {}, global.ng.angularLibraryStarter = {}), global.ng.core, global.rxjs, global.rxjs.operators));\r\n}(this, function (exports, core, rxjs, operators) { 'use strict';\r\n\r\n    var MapsAPILoader = /** @class */ (function () {\r\n        function MapsAPILoader() {\r\n        }\r\n        MapsAPILoader.decorators = [\r\n            { type: core.Injectable },\r\n        ];\r\n        return MapsAPILoader;\r\n    }());\r\n\r\n    /**\r\n     * Wrapper class that handles the communication with the Google Maps Javascript\r\n     * API v3\r\n     */\r\n    var GoogleMapsAPIWrapper = /** @class */ (function () {\r\n        function GoogleMapsAPIWrapper(_loader, _zone) {\r\n            var _this = this;\r\n            this._loader = _loader;\r\n            this._zone = _zone;\r\n            this._map =\r\n                new Promise(function (resolve) { _this._mapResolver = resolve; });\r\n        }\r\n        GoogleMapsAPIWrapper.prototype.createMap = function (el, mapOptions) {\r\n            var _this = this;\r\n            return this._zone.runOutsideAngular(function () {\r\n                return _this._loader.load().then(function () {\r\n                    var map = new google.maps.Map(el, mapOptions);\r\n                    _this._mapResolver(map);\r\n                    return;\r\n                });\r\n            });\r\n        };\r\n        GoogleMapsAPIWrapper.prototype.setMapOptions = function (options) {\r\n            this._map.then(function (m) { m.setOptions(options); });\r\n        };\r\n        /**\r\n         * Creates a google map marker with the map context\r\n         */\r\n        /**\r\n           * Creates a google map marker with the map context\r\n           */\r\n        GoogleMapsAPIWrapper.prototype.createMarker = /**\r\n           * Creates a google map marker with the map context\r\n           */\r\n        function (options, addToMap) {\r\n            if (options === void 0) { options = {}; }\r\n            if (addToMap === void 0) { addToMap = true; }\r\n            return this._map.then(function (map) {\r\n                if (addToMap) {\r\n                    options.map = map;\r\n                }\r\n                return new google.maps.Marker(options);\r\n            });\r\n        };\r\n        GoogleMapsAPIWrapper.prototype.createInfoWindow = function (options) {\r\n            return this._map.then(function () { return new google.maps.InfoWindow(options); });\r\n        };\r\n        /**\r\n         * Creates a google.map.Circle for the current map.\r\n         */\r\n        /**\r\n           * Creates a google.map.Circle for the current map.\r\n           */\r\n        GoogleMapsAPIWrapper.prototype.createCircle = /**\r\n           * Creates a google.map.Circle for the current map.\r\n           */\r\n        function (options) {\r\n            return this._map.then(function (map) {\r\n                options.map = map;\r\n                return new google.maps.Circle(options);\r\n            });\r\n        };\r\n        /**\r\n         * Creates a google.map.Rectangle for the current map.\r\n         */\r\n        /**\r\n           * Creates a google.map.Rectangle for the current map.\r\n           */\r\n        GoogleMapsAPIWrapper.prototype.createRectangle = /**\r\n           * Creates a google.map.Rectangle for the current map.\r\n           */\r\n        function (options) {\r\n            return this._map.then(function (map) {\r\n                options.map = map;\r\n                return new google.maps.Rectangle(options);\r\n            });\r\n        };\r\n        GoogleMapsAPIWrapper.prototype.createPolyline = function (options) {\r\n            return this.getNativeMap().then(function (map) {\r\n                var line = new google.maps.Polyline(options);\r\n                line.setMap(map);\r\n                return line;\r\n            });\r\n        };\r\n        GoogleMapsAPIWrapper.prototype.createPolygon = function (options) {\r\n            return this.getNativeMap().then(function (map) {\r\n                var polygon = new google.maps.Polygon(options);\r\n                polygon.setMap(map);\r\n                return polygon;\r\n            });\r\n        };\r\n        /**\r\n         * Creates a new google.map.Data layer for the current map\r\n         */\r\n        /**\r\n           * Creates a new google.map.Data layer for the current map\r\n           */\r\n        GoogleMapsAPIWrapper.prototype.createDataLayer = /**\r\n           * Creates a new google.map.Data layer for the current map\r\n           */\r\n        function (options) {\r\n            return this._map.then(function (m) {\r\n                var data = new google.maps.Data(options);\r\n                data.setMap(m);\r\n                return data;\r\n            });\r\n        };\r\n        /**\r\n         * Determines if given coordinates are insite a Polygon path.\r\n         */\r\n        /**\r\n           * Determines if given coordinates are insite a Polygon path.\r\n           */\r\n        GoogleMapsAPIWrapper.prototype.containsLocation = /**\r\n           * Determines if given coordinates are insite a Polygon path.\r\n           */\r\n        function (latLng, polygon) {\r\n            return google.maps.geometry.poly.containsLocation(latLng, polygon);\r\n        };\r\n        GoogleMapsAPIWrapper.prototype.subscribeToMapEvent = function (eventName) {\r\n            var _this = this;\r\n            return new rxjs.Observable(function (observer) {\r\n                _this._map.then(function (m) {\r\n                    m.addListener(eventName, function (arg) { _this._zone.run(function () { return observer.next(arg); }); });\r\n                });\r\n            });\r\n        };\r\n        GoogleMapsAPIWrapper.prototype.clearInstanceListeners = function () {\r\n            this._map.then(function (map) {\r\n                google.maps.event.clearInstanceListeners(map);\r\n            });\r\n        };\r\n        GoogleMapsAPIWrapper.prototype.setCenter = function (latLng) {\r\n            return this._map.then(function (map) { return map.setCenter(latLng); });\r\n        };\r\n        GoogleMapsAPIWrapper.prototype.getZoom = function () { return this._map.then(function (map) { return map.getZoom(); }); };\r\n        GoogleMapsAPIWrapper.prototype.getBounds = function () {\r\n            return this._map.then(function (map) { return map.getBounds(); });\r\n        };\r\n        GoogleMapsAPIWrapper.prototype.getMapTypeId = function () {\r\n            return this._map.then(function (map) { return map.getMapTypeId(); });\r\n        };\r\n        GoogleMapsAPIWrapper.prototype.setZoom = function (zoom) {\r\n            return this._map.then(function (map) { return map.setZoom(zoom); });\r\n        };\r\n        GoogleMapsAPIWrapper.prototype.getCenter = function () {\r\n            return this._map.then(function (map) { return map.getCenter(); });\r\n        };\r\n        GoogleMapsAPIWrapper.prototype.panTo = function (latLng) {\r\n            return this._map.then(function (map) { return map.panTo(latLng); });\r\n        };\r\n        GoogleMapsAPIWrapper.prototype.panBy = function (x, y) {\r\n            return this._map.then(function (map) { return map.panBy(x, y); });\r\n        };\r\n        GoogleMapsAPIWrapper.prototype.fitBounds = function (latLng) {\r\n            return this._map.then(function (map) { return map.fitBounds(latLng); });\r\n        };\r\n        GoogleMapsAPIWrapper.prototype.panToBounds = function (latLng) {\r\n            return this._map.then(function (map) { return map.panToBounds(latLng); });\r\n        };\r\n        /**\r\n         * Returns the native Google Maps Map instance. Be careful when using this instance directly.\r\n         */\r\n        /**\r\n           * Returns the native Google Maps Map instance. Be careful when using this instance directly.\r\n           */\r\n        GoogleMapsAPIWrapper.prototype.getNativeMap = /**\r\n           * Returns the native Google Maps Map instance. Be careful when using this instance directly.\r\n           */\r\n        function () { return this._map; };\r\n        /**\r\n         * Triggers the given event name on the map instance.\r\n         */\r\n        /**\r\n           * Triggers the given event name on the map instance.\r\n           */\r\n        GoogleMapsAPIWrapper.prototype.triggerMapEvent = /**\r\n           * Triggers the given event name on the map instance.\r\n           */\r\n        function (eventName) {\r\n            return this._map.then(function (m) { return google.maps.event.trigger(m, eventName); });\r\n        };\r\n        GoogleMapsAPIWrapper.decorators = [\r\n            { type: core.Injectable },\r\n        ];\r\n        /** @nocollapse */\r\n        GoogleMapsAPIWrapper.ctorParameters = function () { return [\r\n            { type: MapsAPILoader, },\r\n            { type: core.NgZone, },\r\n        ]; };\r\n        return GoogleMapsAPIWrapper;\r\n    }());\r\n\r\n    var CircleManager = /** @class */ (function () {\r\n        function CircleManager(_apiWrapper, _zone) {\r\n            this._apiWrapper = _apiWrapper;\r\n            this._zone = _zone;\r\n            this._circles = new Map();\r\n        }\r\n        CircleManager.prototype.addCircle = function (circle) {\r\n            this._circles.set(circle, this._apiWrapper.createCircle({\r\n                center: { lat: circle.latitude, lng: circle.longitude },\r\n                clickable: circle.clickable,\r\n                draggable: circle.draggable,\r\n                editable: circle.editable,\r\n                fillColor: circle.fillColor,\r\n                fillOpacity: circle.fillOpacity,\r\n                radius: circle.radius,\r\n                strokeColor: circle.strokeColor,\r\n                strokeOpacity: circle.strokeOpacity,\r\n                strokePosition: circle.strokePosition,\r\n                strokeWeight: circle.strokeWeight,\r\n                visible: circle.visible,\r\n                zIndex: circle.zIndex\r\n            }));\r\n        };\r\n        /**\r\n         * Removes the given circle from the map.\r\n         */\r\n        /**\r\n           * Removes the given circle from the map.\r\n           */\r\n        CircleManager.prototype.removeCircle = /**\r\n           * Removes the given circle from the map.\r\n           */\r\n        function (circle) {\r\n            var _this = this;\r\n            return this._circles.get(circle).then(function (c) {\r\n                c.setMap(null);\r\n                _this._circles.delete(circle);\r\n            });\r\n        };\r\n        CircleManager.prototype.setOptions = function (circle, options) {\r\n            return this._circles.get(circle).then(function (c) { return c.setOptions(options); });\r\n        };\r\n        CircleManager.prototype.getBounds = function (circle) {\r\n            return this._circles.get(circle).then(function (c) { return c.getBounds(); });\r\n        };\r\n        CircleManager.prototype.getCenter = function (circle) {\r\n            return this._circles.get(circle).then(function (c) { return c.getCenter(); });\r\n        };\r\n        CircleManager.prototype.getRadius = function (circle) {\r\n            return this._circles.get(circle).then(function (c) { return c.getRadius(); });\r\n        };\r\n        CircleManager.prototype.setCenter = function (circle) {\r\n            return this._circles.get(circle).then(function (c) { return c.setCenter({ lat: circle.latitude, lng: circle.longitude }); });\r\n        };\r\n        CircleManager.prototype.setEditable = function (circle) {\r\n            return this._circles.get(circle).then(function (c) { return c.setEditable(circle.editable); });\r\n        };\r\n        CircleManager.prototype.setDraggable = function (circle) {\r\n            return this._circles.get(circle).then(function (c) { return c.setDraggable(circle.draggable); });\r\n        };\r\n        CircleManager.prototype.setVisible = function (circle) {\r\n            return this._circles.get(circle).then(function (c) { return c.setVisible(circle.visible); });\r\n        };\r\n        CircleManager.prototype.setRadius = function (circle) {\r\n            return this._circles.get(circle).then(function (c) { return c.setRadius(circle.radius); });\r\n        };\r\n        CircleManager.prototype.createEventObservable = function (eventName, circle) {\r\n            var _this = this;\r\n            return new rxjs.Observable(function (observer) {\r\n                var listener = null;\r\n                _this._circles.get(circle).then(function (c) {\r\n                    listener = c.addListener(eventName, function (e) { return _this._zone.run(function () { return observer.next(e); }); });\r\n                });\r\n                return function () {\r\n                    if (listener !== null) {\r\n                        listener.remove();\r\n                    }\r\n                };\r\n            });\r\n        };\r\n        CircleManager.decorators = [\r\n            { type: core.Injectable },\r\n        ];\r\n        /** @nocollapse */\r\n        CircleManager.ctorParameters = function () { return [\r\n            { type: GoogleMapsAPIWrapper, },\r\n            { type: core.NgZone, },\r\n        ]; };\r\n        return CircleManager;\r\n    }());\r\n\r\n    var RectangleManager = /** @class */ (function () {\r\n        function RectangleManager(_apiWrapper, _zone) {\r\n            this._apiWrapper = _apiWrapper;\r\n            this._zone = _zone;\r\n            this._rectangles = new Map();\r\n        }\r\n        RectangleManager.prototype.addRectangle = function (rectangle) {\r\n            this._rectangles.set(rectangle, this._apiWrapper.createRectangle({\r\n                bounds: {\r\n                    north: rectangle.north,\r\n                    east: rectangle.east,\r\n                    south: rectangle.south,\r\n                    west: rectangle.west\r\n                },\r\n                clickable: rectangle.clickable,\r\n                draggable: rectangle.draggable,\r\n                editable: rectangle.editable,\r\n                fillColor: rectangle.fillColor,\r\n                fillOpacity: rectangle.fillOpacity,\r\n                strokeColor: rectangle.strokeColor,\r\n                strokeOpacity: rectangle.strokeOpacity,\r\n                strokePosition: rectangle.strokePosition,\r\n                strokeWeight: rectangle.strokeWeight,\r\n                visible: rectangle.visible,\r\n                zIndex: rectangle.zIndex\r\n            }));\r\n        };\r\n        /**\r\n         * Removes the given rectangle from the map.\r\n         */\r\n        /**\r\n           * Removes the given rectangle from the map.\r\n           */\r\n        RectangleManager.prototype.removeRectangle = /**\r\n           * Removes the given rectangle from the map.\r\n           */\r\n        function (rectangle) {\r\n            var _this = this;\r\n            return this._rectangles.get(rectangle).then(function (r) {\r\n                r.setMap(null);\r\n                _this._rectangles.delete(rectangle);\r\n            });\r\n        };\r\n        RectangleManager.prototype.setOptions = function (rectangle, options) {\r\n            return this._rectangles.get(rectangle).then(function (r) { return r.setOptions(options); });\r\n        };\r\n        RectangleManager.prototype.getBounds = function (rectangle) {\r\n            return this._rectangles.get(rectangle).then(function (r) { return r.getBounds(); });\r\n        };\r\n        RectangleManager.prototype.setBounds = function (rectangle) {\r\n            return this._rectangles.get(rectangle).then(function (r) {\r\n                return r.setBounds({\r\n                    north: rectangle.north,\r\n                    east: rectangle.east,\r\n                    south: rectangle.south,\r\n                    west: rectangle.west\r\n                });\r\n            });\r\n        };\r\n        RectangleManager.prototype.setEditable = function (rectangle) {\r\n            return this._rectangles.get(rectangle).then(function (r) {\r\n                return r.setEditable(rectangle.editable);\r\n            });\r\n        };\r\n        RectangleManager.prototype.setDraggable = function (rectangle) {\r\n            return this._rectangles.get(rectangle).then(function (r) {\r\n                return r.setDraggable(rectangle.draggable);\r\n            });\r\n        };\r\n        RectangleManager.prototype.setVisible = function (rectangle) {\r\n            return this._rectangles.get(rectangle).then(function (r) {\r\n                return r.setVisible(rectangle.visible);\r\n            });\r\n        };\r\n        RectangleManager.prototype.createEventObservable = function (eventName, rectangle) {\r\n            var _this = this;\r\n            return rxjs.Observable.create(function (observer) {\r\n                var listener = null;\r\n                _this._rectangles.get(rectangle).then(function (r) {\r\n                    listener = r.addListener(eventName, function (e) { return _this._zone.run(function () { return observer.next(e); }); });\r\n                });\r\n                return function () {\r\n                    if (listener !== null) {\r\n                        listener.remove();\r\n                    }\r\n                };\r\n            });\r\n        };\r\n        RectangleManager.decorators = [\r\n            { type: core.Injectable },\r\n        ];\r\n        /** @nocollapse */\r\n        RectangleManager.ctorParameters = function () { return [\r\n            { type: GoogleMapsAPIWrapper, },\r\n            { type: core.NgZone, },\r\n        ]; };\r\n        return RectangleManager;\r\n    }());\r\n\r\n    var MarkerManager = /** @class */ (function () {\r\n        function MarkerManager(_mapsWrapper, _zone) {\r\n            this._mapsWrapper = _mapsWrapper;\r\n            this._zone = _zone;\r\n            this._markers = new Map();\r\n        }\r\n        MarkerManager.prototype.deleteMarker = function (marker) {\r\n            var _this = this;\r\n            var m = this._markers.get(marker);\r\n            if (m == null) {\r\n                // marker already deleted\r\n                return Promise.resolve();\r\n            }\r\n            return m.then(function (m) {\r\n                return _this._zone.run(function () {\r\n                    m.setMap(null);\r\n                    _this._markers.delete(marker);\r\n                });\r\n            });\r\n        };\r\n        MarkerManager.prototype.updateMarkerPosition = function (marker) {\r\n            return this._markers.get(marker).then(function (m) { return m.setPosition({ lat: marker.latitude, lng: marker.longitude }); });\r\n        };\r\n        MarkerManager.prototype.updateTitle = function (marker) {\r\n            return this._markers.get(marker).then(function (m) { return m.setTitle(marker.title); });\r\n        };\r\n        MarkerManager.prototype.updateLabel = function (marker) {\r\n            return this._markers.get(marker).then(function (m) { m.setLabel(marker.label); });\r\n        };\r\n        MarkerManager.prototype.updateDraggable = function (marker) {\r\n            return this._markers.get(marker).then(function (m) { return m.setDraggable(marker.draggable); });\r\n        };\r\n        MarkerManager.prototype.updateIcon = function (marker) {\r\n            return this._markers.get(marker).then(function (m) { return m.setIcon(marker.iconUrl); });\r\n        };\r\n        MarkerManager.prototype.updateOpacity = function (marker) {\r\n            return this._markers.get(marker).then(function (m) { return m.setOpacity(marker.opacity); });\r\n        };\r\n        MarkerManager.prototype.updateVisible = function (marker) {\r\n            return this._markers.get(marker).then(function (m) { return m.setVisible(marker.visible); });\r\n        };\r\n        MarkerManager.prototype.updateZIndex = function (marker) {\r\n            return this._markers.get(marker).then(function (m) { return m.setZIndex(marker.zIndex); });\r\n        };\r\n        MarkerManager.prototype.updateClickable = function (marker) {\r\n            return this._markers.get(marker).then(function (m) { return m.setClickable(marker.clickable); });\r\n        };\r\n        MarkerManager.prototype.updateAnimation = function (marker) {\r\n            return this._markers.get(marker).then(function (m) {\r\n                if (typeof marker.animation === 'string') {\r\n                    m.setAnimation(google.maps.Animation[marker.animation]);\r\n                }\r\n                else {\r\n                    m.setAnimation(marker.animation);\r\n                }\r\n            });\r\n        };\r\n        MarkerManager.prototype.addMarker = function (marker) {\r\n            var markerPromise = this._mapsWrapper.createMarker({\r\n                position: { lat: marker.latitude, lng: marker.longitude },\r\n                label: marker.label,\r\n                draggable: marker.draggable,\r\n                icon: marker.iconUrl,\r\n                opacity: marker.opacity,\r\n                visible: marker.visible,\r\n                zIndex: marker.zIndex,\r\n                title: marker.title,\r\n                clickable: marker.clickable,\r\n                animation: (typeof marker.animation === 'string') ? google.maps.Animation[marker.animation] : marker.animation\r\n            });\r\n            this._markers.set(marker, markerPromise);\r\n        };\r\n        MarkerManager.prototype.getNativeMarker = function (marker) {\r\n            return this._markers.get(marker);\r\n        };\r\n        MarkerManager.prototype.createEventObservable = function (eventName, marker) {\r\n            var _this = this;\r\n            return new rxjs.Observable(function (observer) {\r\n                _this._markers.get(marker).then(function (m) {\r\n                    m.addListener(eventName, function (e) { return _this._zone.run(function () { return observer.next(e); }); });\r\n                });\r\n            });\r\n        };\r\n        MarkerManager.decorators = [\r\n            { type: core.Injectable },\r\n        ];\r\n        /** @nocollapse */\r\n        MarkerManager.ctorParameters = function () { return [\r\n            { type: GoogleMapsAPIWrapper, },\r\n            { type: core.NgZone, },\r\n        ]; };\r\n        return MarkerManager;\r\n    }());\r\n\r\n    var InfoWindowManager = /** @class */ (function () {\r\n        function InfoWindowManager(_mapsWrapper, _zone, _markerManager) {\r\n            this._mapsWrapper = _mapsWrapper;\r\n            this._zone = _zone;\r\n            this._markerManager = _markerManager;\r\n            this._infoWindows = new Map();\r\n        }\r\n        InfoWindowManager.prototype.deleteInfoWindow = function (infoWindow) {\r\n            var _this = this;\r\n            var iWindow = this._infoWindows.get(infoWindow);\r\n            if (iWindow == null) {\r\n                // info window already deleted\r\n                return Promise.resolve();\r\n            }\r\n            return iWindow.then(function (i) {\r\n                return _this._zone.run(function () {\r\n                    i.close();\r\n                    _this._infoWindows.delete(infoWindow);\r\n                });\r\n            });\r\n        };\r\n        InfoWindowManager.prototype.setPosition = function (infoWindow) {\r\n            return this._infoWindows.get(infoWindow).then(function (i) {\r\n                return i.setPosition({\r\n                    lat: infoWindow.latitude,\r\n                    lng: infoWindow.longitude\r\n                });\r\n            });\r\n        };\r\n        InfoWindowManager.prototype.setZIndex = function (infoWindow) {\r\n            return this._infoWindows.get(infoWindow)\r\n                .then(function (i) { return i.setZIndex(infoWindow.zIndex); });\r\n        };\r\n        InfoWindowManager.prototype.open = function (infoWindow) {\r\n            var _this = this;\r\n            return this._infoWindows.get(infoWindow).then(function (w) {\r\n                if (infoWindow.hostMarker != null) {\r\n                    return _this._markerManager.getNativeMarker(infoWindow.hostMarker).then(function (marker) {\r\n                        return _this._mapsWrapper.getNativeMap().then(function (map) { return w.open(map, marker); });\r\n                    });\r\n                }\r\n                return _this._mapsWrapper.getNativeMap().then(function (map) { return w.open(map); });\r\n            });\r\n        };\r\n        InfoWindowManager.prototype.close = function (infoWindow) {\r\n            return this._infoWindows.get(infoWindow).then(function (w) { return w.close(); });\r\n        };\r\n        InfoWindowManager.prototype.setOptions = function (infoWindow, options) {\r\n            return this._infoWindows.get(infoWindow).then(function (i) { return i.setOptions(options); });\r\n        };\r\n        InfoWindowManager.prototype.addInfoWindow = function (infoWindow) {\r\n            var options = {\r\n                content: infoWindow.content,\r\n                maxWidth: infoWindow.maxWidth,\r\n                zIndex: infoWindow.zIndex,\r\n                disableAutoPan: infoWindow.disableAutoPan\r\n            };\r\n            if (typeof infoWindow.latitude === 'number' && typeof infoWindow.longitude === 'number') {\r\n                options.position = { lat: infoWindow.latitude, lng: infoWindow.longitude };\r\n            }\r\n            var infoWindowPromise = this._mapsWrapper.createInfoWindow(options);\r\n            this._infoWindows.set(infoWindow, infoWindowPromise);\r\n        };\r\n        /**\r\n         * Creates a Google Maps event listener for the given InfoWindow as an Observable\r\n         */\r\n        /**\r\n            * Creates a Google Maps event listener for the given InfoWindow as an Observable\r\n            */\r\n        InfoWindowManager.prototype.createEventObservable = /**\r\n            * Creates a Google Maps event listener for the given InfoWindow as an Observable\r\n            */\r\n        function (eventName, infoWindow) {\r\n            var _this = this;\r\n            return new rxjs.Observable(function (observer) {\r\n                _this._infoWindows.get(infoWindow).then(function (i) {\r\n                    i.addListener(eventName, function (e) { return _this._zone.run(function () { return observer.next(e); }); });\r\n                });\r\n            });\r\n        };\r\n        InfoWindowManager.decorators = [\r\n            { type: core.Injectable },\r\n        ];\r\n        /** @nocollapse */\r\n        InfoWindowManager.ctorParameters = function () { return [\r\n            { type: GoogleMapsAPIWrapper, },\r\n            { type: core.NgZone, },\r\n            { type: MarkerManager, },\r\n        ]; };\r\n        return InfoWindowManager;\r\n    }());\r\n\r\n    var PolygonManager = /** @class */ (function () {\r\n        function PolygonManager(_mapsWrapper, _zone) {\r\n            this._mapsWrapper = _mapsWrapper;\r\n            this._zone = _zone;\r\n            this._polygons = new Map();\r\n        }\r\n        PolygonManager.prototype.addPolygon = function (path) {\r\n            var polygonPromise = this._mapsWrapper.createPolygon({\r\n                clickable: path.clickable,\r\n                draggable: path.draggable,\r\n                editable: path.editable,\r\n                fillColor: path.fillColor,\r\n                fillOpacity: path.fillOpacity,\r\n                geodesic: path.geodesic,\r\n                paths: path.paths,\r\n                strokeColor: path.strokeColor,\r\n                strokeOpacity: path.strokeOpacity,\r\n                strokeWeight: path.strokeWeight,\r\n                visible: path.visible,\r\n                zIndex: path.zIndex,\r\n            });\r\n            this._polygons.set(path, polygonPromise);\r\n        };\r\n        PolygonManager.prototype.updatePolygon = function (polygon) {\r\n            var _this = this;\r\n            var m = this._polygons.get(polygon);\r\n            if (m == null) {\r\n                return Promise.resolve();\r\n            }\r\n            return m.then(function (l) { return _this._zone.run(function () { l.setPaths(polygon.paths); }); });\r\n        };\r\n        PolygonManager.prototype.setPolygonOptions = function (path, options) {\r\n            return this._polygons.get(path).then(function (l) { l.setOptions(options); });\r\n        };\r\n        PolygonManager.prototype.deletePolygon = function (paths) {\r\n            var _this = this;\r\n            var m = this._polygons.get(paths);\r\n            if (m == null) {\r\n                return Promise.resolve();\r\n            }\r\n            return m.then(function (l) {\r\n                return _this._zone.run(function () {\r\n                    l.setMap(null);\r\n                    _this._polygons.delete(paths);\r\n                });\r\n            });\r\n        };\r\n        PolygonManager.prototype.createEventObservable = function (eventName, path) {\r\n            var _this = this;\r\n            return new rxjs.Observable(function (observer) {\r\n                _this._polygons.get(path).then(function (l) {\r\n                    l.addListener(eventName, function (e) { return _this._zone.run(function () { return observer.next(e); }); });\r\n                });\r\n            });\r\n        };\r\n        PolygonManager.decorators = [\r\n            { type: core.Injectable },\r\n        ];\r\n        /** @nocollapse */\r\n        PolygonManager.ctorParameters = function () { return [\r\n            { type: GoogleMapsAPIWrapper, },\r\n            { type: core.NgZone, },\r\n        ]; };\r\n        return PolygonManager;\r\n    }());\r\n\r\n    var PolylineManager = /** @class */ (function () {\r\n        function PolylineManager(_mapsWrapper, _zone) {\r\n            this._mapsWrapper = _mapsWrapper;\r\n            this._zone = _zone;\r\n            this._polylines = new Map();\r\n        }\r\n        PolylineManager._convertPoints = function (line) {\r\n            var path = line._getPoints().map(function (point) {\r\n                return { lat: point.latitude, lng: point.longitude };\r\n            });\r\n            return path;\r\n        };\r\n        PolylineManager.prototype.addPolyline = function (line) {\r\n            var path = PolylineManager._convertPoints(line);\r\n            var polylinePromise = this._mapsWrapper.createPolyline({\r\n                clickable: line.clickable,\r\n                draggable: line.draggable,\r\n                editable: line.editable,\r\n                geodesic: line.geodesic,\r\n                strokeColor: line.strokeColor,\r\n                strokeOpacity: line.strokeOpacity,\r\n                strokeWeight: line.strokeWeight,\r\n                visible: line.visible,\r\n                zIndex: line.zIndex,\r\n                path: path\r\n            });\r\n            this._polylines.set(line, polylinePromise);\r\n        };\r\n        PolylineManager.prototype.updatePolylinePoints = function (line) {\r\n            var _this = this;\r\n            var path = PolylineManager._convertPoints(line);\r\n            var m = this._polylines.get(line);\r\n            if (m == null) {\r\n                return Promise.resolve();\r\n            }\r\n            return m.then(function (l) { return _this._zone.run(function () { l.setPath(path); }); });\r\n        };\r\n        PolylineManager.prototype.setPolylineOptions = function (line, options) {\r\n            return this._polylines.get(line).then(function (l) { l.setOptions(options); });\r\n        };\r\n        PolylineManager.prototype.deletePolyline = function (line) {\r\n            var _this = this;\r\n            var m = this._polylines.get(line);\r\n            if (m == null) {\r\n                return Promise.resolve();\r\n            }\r\n            return m.then(function (l) {\r\n                return _this._zone.run(function () {\r\n                    l.setMap(null);\r\n                    _this._polylines.delete(line);\r\n                });\r\n            });\r\n        };\r\n        PolylineManager.prototype.createEventObservable = function (eventName, line) {\r\n            var _this = this;\r\n            return new rxjs.Observable(function (observer) {\r\n                _this._polylines.get(line).then(function (l) {\r\n                    l.addListener(eventName, function (e) { return _this._zone.run(function () { return observer.next(e); }); });\r\n                });\r\n            });\r\n        };\r\n        PolylineManager.decorators = [\r\n            { type: core.Injectable },\r\n        ];\r\n        /** @nocollapse */\r\n        PolylineManager.ctorParameters = function () { return [\r\n            { type: GoogleMapsAPIWrapper, },\r\n            { type: core.NgZone, },\r\n        ]; };\r\n        return PolylineManager;\r\n    }());\r\n\r\n    /**\r\n     * Manages all KML Layers for a Google Map instance.\r\n     */\r\n    var KmlLayerManager = /** @class */ (function () {\r\n        function KmlLayerManager(_wrapper, _zone) {\r\n            this._wrapper = _wrapper;\r\n            this._zone = _zone;\r\n            this._layers = new Map();\r\n        }\r\n        /**\r\n         * Adds a new KML Layer to the map.\r\n         */\r\n        /**\r\n           * Adds a new KML Layer to the map.\r\n           */\r\n        KmlLayerManager.prototype.addKmlLayer = /**\r\n           * Adds a new KML Layer to the map.\r\n           */\r\n        function (layer) {\r\n            var newLayer = this._wrapper.getNativeMap().then(function (m) {\r\n                return new google.maps.KmlLayer({\r\n                    clickable: layer.clickable,\r\n                    map: m,\r\n                    preserveViewport: layer.preserveViewport,\r\n                    screenOverlays: layer.screenOverlays,\r\n                    suppressInfoWindows: layer.suppressInfoWindows,\r\n                    url: layer.url,\r\n                    zIndex: layer.zIndex\r\n                });\r\n            });\r\n            this._layers.set(layer, newLayer);\r\n        };\r\n        KmlLayerManager.prototype.setOptions = function (layer, options) {\r\n            this._layers.get(layer).then(function (l) { return l.setOptions(options); });\r\n        };\r\n        KmlLayerManager.prototype.deleteKmlLayer = function (layer) {\r\n            var _this = this;\r\n            this._layers.get(layer).then(function (l) {\r\n                l.setMap(null);\r\n                _this._layers.delete(layer);\r\n            });\r\n        };\r\n        /**\r\n         * Creates a Google Maps event listener for the given KmlLayer as an Observable\r\n         */\r\n        /**\r\n           * Creates a Google Maps event listener for the given KmlLayer as an Observable\r\n           */\r\n        KmlLayerManager.prototype.createEventObservable = /**\r\n           * Creates a Google Maps event listener for the given KmlLayer as an Observable\r\n           */\r\n        function (eventName, layer) {\r\n            var _this = this;\r\n            return new rxjs.Observable(function (observer) {\r\n                _this._layers.get(layer).then(function (m) {\r\n                    m.addListener(eventName, function (e) { return _this._zone.run(function () { return observer.next(e); }); });\r\n                });\r\n            });\r\n        };\r\n        KmlLayerManager.decorators = [\r\n            { type: core.Injectable },\r\n        ];\r\n        /** @nocollapse */\r\n        KmlLayerManager.ctorParameters = function () { return [\r\n            { type: GoogleMapsAPIWrapper, },\r\n            { type: core.NgZone, },\r\n        ]; };\r\n        return KmlLayerManager;\r\n    }());\r\n\r\n    /**\r\n     * Manages all Data Layers for a Google Map instance.\r\n     */\r\n    var DataLayerManager = /** @class */ (function () {\r\n        function DataLayerManager(_wrapper, _zone) {\r\n            this._wrapper = _wrapper;\r\n            this._zone = _zone;\r\n            this._layers = new Map();\r\n        }\r\n        /**\r\n         * Adds a new Data Layer to the map.\r\n         */\r\n        /**\r\n           * Adds a new Data Layer to the map.\r\n           */\r\n        DataLayerManager.prototype.addDataLayer = /**\r\n           * Adds a new Data Layer to the map.\r\n           */\r\n        function (layer) {\r\n            var _this = this;\r\n            var newLayer = this._wrapper.createDataLayer({\r\n                style: layer.style\r\n            })\r\n                .then(function (d) {\r\n                if (layer.geoJson) {\r\n                    _this.getDataFeatures(d, layer.geoJson).then(function (features) { return d.features = features; });\r\n                }\r\n                return d;\r\n            });\r\n            this._layers.set(layer, newLayer);\r\n        };\r\n        DataLayerManager.prototype.deleteDataLayer = function (layer) {\r\n            var _this = this;\r\n            this._layers.get(layer).then(function (l) {\r\n                l.setMap(null);\r\n                _this._layers.delete(layer);\r\n            });\r\n        };\r\n        DataLayerManager.prototype.updateGeoJson = function (layer, geoJson) {\r\n            var _this = this;\r\n            this._layers.get(layer).then(function (l) {\r\n                l.forEach(function (feature) {\r\n                    l.remove(feature);\r\n                    var index = l.features.indexOf(feature, 0);\r\n                    if (index > -1) {\r\n                        l.features.splice(index, 1);\r\n                    }\r\n                });\r\n                _this.getDataFeatures(l, geoJson).then(function (features) { return l.features = features; });\r\n            });\r\n        };\r\n        DataLayerManager.prototype.setDataOptions = function (layer, options) {\r\n            this._layers.get(layer).then(function (l) {\r\n                l.setControlPosition(options.controlPosition);\r\n                l.setControls(options.controls);\r\n                l.setDrawingMode(options.drawingMode);\r\n                l.setStyle(options.style);\r\n            });\r\n        };\r\n        /**\r\n         * Creates a Google Maps event listener for the given DataLayer as an Observable\r\n         */\r\n        /**\r\n           * Creates a Google Maps event listener for the given DataLayer as an Observable\r\n           */\r\n        DataLayerManager.prototype.createEventObservable = /**\r\n           * Creates a Google Maps event listener for the given DataLayer as an Observable\r\n           */\r\n        function (eventName, layer) {\r\n            var _this = this;\r\n            return new rxjs.Observable(function (observer) {\r\n                _this._layers.get(layer).then(function (d) {\r\n                    d.addListener(eventName, function (e) { return _this._zone.run(function () { return observer.next(e); }); });\r\n                });\r\n            });\r\n        };\r\n        /**\r\n         * Extract features from a geoJson using google.maps Data Class\r\n         * @param d : google.maps.Data class instance\r\n         * @param geoJson : url or geojson object\r\n         */\r\n        /**\r\n           * Extract features from a geoJson using google.maps Data Class\r\n           * @param d : google.maps.Data class instance\r\n           * @param geoJson : url or geojson object\r\n           */\r\n        DataLayerManager.prototype.getDataFeatures = /**\r\n           * Extract features from a geoJson using google.maps Data Class\r\n           * @param d : google.maps.Data class instance\r\n           * @param geoJson : url or geojson object\r\n           */\r\n        function (d, geoJson) {\r\n            return new Promise(function (resolve, reject) {\r\n                if (typeof geoJson === 'object') {\r\n                    try {\r\n                        var features = d.addGeoJson(geoJson);\r\n                        resolve(features);\r\n                    }\r\n                    catch (e) {\r\n                        reject(e);\r\n                    }\r\n                }\r\n                else if (typeof geoJson === 'string') {\r\n                    d.loadGeoJson(geoJson, null, resolve);\r\n                }\r\n                else {\r\n                    reject(\"Impossible to extract features from geoJson: wrong argument type\");\r\n                }\r\n            });\r\n        };\r\n        DataLayerManager.decorators = [\r\n            { type: core.Injectable },\r\n        ];\r\n        /** @nocollapse */\r\n        DataLayerManager.ctorParameters = function () { return [\r\n            { type: GoogleMapsAPIWrapper, },\r\n            { type: core.NgZone, },\r\n        ]; };\r\n        return DataLayerManager;\r\n    }());\r\n\r\n    /**\r\n     * Class to implement when you what to be able to make it work with the auto fit bounds feature\r\n     * of AGM.\r\n     */\r\n    var /**\r\n     * Class to implement when you what to be able to make it work with the auto fit bounds feature\r\n     * of AGM.\r\n     */\r\n    FitBoundsAccessor = /** @class */ (function () {\r\n        function FitBoundsAccessor() {\r\n        }\r\n        return FitBoundsAccessor;\r\n    }());\r\n    /**\r\n     * The FitBoundsService is responsible for computing the bounds of the a single map.\r\n     */\r\n    var FitBoundsService = /** @class */ (function () {\r\n        function FitBoundsService(loader) {\r\n            var _this = this;\r\n            this._boundsChangeSampleTime$ = new rxjs.BehaviorSubject(200);\r\n            this._includeInBounds$ = new rxjs.BehaviorSubject(new Map());\r\n            this.bounds$ = rxjs.from(loader.load()).pipe(operators.flatMap(function () { return _this._includeInBounds$; }), operators.sample(this._boundsChangeSampleTime$.pipe(operators.switchMap(function (time) { return rxjs.timer(0, time); }))), operators.map(function (includeInBounds) { return _this._generateBounds(includeInBounds); }), operators.shareReplay(1));\r\n        }\r\n        FitBoundsService.prototype._generateBounds = function (includeInBounds) {\r\n            var bounds = new google.maps.LatLngBounds();\r\n            includeInBounds.forEach(function (b) { return bounds.extend(b); });\r\n            return bounds;\r\n        };\r\n        FitBoundsService.prototype.addToBounds = function (latLng) {\r\n            var id = this._createIdentifier(latLng);\r\n            if (this._includeInBounds$.value.has(id)) {\r\n                return;\r\n            }\r\n            var map = this._includeInBounds$.value;\r\n            map.set(id, latLng);\r\n            this._includeInBounds$.next(map);\r\n        };\r\n        FitBoundsService.prototype.removeFromBounds = function (latLng) {\r\n            var map = this._includeInBounds$.value;\r\n            map.delete(this._createIdentifier(latLng));\r\n            this._includeInBounds$.next(map);\r\n        };\r\n        FitBoundsService.prototype.changeFitBoundsChangeSampleTime = function (timeMs) {\r\n            this._boundsChangeSampleTime$.next(timeMs);\r\n        };\r\n        FitBoundsService.prototype.getBounds$ = function () {\r\n            return this.bounds$;\r\n        };\r\n        FitBoundsService.prototype._createIdentifier = function (latLng) {\r\n            return latLng.lat + \"+\" + latLng.lng;\r\n        };\r\n        FitBoundsService.decorators = [\r\n            { type: core.Injectable },\r\n        ];\r\n        /** @nocollapse */\r\n        FitBoundsService.ctorParameters = function () { return [\r\n            { type: MapsAPILoader, },\r\n        ]; };\r\n        return FitBoundsService;\r\n    }());\r\n\r\n    /**\r\n     * AgmMap renders a Google Map.\r\n     * **Important note**: To be able see a map in the browser, you have to define a height for the\r\n     * element `agm-map`.\r\n     *\r\n     * ### Example\r\n     * ```typescript\r\n     * import { Component } from '@angular/core';\r\n     *\r\n     * @Component({\r\n     *  selector: 'my-map-cmp',\r\n     *  styles: [`\r\n     *    agm-map {\r\n     *      height: 300px;\r\n     *    }\r\n     * `],\r\n     *  template: `\r\n     *    <agm-map [latitude]=\"lat\" [longitude]=\"lng\" [zoom]=\"zoom\">\r\n     *    </agm-map>\r\n     *  `\r\n     * })\r\n     * ```\r\n     */\r\n    var AgmMap = /** @class */ (function () {\r\n        function AgmMap(_elem, _mapsWrapper, _fitBoundsService) {\r\n            this._elem = _elem;\r\n            this._mapsWrapper = _mapsWrapper;\r\n            this._fitBoundsService = _fitBoundsService;\r\n            /**\r\n               * The longitude that defines the center of the map.\r\n               */\r\n            this.longitude = 0;\r\n            /**\r\n               * The latitude that defines the center of the map.\r\n               */\r\n            this.latitude = 0;\r\n            /**\r\n               * The zoom level of the map. The default zoom level is 8.\r\n               */\r\n            this.zoom = 8;\r\n            /**\r\n               * Enables/disables if map is draggable.\r\n               */\r\n            // tslint:disable-next-line:no-input-rename\r\n            this.draggable = true;\r\n            /**\r\n               * Enables/disables zoom and center on double click. Enabled by default.\r\n               */\r\n            this.disableDoubleClickZoom = false;\r\n            /**\r\n               * Enables/disables all default UI of the Google map. Please note: When the map is created, this\r\n               * value cannot get updated.\r\n               */\r\n            this.disableDefaultUI = false;\r\n            /**\r\n               * If false, disables scrollwheel zooming on the map. The scrollwheel is enabled by default.\r\n               */\r\n            this.scrollwheel = true;\r\n            /**\r\n               * If false, prevents the map from being controlled by the keyboard. Keyboard shortcuts are\r\n               * enabled by default.\r\n               */\r\n            this.keyboardShortcuts = true;\r\n            /**\r\n               * The enabled/disabled state of the Zoom control.\r\n               */\r\n            this.zoomControl = true;\r\n            /**\r\n               * Styles to apply to each of the default map types. Note that for Satellite/Hybrid and Terrain\r\n               * modes, these styles will only apply to labels and geometry.\r\n               */\r\n            this.styles = [];\r\n            /**\r\n               * When true and the latitude and/or longitude values changes, the Google Maps panTo method is\r\n               * used to\r\n               * center the map. See: https://developers.google.com/maps/documentation/javascript/reference#Map\r\n               */\r\n            this.usePanning = false;\r\n            /**\r\n               * The initial enabled/disabled state of the Street View Pegman control.\r\n               * This control is part of the default UI, and should be set to false when displaying a map type\r\n               * on which the Street View road overlay should not appear (e.g. a non-Earth map type).\r\n               */\r\n            this.streetViewControl = true;\r\n            /**\r\n               * Sets the viewport to contain the given bounds.\r\n               * If this option to `true`, the bounds get automatically computed from all elements that use the {@link AgmFitBounds} directive.\r\n               */\r\n            this.fitBounds = false;\r\n            /**\r\n               * The initial enabled/disabled state of the Scale control. This is disabled by default.\r\n               */\r\n            this.scaleControl = false;\r\n            /**\r\n               * The initial enabled/disabled state of the Map type control.\r\n               */\r\n            this.mapTypeControl = false;\r\n            /**\r\n               * The initial enabled/disabled state of the Pan control.\r\n               */\r\n            this.panControl = false;\r\n            /**\r\n               * The initial enabled/disabled state of the Rotate control.\r\n               */\r\n            this.rotateControl = false;\r\n            /**\r\n               * The initial enabled/disabled state of the Fullscreen control.\r\n               */\r\n            this.fullscreenControl = false;\r\n            /**\r\n               * The map mapTypeId. Defaults to 'roadmap'.\r\n               */\r\n            this.mapTypeId = 'roadmap';\r\n            /**\r\n               * When false, map icons are not clickable. A map icon represents a point of interest,\r\n               * also known as a POI. By default map icons are clickable.\r\n               */\r\n            this.clickableIcons = true;\r\n            /**\r\n               * This setting controls how gestures on the map are handled.\r\n               * Allowed values:\r\n               * - 'cooperative' (Two-finger touch gestures pan and zoom the map. One-finger touch gestures are not handled by the map.)\r\n               * - 'greedy'      (All touch gestures pan or zoom the map.)\r\n               * - 'none'        (The map cannot be panned or zoomed by user gestures.)\r\n               * - 'auto'        [default] (Gesture handling is either cooperative or greedy, depending on whether the page is scrollable or not.\r\n               */\r\n            this.gestureHandling = 'auto';\r\n            this._observableSubscriptions = [];\r\n            /**\r\n               * This event emitter gets emitted when the user clicks on the map (but not when they click on a\r\n               * marker or infoWindow).\r\n               */\r\n            this.mapClick = new core.EventEmitter();\r\n            /**\r\n               * This event emitter gets emitted when the user right-clicks on the map (but not when they click\r\n               * on a marker or infoWindow).\r\n               */\r\n            this.mapRightClick = new core.EventEmitter();\r\n            /**\r\n               * This event emitter gets emitted when the user double-clicks on the map (but not when they click\r\n               * on a marker or infoWindow).\r\n               */\r\n            this.mapDblClick = new core.EventEmitter();\r\n            /**\r\n               * This event emitter is fired when the map center changes.\r\n               */\r\n            this.centerChange = new core.EventEmitter();\r\n            /**\r\n               * This event is fired when the viewport bounds have changed.\r\n               */\r\n            this.boundsChange = new core.EventEmitter();\r\n            /**\r\n               * This event is fired when the mapTypeId property changes.\r\n               */\r\n            this.mapTypeIdChange = new core.EventEmitter();\r\n            /**\r\n               * This event is fired when the map becomes idle after panning or zooming.\r\n               */\r\n            this.idle = new core.EventEmitter();\r\n            /**\r\n               * This event is fired when the zoom level has changed.\r\n               */\r\n            this.zoomChange = new core.EventEmitter();\r\n            /**\r\n               * This event is fired when the google map is fully initialized.\r\n               * You get the google.maps.Map instance as a result of this EventEmitter.\r\n               */\r\n            this.mapReady = new core.EventEmitter();\r\n        }\r\n        /** @internal */\r\n        /** @internal */\r\n        AgmMap.prototype.ngOnInit = /** @internal */\r\n        function () {\r\n            // todo: this should be solved with a new component and a viewChild decorator\r\n            var container = this._elem.nativeElement.querySelector('.agm-map-container-inner');\r\n            this._initMapInstance(container);\r\n        };\r\n        AgmMap.prototype._initMapInstance = function (el) {\r\n            var _this = this;\r\n            this._mapsWrapper.createMap(el, {\r\n                center: { lat: this.latitude || 0, lng: this.longitude || 0 },\r\n                zoom: this.zoom,\r\n                minZoom: this.minZoom,\r\n                maxZoom: this.maxZoom,\r\n                disableDefaultUI: this.disableDefaultUI,\r\n                disableDoubleClickZoom: this.disableDoubleClickZoom,\r\n                scrollwheel: this.scrollwheel,\r\n                backgroundColor: this.backgroundColor,\r\n                draggable: this.draggable,\r\n                draggableCursor: this.draggableCursor,\r\n                draggingCursor: this.draggingCursor,\r\n                keyboardShortcuts: this.keyboardShortcuts,\r\n                styles: this.styles,\r\n                zoomControl: this.zoomControl,\r\n                zoomControlOptions: this.zoomControlOptions,\r\n                streetViewControl: this.streetViewControl,\r\n                streetViewControlOptions: this.streetViewControlOptions,\r\n                scaleControl: this.scaleControl,\r\n                scaleControlOptions: this.scaleControlOptions,\r\n                mapTypeControl: this.mapTypeControl,\r\n                mapTypeControlOptions: this.mapTypeControlOptions,\r\n                panControl: this.panControl,\r\n                panControlOptions: this.panControlOptions,\r\n                rotateControl: this.rotateControl,\r\n                rotateControlOptions: this.rotateControlOptions,\r\n                fullscreenControl: this.fullscreenControl,\r\n                fullscreenControlOptions: this.fullscreenControlOptions,\r\n                mapTypeId: this.mapTypeId,\r\n                clickableIcons: this.clickableIcons,\r\n                gestureHandling: this.gestureHandling\r\n            })\r\n                .then(function () { return _this._mapsWrapper.getNativeMap(); })\r\n                .then(function (map) { return _this.mapReady.emit(map); });\r\n            // register event listeners\r\n            this._handleMapCenterChange();\r\n            this._handleMapZoomChange();\r\n            this._handleMapMouseEvents();\r\n            this._handleBoundsChange();\r\n            this._handleMapTypeIdChange();\r\n            this._handleIdleEvent();\r\n        };\r\n        /** @internal */\r\n        /** @internal */\r\n        AgmMap.prototype.ngOnDestroy = /** @internal */\r\n        function () {\r\n            // unsubscribe all registered observable subscriptions\r\n            this._observableSubscriptions.forEach(function (s) { return s.unsubscribe(); });\r\n            // remove all listeners from the map instance\r\n            this._mapsWrapper.clearInstanceListeners();\r\n            if (this._fitBoundsSubscription) {\r\n                this._fitBoundsSubscription.unsubscribe();\r\n            }\r\n        };\r\n        /* @internal */\r\n        /* @internal */\r\n        AgmMap.prototype.ngOnChanges = /* @internal */\r\n        function (changes) {\r\n            this._updateMapOptionsChanges(changes);\r\n            this._updatePosition(changes);\r\n        };\r\n        AgmMap.prototype._updateMapOptionsChanges = function (changes) {\r\n            var options = {};\r\n            var optionKeys = Object.keys(changes).filter(function (k) { return AgmMap._mapOptionsAttributes.indexOf(k) !== -1; });\r\n            optionKeys.forEach(function (k) { options[k] = changes[k].currentValue; });\r\n            this._mapsWrapper.setMapOptions(options);\r\n        };\r\n        /**\r\n         * Triggers a resize event on the google map instance.\r\n         * When recenter is true, the of the google map gets called with the current lat/lng values or fitBounds value to recenter the map.\r\n         * Returns a promise that gets resolved after the event was triggered.\r\n         */\r\n        /**\r\n           * Triggers a resize event on the google map instance.\r\n           * When recenter is true, the of the google map gets called with the current lat/lng values or fitBounds value to recenter the map.\r\n           * Returns a promise that gets resolved after the event was triggered.\r\n           */\r\n        AgmMap.prototype.triggerResize = /**\r\n           * Triggers a resize event on the google map instance.\r\n           * When recenter is true, the of the google map gets called with the current lat/lng values or fitBounds value to recenter the map.\r\n           * Returns a promise that gets resolved after the event was triggered.\r\n           */\r\n        function (recenter) {\r\n            var _this = this;\r\n            if (recenter === void 0) { recenter = true; }\r\n            // Note: When we would trigger the resize event and show the map in the same turn (which is a\r\n            // common case for triggering a resize event), then the resize event would not\r\n            // work (to show the map), so we trigger the event in a timeout.\r\n            return new Promise(function (resolve) {\r\n                setTimeout(function () {\r\n                    return _this._mapsWrapper.triggerMapEvent('resize').then(function () {\r\n                        if (recenter) {\r\n                            _this.fitBounds != null ? _this._fitBounds() : _this._setCenter();\r\n                        }\r\n                        resolve();\r\n                    });\r\n                });\r\n            });\r\n        };\r\n        AgmMap.prototype._updatePosition = function (changes) {\r\n            if (changes['latitude'] == null && changes['longitude'] == null &&\r\n                !changes['fitBounds']) {\r\n                // no position update needed\r\n                return;\r\n            }\r\n            // we prefer fitBounds in changes\r\n            if ('fitBounds' in changes) {\r\n                this._fitBounds();\r\n                return;\r\n            }\r\n            if (typeof this.latitude !== 'number' || typeof this.longitude !== 'number') {\r\n                return;\r\n            }\r\n            this._setCenter();\r\n        };\r\n        AgmMap.prototype._setCenter = function () {\r\n            var newCenter = {\r\n                lat: this.latitude,\r\n                lng: this.longitude,\r\n            };\r\n            if (this.usePanning) {\r\n                this._mapsWrapper.panTo(newCenter);\r\n            }\r\n            else {\r\n                this._mapsWrapper.setCenter(newCenter);\r\n            }\r\n        };\r\n        AgmMap.prototype._fitBounds = function () {\r\n            switch (this.fitBounds) {\r\n                case true:\r\n                    this._subscribeToFitBoundsUpdates();\r\n                    break;\r\n                case false:\r\n                    if (this._fitBoundsSubscription) {\r\n                        this._fitBoundsSubscription.unsubscribe();\r\n                    }\r\n                    break;\r\n                default:\r\n                    this._updateBounds(this.fitBounds);\r\n            }\r\n        };\r\n        AgmMap.prototype._subscribeToFitBoundsUpdates = function () {\r\n            var _this = this;\r\n            this._fitBoundsSubscription = this._fitBoundsService.getBounds$().subscribe(function (b) { return _this._updateBounds(b); });\r\n        };\r\n        AgmMap.prototype._updateBounds = function (bounds) {\r\n            if (this._isLatLngBoundsLiteral(bounds) && google && google.maps) {\r\n                var newBounds = google.maps.LatLngBounds();\r\n                newBounds.union(bounds);\r\n                bounds = newBounds;\r\n            }\r\n            if (this.usePanning) {\r\n                this._mapsWrapper.panToBounds(bounds);\r\n                return;\r\n            }\r\n            this._mapsWrapper.fitBounds(bounds);\r\n        };\r\n        AgmMap.prototype._isLatLngBoundsLiteral = function (bounds) {\r\n            return bounds != null && bounds.extend === undefined;\r\n        };\r\n        AgmMap.prototype._handleMapCenterChange = function () {\r\n            var _this = this;\r\n            var s = this._mapsWrapper.subscribeToMapEvent('center_changed').subscribe(function () {\r\n                _this._mapsWrapper.getCenter().then(function (center) {\r\n                    _this.latitude = center.lat();\r\n                    _this.longitude = center.lng();\r\n                    _this.centerChange.emit({ lat: _this.latitude, lng: _this.longitude });\r\n                });\r\n            });\r\n            this._observableSubscriptions.push(s);\r\n        };\r\n        AgmMap.prototype._handleBoundsChange = function () {\r\n            var _this = this;\r\n            var s = this._mapsWrapper.subscribeToMapEvent('bounds_changed').subscribe(function () {\r\n                _this._mapsWrapper.getBounds().then(function (bounds) { _this.boundsChange.emit(bounds); });\r\n            });\r\n            this._observableSubscriptions.push(s);\r\n        };\r\n        AgmMap.prototype._handleMapTypeIdChange = function () {\r\n            var _this = this;\r\n            var s = this._mapsWrapper.subscribeToMapEvent('maptypeid_changed').subscribe(function () {\r\n                _this._mapsWrapper.getMapTypeId().then(function (mapTypeId) { _this.mapTypeIdChange.emit(mapTypeId); });\r\n            });\r\n            this._observableSubscriptions.push(s);\r\n        };\r\n        AgmMap.prototype._handleMapZoomChange = function () {\r\n            var _this = this;\r\n            var s = this._mapsWrapper.subscribeToMapEvent('zoom_changed').subscribe(function () {\r\n                _this._mapsWrapper.getZoom().then(function (z) {\r\n                    _this.zoom = z;\r\n                    _this.zoomChange.emit(z);\r\n                });\r\n            });\r\n            this._observableSubscriptions.push(s);\r\n        };\r\n        AgmMap.prototype._handleIdleEvent = function () {\r\n            var _this = this;\r\n            var s = this._mapsWrapper.subscribeToMapEvent('idle').subscribe(function () { _this.idle.emit(void 0); });\r\n            this._observableSubscriptions.push(s);\r\n        };\r\n        AgmMap.prototype._handleMapMouseEvents = function () {\r\n            var _this = this;\r\n            var events = [\r\n                { name: 'click', emitter: this.mapClick },\r\n                { name: 'rightclick', emitter: this.mapRightClick },\r\n                { name: 'dblclick', emitter: this.mapDblClick },\r\n            ];\r\n            events.forEach(function (e) {\r\n                var s = _this._mapsWrapper.subscribeToMapEvent(e.name).subscribe(function (event) {\r\n                    var value = { coords: { lat: event.latLng.lat(), lng: event.latLng.lng() } };\r\n                    e.emitter.emit(value);\r\n                });\r\n                _this._observableSubscriptions.push(s);\r\n            });\r\n        };\r\n        /**\r\n           * Map option attributes that can change over time\r\n           */\r\n        AgmMap._mapOptionsAttributes = [\r\n            'disableDoubleClickZoom', 'scrollwheel', 'draggable', 'draggableCursor', 'draggingCursor',\r\n            'keyboardShortcuts', 'zoomControl', 'zoomControlOptions', 'styles', 'streetViewControl',\r\n            'streetViewControlOptions', 'zoom', 'mapTypeControl', 'mapTypeControlOptions', 'minZoom',\r\n            'maxZoom', 'panControl', 'panControlOptions', 'rotateControl', 'rotateControlOptions',\r\n            'fullscreenControl', 'fullscreenControlOptions', 'scaleControl', 'scaleControlOptions',\r\n            'mapTypeId', 'clickableIcons', 'gestureHandling'\r\n        ];\r\n        AgmMap.decorators = [\r\n            { type: core.Component, args: [{\r\n                        selector: 'agm-map',\r\n                        providers: [\r\n                            GoogleMapsAPIWrapper, MarkerManager, InfoWindowManager, CircleManager, RectangleManager,\r\n                            PolylineManager, PolygonManager, KmlLayerManager, DataLayerManager, DataLayerManager,\r\n                            FitBoundsService\r\n                        ],\r\n                        host: {\r\n                            // todo: deprecated - we will remove it with the next version\r\n                            '[class.sebm-google-map-container]': 'true'\r\n                        },\r\n                        styles: [\"\\n    .agm-map-container-inner {\\n      width: inherit;\\n      height: inherit;\\n    }\\n    .agm-map-content {\\n      display:none;\\n    }\\n  \"],\r\n                        template: \"\\n    <div class='agm-map-container-inner sebm-google-map-container-inner'></div>\\n    <div class='agm-map-content'>\\n      <ng-content></ng-content>\\n    </div>\\n  \"\r\n                    },] },\r\n        ];\r\n        /** @nocollapse */\r\n        AgmMap.ctorParameters = function () { return [\r\n            { type: core.ElementRef, },\r\n            { type: GoogleMapsAPIWrapper, },\r\n            { type: FitBoundsService, },\r\n        ]; };\r\n        AgmMap.propDecorators = {\r\n            \"longitude\": [{ type: core.Input },],\r\n            \"latitude\": [{ type: core.Input },],\r\n            \"zoom\": [{ type: core.Input },],\r\n            \"minZoom\": [{ type: core.Input },],\r\n            \"maxZoom\": [{ type: core.Input },],\r\n            \"draggable\": [{ type: core.Input, args: ['mapDraggable',] },],\r\n            \"disableDoubleClickZoom\": [{ type: core.Input },],\r\n            \"disableDefaultUI\": [{ type: core.Input },],\r\n            \"scrollwheel\": [{ type: core.Input },],\r\n            \"backgroundColor\": [{ type: core.Input },],\r\n            \"draggableCursor\": [{ type: core.Input },],\r\n            \"draggingCursor\": [{ type: core.Input },],\r\n            \"keyboardShortcuts\": [{ type: core.Input },],\r\n            \"zoomControl\": [{ type: core.Input },],\r\n            \"zoomControlOptions\": [{ type: core.Input },],\r\n            \"styles\": [{ type: core.Input },],\r\n            \"usePanning\": [{ type: core.Input },],\r\n            \"streetViewControl\": [{ type: core.Input },],\r\n            \"streetViewControlOptions\": [{ type: core.Input },],\r\n            \"fitBounds\": [{ type: core.Input },],\r\n            \"scaleControl\": [{ type: core.Input },],\r\n            \"scaleControlOptions\": [{ type: core.Input },],\r\n            \"mapTypeControl\": [{ type: core.Input },],\r\n            \"mapTypeControlOptions\": [{ type: core.Input },],\r\n            \"panControl\": [{ type: core.Input },],\r\n            \"panControlOptions\": [{ type: core.Input },],\r\n            \"rotateControl\": [{ type: core.Input },],\r\n            \"rotateControlOptions\": [{ type: core.Input },],\r\n            \"fullscreenControl\": [{ type: core.Input },],\r\n            \"fullscreenControlOptions\": [{ type: core.Input },],\r\n            \"mapTypeId\": [{ type: core.Input },],\r\n            \"clickableIcons\": [{ type: core.Input },],\r\n            \"gestureHandling\": [{ type: core.Input },],\r\n            \"mapClick\": [{ type: core.Output },],\r\n            \"mapRightClick\": [{ type: core.Output },],\r\n            \"mapDblClick\": [{ type: core.Output },],\r\n            \"centerChange\": [{ type: core.Output },],\r\n            \"boundsChange\": [{ type: core.Output },],\r\n            \"mapTypeIdChange\": [{ type: core.Output },],\r\n            \"idle\": [{ type: core.Output },],\r\n            \"zoomChange\": [{ type: core.Output },],\r\n            \"mapReady\": [{ type: core.Output },],\r\n        };\r\n        return AgmMap;\r\n    }());\r\n\r\n    var AgmCircle = /** @class */ (function () {\r\n        function AgmCircle(_manager) {\r\n            this._manager = _manager;\r\n            /**\r\n               * Indicates whether this Circle handles mouse events. Defaults to true.\r\n               */\r\n            this.clickable = true;\r\n            /**\r\n               * If set to true, the user can drag this circle over the map. Defaults to false.\r\n               */\r\n            // tslint:disable-next-line:no-input-rename\r\n            this.draggable = false;\r\n            /**\r\n               * If set to true, the user can edit this circle by dragging the control points shown at\r\n               * the center and around the circumference of the circle. Defaults to false.\r\n               */\r\n            this.editable = false;\r\n            /**\r\n               * The radius in meters on the Earth's surface.\r\n               */\r\n            this.radius = 0;\r\n            /**\r\n               * The stroke position. Defaults to CENTER.\r\n               * This property is not supported on Internet Explorer 8 and earlier.\r\n               */\r\n            this.strokePosition = 'CENTER';\r\n            /**\r\n               * The stroke width in pixels.\r\n               */\r\n            this.strokeWeight = 0;\r\n            /**\r\n               * Whether this circle is visible on the map. Defaults to true.\r\n               */\r\n            this.visible = true;\r\n            /**\r\n               * This event is fired when the circle's center is changed.\r\n               */\r\n            this.centerChange = new core.EventEmitter();\r\n            /**\r\n               * This event emitter gets emitted when the user clicks on the circle.\r\n               */\r\n            this.circleClick = new core.EventEmitter();\r\n            /**\r\n               * This event emitter gets emitted when the user clicks on the circle.\r\n               */\r\n            this.circleDblClick = new core.EventEmitter();\r\n            /**\r\n               * This event is repeatedly fired while the user drags the circle.\r\n               */\r\n            this.drag = new core.EventEmitter();\r\n            /**\r\n               * This event is fired when the user stops dragging the circle.\r\n               */\r\n            this.dragEnd = new core.EventEmitter();\r\n            /**\r\n               * This event is fired when the user starts dragging the circle.\r\n               */\r\n            this.dragStart = new core.EventEmitter();\r\n            /**\r\n               * This event is fired when the DOM mousedown event is fired on the circle.\r\n               */\r\n            this.mouseDown = new core.EventEmitter();\r\n            /**\r\n               * This event is fired when the DOM mousemove event is fired on the circle.\r\n               */\r\n            this.mouseMove = new core.EventEmitter();\r\n            /**\r\n               * This event is fired on circle mouseout.\r\n               */\r\n            this.mouseOut = new core.EventEmitter();\r\n            /**\r\n               * This event is fired on circle mouseover.\r\n               */\r\n            this.mouseOver = new core.EventEmitter();\r\n            /**\r\n               * This event is fired when the DOM mouseup event is fired on the circle.\r\n               */\r\n            this.mouseUp = new core.EventEmitter();\r\n            /**\r\n               * This event is fired when the circle's radius is changed.\r\n               */\r\n            this.radiusChange = new core.EventEmitter();\r\n            /**\r\n               * This event is fired when the circle is right-clicked on.\r\n               */\r\n            this.rightClick = new core.EventEmitter();\r\n            this._circleAddedToManager = false;\r\n            this._eventSubscriptions = [];\r\n        }\r\n        /** @internal */\r\n        /** @internal */\r\n        AgmCircle.prototype.ngOnInit = /** @internal */\r\n        function () {\r\n            this._manager.addCircle(this);\r\n            this._circleAddedToManager = true;\r\n            this._registerEventListeners();\r\n        };\r\n        /** @internal */\r\n        /** @internal */\r\n        AgmCircle.prototype.ngOnChanges = /** @internal */\r\n        function (changes) {\r\n            if (!this._circleAddedToManager) {\r\n                return;\r\n            }\r\n            if (changes['latitude'] || changes['longitude']) {\r\n                this._manager.setCenter(this);\r\n            }\r\n            if (changes['editable']) {\r\n                this._manager.setEditable(this);\r\n            }\r\n            if (changes['draggable']) {\r\n                this._manager.setDraggable(this);\r\n            }\r\n            if (changes['visible']) {\r\n                this._manager.setVisible(this);\r\n            }\r\n            if (changes['radius']) {\r\n                this._manager.setRadius(this);\r\n            }\r\n            this._updateCircleOptionsChanges(changes);\r\n        };\r\n        AgmCircle.prototype._updateCircleOptionsChanges = function (changes) {\r\n            var options = {};\r\n            var optionKeys = Object.keys(changes).filter(function (k) { return AgmCircle._mapOptions.indexOf(k) !== -1; });\r\n            optionKeys.forEach(function (k) { options[k] = changes[k].currentValue; });\r\n            if (optionKeys.length > 0) {\r\n                this._manager.setOptions(this, options);\r\n            }\r\n        };\r\n        AgmCircle.prototype._registerEventListeners = function () {\r\n            var _this = this;\r\n            var events = new Map();\r\n            events.set('center_changed', this.centerChange);\r\n            events.set('click', this.circleClick);\r\n            events.set('dblclick', this.circleDblClick);\r\n            events.set('drag', this.drag);\r\n            events.set('dragend', this.dragEnd);\r\n            events.set('dragStart', this.dragStart);\r\n            events.set('mousedown', this.mouseDown);\r\n            events.set('mousemove', this.mouseMove);\r\n            events.set('mouseout', this.mouseOut);\r\n            events.set('mouseover', this.mouseOver);\r\n            events.set('mouseup', this.mouseUp);\r\n            events.set('radius_changed', this.radiusChange);\r\n            events.set('rightclick', this.rightClick);\r\n            events.forEach(function (eventEmitter, eventName) {\r\n                _this._eventSubscriptions.push(_this._manager.createEventObservable(eventName, _this).subscribe(function (value) {\r\n                    switch (eventName) {\r\n                        case 'radius_changed':\r\n                            _this._manager.getRadius(_this).then(function (radius) { return eventEmitter.emit(radius); });\r\n                            break;\r\n                        case 'center_changed':\r\n                            _this._manager.getCenter(_this).then(function (center) {\r\n                                return eventEmitter.emit({ lat: center.lat(), lng: center.lng() });\r\n                            });\r\n                            break;\r\n                        default:\r\n                            eventEmitter.emit({ coords: { lat: value.latLng.lat(), lng: value.latLng.lng() } });\r\n                    }\r\n                }));\r\n            });\r\n        };\r\n        /** @internal */\r\n        /** @internal */\r\n        AgmCircle.prototype.ngOnDestroy = /** @internal */\r\n        function () {\r\n            this._eventSubscriptions.forEach(function (s) { s.unsubscribe(); });\r\n            this._eventSubscriptions = null;\r\n            this._manager.removeCircle(this);\r\n        };\r\n        /**\r\n         * Gets the LatLngBounds of this Circle.\r\n         */\r\n        /**\r\n           * Gets the LatLngBounds of this Circle.\r\n           */\r\n        AgmCircle.prototype.getBounds = /**\r\n           * Gets the LatLngBounds of this Circle.\r\n           */\r\n        function () { return this._manager.getBounds(this); };\r\n        AgmCircle.prototype.getCenter = function () { return this._manager.getCenter(this); };\r\n        AgmCircle._mapOptions = [\r\n            'fillColor', 'fillOpacity', 'strokeColor', 'strokeOpacity', 'strokePosition', 'strokeWeight',\r\n            'visible', 'zIndex', 'clickable'\r\n        ];\r\n        AgmCircle.decorators = [\r\n            { type: core.Directive, args: [{\r\n                        selector: 'agm-circle'\r\n                    },] },\r\n        ];\r\n        /** @nocollapse */\r\n        AgmCircle.ctorParameters = function () { return [\r\n            { type: CircleManager, },\r\n        ]; };\r\n        AgmCircle.propDecorators = {\r\n            \"latitude\": [{ type: core.Input },],\r\n            \"longitude\": [{ type: core.Input },],\r\n            \"clickable\": [{ type: core.Input },],\r\n            \"draggable\": [{ type: core.Input, args: ['circleDraggable',] },],\r\n            \"editable\": [{ type: core.Input },],\r\n            \"fillColor\": [{ type: core.Input },],\r\n            \"fillOpacity\": [{ type: core.Input },],\r\n            \"radius\": [{ type: core.Input },],\r\n            \"strokeColor\": [{ type: core.Input },],\r\n            \"strokeOpacity\": [{ type: core.Input },],\r\n            \"strokePosition\": [{ type: core.Input },],\r\n            \"strokeWeight\": [{ type: core.Input },],\r\n            \"visible\": [{ type: core.Input },],\r\n            \"zIndex\": [{ type: core.Input },],\r\n            \"centerChange\": [{ type: core.Output },],\r\n            \"circleClick\": [{ type: core.Output },],\r\n            \"circleDblClick\": [{ type: core.Output },],\r\n            \"drag\": [{ type: core.Output },],\r\n            \"dragEnd\": [{ type: core.Output },],\r\n            \"dragStart\": [{ type: core.Output },],\r\n            \"mouseDown\": [{ type: core.Output },],\r\n            \"mouseMove\": [{ type: core.Output },],\r\n            \"mouseOut\": [{ type: core.Output },],\r\n            \"mouseOver\": [{ type: core.Output },],\r\n            \"mouseUp\": [{ type: core.Output },],\r\n            \"radiusChange\": [{ type: core.Output },],\r\n            \"rightClick\": [{ type: core.Output },],\r\n        };\r\n        return AgmCircle;\r\n    }());\r\n\r\n    var AgmRectangle = /** @class */ (function () {\r\n        function AgmRectangle(_manager) {\r\n            this._manager = _manager;\r\n            /**\r\n               * Indicates whether this Rectangle handles mouse events. Defaults to true.\r\n               */\r\n            this.clickable = true;\r\n            /**\r\n               * If set to true, the user can drag this rectangle over the map. Defaults to false.\r\n               */\r\n            // tslint:disable-next-line:no-input-rename\r\n            this.draggable = false;\r\n            /**\r\n               * If set to true, the user can edit this rectangle by dragging the control points shown at\r\n               * the center and around the circumference of the rectangle. Defaults to false.\r\n               */\r\n            this.editable = false;\r\n            /**\r\n               * The stroke position. Defaults to CENTER.\r\n               * This property is not supported on Internet Explorer 8 and earlier.\r\n               */\r\n            this.strokePosition = 'CENTER';\r\n            /**\r\n               * The stroke width in pixels.\r\n               */\r\n            this.strokeWeight = 0;\r\n            /**\r\n               * Whether this rectangle is visible on the map. Defaults to true.\r\n               */\r\n            this.visible = true;\r\n            /**\r\n               * This event is fired when the rectangle's is changed.\r\n               */\r\n            this.boundsChange = new core.EventEmitter();\r\n            /**\r\n               * This event emitter gets emitted when the user clicks on the rectangle.\r\n               */\r\n            this.rectangleClick = new core.EventEmitter();\r\n            /**\r\n               * This event emitter gets emitted when the user clicks on the rectangle.\r\n               */\r\n            this.rectangleDblClick = new core.EventEmitter();\r\n            /**\r\n               * This event is repeatedly fired while the user drags the rectangle.\r\n               */\r\n            this.drag = new core.EventEmitter();\r\n            /**\r\n               * This event is fired when the user stops dragging the rectangle.\r\n               */\r\n            this.dragEnd = new core.EventEmitter();\r\n            /**\r\n               * This event is fired when the user starts dragging the rectangle.\r\n               */\r\n            this.dragStart = new core.EventEmitter();\r\n            /**\r\n               * This event is fired when the DOM mousedown event is fired on the rectangle.\r\n               */\r\n            this.mouseDown = new core.EventEmitter();\r\n            /**\r\n               * This event is fired when the DOM mousemove event is fired on the rectangle.\r\n               */\r\n            this.mouseMove = new core.EventEmitter();\r\n            /**\r\n               * This event is fired on rectangle mouseout.\r\n               */\r\n            this.mouseOut = new core.EventEmitter();\r\n            /**\r\n               * This event is fired on rectangle mouseover.\r\n               */\r\n            this.mouseOver = new core.EventEmitter();\r\n            /**\r\n               * This event is fired when the DOM mouseup event is fired on the rectangle.\r\n               */\r\n            this.mouseUp = new core.EventEmitter();\r\n            /**\r\n               * This event is fired when the rectangle is right-clicked on.\r\n               */\r\n            this.rightClick = new core.EventEmitter();\r\n            this._rectangleAddedToManager = false;\r\n            this._eventSubscriptions = [];\r\n        }\r\n        /** @internal */\r\n        /** @internal */\r\n        AgmRectangle.prototype.ngOnInit = /** @internal */\r\n        function () {\r\n            this._manager.addRectangle(this);\r\n            this._rectangleAddedToManager = true;\r\n            this._registerEventListeners();\r\n        };\r\n        /** @internal */\r\n        /** @internal */\r\n        AgmRectangle.prototype.ngOnChanges = /** @internal */\r\n        function (changes) {\r\n            if (!this._rectangleAddedToManager) {\r\n                return;\r\n            }\r\n            if (changes['north'] ||\r\n                changes['east'] ||\r\n                changes['south'] ||\r\n                changes['west']) {\r\n                this._manager.setBounds(this);\r\n            }\r\n            if (changes['editable']) {\r\n                this._manager.setEditable(this);\r\n            }\r\n            if (changes['draggable']) {\r\n                this._manager.setDraggable(this);\r\n            }\r\n            if (changes['visible']) {\r\n                this._manager.setVisible(this);\r\n            }\r\n            this._updateRectangleOptionsChanges(changes);\r\n        };\r\n        AgmRectangle.prototype._updateRectangleOptionsChanges = function (changes) {\r\n            var options = {};\r\n            var optionKeys = Object.keys(changes).filter(function (k) { return AgmRectangle._mapOptions.indexOf(k) !== -1; });\r\n            optionKeys.forEach(function (k) {\r\n                options[k] = changes[k].currentValue;\r\n            });\r\n            if (optionKeys.length > 0) {\r\n                this._manager.setOptions(this, options);\r\n            }\r\n        };\r\n        AgmRectangle.prototype._registerEventListeners = function () {\r\n            var _this = this;\r\n            var events = new Map();\r\n            events.set('bounds_changed', this.boundsChange);\r\n            events.set('click', this.rectangleClick);\r\n            events.set('dblclick', this.rectangleDblClick);\r\n            events.set('drag', this.drag);\r\n            events.set('dragend', this.dragEnd);\r\n            events.set('dragStart', this.dragStart);\r\n            events.set('mousedown', this.mouseDown);\r\n            events.set('mousemove', this.mouseMove);\r\n            events.set('mouseout', this.mouseOut);\r\n            events.set('mouseover', this.mouseOver);\r\n            events.set('mouseup', this.mouseUp);\r\n            events.set('rightclick', this.rightClick);\r\n            events.forEach(function (eventEmitter, eventName) {\r\n                _this._eventSubscriptions.push(_this._manager\r\n                    .createEventObservable(eventName, _this)\r\n                    .subscribe(function (value) {\r\n                    switch (eventName) {\r\n                        case 'bounds_changed':\r\n                            _this._manager.getBounds(_this).then(function (bounds) {\r\n                                return eventEmitter.emit({\r\n                                    north: bounds.getNorthEast().lat(),\r\n                                    east: bounds.getNorthEast().lng(),\r\n                                    south: bounds.getSouthWest().lat(),\r\n                                    west: bounds.getSouthWest().lng()\r\n                                });\r\n                            });\r\n                            break;\r\n                        default:\r\n                            eventEmitter.emit({\r\n                                coords: { lat: value.latLng.lat(), lng: value.latLng.lng() }\r\n                            });\r\n                    }\r\n                }));\r\n            });\r\n        };\r\n        /** @internal */\r\n        /** @internal */\r\n        AgmRectangle.prototype.ngOnDestroy = /** @internal */\r\n        function () {\r\n            this._eventSubscriptions.forEach(function (s) {\r\n                s.unsubscribe();\r\n            });\r\n            this._eventSubscriptions = null;\r\n            this._manager.removeRectangle(this);\r\n        };\r\n        /**\r\n         * Gets the LatLngBounds of this Rectangle.\r\n         */\r\n        /**\r\n           * Gets the LatLngBounds of this Rectangle.\r\n           */\r\n        AgmRectangle.prototype.getBounds = /**\r\n           * Gets the LatLngBounds of this Rectangle.\r\n           */\r\n        function () {\r\n            return this._manager.getBounds(this);\r\n        };\r\n        AgmRectangle._mapOptions = [\r\n            'fillColor',\r\n            'fillOpacity',\r\n            'strokeColor',\r\n            'strokeOpacity',\r\n            'strokePosition',\r\n            'strokeWeight',\r\n            'visible',\r\n            'zIndex',\r\n            'clickable'\r\n        ];\r\n        AgmRectangle.decorators = [\r\n            { type: core.Directive, args: [{\r\n                        selector: 'agm-rectangle'\r\n                    },] },\r\n        ];\r\n        /** @nocollapse */\r\n        AgmRectangle.ctorParameters = function () { return [\r\n            { type: RectangleManager, },\r\n        ]; };\r\n        AgmRectangle.propDecorators = {\r\n            \"north\": [{ type: core.Input },],\r\n            \"east\": [{ type: core.Input },],\r\n            \"south\": [{ type: core.Input },],\r\n            \"west\": [{ type: core.Input },],\r\n            \"clickable\": [{ type: core.Input },],\r\n            \"draggable\": [{ type: core.Input, args: ['rectangleDraggable',] },],\r\n            \"editable\": [{ type: core.Input },],\r\n            \"fillColor\": [{ type: core.Input },],\r\n            \"fillOpacity\": [{ type: core.Input },],\r\n            \"strokeColor\": [{ type: core.Input },],\r\n            \"strokeOpacity\": [{ type: core.Input },],\r\n            \"strokePosition\": [{ type: core.Input },],\r\n            \"strokeWeight\": [{ type: core.Input },],\r\n            \"visible\": [{ type: core.Input },],\r\n            \"zIndex\": [{ type: core.Input },],\r\n            \"boundsChange\": [{ type: core.Output },],\r\n            \"rectangleClick\": [{ type: core.Output },],\r\n            \"rectangleDblClick\": [{ type: core.Output },],\r\n            \"drag\": [{ type: core.Output },],\r\n            \"dragEnd\": [{ type: core.Output },],\r\n            \"dragStart\": [{ type: core.Output },],\r\n            \"mouseDown\": [{ type: core.Output },],\r\n            \"mouseMove\": [{ type: core.Output },],\r\n            \"mouseOut\": [{ type: core.Output },],\r\n            \"mouseOver\": [{ type: core.Output },],\r\n            \"mouseUp\": [{ type: core.Output },],\r\n            \"rightClick\": [{ type: core.Output },],\r\n        };\r\n        return AgmRectangle;\r\n    }());\r\n\r\n    var infoWindowId = 0;\r\n    /**\r\n     * AgmInfoWindow renders a info window inside a {@link AgmMarker} or standalone.\r\n     *\r\n     * ### Example\r\n     * ```typescript\r\n     * import { Component } from '@angular/core';\r\n     *\r\n     * @Component({\r\n     *  selector: 'my-map-cmp',\r\n     *  styles: [`\r\n     *    .agm-map-container {\r\n     *      height: 300px;\r\n     *    }\r\n     * `],\r\n     *  template: `\r\n     *    <agm-map [latitude]=\"lat\" [longitude]=\"lng\" [zoom]=\"zoom\">\r\n     *      <agm-marker [latitude]=\"lat\" [longitude]=\"lng\" [label]=\"'M'\">\r\n     *        <agm-info-window [disableAutoPan]=\"true\">\r\n     *          Hi, this is the content of the <strong>info window</strong>\r\n     *        </agm-info-window>\r\n     *      </agm-marker>\r\n     *    </agm-map>\r\n     *  `\r\n     * })\r\n     * ```\r\n     */\r\n    var AgmInfoWindow = /** @class */ (function () {\r\n        function AgmInfoWindow(_infoWindowManager, _el) {\r\n            this._infoWindowManager = _infoWindowManager;\r\n            this._el = _el;\r\n            /**\r\n               * Sets the open state for the InfoWindow. You can also call the open() and close() methods.\r\n               */\r\n            this.isOpen = false;\r\n            /**\r\n               * Emits an event when the info window is closed.\r\n               */\r\n            this.infoWindowClose = new core.EventEmitter();\r\n            this._infoWindowAddedToManager = false;\r\n            this._id = (infoWindowId++).toString();\r\n        }\r\n        AgmInfoWindow.prototype.ngOnInit = function () {\r\n            this.content = this._el.nativeElement.querySelector('.agm-info-window-content');\r\n            this._infoWindowManager.addInfoWindow(this);\r\n            this._infoWindowAddedToManager = true;\r\n            this._updateOpenState();\r\n            this._registerEventListeners();\r\n        };\r\n        /** @internal */\r\n        /** @internal */\r\n        AgmInfoWindow.prototype.ngOnChanges = /** @internal */\r\n        function (changes) {\r\n            if (!this._infoWindowAddedToManager) {\r\n                return;\r\n            }\r\n            if ((changes['latitude'] || changes['longitude']) && typeof this.latitude === 'number' &&\r\n                typeof this.longitude === 'number') {\r\n                this._infoWindowManager.setPosition(this);\r\n            }\r\n            if (changes['zIndex']) {\r\n                this._infoWindowManager.setZIndex(this);\r\n            }\r\n            if (changes['isOpen']) {\r\n                this._updateOpenState();\r\n            }\r\n            this._setInfoWindowOptions(changes);\r\n        };\r\n        AgmInfoWindow.prototype._registerEventListeners = function () {\r\n            var _this = this;\r\n            this._infoWindowManager.createEventObservable('closeclick', this).subscribe(function () {\r\n                _this.isOpen = false;\r\n                _this.infoWindowClose.emit();\r\n            });\r\n        };\r\n        AgmInfoWindow.prototype._updateOpenState = function () {\r\n            this.isOpen ? this.open() : this.close();\r\n        };\r\n        AgmInfoWindow.prototype._setInfoWindowOptions = function (changes) {\r\n            var options = {};\r\n            var optionKeys = Object.keys(changes).filter(function (k) { return AgmInfoWindow._infoWindowOptionsInputs.indexOf(k) !== -1; });\r\n            optionKeys.forEach(function (k) { options[k] = changes[k].currentValue; });\r\n            this._infoWindowManager.setOptions(this, options);\r\n        };\r\n        /**\r\n         * Opens the info window.\r\n         */\r\n        /**\r\n           * Opens the info window.\r\n           */\r\n        AgmInfoWindow.prototype.open = /**\r\n           * Opens the info window.\r\n           */\r\n        function () { return this._infoWindowManager.open(this); };\r\n        /**\r\n         * Closes the info window.\r\n         */\r\n        /**\r\n           * Closes the info window.\r\n           */\r\n        AgmInfoWindow.prototype.close = /**\r\n           * Closes the info window.\r\n           */\r\n        function () {\r\n            var _this = this;\r\n            return this._infoWindowManager.close(this).then(function () { _this.infoWindowClose.emit(); });\r\n        };\r\n        /** @internal */\r\n        /** @internal */\r\n        AgmInfoWindow.prototype.id = /** @internal */\r\n        function () { return this._id; };\r\n        /** @internal */\r\n        /** @internal */\r\n        AgmInfoWindow.prototype.toString = /** @internal */\r\n        function () { return 'AgmInfoWindow-' + this._id.toString(); };\r\n        /** @internal */\r\n        /** @internal */\r\n        AgmInfoWindow.prototype.ngOnDestroy = /** @internal */\r\n        function () { this._infoWindowManager.deleteInfoWindow(this); };\r\n        AgmInfoWindow._infoWindowOptionsInputs = ['disableAutoPan', 'maxWidth'];\r\n        AgmInfoWindow.decorators = [\r\n            { type: core.Component, args: [{\r\n                        selector: 'agm-info-window',\r\n                        template: \"<div class='agm-info-window-content'>\\n      <ng-content></ng-content>\\n    </div>\\n  \"\r\n                    },] },\r\n        ];\r\n        /** @nocollapse */\r\n        AgmInfoWindow.ctorParameters = function () { return [\r\n            { type: InfoWindowManager, },\r\n            { type: core.ElementRef, },\r\n        ]; };\r\n        AgmInfoWindow.propDecorators = {\r\n            \"latitude\": [{ type: core.Input },],\r\n            \"longitude\": [{ type: core.Input },],\r\n            \"disableAutoPan\": [{ type: core.Input },],\r\n            \"zIndex\": [{ type: core.Input },],\r\n            \"maxWidth\": [{ type: core.Input },],\r\n            \"isOpen\": [{ type: core.Input },],\r\n            \"infoWindowClose\": [{ type: core.Output },],\r\n        };\r\n        return AgmInfoWindow;\r\n    }());\r\n\r\n    var layerId = 0;\r\n    var AgmKmlLayer = /** @class */ (function () {\r\n        function AgmKmlLayer(_manager) {\r\n            this._manager = _manager;\r\n            this._addedToManager = false;\r\n            this._id = (layerId++).toString();\r\n            this._subscriptions = [];\r\n            /**\r\n               * If true, the layer receives mouse events. Default value is true.\r\n               */\r\n            this.clickable = true;\r\n            /**\r\n               * By default, the input map is centered and zoomed to the bounding box of the contents of the\r\n               * layer.\r\n               * If this option is set to true, the viewport is left unchanged, unless the map's center and zoom\r\n               * were never set.\r\n               */\r\n            this.preserveViewport = false;\r\n            /**\r\n               * Whether to render the screen overlays. Default true.\r\n               */\r\n            this.screenOverlays = true;\r\n            /**\r\n               * Suppress the rendering of info windows when layer features are clicked.\r\n               */\r\n            this.suppressInfoWindows = false;\r\n            /**\r\n               * The URL of the KML document to display.\r\n               */\r\n            this.url = null;\r\n            /**\r\n               * The z-index of the layer.\r\n               */\r\n            this.zIndex = null;\r\n            /**\r\n               * This event is fired when a feature in the layer is clicked.\r\n               */\r\n            this.layerClick = new core.EventEmitter();\r\n            /**\r\n               * This event is fired when the KML layers default viewport has changed.\r\n               */\r\n            this.defaultViewportChange = new core.EventEmitter();\r\n            /**\r\n               * This event is fired when the KML layer has finished loading.\r\n               * At this point it is safe to read the status property to determine if the layer loaded\r\n               * successfully.\r\n               */\r\n            this.statusChange = new core.EventEmitter();\r\n        }\r\n        AgmKmlLayer.prototype.ngOnInit = function () {\r\n            if (this._addedToManager) {\r\n                return;\r\n            }\r\n            this._manager.addKmlLayer(this);\r\n            this._addedToManager = true;\r\n            this._addEventListeners();\r\n        };\r\n        AgmKmlLayer.prototype.ngOnChanges = function (changes) {\r\n            if (!this._addedToManager) {\r\n                return;\r\n            }\r\n            this._updatePolygonOptions(changes);\r\n        };\r\n        AgmKmlLayer.prototype._updatePolygonOptions = function (changes) {\r\n            var options = Object.keys(changes)\r\n                .filter(function (k) { return AgmKmlLayer._kmlLayerOptions.indexOf(k) !== -1; })\r\n                .reduce(function (obj, k) {\r\n                obj[k] = changes[k].currentValue;\r\n                return obj;\r\n            }, {});\r\n            if (Object.keys(options).length > 0) {\r\n                this._manager.setOptions(this, options);\r\n            }\r\n        };\r\n        AgmKmlLayer.prototype._addEventListeners = function () {\r\n            var _this = this;\r\n            var listeners = [\r\n                { name: 'click', handler: function (ev) { return _this.layerClick.emit(ev); } },\r\n                { name: 'defaultviewport_changed', handler: function () { return _this.defaultViewportChange.emit(); } },\r\n                { name: 'status_changed', handler: function () { return _this.statusChange.emit(); } },\r\n            ];\r\n            listeners.forEach(function (obj) {\r\n                var os = _this._manager.createEventObservable(obj.name, _this).subscribe(obj.handler);\r\n                _this._subscriptions.push(os);\r\n            });\r\n        };\r\n        /** @internal */\r\n        /** @internal */\r\n        AgmKmlLayer.prototype.id = /** @internal */\r\n        function () { return this._id; };\r\n        /** @internal */\r\n        /** @internal */\r\n        AgmKmlLayer.prototype.toString = /** @internal */\r\n        function () { return \"AgmKmlLayer-\" + this._id.toString(); };\r\n        /** @internal */\r\n        /** @internal */\r\n        AgmKmlLayer.prototype.ngOnDestroy = /** @internal */\r\n        function () {\r\n            this._manager.deleteKmlLayer(this);\r\n            // unsubscribe all registered observable subscriptions\r\n            this._subscriptions.forEach(function (s) { return s.unsubscribe(); });\r\n        };\r\n        AgmKmlLayer._kmlLayerOptions = ['clickable', 'preserveViewport', 'screenOverlays', 'suppressInfoWindows', 'url', 'zIndex'];\r\n        AgmKmlLayer.decorators = [\r\n            { type: core.Directive, args: [{\r\n                        selector: 'agm-kml-layer'\r\n                    },] },\r\n        ];\r\n        /** @nocollapse */\r\n        AgmKmlLayer.ctorParameters = function () { return [\r\n            { type: KmlLayerManager, },\r\n        ]; };\r\n        AgmKmlLayer.propDecorators = {\r\n            \"clickable\": [{ type: core.Input },],\r\n            \"preserveViewport\": [{ type: core.Input },],\r\n            \"screenOverlays\": [{ type: core.Input },],\r\n            \"suppressInfoWindows\": [{ type: core.Input },],\r\n            \"url\": [{ type: core.Input },],\r\n            \"zIndex\": [{ type: core.Input },],\r\n            \"layerClick\": [{ type: core.Output },],\r\n            \"defaultViewportChange\": [{ type: core.Output },],\r\n            \"statusChange\": [{ type: core.Output },],\r\n        };\r\n        return AgmKmlLayer;\r\n    }());\r\n\r\n    var layerId$1 = 0;\r\n    /**\r\n     * AgmDataLayer enables the user to add data layers to the map.\r\n     *\r\n     * ### Example\r\n     * ```typescript\r\n     * import { Component } from 'angular2/core';\r\n     * import { AgmMap, AgmDataLayer } from\r\n     * 'angular-google-maps/core';\r\n     *\r\n     * @Component({\r\n     *  selector: 'my-map-cmp',\r\n     *  directives: [AgmMap, AgmDataLayer],\r\n     *  styles: [`\r\n     *    .agm-container {\r\n     *      height: 300px;\r\n     *    }\r\n     * `],\r\n     *  template: `\r\n     * <agm-map [latitude]=\"lat\" [longitude]=\"lng\" [zoom]=\"zoom\">\r\n     * \t  <agm-data-layer [geoJson]=\"geoJsonObject\" (layerClick)=\"clicked($event)\" [style]=\"styleFunc\">\r\n     * \t  </agm-data-layer>\r\n     * </agm-map>\r\n     *  `\r\n     * })\r\n     * export class MyMapCmp {\r\n     *   lat: number = -25.274449;\r\n     *   lng: number = 133.775060;\r\n     *   zoom: number = 5;\r\n     *\r\n     * clicked(clickEvent) {\r\n     *    console.log(clickEvent);\r\n     *  }\r\n     *\r\n     *  styleFunc(feature) {\r\n     *    return ({\r\n     *      clickable: false,\r\n     *      fillColor: feature.getProperty('color'),\r\n     *      strokeWeight: 1\r\n     *    });\r\n     *  }\r\n     *\r\n     *  geoJsonObject: Object = {\r\n     *    \"type\": \"FeatureCollection\",\r\n     *    \"features\": [\r\n     *      {\r\n     *        \"type\": \"Feature\",\r\n     *        \"properties\": {\r\n     *          \"letter\": \"G\",\r\n     *          \"color\": \"blue\",\r\n     *          \"rank\": \"7\",\r\n     *          \"ascii\": \"71\"\r\n     *        },\r\n     *        \"geometry\": {\r\n     *          \"type\": \"Polygon\",\r\n     *          \"coordinates\": [\r\n     *            [\r\n     *              [123.61, -22.14], [122.38, -21.73], [121.06, -21.69], [119.66, -22.22], [119.00, -23.40],\r\n     *              [118.65, -24.76], [118.43, -26.07], [118.78, -27.56], [119.22, -28.57], [120.23, -29.49],\r\n     *              [121.77, -29.87], [123.57, -29.64], [124.45, -29.03], [124.71, -27.95], [124.80, -26.70],\r\n     *              [124.80, -25.60], [123.61, -25.64], [122.56, -25.64], [121.72, -25.72], [121.81, -26.62],\r\n     *              [121.86, -26.98], [122.60, -26.90], [123.57, -27.05], [123.57, -27.68], [123.35, -28.18],\r\n     *              [122.51, -28.38], [121.77, -28.26], [121.02, -27.91], [120.49, -27.21], [120.14, -26.50],\r\n     *              [120.10, -25.64], [120.27, -24.52], [120.67, -23.68], [121.72, -23.32], [122.43, -23.48],\r\n     *              [123.04, -24.04], [124.54, -24.28], [124.58, -23.20], [123.61, -22.14]\r\n     *            ]\r\n     *          ]\r\n     *        }\r\n     *      },\r\n     *      {\r\n     *        \"type\": \"Feature\",\r\n     *        \"properties\": {\r\n     *          \"letter\": \"o\",\r\n     *          \"color\": \"red\",\r\n     *          \"rank\": \"15\",\r\n     *          \"ascii\": \"111\"\r\n     *        },\r\n     *        \"geometry\": {\r\n     *          \"type\": \"Polygon\",\r\n     *          \"coordinates\": [\r\n     *            [\r\n     *              [128.84, -25.76], [128.18, -25.60], [127.96, -25.52], [127.88, -25.52], [127.70, -25.60],\r\n     *              [127.26, -25.79], [126.60, -26.11], [126.16, -26.78], [126.12, -27.68], [126.21, -28.42],\r\n     *              [126.69, -29.49], [127.74, -29.80], [128.80, -29.72], [129.41, -29.03], [129.72, -27.95],\r\n     *              [129.68, -27.21], [129.33, -26.23], [128.84, -25.76]\r\n     *            ],\r\n     *            [\r\n     *              [128.45, -27.44], [128.32, -26.94], [127.70, -26.82], [127.35, -27.05], [127.17, -27.80],\r\n     *              [127.57, -28.22], [128.10, -28.42], [128.49, -27.80], [128.45, -27.44]\r\n     *            ]\r\n     *          ]\r\n     *        }\r\n     *      },\r\n     *      {\r\n     *        \"type\": \"Feature\",\r\n     *        \"properties\": {\r\n     *          \"letter\": \"o\",\r\n     *          \"color\": \"yellow\",\r\n     *          \"rank\": \"15\",\r\n     *          \"ascii\": \"111\"\r\n     *        },\r\n     *        \"geometry\": {\r\n     *          \"type\": \"Polygon\",\r\n     *          \"coordinates\": [\r\n     *            [\r\n     *              [131.87, -25.76], [131.35, -26.07], [130.95, -26.78], [130.82, -27.64], [130.86, -28.53],\r\n     *              [131.26, -29.22], [131.92, -29.76], [132.45, -29.87], [133.06, -29.76], [133.72, -29.34],\r\n     *              [134.07, -28.80], [134.20, -27.91], [134.07, -27.21], [133.81, -26.31], [133.37, -25.83],\r\n     *              [132.71, -25.64], [131.87, -25.76]\r\n     *            ],\r\n     *            [\r\n     *              [133.15, -27.17], [132.71, -26.86], [132.09, -26.90], [131.74, -27.56], [131.79, -28.26],\r\n     *              [132.36, -28.45], [132.93, -28.34], [133.15, -27.76], [133.15, -27.17]\r\n     *            ]\r\n     *          ]\r\n     *        }\r\n     *      },\r\n     *      {\r\n     *        \"type\": \"Feature\",\r\n     *        \"properties\": {\r\n     *          \"letter\": \"g\",\r\n     *          \"color\": \"blue\",\r\n     *          \"rank\": \"7\",\r\n     *          \"ascii\": \"103\"\r\n     *        },\r\n     *        \"geometry\": {\r\n     *          \"type\": \"Polygon\",\r\n     *          \"coordinates\": [\r\n     *            [\r\n     *              [138.12, -25.04], [136.84, -25.16], [135.96, -25.36], [135.26, -25.99], [135, -26.90],\r\n     *              [135.04, -27.91], [135.26, -28.88], [136.05, -29.45], [137.02, -29.49], [137.81, -29.49],\r\n     *              [137.94, -29.99], [137.90, -31.20], [137.85, -32.24], [136.88, -32.69], [136.45, -32.36],\r\n     *              [136.27, -31.80], [134.95, -31.84], [135.17, -32.99], [135.52, -33.43], [136.14, -33.76],\r\n     *              [137.06, -33.83], [138.12, -33.65], [138.86, -33.21], [139.30, -32.28], [139.30, -31.24],\r\n     *              [139.30, -30.14], [139.21, -28.96], [139.17, -28.22], [139.08, -27.41], [139.08, -26.47],\r\n     *              [138.99, -25.40], [138.73, -25.00], [138.12, -25.04]\r\n     *            ],\r\n     *            [\r\n     *              [137.50, -26.54], [136.97, -26.47], [136.49, -26.58], [136.31, -27.13], [136.31, -27.72],\r\n     *              [136.58, -27.99], [137.50, -28.03], [137.68, -27.68], [137.59, -26.78], [137.50, -26.54]\r\n     *            ]\r\n     *          ]\r\n     *        }\r\n     *      },\r\n     *      {\r\n     *        \"type\": \"Feature\",\r\n     *        \"properties\": {\r\n     *          \"letter\": \"l\",\r\n     *          \"color\": \"green\",\r\n     *          \"rank\": \"12\",\r\n     *          \"ascii\": \"108\"\r\n     *        },\r\n     *        \"geometry\": {\r\n     *          \"type\": \"Polygon\",\r\n     *          \"coordinates\": [\r\n     *            [\r\n     *              [140.14, -21.04], [140.31, -29.42], [141.67, -29.49], [141.59, -20.92], [140.14, -21.04]\r\n     *            ]\r\n     *          ]\r\n     *        }\r\n     *      },\r\n     *      {\r\n     *        \"type\": \"Feature\",\r\n     *        \"properties\": {\r\n     *          \"letter\": \"e\",\r\n     *          \"color\": \"red\",\r\n     *          \"rank\": \"5\",\r\n     *          \"ascii\": \"101\"\r\n     *        },\r\n     *        \"geometry\": {\r\n     *          \"type\": \"Polygon\",\r\n     *          \"coordinates\": [\r\n     *            [\r\n     *              [144.14, -27.41], [145.67, -27.52], [146.86, -27.09], [146.82, -25.64], [146.25, -25.04],\r\n     *              [145.45, -24.68], [144.66, -24.60], [144.09, -24.76], [143.43, -25.08], [142.99, -25.40],\r\n     *              [142.64, -26.03], [142.64, -27.05], [142.64, -28.26], [143.30, -29.11], [144.18, -29.57],\r\n     *              [145.41, -29.64], [146.46, -29.19], [146.64, -28.72], [146.82, -28.14], [144.84, -28.42],\r\n     *              [144.31, -28.26], [144.14, -27.41]\r\n     *            ],\r\n     *            [\r\n     *              [144.18, -26.39], [144.53, -26.58], [145.19, -26.62], [145.72, -26.35], [145.81, -25.91],\r\n     *              [145.41, -25.68], [144.97, -25.68], [144.49, -25.64], [144, -25.99], [144.18, -26.39]\r\n     *            ]\r\n     *          ]\r\n     *        }\r\n     *      }\r\n     *    ]\r\n     *  };\r\n     * }\r\n     * ```\r\n     */\r\n    var AgmDataLayer = /** @class */ (function () {\r\n        function AgmDataLayer(_manager) {\r\n            this._manager = _manager;\r\n            this._addedToManager = false;\r\n            this._id = (layerId$1++).toString();\r\n            this._subscriptions = [];\r\n            /**\r\n               * This event is fired when a feature in the layer is clicked.\r\n               */\r\n            this.layerClick = new core.EventEmitter();\r\n            /**\r\n               * The geoJson to be displayed\r\n               */\r\n            this.geoJson = null;\r\n        }\r\n        AgmDataLayer.prototype.ngOnInit = function () {\r\n            if (this._addedToManager) {\r\n                return;\r\n            }\r\n            this._manager.addDataLayer(this);\r\n            this._addedToManager = true;\r\n            this._addEventListeners();\r\n        };\r\n        AgmDataLayer.prototype._addEventListeners = function () {\r\n            var _this = this;\r\n            var listeners = [\r\n                { name: 'click', handler: function (ev) { return _this.layerClick.emit(ev); } },\r\n            ];\r\n            listeners.forEach(function (obj) {\r\n                var os = _this._manager.createEventObservable(obj.name, _this).subscribe(obj.handler);\r\n                _this._subscriptions.push(os);\r\n            });\r\n        };\r\n        /** @internal */\r\n        /** @internal */\r\n        AgmDataLayer.prototype.id = /** @internal */\r\n        function () { return this._id; };\r\n        /** @internal */\r\n        /** @internal */\r\n        AgmDataLayer.prototype.toString = /** @internal */\r\n        function () { return \"AgmDataLayer-\" + this._id.toString(); };\r\n        /** @internal */\r\n        /** @internal */\r\n        AgmDataLayer.prototype.ngOnDestroy = /** @internal */\r\n        function () {\r\n            this._manager.deleteDataLayer(this);\r\n            // unsubscribe all registered observable subscriptions\r\n            this._subscriptions.forEach(function (s) { return s.unsubscribe(); });\r\n        };\r\n        /** @internal */\r\n        /** @internal */\r\n        AgmDataLayer.prototype.ngOnChanges = /** @internal */\r\n        function (changes) {\r\n            var _this = this;\r\n            if (!this._addedToManager) {\r\n                return;\r\n            }\r\n            var geoJsonChange = changes['geoJson'];\r\n            if (geoJsonChange) {\r\n                this._manager.updateGeoJson(this, geoJsonChange.currentValue);\r\n            }\r\n            var dataOptions = {};\r\n            AgmDataLayer._dataOptionsAttributes.forEach(function (k) { return dataOptions[k] = changes.hasOwnProperty(k) ? changes[k].currentValue : _this[k]; });\r\n            this._manager.setDataOptions(this, dataOptions);\r\n        };\r\n        AgmDataLayer._dataOptionsAttributes = ['style'];\r\n        AgmDataLayer.decorators = [\r\n            { type: core.Directive, args: [{\r\n                        selector: 'agm-data-layer'\r\n                    },] },\r\n        ];\r\n        /** @nocollapse */\r\n        AgmDataLayer.ctorParameters = function () { return [\r\n            { type: DataLayerManager, },\r\n        ]; };\r\n        AgmDataLayer.propDecorators = {\r\n            \"layerClick\": [{ type: core.Output },],\r\n            \"geoJson\": [{ type: core.Input },],\r\n            \"style\": [{ type: core.Input },],\r\n        };\r\n        return AgmDataLayer;\r\n    }());\r\n\r\n    var markerId = 0;\r\n    /**\r\n     * AgmMarker renders a map marker inside a {@link AgmMap}.\r\n     *\r\n     * ### Example\r\n     * ```typescript\r\n     * import { Component } from '@angular/core';\r\n     *\r\n     * @Component({\r\n     *  selector: 'my-map-cmp',\r\n     *  styles: [`\r\n     *    .agm-map-container {\r\n     *      height: 300px;\r\n     *    }\r\n     * `],\r\n     *  template: `\r\n     *    <agm-map [latitude]=\"lat\" [longitude]=\"lng\" [zoom]=\"zoom\">\r\n     *      <agm-marker [latitude]=\"lat\" [longitude]=\"lng\" [label]=\"'M'\">\r\n     *      </agm-marker>\r\n     *    </agm-map>\r\n     *  `\r\n     * })\r\n     * ```\r\n     */\r\n    var AgmMarker = /** @class */ (function () {\r\n        function AgmMarker(_markerManager) {\r\n            this._markerManager = _markerManager;\r\n            /**\r\n               * If true, the marker can be dragged. Default value is false.\r\n               */\r\n            // tslint:disable-next-line:no-input-rename\r\n            this.draggable = false;\r\n            /**\r\n               * If true, the marker is visible\r\n               */\r\n            this.visible = true;\r\n            /**\r\n               * Whether to automatically open the child info window when the marker is clicked.\r\n               */\r\n            this.openInfoWindow = true;\r\n            /**\r\n               * The marker's opacity between 0.0 and 1.0.\r\n               */\r\n            this.opacity = 1;\r\n            /**\r\n               * All markers are displayed on the map in order of their zIndex, with higher values displaying in\r\n               * front of markers with lower values. By default, markers are displayed according to their\r\n               * vertical position on screen, with lower markers appearing in front of markers further up the\r\n               * screen.\r\n               */\r\n            this.zIndex = 1;\r\n            /**\r\n               * If true, the marker can be clicked. Default value is true.\r\n               */\r\n            // tslint:disable-next-line:no-input-rename\r\n            this.clickable = true;\r\n            /**\r\n               * This event emitter gets emitted when the user clicks on the marker.\r\n               */\r\n            this.markerClick = new core.EventEmitter();\r\n            /**\r\n               * This event is fired when the user rightclicks on the marker.\r\n               */\r\n            this.markerRightClick = new core.EventEmitter();\r\n            /**\r\n               * This event is fired when the user stops dragging the marker.\r\n               */\r\n            this.dragEnd = new core.EventEmitter();\r\n            /**\r\n               * This event is fired when the user mouses over the marker.\r\n               */\r\n            this.mouseOver = new core.EventEmitter();\r\n            /**\r\n               * This event is fired when the user mouses outside the marker.\r\n               */\r\n            this.mouseOut = new core.EventEmitter();\r\n            /**\r\n               * @internal\r\n               */\r\n            this.infoWindow = new core.QueryList();\r\n            this._markerAddedToManger = false;\r\n            this._observableSubscriptions = [];\r\n            this._fitBoundsDetails$ = new rxjs.ReplaySubject(1);\r\n            this._id = (markerId++).toString();\r\n        }\r\n        /* @internal */\r\n        /* @internal */\r\n        AgmMarker.prototype.ngAfterContentInit = /* @internal */\r\n        function () {\r\n            var _this = this;\r\n            this.handleInfoWindowUpdate();\r\n            this.infoWindow.changes.subscribe(function () { return _this.handleInfoWindowUpdate(); });\r\n        };\r\n        AgmMarker.prototype.handleInfoWindowUpdate = function () {\r\n            var _this = this;\r\n            if (this.infoWindow.length > 1) {\r\n                throw new Error('Expected no more than one info window.');\r\n            }\r\n            this.infoWindow.forEach(function (marker) {\r\n                marker.hostMarker = _this;\r\n            });\r\n        };\r\n        /** @internal */\r\n        /** @internal */\r\n        AgmMarker.prototype.ngOnChanges = /** @internal */\r\n        function (changes) {\r\n            if (typeof this.latitude === 'string') {\r\n                this.latitude = Number(this.latitude);\r\n            }\r\n            if (typeof this.longitude === 'string') {\r\n                this.longitude = Number(this.longitude);\r\n            }\r\n            if (typeof this.latitude !== 'number' || typeof this.longitude !== 'number') {\r\n                return;\r\n            }\r\n            if (!this._markerAddedToManger) {\r\n                this._markerManager.addMarker(this);\r\n                this._updateFitBoundsDetails();\r\n                this._markerAddedToManger = true;\r\n                this._addEventListeners();\r\n                return;\r\n            }\r\n            if (changes['latitude'] || changes['longitude']) {\r\n                this._markerManager.updateMarkerPosition(this);\r\n                this._updateFitBoundsDetails();\r\n            }\r\n            if (changes['title']) {\r\n                this._markerManager.updateTitle(this);\r\n            }\r\n            if (changes['label']) {\r\n                this._markerManager.updateLabel(this);\r\n            }\r\n            if (changes['draggable']) {\r\n                this._markerManager.updateDraggable(this);\r\n            }\r\n            if (changes['iconUrl']) {\r\n                this._markerManager.updateIcon(this);\r\n            }\r\n            if (changes['opacity']) {\r\n                this._markerManager.updateOpacity(this);\r\n            }\r\n            if (changes['visible']) {\r\n                this._markerManager.updateVisible(this);\r\n            }\r\n            if (changes['zIndex']) {\r\n                this._markerManager.updateZIndex(this);\r\n            }\r\n            if (changes['clickable']) {\r\n                this._markerManager.updateClickable(this);\r\n            }\r\n            if (changes['animation']) {\r\n                this._markerManager.updateAnimation(this);\r\n            }\r\n        };\r\n        /**\r\n         * @internal\r\n         */\r\n        /**\r\n           * @internal\r\n           */\r\n        AgmMarker.prototype.getFitBoundsDetails$ = /**\r\n           * @internal\r\n           */\r\n        function () {\r\n            return this._fitBoundsDetails$.asObservable();\r\n        };\r\n        AgmMarker.prototype._updateFitBoundsDetails = function () {\r\n            this._fitBoundsDetails$.next({ latLng: { lat: this.latitude, lng: this.longitude } });\r\n        };\r\n        AgmMarker.prototype._addEventListeners = function () {\r\n            var _this = this;\r\n            var cs = this._markerManager.createEventObservable('click', this).subscribe(function () {\r\n                if (_this.openInfoWindow) {\r\n                    _this.infoWindow.forEach(function (infoWindow) { return infoWindow.open(); });\r\n                }\r\n                _this.markerClick.emit(_this);\r\n            });\r\n            this._observableSubscriptions.push(cs);\r\n            var rc = this._markerManager.createEventObservable('rightclick', this).subscribe(function () {\r\n                _this.markerRightClick.emit(null);\r\n            });\r\n            this._observableSubscriptions.push(rc);\r\n            var ds = this._markerManager.createEventObservable('dragend', this)\r\n                .subscribe(function (e) {\r\n                _this.dragEnd.emit({ coords: { lat: e.latLng.lat(), lng: e.latLng.lng() } });\r\n            });\r\n            this._observableSubscriptions.push(ds);\r\n            var mover = this._markerManager.createEventObservable('mouseover', this)\r\n                .subscribe(function (e) {\r\n                _this.mouseOver.emit({ coords: { lat: e.latLng.lat(), lng: e.latLng.lng() } });\r\n            });\r\n            this._observableSubscriptions.push(mover);\r\n            var mout = this._markerManager.createEventObservable('mouseout', this)\r\n                .subscribe(function (e) {\r\n                _this.mouseOut.emit({ coords: { lat: e.latLng.lat(), lng: e.latLng.lng() } });\r\n            });\r\n            this._observableSubscriptions.push(mout);\r\n        };\r\n        /** @internal */\r\n        /** @internal */\r\n        AgmMarker.prototype.id = /** @internal */\r\n        function () { return this._id; };\r\n        /** @internal */\r\n        /** @internal */\r\n        AgmMarker.prototype.toString = /** @internal */\r\n        function () { return 'AgmMarker-' + this._id.toString(); };\r\n        /** @internal */\r\n        /** @internal */\r\n        AgmMarker.prototype.ngOnDestroy = /** @internal */\r\n        function () {\r\n            this._markerManager.deleteMarker(this);\r\n            // unsubscribe all registered observable subscriptions\r\n            this._observableSubscriptions.forEach(function (s) { return s.unsubscribe(); });\r\n        };\r\n        AgmMarker.decorators = [\r\n            { type: core.Directive, args: [{\r\n                        selector: 'agm-marker',\r\n                        providers: [\r\n                            { provide: FitBoundsAccessor, useExisting: core.forwardRef(function () { return AgmMarker; }) }\r\n                        ],\r\n                        inputs: [\r\n                            'latitude', 'longitude', 'title', 'label', 'draggable: markerDraggable', 'iconUrl',\r\n                            'openInfoWindow', 'opacity', 'visible', 'zIndex', 'animation'\r\n                        ],\r\n                        outputs: ['markerClick', 'dragEnd', 'mouseOver', 'mouseOut']\r\n                    },] },\r\n        ];\r\n        /** @nocollapse */\r\n        AgmMarker.ctorParameters = function () { return [\r\n            { type: MarkerManager, },\r\n        ]; };\r\n        AgmMarker.propDecorators = {\r\n            \"latitude\": [{ type: core.Input },],\r\n            \"longitude\": [{ type: core.Input },],\r\n            \"title\": [{ type: core.Input },],\r\n            \"label\": [{ type: core.Input },],\r\n            \"draggable\": [{ type: core.Input, args: ['markerDraggable',] },],\r\n            \"iconUrl\": [{ type: core.Input },],\r\n            \"visible\": [{ type: core.Input },],\r\n            \"openInfoWindow\": [{ type: core.Input },],\r\n            \"opacity\": [{ type: core.Input },],\r\n            \"zIndex\": [{ type: core.Input },],\r\n            \"clickable\": [{ type: core.Input, args: ['markerClickable',] },],\r\n            \"markerClick\": [{ type: core.Output },],\r\n            \"markerRightClick\": [{ type: core.Output },],\r\n            \"dragEnd\": [{ type: core.Output },],\r\n            \"mouseOver\": [{ type: core.Output },],\r\n            \"mouseOut\": [{ type: core.Output },],\r\n            \"infoWindow\": [{ type: core.ContentChildren, args: [AgmInfoWindow,] },],\r\n        };\r\n        return AgmMarker;\r\n    }());\r\n\r\n    /**\r\n     * AgmPolygon renders a polygon on a {@link AgmMap}\r\n     *\r\n     * ### Example\r\n     * ```typescript\r\n     * import { Component } from '@angular/core';\r\n     *\r\n     * @Component({\r\n     *  selector: 'my-map-cmp',\r\n     *  styles: [`\r\n     *    agm-map {\r\n     *      height: 300px;\r\n     *    }\r\n     * `],\r\n     *  template: `\r\n     *    <agm-map [latitude]=\"lat\" [longitude]=\"lng\" [zoom]=\"zoom\">\r\n     *      <agm-polygon [paths]=\"paths\">\r\n     *      </agm-polygon>\r\n     *    </agm-map>\r\n     *  `\r\n     * })\r\n     * export class MyMapCmp {\r\n     *   lat: number = 0;\r\n     *   lng: number = 0;\r\n     *   zoom: number = 10;\r\n     *   paths: Array<LatLngLiteral> = [\r\n     *     { lat: 0,  lng: 10 },\r\n     *     { lat: 0,  lng: 20 },\r\n     *     { lat: 10, lng: 20 },\r\n     *     { lat: 10, lng: 10 },\r\n     *     { lat: 0,  lng: 10 }\r\n     *   ]\r\n     *   // Nesting paths will create a hole where they overlap;\r\n     *   nestedPaths: Array<Array<LatLngLiteral>> = [[\r\n     *     { lat: 0,  lng: 10 },\r\n     *     { lat: 0,  lng: 20 },\r\n     *     { lat: 10, lng: 20 },\r\n     *     { lat: 10, lng: 10 },\r\n     *     { lat: 0,  lng: 10 }\r\n     *   ], [\r\n     *     { lat: 0, lng: 15 },\r\n     *     { lat: 0, lng: 20 },\r\n     *     { lat: 5, lng: 20 },\r\n     *     { lat: 5, lng: 15 },\r\n     *     { lat: 0, lng: 15 }\r\n     *   ]]\r\n     * }\r\n     * ```\r\n     */\r\n    var AgmPolygon = /** @class */ (function () {\r\n        function AgmPolygon(_polygonManager) {\r\n            this._polygonManager = _polygonManager;\r\n            /**\r\n               * Indicates whether this Polygon handles mouse events. Defaults to true.\r\n               */\r\n            this.clickable = true;\r\n            /**\r\n               * If set to true, the user can drag this shape over the map. The geodesic\r\n               * property defines the mode of dragging. Defaults to false.\r\n               */\r\n            // tslint:disable-next-line:no-input-rename\r\n            this.draggable = false;\r\n            /**\r\n               * If set to true, the user can edit this shape by dragging the control\r\n               * points shown at the vertices and on each segment. Defaults to false.\r\n               */\r\n            this.editable = false;\r\n            /**\r\n               * When true, edges of the polygon are interpreted as geodesic and will\r\n               * follow the curvature of the Earth. When false, edges of the polygon are\r\n               * rendered as straight lines in screen space. Note that the shape of a\r\n               * geodesic polygon may appear to change when dragged, as the dimensions\r\n               * are maintained relative to the surface of the earth. Defaults to false.\r\n               */\r\n            this.geodesic = false;\r\n            /**\r\n               * The ordered sequence of coordinates that designates a closed loop.\r\n               * Unlike polylines, a polygon may consist of one or more paths.\r\n               *  As a result, the paths property may specify one or more arrays of\r\n               * LatLng coordinates. Paths are closed automatically; do not repeat the\r\n               * first vertex of the path as the last vertex. Simple polygons may be\r\n               * defined using a single array of LatLngs. More complex polygons may\r\n               * specify an array of arrays. Any simple arrays are converted into Arrays.\r\n               * Inserting or removing LatLngs from the Array will automatically update\r\n               * the polygon on the map.\r\n               */\r\n            this.paths = [];\r\n            /**\r\n               * This event is fired when the DOM click event is fired on the Polygon.\r\n               */\r\n            this.polyClick = new core.EventEmitter();\r\n            /**\r\n               * This event is fired when the DOM dblclick event is fired on the Polygon.\r\n               */\r\n            this.polyDblClick = new core.EventEmitter();\r\n            /**\r\n               * This event is repeatedly fired while the user drags the polygon.\r\n               */\r\n            this.polyDrag = new core.EventEmitter();\r\n            /**\r\n               * This event is fired when the user stops dragging the polygon.\r\n               */\r\n            this.polyDragEnd = new core.EventEmitter();\r\n            /**\r\n               * This event is fired when the user starts dragging the polygon.\r\n               */\r\n            this.polyDragStart = new core.EventEmitter();\r\n            /**\r\n               * This event is fired when the DOM mousedown event is fired on the Polygon.\r\n               */\r\n            this.polyMouseDown = new core.EventEmitter();\r\n            /**\r\n               * This event is fired when the DOM mousemove event is fired on the Polygon.\r\n               */\r\n            this.polyMouseMove = new core.EventEmitter();\r\n            /**\r\n               * This event is fired on Polygon mouseout.\r\n               */\r\n            this.polyMouseOut = new core.EventEmitter();\r\n            /**\r\n               * This event is fired on Polygon mouseover.\r\n               */\r\n            this.polyMouseOver = new core.EventEmitter();\r\n            /**\r\n               * This event is fired whe the DOM mouseup event is fired on the Polygon\r\n               */\r\n            this.polyMouseUp = new core.EventEmitter();\r\n            /**\r\n               * This even is fired when the Polygon is right-clicked on.\r\n               */\r\n            this.polyRightClick = new core.EventEmitter();\r\n            this._polygonAddedToManager = false;\r\n            this._subscriptions = [];\r\n        }\r\n        /** @internal */\r\n        /** @internal */\r\n        AgmPolygon.prototype.ngAfterContentInit = /** @internal */\r\n        function () {\r\n            if (!this._polygonAddedToManager) {\r\n                this._init();\r\n            }\r\n        };\r\n        AgmPolygon.prototype.ngOnChanges = function (changes) {\r\n            if (!this._polygonAddedToManager) {\r\n                this._init();\r\n                return;\r\n            }\r\n            this._polygonManager.setPolygonOptions(this, this._updatePolygonOptions(changes));\r\n        };\r\n        AgmPolygon.prototype._init = function () {\r\n            this._polygonManager.addPolygon(this);\r\n            this._polygonAddedToManager = true;\r\n            this._addEventListeners();\r\n        };\r\n        AgmPolygon.prototype._addEventListeners = function () {\r\n            var _this = this;\r\n            var handlers = [\r\n                { name: 'click', handler: function (ev) { return _this.polyClick.emit(ev); } },\r\n                { name: 'dblclick', handler: function (ev) { return _this.polyDblClick.emit(ev); } },\r\n                { name: 'drag', handler: function (ev) { return _this.polyDrag.emit(ev); } },\r\n                { name: 'dragend', handler: function (ev) { return _this.polyDragEnd.emit(ev); } },\r\n                { name: 'dragstart', handler: function (ev) { return _this.polyDragStart.emit(ev); } },\r\n                { name: 'mousedown', handler: function (ev) { return _this.polyMouseDown.emit(ev); } },\r\n                { name: 'mousemove', handler: function (ev) { return _this.polyMouseMove.emit(ev); } },\r\n                { name: 'mouseout', handler: function (ev) { return _this.polyMouseOut.emit(ev); } },\r\n                { name: 'mouseover', handler: function (ev) { return _this.polyMouseOver.emit(ev); } },\r\n                { name: 'mouseup', handler: function (ev) { return _this.polyMouseUp.emit(ev); } },\r\n                { name: 'rightclick', handler: function (ev) { return _this.polyRightClick.emit(ev); } },\r\n            ];\r\n            handlers.forEach(function (obj) {\r\n                var os = _this._polygonManager.createEventObservable(obj.name, _this).subscribe(obj.handler);\r\n                _this._subscriptions.push(os);\r\n            });\r\n        };\r\n        AgmPolygon.prototype._updatePolygonOptions = function (changes) {\r\n            return Object.keys(changes)\r\n                .filter(function (k) { return AgmPolygon._polygonOptionsAttributes.indexOf(k) !== -1; })\r\n                .reduce(function (obj, k) {\r\n                obj[k] = changes[k].currentValue;\r\n                return obj;\r\n            }, {});\r\n        };\r\n        /** @internal */\r\n        /** @internal */\r\n        AgmPolygon.prototype.id = /** @internal */\r\n        function () { return this._id; };\r\n        /** @internal */\r\n        /** @internal */\r\n        AgmPolygon.prototype.ngOnDestroy = /** @internal */\r\n        function () {\r\n            this._polygonManager.deletePolygon(this);\r\n            // unsubscribe all registered observable subscriptions\r\n            this._subscriptions.forEach(function (s) { return s.unsubscribe(); });\r\n        };\r\n        AgmPolygon._polygonOptionsAttributes = [\r\n            'clickable', 'draggable', 'editable', 'fillColor', 'fillOpacity', 'geodesic', 'icon', 'map',\r\n            'paths', 'strokeColor', 'strokeOpacity', 'strokeWeight', 'visible', 'zIndex', 'draggable',\r\n            'editable', 'visible'\r\n        ];\r\n        AgmPolygon.decorators = [\r\n            { type: core.Directive, args: [{\r\n                        selector: 'agm-polygon'\r\n                    },] },\r\n        ];\r\n        /** @nocollapse */\r\n        AgmPolygon.ctorParameters = function () { return [\r\n            { type: PolygonManager, },\r\n        ]; };\r\n        AgmPolygon.propDecorators = {\r\n            \"clickable\": [{ type: core.Input },],\r\n            \"draggable\": [{ type: core.Input, args: ['polyDraggable',] },],\r\n            \"editable\": [{ type: core.Input },],\r\n            \"fillColor\": [{ type: core.Input },],\r\n            \"fillOpacity\": [{ type: core.Input },],\r\n            \"geodesic\": [{ type: core.Input },],\r\n            \"paths\": [{ type: core.Input },],\r\n            \"strokeColor\": [{ type: core.Input },],\r\n            \"strokeOpacity\": [{ type: core.Input },],\r\n            \"strokeWeight\": [{ type: core.Input },],\r\n            \"visible\": [{ type: core.Input },],\r\n            \"zIndex\": [{ type: core.Input },],\r\n            \"polyClick\": [{ type: core.Output },],\r\n            \"polyDblClick\": [{ type: core.Output },],\r\n            \"polyDrag\": [{ type: core.Output },],\r\n            \"polyDragEnd\": [{ type: core.Output },],\r\n            \"polyDragStart\": [{ type: core.Output },],\r\n            \"polyMouseDown\": [{ type: core.Output },],\r\n            \"polyMouseMove\": [{ type: core.Output },],\r\n            \"polyMouseOut\": [{ type: core.Output },],\r\n            \"polyMouseOver\": [{ type: core.Output },],\r\n            \"polyMouseUp\": [{ type: core.Output },],\r\n            \"polyRightClick\": [{ type: core.Output },],\r\n        };\r\n        return AgmPolygon;\r\n    }());\r\n\r\n    /**\r\n     * AgmPolylinePoint represents one element of a polyline within a  {@link\r\n     * SembGoogleMapPolyline}\r\n     */\r\n    var AgmPolylinePoint = /** @class */ (function () {\r\n        function AgmPolylinePoint() {\r\n            /**\r\n               * This event emitter gets emitted when the position of the point changed.\r\n               */\r\n            this.positionChanged = new core.EventEmitter();\r\n        }\r\n        AgmPolylinePoint.prototype.ngOnChanges = function (changes) {\r\n            if (changes['latitude'] || changes['longitude']) {\r\n                var position = {\r\n                    lat: changes['latitude'].currentValue,\r\n                    lng: changes['longitude'].currentValue\r\n                };\r\n                this.positionChanged.emit(position);\r\n            }\r\n        };\r\n        AgmPolylinePoint.decorators = [\r\n            { type: core.Directive, args: [{ selector: 'agm-polyline-point' },] },\r\n        ];\r\n        /** @nocollapse */\r\n        AgmPolylinePoint.ctorParameters = function () { return []; };\r\n        AgmPolylinePoint.propDecorators = {\r\n            \"latitude\": [{ type: core.Input },],\r\n            \"longitude\": [{ type: core.Input },],\r\n            \"positionChanged\": [{ type: core.Output },],\r\n        };\r\n        return AgmPolylinePoint;\r\n    }());\r\n\r\n    var polylineId = 0;\r\n    /**\r\n     * AgmPolyline renders a polyline on a {@link AgmMap}\r\n     *\r\n     * ### Example\r\n     * ```typescript\r\n     * import { Component } from '@angular/core';\r\n     *\r\n     * @Component({\r\n     *  selector: 'my-map-cmp',\r\n     *  styles: [`\r\n     *    .agm-map-container {\r\n     *      height: 300px;\r\n     *    }\r\n     * `],\r\n     *  template: `\r\n     *    <agm-map [latitude]=\"lat\" [longitude]=\"lng\" [zoom]=\"zoom\">\r\n     *      <agm-polyline>\r\n     *          <agm-polyline-point [latitude]=\"latA\" [longitude]=\"lngA\">\r\n     *          </agm-polyline-point>\r\n     *          <agm-polyline-point [latitude]=\"latB\" [longitude]=\"lngB\">\r\n     *          </agm-polyline-point>\r\n     *      </agm-polyline>\r\n     *    </agm-map>\r\n     *  `\r\n     * })\r\n     * ```\r\n     */\r\n    var AgmPolyline = /** @class */ (function () {\r\n        function AgmPolyline(_polylineManager) {\r\n            this._polylineManager = _polylineManager;\r\n            /**\r\n               * Indicates whether this Polyline handles mouse events. Defaults to true.\r\n               */\r\n            this.clickable = true;\r\n            /**\r\n               * If set to true, the user can drag this shape over the map. The geodesic property defines the\r\n               * mode of dragging. Defaults to false.\r\n               */\r\n            // tslint:disable-next-line:no-input-rename\r\n            this.draggable = false;\r\n            /**\r\n               * If set to true, the user can edit this shape by dragging the control points shown at the\r\n               * vertices and on each segment. Defaults to false.\r\n               */\r\n            this.editable = false;\r\n            /**\r\n               * When true, edges of the polygon are interpreted as geodesic and will follow the curvature of\r\n               * the Earth. When false, edges of the polygon are rendered as straight lines in screen space.\r\n               * Note that the shape of a geodesic polygon may appear to change when dragged, as the dimensions\r\n               * are maintained relative to the surface of the earth. Defaults to false.\r\n               */\r\n            this.geodesic = false;\r\n            /**\r\n               * Whether this polyline is visible on the map. Defaults to true.\r\n               */\r\n            this.visible = true;\r\n            /**\r\n               * This event is fired when the DOM click event is fired on the Polyline.\r\n               */\r\n            this.lineClick = new core.EventEmitter();\r\n            /**\r\n               * This event is fired when the DOM dblclick event is fired on the Polyline.\r\n               */\r\n            this.lineDblClick = new core.EventEmitter();\r\n            /**\r\n               * This event is repeatedly fired while the user drags the polyline.\r\n               */\r\n            this.lineDrag = new core.EventEmitter();\r\n            /**\r\n               * This event is fired when the user stops dragging the polyline.\r\n               */\r\n            this.lineDragEnd = new core.EventEmitter();\r\n            /**\r\n               * This event is fired when the user starts dragging the polyline.\r\n               */\r\n            this.lineDragStart = new core.EventEmitter();\r\n            /**\r\n               * This event is fired when the DOM mousedown event is fired on the Polyline.\r\n               */\r\n            this.lineMouseDown = new core.EventEmitter();\r\n            /**\r\n               * This event is fired when the DOM mousemove event is fired on the Polyline.\r\n               */\r\n            this.lineMouseMove = new core.EventEmitter();\r\n            /**\r\n               * This event is fired on Polyline mouseout.\r\n               */\r\n            this.lineMouseOut = new core.EventEmitter();\r\n            /**\r\n               * This event is fired on Polyline mouseover.\r\n               */\r\n            this.lineMouseOver = new core.EventEmitter();\r\n            /**\r\n               * This event is fired whe the DOM mouseup event is fired on the Polyline\r\n               */\r\n            this.lineMouseUp = new core.EventEmitter();\r\n            /**\r\n               * This even is fired when the Polyline is right-clicked on.\r\n               */\r\n            this.lineRightClick = new core.EventEmitter();\r\n            this._polylineAddedToManager = false;\r\n            this._subscriptions = [];\r\n            this._id = (polylineId++).toString();\r\n        }\r\n        /** @internal */\r\n        /** @internal */\r\n        AgmPolyline.prototype.ngAfterContentInit = /** @internal */\r\n        function () {\r\n            var _this = this;\r\n            if (this.points.length) {\r\n                this.points.forEach(function (point) {\r\n                    var s = point.positionChanged.subscribe(function () { _this._polylineManager.updatePolylinePoints(_this); });\r\n                    _this._subscriptions.push(s);\r\n                });\r\n            }\r\n            if (!this._polylineAddedToManager) {\r\n                this._init();\r\n            }\r\n            var s = this.points.changes.subscribe(function () { return _this._polylineManager.updatePolylinePoints(_this); });\r\n            this._subscriptions.push(s);\r\n            this._polylineManager.updatePolylinePoints(this);\r\n        };\r\n        AgmPolyline.prototype.ngOnChanges = function (changes) {\r\n            if (!this._polylineAddedToManager) {\r\n                this._init();\r\n                return;\r\n            }\r\n            var options = {};\r\n            var optionKeys = Object.keys(changes).filter(function (k) { return AgmPolyline._polylineOptionsAttributes.indexOf(k) !== -1; });\r\n            optionKeys.forEach(function (k) { return options[k] = changes[k].currentValue; });\r\n            this._polylineManager.setPolylineOptions(this, options);\r\n        };\r\n        AgmPolyline.prototype._init = function () {\r\n            this._polylineManager.addPolyline(this);\r\n            this._polylineAddedToManager = true;\r\n            this._addEventListeners();\r\n        };\r\n        AgmPolyline.prototype._addEventListeners = function () {\r\n            var _this = this;\r\n            var handlers = [\r\n                { name: 'click', handler: function (ev) { return _this.lineClick.emit(ev); } },\r\n                { name: 'dblclick', handler: function (ev) { return _this.lineDblClick.emit(ev); } },\r\n                { name: 'drag', handler: function (ev) { return _this.lineDrag.emit(ev); } },\r\n                { name: 'dragend', handler: function (ev) { return _this.lineDragEnd.emit(ev); } },\r\n                { name: 'dragstart', handler: function (ev) { return _this.lineDragStart.emit(ev); } },\r\n                { name: 'mousedown', handler: function (ev) { return _this.lineMouseDown.emit(ev); } },\r\n                { name: 'mousemove', handler: function (ev) { return _this.lineMouseMove.emit(ev); } },\r\n                { name: 'mouseout', handler: function (ev) { return _this.lineMouseOut.emit(ev); } },\r\n                { name: 'mouseover', handler: function (ev) { return _this.lineMouseOver.emit(ev); } },\r\n                { name: 'mouseup', handler: function (ev) { return _this.lineMouseUp.emit(ev); } },\r\n                { name: 'rightclick', handler: function (ev) { return _this.lineRightClick.emit(ev); } },\r\n            ];\r\n            handlers.forEach(function (obj) {\r\n                var os = _this._polylineManager.createEventObservable(obj.name, _this).subscribe(obj.handler);\r\n                _this._subscriptions.push(os);\r\n            });\r\n        };\r\n        /** @internal */\r\n        /** @internal */\r\n        AgmPolyline.prototype._getPoints = /** @internal */\r\n        function () {\r\n            if (this.points) {\r\n                return this.points.toArray();\r\n            }\r\n            return [];\r\n        };\r\n        /** @internal */\r\n        /** @internal */\r\n        AgmPolyline.prototype.id = /** @internal */\r\n        function () { return this._id; };\r\n        /** @internal */\r\n        /** @internal */\r\n        AgmPolyline.prototype.ngOnDestroy = /** @internal */\r\n        function () {\r\n            this._polylineManager.deletePolyline(this);\r\n            // unsubscribe all registered observable subscriptions\r\n            this._subscriptions.forEach(function (s) { return s.unsubscribe(); });\r\n        };\r\n        AgmPolyline._polylineOptionsAttributes = [\r\n            'draggable', 'editable', 'visible', 'geodesic', 'strokeColor', 'strokeOpacity', 'strokeWeight',\r\n            'zIndex'\r\n        ];\r\n        AgmPolyline.decorators = [\r\n            { type: core.Directive, args: [{\r\n                        selector: 'agm-polyline'\r\n                    },] },\r\n        ];\r\n        /** @nocollapse */\r\n        AgmPolyline.ctorParameters = function () { return [\r\n            { type: PolylineManager, },\r\n        ]; };\r\n        AgmPolyline.propDecorators = {\r\n            \"clickable\": [{ type: core.Input },],\r\n            \"draggable\": [{ type: core.Input, args: ['polylineDraggable',] },],\r\n            \"editable\": [{ type: core.Input },],\r\n            \"geodesic\": [{ type: core.Input },],\r\n            \"strokeColor\": [{ type: core.Input },],\r\n            \"strokeOpacity\": [{ type: core.Input },],\r\n            \"strokeWeight\": [{ type: core.Input },],\r\n            \"visible\": [{ type: core.Input },],\r\n            \"zIndex\": [{ type: core.Input },],\r\n            \"lineClick\": [{ type: core.Output },],\r\n            \"lineDblClick\": [{ type: core.Output },],\r\n            \"lineDrag\": [{ type: core.Output },],\r\n            \"lineDragEnd\": [{ type: core.Output },],\r\n            \"lineDragStart\": [{ type: core.Output },],\r\n            \"lineMouseDown\": [{ type: core.Output },],\r\n            \"lineMouseMove\": [{ type: core.Output },],\r\n            \"lineMouseOut\": [{ type: core.Output },],\r\n            \"lineMouseOver\": [{ type: core.Output },],\r\n            \"lineMouseUp\": [{ type: core.Output },],\r\n            \"lineRightClick\": [{ type: core.Output },],\r\n            \"points\": [{ type: core.ContentChildren, args: [AgmPolylinePoint,] },],\r\n        };\r\n        return AgmPolyline;\r\n    }());\r\n\r\n    /**\r\n     * Adds the given directive to the auto fit bounds feature when the value is true.\r\n     * To make it work with you custom AGM component, you also have to implement the {@link FitBoundsAccessor} abstract class.\r\n     * @example\r\n     * <agm-marker [agmFitBounds]=\"true\"></agm-marker>\r\n     */\r\n    var AgmFitBounds = /** @class */ (function () {\r\n        function AgmFitBounds(_fitBoundsAccessor, _fitBoundsService) {\r\n            this._fitBoundsAccessor = _fitBoundsAccessor;\r\n            this._fitBoundsService = _fitBoundsService;\r\n            /**\r\n               * If the value is true, the element gets added to the bounds of the map.\r\n               * Default: true.\r\n               */\r\n            this.agmFitBounds = true;\r\n            this._destroyed$ = new rxjs.Subject();\r\n            this._latestFitBoundsDetails = null;\r\n        }\r\n        /**\r\n         * @internal\r\n         */\r\n        /**\r\n           * @internal\r\n           */\r\n        AgmFitBounds.prototype.ngOnChanges = /**\r\n           * @internal\r\n           */\r\n        function (changes) {\r\n            this._updateBounds();\r\n        };\r\n        /**\r\n         * @internal\r\n         */\r\n        /**\r\n           * @internal\r\n           */\r\n        AgmFitBounds.prototype.ngOnInit = /**\r\n           * @internal\r\n           */\r\n        function () {\r\n            var _this = this;\r\n            this._fitBoundsAccessor\r\n                .getFitBoundsDetails$()\r\n                .pipe(operators.distinctUntilChanged(function (x, y) {\r\n                return x.latLng.lat === y.latLng.lng;\r\n            }), operators.takeUntil(this._destroyed$))\r\n                .subscribe(function (details) { return _this._updateBounds(details); });\r\n        };\r\n        AgmFitBounds.prototype._updateBounds = function (newFitBoundsDetails) {\r\n            if (newFitBoundsDetails) {\r\n                this._latestFitBoundsDetails = newFitBoundsDetails;\r\n            }\r\n            if (!this._latestFitBoundsDetails) {\r\n                return;\r\n            }\r\n            if (this.agmFitBounds) {\r\n                this._fitBoundsService.addToBounds(this._latestFitBoundsDetails.latLng);\r\n            }\r\n            else {\r\n                this._fitBoundsService.removeFromBounds(this._latestFitBoundsDetails.latLng);\r\n            }\r\n        };\r\n        /**\r\n         * @internal\r\n         */\r\n        /**\r\n           * @internal\r\n           */\r\n        AgmFitBounds.prototype.ngOnDestroy = /**\r\n           * @internal\r\n           */\r\n        function () {\r\n            this._destroyed$.next();\r\n            this._destroyed$.complete();\r\n            if (this._latestFitBoundsDetails !== null) {\r\n                this._fitBoundsService.removeFromBounds(this._latestFitBoundsDetails.latLng);\r\n            }\r\n        };\r\n        AgmFitBounds.decorators = [\r\n            { type: core.Directive, args: [{\r\n                        selector: '[agmFitBounds]'\r\n                    },] },\r\n        ];\r\n        /** @nocollapse */\r\n        AgmFitBounds.ctorParameters = function () { return [\r\n            { type: FitBoundsAccessor, decorators: [{ type: core.Self },] },\r\n            { type: FitBoundsService, },\r\n        ]; };\r\n        AgmFitBounds.propDecorators = {\r\n            \"agmFitBounds\": [{ type: core.Input },],\r\n        };\r\n        return AgmFitBounds;\r\n    }());\r\n\r\n    var WindowRef = /** @class */ (function () {\r\n        function WindowRef() {\r\n        }\r\n        WindowRef.prototype.getNativeWindow = function () { return window; };\r\n        return WindowRef;\r\n    }());\r\n    var DocumentRef = /** @class */ (function () {\r\n        function DocumentRef() {\r\n        }\r\n        DocumentRef.prototype.getNativeDocument = function () { return document; };\r\n        return DocumentRef;\r\n    }());\r\n\r\n    var __extends = (undefined && undefined.__extends) || (function () {\r\n        var extendStatics = Object.setPrototypeOf ||\r\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n        return function (d, b) {\r\n            extendStatics(d, b);\r\n            function __() { this.constructor = d; }\r\n            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n        };\r\n    })();\r\n    var GoogleMapsScriptProtocol;\r\n    (function (GoogleMapsScriptProtocol) {\r\n        GoogleMapsScriptProtocol[GoogleMapsScriptProtocol[\"HTTP\"] = 1] = \"HTTP\";\r\n        GoogleMapsScriptProtocol[GoogleMapsScriptProtocol[\"HTTPS\"] = 2] = \"HTTPS\";\r\n        GoogleMapsScriptProtocol[GoogleMapsScriptProtocol[\"AUTO\"] = 3] = \"AUTO\";\r\n    })(GoogleMapsScriptProtocol || (GoogleMapsScriptProtocol = {}));\r\n    /**\r\n     * Token for the config of the LazyMapsAPILoader. Please provide an object of type {@link\r\n     * LazyMapsAPILoaderConfig}.\r\n     */\r\n    var LAZY_MAPS_API_CONFIG = new core.InjectionToken('angular-google-maps LAZY_MAPS_API_CONFIG');\r\n    var LazyMapsAPILoader = /** @class */ (function (_super) {\r\n        __extends(LazyMapsAPILoader, _super);\r\n        function LazyMapsAPILoader(config, w, d) {\r\n            if (config === void 0) { config = null; }\r\n            var _this = _super.call(this) || this;\r\n            _this._SCRIPT_ID = 'agmGoogleMapsApiScript';\r\n            _this.callbackName = \"agmLazyMapsAPILoader\";\r\n            _this._config = config || {};\r\n            _this._windowRef = w;\r\n            _this._documentRef = d;\r\n            return _this;\r\n        }\r\n        LazyMapsAPILoader.prototype.load = function () {\r\n            var window = this._windowRef.getNativeWindow();\r\n            if (window.google && window.google.maps) {\r\n                // Google maps already loaded on the page.\r\n                return Promise.resolve();\r\n            }\r\n            if (this._scriptLoadingPromise) {\r\n                return this._scriptLoadingPromise;\r\n            }\r\n            // this can happen in HMR situations or Stackblitz.io editors.\r\n            var scriptOnPage = this._documentRef.getNativeDocument().getElementById(this._SCRIPT_ID);\r\n            if (scriptOnPage) {\r\n                this._assignScriptLoadingPromise(scriptOnPage);\r\n                return this._scriptLoadingPromise;\r\n            }\r\n            var script = this._documentRef.getNativeDocument().createElement('script');\r\n            script.type = 'text/javascript';\r\n            script.async = true;\r\n            script.defer = true;\r\n            script.id = this._SCRIPT_ID;\r\n            script.src = this._getScriptSrc(this.callbackName);\r\n            this._assignScriptLoadingPromise(script);\r\n            this._documentRef.getNativeDocument().body.appendChild(script);\r\n            return this._scriptLoadingPromise;\r\n        };\r\n        LazyMapsAPILoader.prototype._assignScriptLoadingPromise = function (scriptElem) {\r\n            var _this = this;\r\n            this._scriptLoadingPromise = new Promise(function (resolve, reject) {\r\n                _this._windowRef.getNativeWindow()[_this.callbackName] = function () {\r\n                    resolve();\r\n                };\r\n                scriptElem.onerror = function (error) {\r\n                    reject(error);\r\n                };\r\n            });\r\n        };\r\n        LazyMapsAPILoader.prototype._getScriptSrc = function (callbackName) {\r\n            var protocolType = (this._config && this._config.protocol) || GoogleMapsScriptProtocol.HTTPS;\r\n            var protocol;\r\n            switch (protocolType) {\r\n                case GoogleMapsScriptProtocol.AUTO:\r\n                    protocol = '';\r\n                    break;\r\n                case GoogleMapsScriptProtocol.HTTP:\r\n                    protocol = 'http:';\r\n                    break;\r\n                case GoogleMapsScriptProtocol.HTTPS:\r\n                    protocol = 'https:';\r\n                    break;\r\n            }\r\n            var hostAndPath = this._config.hostAndPath || 'maps.googleapis.com/maps/api/js';\r\n            var queryParams = {\r\n                v: this._config.apiVersion || '3',\r\n                callback: callbackName,\r\n                key: this._config.apiKey,\r\n                client: this._config.clientId,\r\n                channel: this._config.channel,\r\n                libraries: this._config.libraries,\r\n                region: this._config.region,\r\n                language: this._config.language\r\n            };\r\n            var params = Object.keys(queryParams)\r\n                .filter(function (k) { return queryParams[k] != null; })\r\n                .filter(function (k) {\r\n                // remove empty arrays\r\n                return !Array.isArray(queryParams[k]) ||\r\n                    (Array.isArray(queryParams[k]) && queryParams[k].length > 0);\r\n            })\r\n                .map(function (k) {\r\n                // join arrays as comma seperated strings\r\n                var i = queryParams[k];\r\n                if (Array.isArray(i)) {\r\n                    return { key: k, value: i.join(',') };\r\n                }\r\n                return { key: k, value: queryParams[k] };\r\n            })\r\n                .map(function (entry) {\r\n                return entry.key + \"=\" + entry.value;\r\n            })\r\n                .join('&');\r\n            return protocol + \"//\" + hostAndPath + \"?\" + params;\r\n        };\r\n        LazyMapsAPILoader.decorators = [\r\n            { type: core.Injectable },\r\n        ];\r\n        /** @nocollapse */\r\n        LazyMapsAPILoader.ctorParameters = function () { return [\r\n            { type: undefined, decorators: [{ type: core.Optional }, { type: core.Inject, args: [LAZY_MAPS_API_CONFIG,] },] },\r\n            { type: WindowRef, },\r\n            { type: DocumentRef, },\r\n        ]; };\r\n        return LazyMapsAPILoader;\r\n    }(MapsAPILoader));\r\n\r\n    /**\r\n     * When using the NoOpMapsAPILoader, the Google Maps API must be added to the page via a `<script>`\r\n     * Tag.\r\n     * It's important that the Google Maps API script gets loaded first on the page.\r\n     */\r\n\r\n    /**\r\n     * @fileoverview added by tsickle\r\n     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\r\n     */\r\n    var AgmDirection = /** @class */ (function () {\r\n        function AgmDirection(gmapsApi) {\r\n            this.gmapsApi = gmapsApi;\r\n            // Options\r\n            this.travelMode = 'DRIVING';\r\n            this.transitOptions = undefined;\r\n            this.drivingOptions = undefined;\r\n            this.waypoints = [];\r\n            this.optimizeWaypoints = true;\r\n            this.provideRouteAlternatives = false;\r\n            this.avoidHighways = false;\r\n            this.avoidTolls = false;\r\n            // Remove or draw direction\r\n            this.visible = true;\r\n            // Direction change event handler\r\n            this.onChange = new core.EventEmitter();\r\n            // Direction response for the new request\r\n            this.onResponse = new core.EventEmitter();\r\n            // Send a custom infowindow\r\n            this.sendInfoWindow = new core.EventEmitter();\r\n            // Status of Directions Query (google.maps.DirectionsStatus.OVER_QUERY_LIMIT)\r\n            this.status = new core.EventEmitter();\r\n            // Marker drag event handler\r\n            this.originDrag = new core.EventEmitter();\r\n            this.destinationDrag = new core.EventEmitter();\r\n            this.directionsService = undefined;\r\n            this.directionsDisplay = undefined;\r\n            this.waypointsMarker = [];\r\n            // Use for visible flag\r\n            this.isFirstChange = true;\r\n        }\r\n        /**\r\n         * @return {?}\r\n         */\r\n        AgmDirection.prototype.ngOnInit = /**\r\n         * @return {?}\r\n         */\r\n        function () {\r\n            if (this.visible === true) {\r\n                this.directionDraw();\r\n            }\r\n        };\r\n        /**\r\n         * @param {?} obj\r\n         * @return {?}\r\n         */\r\n        AgmDirection.prototype.ngOnChanges = /**\r\n         * @param {?} obj\r\n         * @return {?}\r\n         */\r\n        function (obj) {\r\n            /**\r\n             * When visible is false then remove the direction layer\r\n             */\r\n            if (!this.visible) {\r\n                try {\r\n                    this.removeMarkers();\r\n                    this.removeDirections();\r\n                }\r\n                catch (e) { }\r\n            }\r\n            else {\r\n                if (this.isFirstChange) {\r\n                    /**\r\n                     * When visible is false at the first time\r\n                     */\r\n                    if (typeof this.directionsDisplay === 'undefined') {\r\n                        this.directionDraw();\r\n                    }\r\n                    this.isFirstChange = false;\r\n                    return;\r\n                }\r\n                /**\r\n                 * When renderOptions are not first change then reset the display\r\n                 */\r\n                if (typeof obj.renderOptions !== 'undefined') {\r\n                    if (obj.renderOptions.firstChange === false) {\r\n                        this.removeMarkers();\r\n                        this.removeDirections();\r\n                    }\r\n                }\r\n                this.directionDraw();\r\n            }\r\n        };\r\n        /**\r\n         * @return {?}\r\n         */\r\n        AgmDirection.prototype.ngOnDestroy = /**\r\n         * @return {?}\r\n         */\r\n        function () {\r\n            this.destroyMarkers();\r\n            this.removeDirections();\r\n        };\r\n        /**\r\n         * This event is fired when the user creating or updating this direction\r\n         */\r\n        /**\r\n         * This event is fired when the user creating or updating this direction\r\n         * @return {?}\r\n         */\r\n        AgmDirection.prototype.directionDraw = /**\r\n         * This event is fired when the user creating or updating this direction\r\n         * @return {?}\r\n         */\r\n        function () {\r\n            var _this = this;\r\n            this.gmapsApi.getNativeMap().then(function (map) {\r\n                if (typeof _this.directionsDisplay === 'undefined') {\r\n                    _this.directionsDisplay = new google.maps.DirectionsRenderer(_this.renderOptions);\r\n                    _this.directionsDisplay.setMap(map);\r\n                    _this.directionsDisplay.addListener('directions_changed', function () {\r\n                        _this.onChange.emit(_this.directionsDisplay.getDirections());\r\n                    });\r\n                }\r\n                if (typeof _this.directionsService === 'undefined') {\r\n                    _this.directionsService = new google.maps.DirectionsService;\r\n                }\r\n                if (typeof _this.panel === 'undefined') {\r\n                    _this.directionsDisplay.setPanel(null);\r\n                }\r\n                else {\r\n                    _this.directionsDisplay.setPanel(_this.panel);\r\n                }\r\n                // Render exist direction\r\n                if (typeof _this.renderRoute === 'object' && _this.renderRoute !== null) {\r\n                    _this.directionsDisplay.setDirections(_this.renderRoute);\r\n                    _this.renderRoute = null; // or set undefined, ''\r\n                }\r\n                else {\r\n                    // Request new direction\r\n                    _this.directionsService.route({\r\n                        origin: _this.origin,\r\n                        destination: _this.destination,\r\n                        travelMode: _this.travelMode,\r\n                        transitOptions: _this.transitOptions,\r\n                        drivingOptions: _this.drivingOptions,\r\n                        waypoints: _this.waypoints,\r\n                        optimizeWaypoints: _this.optimizeWaypoints,\r\n                        provideRouteAlternatives: _this.provideRouteAlternatives,\r\n                        avoidHighways: _this.avoidHighways,\r\n                        avoidTolls: _this.avoidTolls,\r\n                    }, function (response, status) {\r\n                        _this.onResponse.emit(response);\r\n                        // Emit Query Status\r\n                        _this.status.emit(status);\r\n                        /**\r\n                         * DirectionsStatus\r\n                         * https://developers.google.com/maps/documentation/javascript/directions#DirectionsStatus\r\n                         */\r\n                        switch (status) {\r\n                            case 'OK':\r\n                                _this.directionsDisplay.setDirections(response);\r\n                                /**\r\n                                 * Emit The DirectionsResult Object\r\n                                 * https://developers.google.com/maps/documentation/javascript/directions?hl=en#DirectionsResults\r\n                                 */\r\n                                // Custom Markers\r\n                                if (typeof _this.markerOptions !== 'undefined') {\r\n                                    _this.destroyMarkers();\r\n                                    // Set custom markers\r\n                                    /** @type {?} */\r\n                                    var _route_1 = response.routes[0].legs[0];\r\n                                    try {\r\n                                        // Origin Marker\r\n                                        if (typeof _this.markerOptions.origin !== 'undefined') {\r\n                                            _this.markerOptions.origin.map = map;\r\n                                            _this.markerOptions.origin.position = _route_1.start_location;\r\n                                            _this.originMarker = _this.setMarker(map, _this.originMarker, _this.markerOptions.origin, _route_1.start_address);\r\n                                            if (_this.markerOptions.origin.draggable) {\r\n                                                _this.originMarker.addListener('dragend', function () {\r\n                                                    _this.origin = _this.originMarker.position;\r\n                                                    _this.directionDraw();\r\n                                                    _this.originDrag.emit(_this.origin);\r\n                                                });\r\n                                            }\r\n                                        }\r\n                                        // Destination Marker\r\n                                        if (typeof _this.markerOptions.destination !== 'undefined') {\r\n                                            _this.markerOptions.destination.map = map;\r\n                                            _this.markerOptions.destination.position = _route_1.end_location;\r\n                                            _this.destinationMarker = _this.setMarker(map, _this.destinationMarker, _this.markerOptions.destination, _route_1.end_address);\r\n                                            if (_this.markerOptions.destination.draggable) {\r\n                                                _this.destinationMarker.addListener('dragend', function () {\r\n                                                    _this.destination = _this.destinationMarker.position;\r\n                                                    _this.directionDraw();\r\n                                                    _this.destinationDrag.emit(_this.destination);\r\n                                                });\r\n                                            }\r\n                                        }\r\n                                        // Waypoints Marker\r\n                                        if (typeof _this.markerOptions.waypoints !== 'undefined') {\r\n                                            _this.waypoints.forEach(function (waypoint, index) {\r\n                                                // If waypoints are not array then set all the same\r\n                                                if (!Array.isArray(_this.markerOptions.waypoints)) {\r\n                                                    _this.markerOptions.waypoints.map = map;\r\n                                                    _this.markerOptions.waypoints.position = _route_1.via_waypoints[index];\r\n                                                    _this.waypointsMarker.push(_this.setMarker(map, waypoint, _this.markerOptions.waypoints, _route_1.via_waypoints[index]));\r\n                                                }\r\n                                                else {\r\n                                                    _this.markerOptions.waypoints[index].map = map;\r\n                                                    _this.markerOptions.waypoints[index].position = _route_1.via_waypoints[index];\r\n                                                    _this.waypointsMarker.push(_this.setMarker(map, waypoint, _this.markerOptions.waypoints[index], _route_1.via_waypoints[index]));\r\n                                                }\r\n                                            }); // End forEach\r\n                                        }\r\n                                    }\r\n                                    catch (err) {\r\n                                        console.error('MarkerOptions error.', err);\r\n                                    }\r\n                                }\r\n                                break;\r\n                            default:\r\n                                // console.warn(status);\r\n                                break;\r\n                        } // End switch\r\n                    });\r\n                }\r\n            });\r\n        };\r\n        /**\r\n         * Custom Origin and Destination Icon\r\n         * @param map map\r\n         * @param marker marker\r\n         * @param markerOpts properties\r\n         * @param content marker's infowindow content\r\n         * @returns new marker\r\n         * @memberof AgmDirection\r\n         */\r\n        /**\r\n         * Custom Origin and Destination Icon\r\n         * \\@memberof AgmDirection\r\n         * @param {?} map map\r\n         * @param {?} marker marker\r\n         * @param {?} markerOpts properties\r\n         * @param {?} content marker's infowindow content\r\n         * @return {?} new marker\r\n         */\r\n        AgmDirection.prototype.setMarker = /**\r\n         * Custom Origin and Destination Icon\r\n         * \\@memberof AgmDirection\r\n         * @param {?} map map\r\n         * @param {?} marker marker\r\n         * @param {?} markerOpts properties\r\n         * @param {?} content marker's infowindow content\r\n         * @return {?} new marker\r\n         */\r\n        function (map, marker, markerOpts, content) {\r\n            var _this = this;\r\n            if (typeof this.infoWindow === 'undefined') {\r\n                this.infoWindow = new google.maps.InfoWindow({});\r\n                this.sendInfoWindow.emit(this.infoWindow);\r\n            }\r\n            marker = new google.maps.Marker(markerOpts);\r\n            // https://developers.google.com/maps/documentation/javascript/reference/marker?hl=zh-tw#MarkerOptions.clickable\r\n            if (marker.clickable) {\r\n                marker.addListener('click', function () {\r\n                    /** @type {?} */\r\n                    var infowindoContent = typeof markerOpts.infoWindow === 'undefined' ? content : markerOpts.infoWindow;\r\n                    _this.infoWindow.setContent(infowindoContent);\r\n                    _this.infoWindow.open(map, marker);\r\n                });\r\n            }\r\n            return marker;\r\n        };\r\n        /**\r\n         * This event is fired when remove markers\r\n         */\r\n        /**\r\n         * This event is fired when remove markers\r\n         * @return {?}\r\n         */\r\n        AgmDirection.prototype.removeMarkers = /**\r\n         * This event is fired when remove markers\r\n         * @return {?}\r\n         */\r\n        function () {\r\n            if (typeof this.originMarker !== 'undefined') {\r\n                this.originMarker.setMap(null);\r\n            }\r\n            if (typeof this.destinationMarker !== 'undefined') {\r\n                this.destinationMarker.setMap(null);\r\n            }\r\n            this.waypointsMarker.forEach(function (w) {\r\n                if (typeof w !== 'undefined') {\r\n                    w.setMap(null);\r\n                }\r\n            });\r\n        };\r\n        /**\r\n         * This event is fired when remove directions\r\n         */\r\n        /**\r\n         * This event is fired when remove directions\r\n         * @return {?}\r\n         */\r\n        AgmDirection.prototype.removeDirections = /**\r\n         * This event is fired when remove directions\r\n         * @return {?}\r\n         */\r\n        function () {\r\n            if (this.directionsDisplay !== undefined) {\r\n                this.directionsDisplay.setPanel(null);\r\n                this.directionsDisplay.setMap(null);\r\n                this.directionsDisplay = undefined;\r\n            }\r\n        };\r\n        /**\r\n         * This event is fired when destroy markers\r\n         */\r\n        /**\r\n         * This event is fired when destroy markers\r\n         * @return {?}\r\n         */\r\n        AgmDirection.prototype.destroyMarkers = /**\r\n         * This event is fired when destroy markers\r\n         * @return {?}\r\n         */\r\n        function () {\r\n            // Remove origin markers\r\n            try {\r\n                if (typeof this.originMarker !== 'undefined') {\r\n                    google.maps.event.clearListeners(this.originMarker, 'click');\r\n                    if (this.markerOptions.origin.draggable) {\r\n                        google.maps.event.clearListeners(this.originMarker, 'dragend');\r\n                    }\r\n                }\r\n                if (typeof this.destinationMarker !== 'undefined') {\r\n                    google.maps.event.clearListeners(this.destinationMarker, 'click');\r\n                    if (this.markerOptions.origin.draggable) {\r\n                        google.maps.event.clearListeners(this.destinationMarker, 'dragend');\r\n                    }\r\n                }\r\n                this.waypointsMarker.forEach(function (w) {\r\n                    if (typeof w !== 'undefined') {\r\n                        google.maps.event.clearListeners(w, 'click');\r\n                    }\r\n                });\r\n                this.removeMarkers();\r\n            }\r\n            catch (err) {\r\n                console.error('Can not reset custom marker.', err);\r\n            }\r\n        };\r\n        AgmDirection.decorators = [\r\n            { type: core.Directive, args: [{\r\n                        selector: 'agm-direction',\r\n                    },] }\r\n        ];\r\n        /** @nocollapse */\r\n        AgmDirection.ctorParameters = function () { return [\r\n            { type: GoogleMapsAPIWrapper }\r\n        ]; };\r\n        AgmDirection.propDecorators = {\r\n            origin: [{ type: core.Input }],\r\n            destination: [{ type: core.Input }],\r\n            travelMode: [{ type: core.Input }],\r\n            transitOptions: [{ type: core.Input }],\r\n            drivingOptions: [{ type: core.Input }],\r\n            waypoints: [{ type: core.Input }],\r\n            optimizeWaypoints: [{ type: core.Input }],\r\n            provideRouteAlternatives: [{ type: core.Input }],\r\n            avoidHighways: [{ type: core.Input }],\r\n            avoidTolls: [{ type: core.Input }],\r\n            renderOptions: [{ type: core.Input }],\r\n            panel: [{ type: core.Input }],\r\n            markerOptions: [{ type: core.Input }],\r\n            infoWindow: [{ type: core.Input }],\r\n            visible: [{ type: core.Input }],\r\n            renderRoute: [{ type: core.Input }],\r\n            onChange: [{ type: core.Output }],\r\n            onResponse: [{ type: core.Output }],\r\n            sendInfoWindow: [{ type: core.Output }],\r\n            status: [{ type: core.Output }],\r\n            originDrag: [{ type: core.Output }],\r\n            destinationDrag: [{ type: core.Output }]\r\n        };\r\n        return AgmDirection;\r\n    }());\r\n\r\n    /**\r\n     * @fileoverview added by tsickle\r\n     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\r\n     */\r\n    var AgmDirectionModule = /** @class */ (function () {\r\n        function AgmDirectionModule() {\r\n        }\r\n        /**\r\n         * @return {?}\r\n         */\r\n        AgmDirectionModule.forRoot = /**\r\n         * @return {?}\r\n         */\r\n        function () {\r\n            return {\r\n                ngModule: AgmDirectionModule,\r\n            };\r\n        };\r\n        AgmDirectionModule.decorators = [\r\n            { type: core.NgModule, args: [{\r\n                        imports: [],\r\n                        declarations: [\r\n                            AgmDirection,\r\n                        ],\r\n                        exports: [\r\n                            AgmDirection,\r\n                        ]\r\n                    },] }\r\n        ];\r\n        return AgmDirectionModule;\r\n    }());\r\n\r\n    exports.AgmDirectionModule = AgmDirectionModule;\r\n    exports.ɵa = AgmDirection;\r\n\r\n    Object.defineProperty(exports, '__esModule', { value: true });\r\n\r\n}));\r\n\r\n"]}