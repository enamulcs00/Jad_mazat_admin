import * as tslib_1 from "tslib";
import { Directive, Input, Self } from '@angular/core';
import { Subject } from 'rxjs';
import { distinctUntilChanged, takeUntil } from 'rxjs/operators';
import { FitBoundsAccessor, FitBoundsDetails, FitBoundsService } from '../services/fit-bounds';
/**
 * Adds the given directive to the auto fit bounds feature when the value is true.
 * To make it work with you custom AGM component, you also have to implement the {@link FitBoundsAccessor} abstract class.
 * @example
 * <agm-marker [agmFitBounds]="true"></agm-marker>
 */
import * as ɵngcc0 from '@angular/core';
let AgmFitBounds = class AgmFitBounds {
    constructor(_fitBoundsAccessor, _fitBoundsService) {
        this._fitBoundsAccessor = _fitBoundsAccessor;
        this._fitBoundsService = _fitBoundsService;
        /**
         * If the value is true, the element gets added to the bounds of the map.
         * Default: true.
         */
        this.agmFitBounds = true;
        this._destroyed$ = new Subject();
        this._latestFitBoundsDetails = null;
    }
    /**
     * @internal
     */
    ngOnChanges() {
        this._updateBounds();
    }
    /**
     * @internal
     */
    ngOnInit() {
        this._fitBoundsAccessor
            .getFitBoundsDetails$()
            .pipe(distinctUntilChanged((x, y) => x.latLng.lat === y.latLng.lat && x.latLng.lng === y.latLng.lng), takeUntil(this._destroyed$))
            .subscribe(details => this._updateBounds(details));
    }
    /*
     Either the location changed, or visible status changed.
     Possible state changes are
     invisible -> visible
     visible -> invisible
     visible -> visible (new location)
    */
    _updateBounds(newFitBoundsDetails) {
        // either visibility will change, or location, so remove the old one anyway
        if (this._latestFitBoundsDetails) {
            this._fitBoundsService.removeFromBounds(this._latestFitBoundsDetails.latLng);
            // don't set latestFitBoundsDetails to null, because we can toggle visibility from
            // true -> false -> true, in which case we still need old value cached here
        }
        if (newFitBoundsDetails) {
            this._latestFitBoundsDetails = newFitBoundsDetails;
        }
        if (!this._latestFitBoundsDetails) {
            return;
        }
        if (this.agmFitBounds === true) {
            this._fitBoundsService.addToBounds(this._latestFitBoundsDetails.latLng);
        }
    }
    /**
     * @internal
     */
    ngOnDestroy() {
        this._destroyed$.next();
        this._destroyed$.complete();
        if (this._latestFitBoundsDetails !== null) {
            this._fitBoundsService.removeFromBounds(this._latestFitBoundsDetails.latLng);
        }
    }
}
AgmFitBounds.ngDirectiveDef = ɵngcc0.ɵɵdefineDirective({ type: AgmFitBounds, selectors: [["", "agmFitBounds", ""]], factory: function AgmFitBounds_Factory(t) { return new (t || AgmFitBounds)(ɵngcc0.ɵɵdirectiveInject(FitBoundsAccessor, 2), ɵngcc0.ɵɵdirectiveInject(FitBoundsService)); }, inputs: { agmFitBounds: "agmFitBounds" }, features: [ɵngcc0.ɵɵNgOnChangesFeature()] });
/*@__PURE__*/ ɵngcc0.ɵsetClassMetadata(AgmFitBounds, [{
        type: Directive,
        args: [{
                selector: '[agmFitBounds]'
            }]
    }], function () { return [{ type: FitBoundsAccessor, decorators: [{
                type: Self
            }] }, { type: FitBoundsService }]; }, { constructor: [], _fitBoundsAccessor: [], _fitBoundsService: [], agmFitBounds: [{
            type: Input
        }], _destroyed$: [], _latestFitBoundsDetails: [], ngOnChanges: [], ngOnInit: [], _updateBounds: [], ngOnDestroy: [] });;
AgmFitBounds.ctorParameters = () => [
    { type: FitBoundsAccessor, decorators: [{ type: Self }] },
    { type: FitBoundsService }
];
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Object)
], AgmFitBounds.prototype, "agmFitBounds", void 0);
AgmFitBounds = tslib_1.__decorate([
    tslib_1.__param(0, Self()),
    tslib_1.__metadata("design:paramtypes", [FitBoundsAccessor,
        FitBoundsService])
], AgmFitBounds);
export { AgmFitBounds };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInY6L2phZC1hZG1pbi1nby9tYXphdF9hZG1pbl9wYW5lbC9ub2RlX21vZHVsZXMvQGFnbS9jb3JlL2VzbTIwMTUvZGlyZWN0aXZlcy9maXQtYm91bmRzLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7Ozs7QUFXQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OytIQTZEQzs7Ozs7Ozs7O21DQVNrQyxBQUc1QiIsImZpbGUiOiJmaXQtYm91bmRzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgdHNsaWJfMSBmcm9tIFwidHNsaWJcIjtcclxuaW1wb3J0IHsgRGlyZWN0aXZlLCBJbnB1dCwgU2VsZiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBTdWJqZWN0IH0gZnJvbSAncnhqcyc7XHJcbmltcG9ydCB7IGRpc3RpbmN0VW50aWxDaGFuZ2VkLCB0YWtlVW50aWwgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XHJcbmltcG9ydCB7IEZpdEJvdW5kc0FjY2Vzc29yLCBGaXRCb3VuZHNEZXRhaWxzLCBGaXRCb3VuZHNTZXJ2aWNlIH0gZnJvbSAnLi4vc2VydmljZXMvZml0LWJvdW5kcyc7XHJcbi8qKlxyXG4gKiBBZGRzIHRoZSBnaXZlbiBkaXJlY3RpdmUgdG8gdGhlIGF1dG8gZml0IGJvdW5kcyBmZWF0dXJlIHdoZW4gdGhlIHZhbHVlIGlzIHRydWUuXHJcbiAqIFRvIG1ha2UgaXQgd29yayB3aXRoIHlvdSBjdXN0b20gQUdNIGNvbXBvbmVudCwgeW91IGFsc28gaGF2ZSB0byBpbXBsZW1lbnQgdGhlIHtAbGluayBGaXRCb3VuZHNBY2Nlc3Nvcn0gYWJzdHJhY3QgY2xhc3MuXHJcbiAqIEBleGFtcGxlXHJcbiAqIDxhZ20tbWFya2VyIFthZ21GaXRCb3VuZHNdPVwidHJ1ZVwiPjwvYWdtLW1hcmtlcj5cclxuICovXHJcbmxldCBBZ21GaXRCb3VuZHMgPSBjbGFzcyBBZ21GaXRCb3VuZHMge1xyXG4gICAgY29uc3RydWN0b3IoX2ZpdEJvdW5kc0FjY2Vzc29yLCBfZml0Qm91bmRzU2VydmljZSkge1xyXG4gICAgICAgIHRoaXMuX2ZpdEJvdW5kc0FjY2Vzc29yID0gX2ZpdEJvdW5kc0FjY2Vzc29yO1xyXG4gICAgICAgIHRoaXMuX2ZpdEJvdW5kc1NlcnZpY2UgPSBfZml0Qm91bmRzU2VydmljZTtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBJZiB0aGUgdmFsdWUgaXMgdHJ1ZSwgdGhlIGVsZW1lbnQgZ2V0cyBhZGRlZCB0byB0aGUgYm91bmRzIG9mIHRoZSBtYXAuXHJcbiAgICAgICAgICogRGVmYXVsdDogdHJ1ZS5cclxuICAgICAgICAgKi9cclxuICAgICAgICB0aGlzLmFnbUZpdEJvdW5kcyA9IHRydWU7XHJcbiAgICAgICAgdGhpcy5fZGVzdHJveWVkJCA9IG5ldyBTdWJqZWN0KCk7XHJcbiAgICAgICAgdGhpcy5fbGF0ZXN0Rml0Qm91bmRzRGV0YWlscyA9IG51bGw7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIEBpbnRlcm5hbFxyXG4gICAgICovXHJcbiAgICBuZ09uQ2hhbmdlcygpIHtcclxuICAgICAgICB0aGlzLl91cGRhdGVCb3VuZHMoKTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogQGludGVybmFsXHJcbiAgICAgKi9cclxuICAgIG5nT25Jbml0KCkge1xyXG4gICAgICAgIHRoaXMuX2ZpdEJvdW5kc0FjY2Vzc29yXHJcbiAgICAgICAgICAgIC5nZXRGaXRCb3VuZHNEZXRhaWxzJCgpXHJcbiAgICAgICAgICAgIC5waXBlKGRpc3RpbmN0VW50aWxDaGFuZ2VkKCh4LCB5KSA9PiB4LmxhdExuZy5sYXQgPT09IHkubGF0TG5nLmxhdCAmJiB4LmxhdExuZy5sbmcgPT09IHkubGF0TG5nLmxuZyksIHRha2VVbnRpbCh0aGlzLl9kZXN0cm95ZWQkKSlcclxuICAgICAgICAgICAgLnN1YnNjcmliZShkZXRhaWxzID0+IHRoaXMuX3VwZGF0ZUJvdW5kcyhkZXRhaWxzKSk7XHJcbiAgICB9XHJcbiAgICAvKlxyXG4gICAgIEVpdGhlciB0aGUgbG9jYXRpb24gY2hhbmdlZCwgb3IgdmlzaWJsZSBzdGF0dXMgY2hhbmdlZC5cclxuICAgICBQb3NzaWJsZSBzdGF0ZSBjaGFuZ2VzIGFyZVxyXG4gICAgIGludmlzaWJsZSAtPiB2aXNpYmxlXHJcbiAgICAgdmlzaWJsZSAtPiBpbnZpc2libGVcclxuICAgICB2aXNpYmxlIC0+IHZpc2libGUgKG5ldyBsb2NhdGlvbilcclxuICAgICovXHJcbiAgICBfdXBkYXRlQm91bmRzKG5ld0ZpdEJvdW5kc0RldGFpbHMpIHtcclxuICAgICAgICAvLyBlaXRoZXIgdmlzaWJpbGl0eSB3aWxsIGNoYW5nZSwgb3IgbG9jYXRpb24sIHNvIHJlbW92ZSB0aGUgb2xkIG9uZSBhbnl3YXlcclxuICAgICAgICBpZiAodGhpcy5fbGF0ZXN0Rml0Qm91bmRzRGV0YWlscykge1xyXG4gICAgICAgICAgICB0aGlzLl9maXRCb3VuZHNTZXJ2aWNlLnJlbW92ZUZyb21Cb3VuZHModGhpcy5fbGF0ZXN0Rml0Qm91bmRzRGV0YWlscy5sYXRMbmcpO1xyXG4gICAgICAgICAgICAvLyBkb24ndCBzZXQgbGF0ZXN0Rml0Qm91bmRzRGV0YWlscyB0byBudWxsLCBiZWNhdXNlIHdlIGNhbiB0b2dnbGUgdmlzaWJpbGl0eSBmcm9tXHJcbiAgICAgICAgICAgIC8vIHRydWUgLT4gZmFsc2UgLT4gdHJ1ZSwgaW4gd2hpY2ggY2FzZSB3ZSBzdGlsbCBuZWVkIG9sZCB2YWx1ZSBjYWNoZWQgaGVyZVxyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAobmV3Rml0Qm91bmRzRGV0YWlscykge1xyXG4gICAgICAgICAgICB0aGlzLl9sYXRlc3RGaXRCb3VuZHNEZXRhaWxzID0gbmV3Rml0Qm91bmRzRGV0YWlscztcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKCF0aGlzLl9sYXRlc3RGaXRCb3VuZHNEZXRhaWxzKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHRoaXMuYWdtRml0Qm91bmRzID09PSB0cnVlKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX2ZpdEJvdW5kc1NlcnZpY2UuYWRkVG9Cb3VuZHModGhpcy5fbGF0ZXN0Rml0Qm91bmRzRGV0YWlscy5sYXRMbmcpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogQGludGVybmFsXHJcbiAgICAgKi9cclxuICAgIG5nT25EZXN0cm95KCkge1xyXG4gICAgICAgIHRoaXMuX2Rlc3Ryb3llZCQubmV4dCgpO1xyXG4gICAgICAgIHRoaXMuX2Rlc3Ryb3llZCQuY29tcGxldGUoKTtcclxuICAgICAgICBpZiAodGhpcy5fbGF0ZXN0Rml0Qm91bmRzRGV0YWlscyAhPT0gbnVsbCkge1xyXG4gICAgICAgICAgICB0aGlzLl9maXRCb3VuZHNTZXJ2aWNlLnJlbW92ZUZyb21Cb3VuZHModGhpcy5fbGF0ZXN0Rml0Qm91bmRzRGV0YWlscy5sYXRMbmcpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufTtcclxuQWdtRml0Qm91bmRzLmN0b3JQYXJhbWV0ZXJzID0gKCkgPT4gW1xyXG4gICAgeyB0eXBlOiBGaXRCb3VuZHNBY2Nlc3NvciwgZGVjb3JhdG9yczogW3sgdHlwZTogU2VsZiB9XSB9LFxyXG4gICAgeyB0eXBlOiBGaXRCb3VuZHNTZXJ2aWNlIH1cclxuXTtcclxudHNsaWJfMS5fX2RlY29yYXRlKFtcclxuICAgIElucHV0KCksXHJcbiAgICB0c2xpYl8xLl9fbWV0YWRhdGEoXCJkZXNpZ246dHlwZVwiLCBPYmplY3QpXHJcbl0sIEFnbUZpdEJvdW5kcy5wcm90b3R5cGUsIFwiYWdtRml0Qm91bmRzXCIsIHZvaWQgMCk7XHJcbkFnbUZpdEJvdW5kcyA9IHRzbGliXzEuX19kZWNvcmF0ZShbXHJcbiAgICBEaXJlY3RpdmUoe1xyXG4gICAgICAgIHNlbGVjdG9yOiAnW2FnbUZpdEJvdW5kc10nLFxyXG4gICAgfSksXHJcbiAgICB0c2xpYl8xLl9fcGFyYW0oMCwgU2VsZigpKSxcclxuICAgIHRzbGliXzEuX19tZXRhZGF0YShcImRlc2lnbjpwYXJhbXR5cGVzXCIsIFtGaXRCb3VuZHNBY2Nlc3NvcixcclxuICAgICAgICBGaXRCb3VuZHNTZXJ2aWNlXSlcclxuXSwgQWdtRml0Qm91bmRzKTtcclxuZXhwb3J0IHsgQWdtRml0Qm91bmRzIH07XHIiXX0=