{"version":3,"file":"info-window.d.ts","sources":["v:/jad-admin-go/mazat_admin_panel/node_modules/@agm/core/directives/info-window.d.ts"],"sourcesContent":["import { ElementRef, EventEmitter, OnChanges, OnDestroy, OnInit, SimpleChange } from '@angular/core';\r\nimport { InfoWindowManager } from '../services/managers/info-window-manager';\r\nimport { AgmMarker } from './marker';\r\n/**\r\n * AgmInfoWindow renders a info window inside a {@link AgmMarker} or standalone.\r\n *\r\n * ### Example\r\n * ```typescript\r\n * import { Component } from '@angular/core';\r\n *\r\n * @Component({\r\n *  selector: 'my-map-cmp',\r\n *  styles: [`\r\n *    .agm-map-container {\r\n *      height: 300px;\r\n *    }\r\n * `],\r\n *  template: `\r\n *    <agm-map [latitude]=\"lat\" [longitude]=\"lng\" [zoom]=\"zoom\">\r\n *      <agm-marker [latitude]=\"lat\" [longitude]=\"lng\" [label]=\"'M'\">\r\n *        <agm-info-window [disableAutoPan]=\"true\">\r\n *          Hi, this is the content of the <strong>info window</strong>\r\n *        </agm-info-window>\r\n *      </agm-marker>\r\n *    </agm-map>\r\n *  `\r\n * })\r\n * ```\r\n */\r\nexport declare class AgmInfoWindow implements OnDestroy, OnChanges, OnInit {\r\n    private _infoWindowManager;\r\n    private _el;\r\n    /**\r\n     * The latitude position of the info window (only usefull if you use it ouside of a {@link\r\n     * AgmMarker}).\r\n     */\r\n    latitude: number;\r\n    /**\r\n     * The longitude position of the info window (only usefull if you use it ouside of a {@link\r\n     * AgmMarker}).\r\n     */\r\n    longitude: number;\r\n    /**\r\n     * Disable auto-pan on open. By default, the info window will pan the map so that it is fully\r\n     * visible when it opens.\r\n     */\r\n    disableAutoPan: boolean;\r\n    /**\r\n     * All InfoWindows are displayed on the map in order of their zIndex, with higher values\r\n     * displaying in front of InfoWindows with lower values. By default, InfoWindows are displayed\r\n     * according to their latitude, with InfoWindows of lower latitudes appearing in front of\r\n     * InfoWindows at higher latitudes. InfoWindows are always displayed in front of markers.\r\n     */\r\n    zIndex: number;\r\n    /**\r\n     * Maximum width of the infowindow, regardless of content's width. This value is only considered\r\n     * if it is set before a call to open. To change the maximum width when changing content, call\r\n     * close, update maxWidth, and then open.\r\n     */\r\n    maxWidth: number;\r\n    /**\r\n     * Holds the marker that is the host of the info window (if available)\r\n     */\r\n    hostMarker: AgmMarker;\r\n    /**\r\n     * Holds the native element that is used for the info window content.\r\n     */\r\n    content: Node;\r\n    /**\r\n     * Sets the open state for the InfoWindow. You can also call the open() and close() methods.\r\n     */\r\n    isOpen: boolean;\r\n    /**\r\n     * Emits an event when the info window is closed.\r\n     */\r\n    infoWindowClose: EventEmitter<void>;\r\n    private static _infoWindowOptionsInputs;\r\n    private _infoWindowAddedToManager;\r\n    private _id;\r\n    constructor(_infoWindowManager: InfoWindowManager, _el: ElementRef);\r\n    ngOnInit(): void;\r\n    /** @internal */\r\n    ngOnChanges(changes: {\r\n        [key: string]: SimpleChange;\r\n    }): void;\r\n    private _registerEventListeners;\r\n    private _updateOpenState;\r\n    private _setInfoWindowOptions;\r\n    /**\r\n     * Opens the info window.\r\n     */\r\n    open(): Promise<void>;\r\n    /**\r\n     * Closes the info window.\r\n     */\r\n    close(): Promise<void>;\r\n    /** @internal */\r\n    id(): string;\r\n    /** @internal */\r\n    toString(): string;\r\n    /** @internal */\r\n    ngOnDestroy(): void;\r\n}\r\n"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6BA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAyEA;"}