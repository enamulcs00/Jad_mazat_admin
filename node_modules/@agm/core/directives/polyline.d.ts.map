{"version":3,"file":"polyline.d.ts","sources":["v:/jad-admin-go/mazat_admin_panel/node_modules/@agm/core/directives/polyline.d.ts"],"sourcesContent":["import { AfterContentInit, EventEmitter, OnChanges, OnDestroy, QueryList, SimpleChanges } from '@angular/core';\r\nimport { LatLng, PolyMouseEvent } from '../services/google-maps-types';\r\nimport { PolylineManager } from '../services/managers/polyline-manager';\r\nimport { AgmPolylineIcon } from './polyline-icon';\r\nimport { AgmPolylinePoint } from './polyline-point';\r\n/**\r\n * AgmPolyline renders a polyline on a {@link AgmMap}\r\n *\r\n * ### Example\r\n * ```typescript\r\n * import { Component } from '@angular/core';\r\n *\r\n * @Component({\r\n *  selector: 'my-map-cmp',\r\n *  styles: [`\r\n *    .agm-map-container {\r\n *      height: 300px;\r\n *    }\r\n * `],\r\n *  template: `\r\n *    <agm-map [latitude]=\"lat\" [longitude]=\"lng\" [zoom]=\"zoom\">\r\n *      <agm-polyline>\r\n *          <agm-polyline-point [latitude]=\"latA\" [longitude]=\"lngA\">\r\n *          </agm-polyline-point>\r\n *          <agm-polyline-point [latitude]=\"latB\" [longitude]=\"lngB\">\r\n *          </agm-polyline-point>\r\n *      </agm-polyline>\r\n *    </agm-map>\r\n *  `\r\n * })\r\n * ```\r\n */\r\nexport declare class AgmPolyline implements OnDestroy, OnChanges, AfterContentInit {\r\n    private _polylineManager;\r\n    /**\r\n     * Indicates whether this Polyline handles mouse events. Defaults to true.\r\n     */\r\n    clickable: boolean;\r\n    /**\r\n     * If set to true, the user can drag this shape over the map. The geodesic property defines the\r\n     * mode of dragging. Defaults to false.\r\n     */\r\n    draggable: boolean;\r\n    /**\r\n     * If set to true, the user can edit this shape by dragging the control points shown at the\r\n     * vertices and on each segment. Defaults to false.\r\n     */\r\n    editable: boolean;\r\n    /**\r\n     * When true, edges of the polygon are interpreted as geodesic and will follow the curvature of\r\n     * the Earth. When false, edges of the polygon are rendered as straight lines in screen space.\r\n     * Note that the shape of a geodesic polygon may appear to change when dragged, as the dimensions\r\n     * are maintained relative to the surface of the earth. Defaults to false.\r\n     */\r\n    geodesic: boolean;\r\n    /**\r\n     * The stroke color. All CSS3 colors are supported except for extended named colors.\r\n     */\r\n    strokeColor: string;\r\n    /**\r\n     * The stroke opacity between 0.0 and 1.0.\r\n     */\r\n    strokeOpacity: number;\r\n    /**\r\n     * The stroke width in pixels.\r\n     */\r\n    strokeWeight: number;\r\n    /**\r\n     * Whether this polyline is visible on the map. Defaults to true.\r\n     */\r\n    visible: boolean;\r\n    /**\r\n     * The zIndex compared to other polys.\r\n     */\r\n    zIndex: number;\r\n    /**\r\n     * This event is fired when the DOM click event is fired on the Polyline.\r\n     */\r\n    lineClick: EventEmitter<PolyMouseEvent>;\r\n    /**\r\n     * This event is fired when the DOM dblclick event is fired on the Polyline.\r\n     */\r\n    lineDblClick: EventEmitter<PolyMouseEvent>;\r\n    /**\r\n     * This event is repeatedly fired while the user drags the polyline.\r\n     */\r\n    lineDrag: EventEmitter<MouseEvent>;\r\n    /**\r\n     * This event is fired when the user stops dragging the polyline.\r\n     */\r\n    lineDragEnd: EventEmitter<MouseEvent>;\r\n    /**\r\n     * This event is fired when the user starts dragging the polyline.\r\n     */\r\n    lineDragStart: EventEmitter<MouseEvent>;\r\n    /**\r\n     * This event is fired when the DOM mousedown event is fired on the Polyline.\r\n     */\r\n    lineMouseDown: EventEmitter<PolyMouseEvent>;\r\n    /**\r\n     * This event is fired when the DOM mousemove event is fired on the Polyline.\r\n     */\r\n    lineMouseMove: EventEmitter<PolyMouseEvent>;\r\n    /**\r\n     * This event is fired on Polyline mouseout.\r\n     */\r\n    lineMouseOut: EventEmitter<PolyMouseEvent>;\r\n    /**\r\n     * This event is fired on Polyline mouseover.\r\n     */\r\n    lineMouseOver: EventEmitter<PolyMouseEvent>;\r\n    /**\r\n     * This event is fired whe the DOM mouseup event is fired on the Polyline\r\n     */\r\n    lineMouseUp: EventEmitter<PolyMouseEvent>;\r\n    /**\r\n     * This event is fired when the Polyline is right-clicked on.\r\n     */\r\n    lineRightClick: EventEmitter<PolyMouseEvent>;\r\n    /**\r\n     * This event is fired after Polyline's path changes.\r\n     */\r\n    polyPathChange: EventEmitter<PathEvent>;\r\n    /**\r\n     * @internal\r\n     */\r\n    points: QueryList<AgmPolylinePoint>;\r\n    iconSequences: QueryList<AgmPolylineIcon>;\r\n    private static _polylineOptionsAttributes;\r\n    private _id;\r\n    private _polylineAddedToManager;\r\n    private _subscriptions;\r\n    constructor(_polylineManager: PolylineManager);\r\n    /** @internal */\r\n    ngAfterContentInit(): void;\r\n    ngOnChanges(changes: SimpleChanges): any;\r\n    getPath(): Promise<Array<LatLng>>;\r\n    private _init;\r\n    private _addEventListeners;\r\n    /** @internal */\r\n    _getPoints(): Array<AgmPolylinePoint>;\r\n    _getIcons(): Array<AgmPolylineIcon>;\r\n    /** @internal */\r\n    id(): string;\r\n    /** @internal */\r\n    ngOnDestroy(): void;\r\n}\r\nexport interface PathEvent {\r\n    newArr: LatLng[];\r\n    evName: 'insert_at' | 'remove_at' | 'set_at';\r\n    index: number;\r\n    previous?: LatLng;\r\n}\r\n"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAgCA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAkHA;;;;;;;"}