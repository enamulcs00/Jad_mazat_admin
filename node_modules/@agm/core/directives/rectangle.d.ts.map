{"version":3,"file":"rectangle.d.ts","sources":["v:/jad-admin-go/mazat_admin_panel/node_modules/@agm/core/directives/rectangle.d.ts"],"sourcesContent":["import { EventEmitter, OnChanges, OnDestroy, OnInit, SimpleChange } from '@angular/core';\r\nimport { MouseEvent } from '../map-types';\r\nimport { LatLngBounds, LatLngBoundsLiteral } from '../services/google-maps-types';\r\nimport { RectangleManager } from '../services/managers/rectangle-manager';\r\nexport declare class AgmRectangle implements OnInit, OnChanges, OnDestroy {\r\n    private _manager;\r\n    /**\r\n     * The north position of the rectangle (required).\r\n     */\r\n    north: number;\r\n    /**\r\n     * The east position of the rectangle (required).\r\n     */\r\n    east: number;\r\n    /**\r\n     * The south position of the rectangle (required).\r\n     */\r\n    south: number;\r\n    /**\r\n     * The west position of the rectangle (required).\r\n     */\r\n    west: number;\r\n    /**\r\n     * Indicates whether this Rectangle handles mouse events. Defaults to true.\r\n     */\r\n    clickable: boolean;\r\n    /**\r\n     * If set to true, the user can drag this rectangle over the map. Defaults to false.\r\n     */\r\n    draggable: boolean;\r\n    /**\r\n     * If set to true, the user can edit this rectangle by dragging the control points shown at\r\n     * the center and around the circumference of the rectangle. Defaults to false.\r\n     */\r\n    editable: boolean;\r\n    /**\r\n     * The fill color. All CSS3 colors are supported except for extended named colors.\r\n     */\r\n    fillColor: string;\r\n    /**\r\n     * The fill opacity between 0.0 and 1.0.\r\n     */\r\n    fillOpacity: number;\r\n    /**\r\n     * The stroke color. All CSS3 colors are supported except for extended named colors.\r\n     */\r\n    strokeColor: string;\r\n    /**\r\n     * The stroke opacity between 0.0 and 1.0\r\n     */\r\n    strokeOpacity: number;\r\n    /**\r\n     * The stroke position. Defaults to CENTER.\r\n     * This property is not supported on Internet Explorer 8 and earlier.\r\n     */\r\n    strokePosition: 'CENTER' | 'INSIDE' | 'OUTSIDE';\r\n    /**\r\n     * The stroke width in pixels.\r\n     */\r\n    strokeWeight: number;\r\n    /**\r\n     * Whether this rectangle is visible on the map. Defaults to true.\r\n     */\r\n    visible: boolean;\r\n    /**\r\n     * The zIndex compared to other polys.\r\n     */\r\n    zIndex: number;\r\n    /**\r\n     * This event is fired when the rectangle's is changed.\r\n     */\r\n    boundsChange: EventEmitter<LatLngBoundsLiteral>;\r\n    /**\r\n     * This event emitter gets emitted when the user clicks on the rectangle.\r\n     */\r\n    rectangleClick: EventEmitter<MouseEvent>;\r\n    /**\r\n     * This event emitter gets emitted when the user clicks on the rectangle.\r\n     */\r\n    rectangleDblClick: EventEmitter<MouseEvent>;\r\n    /**\r\n     * This event is repeatedly fired while the user drags the rectangle.\r\n     */\r\n    drag: EventEmitter<MouseEvent>;\r\n    /**\r\n     * This event is fired when the user stops dragging the rectangle.\r\n     */\r\n    dragEnd: EventEmitter<MouseEvent>;\r\n    /**\r\n     * This event is fired when the user starts dragging the rectangle.\r\n     */\r\n    dragStart: EventEmitter<MouseEvent>;\r\n    /**\r\n     * This event is fired when the DOM mousedown event is fired on the rectangle.\r\n     */\r\n    mouseDown: EventEmitter<MouseEvent>;\r\n    /**\r\n     * This event is fired when the DOM mousemove event is fired on the rectangle.\r\n     */\r\n    mouseMove: EventEmitter<MouseEvent>;\r\n    /**\r\n     * This event is fired on rectangle mouseout.\r\n     */\r\n    mouseOut: EventEmitter<MouseEvent>;\r\n    /**\r\n     * This event is fired on rectangle mouseover.\r\n     */\r\n    mouseOver: EventEmitter<MouseEvent>;\r\n    /**\r\n     * This event is fired when the DOM mouseup event is fired on the rectangle.\r\n     */\r\n    mouseUp: EventEmitter<MouseEvent>;\r\n    /**\r\n     * This event is fired when the rectangle is right-clicked on.\r\n     */\r\n    rightClick: EventEmitter<MouseEvent>;\r\n    private _rectangleAddedToManager;\r\n    private static _mapOptions;\r\n    private _eventSubscriptions;\r\n    constructor(_manager: RectangleManager);\r\n    /** @internal */\r\n    ngOnInit(): void;\r\n    /** @internal */\r\n    ngOnChanges(changes: {\r\n        [key: string]: SimpleChange;\r\n    }): void;\r\n    private _updateRectangleOptionsChanges;\r\n    private _registerEventListeners;\r\n    /** @internal */\r\n    ngOnDestroy(): void;\r\n    /**\r\n     * Gets the LatLngBounds of this Rectangle.\r\n     */\r\n    getBounds(): Promise<LatLngBounds>;\r\n}\r\n"],"names":[],"mappings":"AAAA;;;;;AAIA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAkIA;"}