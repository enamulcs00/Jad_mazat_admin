{"version":3,"file":"marker.d.ts","sources":["v:/jad-admin-go/mazat_admin_panel/node_modules/@agm/core/directives/marker.d.ts"],"sourcesContent":["import { AfterContentInit, EventEmitter, OnChanges, OnDestroy, QueryList, SimpleChange } from '@angular/core';\r\nimport { Observable, ReplaySubject } from 'rxjs';\r\nimport { MouseEvent } from '../map-types';\r\nimport { FitBoundsAccessor, FitBoundsDetails } from '../services/fit-bounds';\r\nimport * as mapTypes from '../services/google-maps-types';\r\nimport { MarkerManager } from '../services/managers/marker-manager';\r\nimport { AgmInfoWindow } from './info-window';\r\n/**\r\n * AgmMarker renders a map marker inside a {@link AgmMap}.\r\n *\r\n * ### Example\r\n * ```typescript\r\n * import { Component } from '@angular/core';\r\n *\r\n * @Component({\r\n *  selector: 'my-map-cmp',\r\n *  styles: [`\r\n *    .agm-map-container {\r\n *      height: 300px;\r\n *    }\r\n * `],\r\n *  template: `\r\n *    <agm-map [latitude]=\"lat\" [longitude]=\"lng\" [zoom]=\"zoom\">\r\n *      <agm-marker [latitude]=\"lat\" [longitude]=\"lng\" [label]=\"'M'\">\r\n *      </agm-marker>\r\n *    </agm-map>\r\n *  `\r\n * })\r\n * ```\r\n */\r\nexport declare class AgmMarker implements OnDestroy, OnChanges, AfterContentInit, FitBoundsAccessor {\r\n    private _markerManager;\r\n    /**\r\n     * The latitude position of the marker.\r\n     */\r\n    latitude: number;\r\n    /**\r\n     * The longitude position of the marker.\r\n     */\r\n    longitude: number;\r\n    /**\r\n     * The title of the marker.\r\n     */\r\n    title: string;\r\n    /**\r\n     * The label (a single uppercase character) for the marker.\r\n     */\r\n    label: string | mapTypes.MarkerLabel;\r\n    /**\r\n     * If true, the marker can be dragged. Default value is false.\r\n     */\r\n    draggable: boolean;\r\n    /**\r\n     * Icon (the URL of the image) for the foreground.\r\n     */\r\n    iconUrl: string;\r\n    /**\r\n     * If true, the marker is visible\r\n     */\r\n    visible: boolean;\r\n    /**\r\n     * Whether to automatically open the child info window when the marker is clicked.\r\n     */\r\n    openInfoWindow: boolean;\r\n    /**\r\n     * The marker's opacity between 0.0 and 1.0.\r\n     */\r\n    opacity: number;\r\n    /**\r\n     * All markers are displayed on the map in order of their zIndex, with higher values displaying in\r\n     * front of markers with lower values. By default, markers are displayed according to their\r\n     * vertical position on screen, with lower markers appearing in front of markers further up the\r\n     * screen.\r\n     */\r\n    zIndex: number;\r\n    /**\r\n     * If true, the marker can be clicked. Default value is true.\r\n     */\r\n    clickable: boolean;\r\n    /**\r\n     * Which animation to play when marker is added to a map.\r\n     * This can be 'BOUNCE' or 'DROP'\r\n     */\r\n    animation: Animation;\r\n    /**\r\n     * This event is fired when the marker's animation property changes.\r\n     *\r\n     * @memberof AgmMarker\r\n     */\r\n    animationChange: EventEmitter<Animation>;\r\n    /**\r\n     * This event emitter gets emitted when the user clicks on the marker.\r\n     */\r\n    markerClick: EventEmitter<AgmMarker>;\r\n    /**\r\n     * This event emitter gets emitted when the user clicks twice on the marker.\r\n     */\r\n    markerDblClick: EventEmitter<AgmMarker>;\r\n    /**\r\n     * This event is fired when the user rightclicks on the marker.\r\n     */\r\n    markerRightClick: EventEmitter<void>;\r\n    /**\r\n     * This event is fired when the user starts dragging the marker.\r\n     */\r\n    dragStart: EventEmitter<MouseEvent>;\r\n    /**\r\n     * This event is repeatedly fired while the user drags the marker.\r\n     */\r\n    drag: EventEmitter<MouseEvent>;\r\n    /**\r\n     * This event is fired when the user stops dragging the marker.\r\n     */\r\n    dragEnd: EventEmitter<MouseEvent>;\r\n    /**\r\n     * This event is fired when the user mouses over the marker.\r\n     */\r\n    mouseOver: EventEmitter<MouseEvent>;\r\n    /**\r\n     * This event is fired when the user mouses outside the marker.\r\n     */\r\n    mouseOut: EventEmitter<MouseEvent>;\r\n    /** @internal */\r\n    infoWindow: QueryList<AgmInfoWindow>;\r\n    private _markerAddedToManger;\r\n    private _id;\r\n    private _observableSubscriptions;\r\n    protected readonly _fitBoundsDetails$: ReplaySubject<FitBoundsDetails>;\r\n    constructor(_markerManager: MarkerManager);\r\n    ngAfterContentInit(): void;\r\n    private handleInfoWindowUpdate;\r\n    /** @internal */\r\n    ngOnChanges(changes: {\r\n        [key: string]: SimpleChange;\r\n    }): void;\r\n    /** @internal */\r\n    getFitBoundsDetails$(): Observable<FitBoundsDetails>;\r\n    protected _updateFitBoundsDetails(): void;\r\n    private _addEventListeners;\r\n    /** @internal */\r\n    id(): string;\r\n    /** @internal */\r\n    toString(): string;\r\n    /** @internal */\r\n    ngOnDestroy(): void;\r\n}\r\nexport declare type Animation = 'BOUNCE' | 'DROP' | null;\r\n"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA8BA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAmHA;;"}