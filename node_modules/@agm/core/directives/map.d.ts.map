{"version":3,"file":"map.d.ts","sources":["v:/jad-admin-go/mazat_admin_panel/node_modules/@agm/core/directives/map.d.ts"],"sourcesContent":["import { ElementRef, EventEmitter, NgZone, OnChanges, OnDestroy, OnInit, SimpleChanges } from '@angular/core';\r\nimport { MouseEvent } from '../map-types';\r\nimport { FitBoundsService } from '../services/fit-bounds';\r\nimport { GoogleMapsAPIWrapper } from '../services/google-maps-api-wrapper';\r\nimport { FullscreenControlOptions, LatLngBounds, LatLngBoundsLiteral, LatLngLiteral, MapRestriction, MapTypeControlOptions, MapTypeId, MapTypeStyle, Padding, PanControlOptions, RotateControlOptions, ScaleControlOptions, StreetViewControlOptions, ZoomControlOptions } from '../services/google-maps-types';\r\n/**\r\n * AgmMap renders a Google Map.\r\n * **Important note**: To be able see a map in the browser, you have to define a height for the\r\n * element `agm-map`.\r\n *\r\n * ### Example\r\n * ```typescript\r\n * import { Component } from '@angular/core';\r\n *\r\n * @Component({\r\n *  selector: 'my-map-cmp',\r\n *  styles: [`\r\n *    agm-map {\r\n *      height: 300px;\r\n *    }\r\n * `],\r\n *  template: `\r\n *    <agm-map [latitude]=\"lat\" [longitude]=\"lng\" [zoom]=\"zoom\">\r\n *    </agm-map>\r\n *  `\r\n * })\r\n * ```\r\n */\r\nexport declare class AgmMap implements OnChanges, OnInit, OnDestroy {\r\n    private _elem;\r\n    private _mapsWrapper;\r\n    private _platformId;\r\n    protected _fitBoundsService: FitBoundsService;\r\n    private _zone;\r\n    /**\r\n     * The longitude that defines the center of the map.\r\n     */\r\n    longitude: number;\r\n    /**\r\n     * The latitude that defines the center of the map.\r\n     */\r\n    latitude: number;\r\n    /**\r\n     * The zoom level of the map. The default zoom level is 8.\r\n     */\r\n    zoom: number;\r\n    /**\r\n     * The minimal zoom level of the map allowed. When not provided, no restrictions to the zoom level\r\n     * are enforced.\r\n     */\r\n    minZoom: number;\r\n    /**\r\n     * The maximal zoom level of the map allowed. When not provided, no restrictions to the zoom level\r\n     * are enforced.\r\n     */\r\n    maxZoom: number;\r\n    /**\r\n     * The control size for the default map controls. Only governs the controls made by the Maps API itself\r\n     */\r\n    controlSize: number;\r\n    /**\r\n     * Enables/disables if map is draggable.\r\n     */\r\n    draggable: boolean;\r\n    /**\r\n     * Enables/disables zoom and center on double click. Enabled by default.\r\n     */\r\n    disableDoubleClickZoom: boolean;\r\n    /**\r\n     * Enables/disables all default UI of the Google map. Please note: When the map is created, this\r\n     * value cannot get updated.\r\n     */\r\n    disableDefaultUI: boolean;\r\n    /**\r\n     * If false, disables scrollwheel zooming on the map. The scrollwheel is enabled by default.\r\n     */\r\n    scrollwheel: boolean;\r\n    /**\r\n     * Color used for the background of the Map div. This color will be visible when tiles have not\r\n     * yet loaded as the user pans. This option can only be set when the map is initialized.\r\n     */\r\n    backgroundColor: string;\r\n    /**\r\n     * The name or url of the cursor to display when mousing over a draggable map. This property uses\r\n     * the css  * cursor attribute to change the icon. As with the css property, you must specify at\r\n     * least one fallback cursor that is not a URL. For example:\r\n     * [draggableCursor]=\"'url(http://www.example.com/icon.png), auto;'\"\r\n     */\r\n    draggableCursor: string;\r\n    /**\r\n     * The name or url of the cursor to display when the map is being dragged. This property uses the\r\n     * css cursor attribute to change the icon. As with the css property, you must specify at least\r\n     * one fallback cursor that is not a URL. For example:\r\n     * [draggingCursor]=\"'url(http://www.example.com/icon.png), auto;'\"\r\n     */\r\n    draggingCursor: string;\r\n    /**\r\n     * If false, prevents the map from being controlled by the keyboard. Keyboard shortcuts are\r\n     * enabled by default.\r\n     */\r\n    keyboardShortcuts: boolean;\r\n    /**\r\n     * The enabled/disabled state of the Zoom control.\r\n     */\r\n    zoomControl: boolean;\r\n    /**\r\n     * Options for the Zoom control.\r\n     */\r\n    zoomControlOptions: ZoomControlOptions;\r\n    /**\r\n     * Styles to apply to each of the default map types. Note that for Satellite/Hybrid and Terrain\r\n     * modes, these styles will only apply to labels and geometry.\r\n     */\r\n    styles: MapTypeStyle[];\r\n    /**\r\n     * When true and the latitude and/or longitude values changes, the Google Maps panTo method is\r\n     * used to\r\n     * center the map. See: https://developers.google.com/maps/documentation/javascript/reference#Map\r\n     */\r\n    usePanning: boolean;\r\n    /**\r\n     * The initial enabled/disabled state of the Street View Pegman control.\r\n     * This control is part of the default UI, and should be set to false when displaying a map type\r\n     * on which the Street View road overlay should not appear (e.g. a non-Earth map type).\r\n     */\r\n    streetViewControl: boolean;\r\n    /**\r\n     * Options for the Street View control.\r\n     */\r\n    streetViewControlOptions: StreetViewControlOptions;\r\n    /**\r\n     * Sets the viewport to contain the given bounds.\r\n     * If this option to `true`, the bounds get automatically computed from all elements that use the {@link AgmFitBounds} directive.\r\n     */\r\n    fitBounds: LatLngBoundsLiteral | LatLngBounds | boolean;\r\n    /**\r\n     * Padding amount for the bounds.\r\n     */\r\n    fitBoundsPadding: number | Padding;\r\n    /**\r\n     * The initial enabled/disabled state of the Scale control. This is disabled by default.\r\n     */\r\n    scaleControl: boolean;\r\n    /**\r\n     * Options for the scale control.\r\n     */\r\n    scaleControlOptions: ScaleControlOptions;\r\n    /**\r\n     * The initial enabled/disabled state of the Map type control.\r\n     */\r\n    mapTypeControl: boolean;\r\n    /**\r\n     * Options for the Map type control.\r\n     */\r\n    mapTypeControlOptions: MapTypeControlOptions;\r\n    /**\r\n     * The initial enabled/disabled state of the Pan control.\r\n     */\r\n    panControl: boolean;\r\n    /**\r\n     * Options for the Pan control.\r\n     */\r\n    panControlOptions: PanControlOptions;\r\n    /**\r\n     * The initial enabled/disabled state of the Rotate control.\r\n     */\r\n    rotateControl: boolean;\r\n    /**\r\n     * Options for the Rotate control.\r\n     */\r\n    rotateControlOptions: RotateControlOptions;\r\n    /**\r\n     * The initial enabled/disabled state of the Fullscreen control.\r\n     */\r\n    fullscreenControl: boolean;\r\n    /**\r\n     * Options for the Fullscreen control.\r\n     */\r\n    fullscreenControlOptions: FullscreenControlOptions;\r\n    /**\r\n     * The map mapTypeId. Defaults to 'roadmap'.\r\n     */\r\n    mapTypeId: 'roadmap' | 'hybrid' | 'satellite' | 'terrain' | string;\r\n    /**\r\n     * When false, map icons are not clickable. A map icon represents a point of interest,\r\n     * also known as a POI. By default map icons are clickable.\r\n     */\r\n    clickableIcons: boolean;\r\n    /**\r\n     * A map icon represents a point of interest, also known as a POI.\r\n     * When map icons are clickable by default, an info window is displayed.\r\n     * When this property is set to false, the info window will not be shown but the click event\r\n     * will still fire\r\n     */\r\n    showDefaultInfoWindow: boolean;\r\n    /**\r\n     * This setting controls how gestures on the map are handled.\r\n     * Allowed values:\r\n     * - 'cooperative' (Two-finger touch gestures pan and zoom the map. One-finger touch gestures are not handled by the map.)\r\n     * - 'greedy'      (All touch gestures pan or zoom the map.)\r\n     * - 'none'        (The map cannot be panned or zoomed by user gestures.)\r\n     * - 'auto'        [default] (Gesture handling is either cooperative or greedy, depending on whether the page is scrollable or not.\r\n     */\r\n    gestureHandling: 'cooperative' | 'greedy' | 'none' | 'auto';\r\n    /**\r\n     * Controls the automatic switching behavior for the angle of incidence of\r\n     * the map. The only allowed values are 0 and 45. The value 0 causes the map\r\n     * to always use a 0째 overhead view regardless of the zoom level and\r\n     * viewport. The value 45 causes the tilt angle to automatically switch to\r\n     * 45 whenever 45째 imagery is available for the current zoom level and\r\n     * viewport, and switch back to 0 whenever 45째 imagery is not available\r\n     * (this is the default behavior). 45째 imagery is only available for\r\n     * satellite and hybrid map types, within some locations, and at some zoom\r\n     * levels. Note: getTilt returns the current tilt angle, not the value\r\n     * specified by this option. Because getTilt and this option refer to\r\n     * different things, do not bind() the tilt property; doing so may yield\r\n     * unpredictable effects. (Default of AGM is 0 (disabled). Enable it with value 45.)\r\n     */\r\n    tilt: number;\r\n    /**\r\n     * Options for restricting the bounds of the map.\r\n     * User cannot pan or zoom away from restricted area.\r\n     */\r\n    restriction: MapRestriction;\r\n    /**\r\n     * Map option attributes that can change over time\r\n     */\r\n    private static _mapOptionsAttributes;\r\n    private _observableSubscriptions;\r\n    private _fitBoundsSubscription;\r\n    /**\r\n     * This event emitter gets emitted when the user clicks on the map (but not when they click on a\r\n     * marker or infoWindow).\r\n     */\r\n    mapClick: EventEmitter<MouseEvent>;\r\n    /**\r\n     * This event emitter gets emitted when the user right-clicks on the map (but not when they click\r\n     * on a marker or infoWindow).\r\n     */\r\n    mapRightClick: EventEmitter<MouseEvent>;\r\n    /**\r\n     * This event emitter gets emitted when the user double-clicks on the map (but not when they click\r\n     * on a marker or infoWindow).\r\n     */\r\n    mapDblClick: EventEmitter<MouseEvent>;\r\n    /**\r\n     * This event emitter is fired when the map center changes.\r\n     */\r\n    centerChange: EventEmitter<LatLngLiteral>;\r\n    /**\r\n     * This event is fired when the viewport bounds have changed.\r\n     */\r\n    boundsChange: EventEmitter<LatLngBounds>;\r\n    /**\r\n     * This event is fired when the mapTypeId property changes.\r\n     */\r\n    mapTypeIdChange: EventEmitter<MapTypeId>;\r\n    /**\r\n     * This event is fired when the map becomes idle after panning or zooming.\r\n     */\r\n    idle: EventEmitter<void>;\r\n    /**\r\n     * This event is fired when the zoom level has changed.\r\n     */\r\n    zoomChange: EventEmitter<number>;\r\n    /**\r\n     * This event is fired when the google map is fully initialized.\r\n     * You get the google.maps.Map instance as a result of this EventEmitter.\r\n     */\r\n    mapReady: EventEmitter<any>;\r\n    /**\r\n     * This event is fired when the visible tiles have finished loading.\r\n     */\r\n    tilesLoaded: EventEmitter<void>;\r\n    constructor(_elem: ElementRef, _mapsWrapper: GoogleMapsAPIWrapper, _platformId: Object, _fitBoundsService: FitBoundsService, _zone: NgZone);\r\n    /** @internal */\r\n    ngOnInit(): void;\r\n    private _initMapInstance;\r\n    /** @internal */\r\n    ngOnDestroy(): void;\r\n    ngOnChanges(changes: SimpleChanges): void;\r\n    private _updateMapOptionsChanges;\r\n    /**\r\n     * Triggers a resize event on the google map instance.\r\n     * When recenter is true, the of the google map gets called with the current lat/lng values or fitBounds value to recenter the map.\r\n     * Returns a promise that gets resolved after the event was triggered.\r\n     */\r\n    triggerResize(recenter?: boolean): Promise<void>;\r\n    private _updatePosition;\r\n    private _setCenter;\r\n    private _fitBounds;\r\n    private _subscribeToFitBoundsUpdates;\r\n    protected _updateBounds(bounds: LatLngBounds | LatLngBoundsLiteral, padding?: number | Padding): void;\r\n    private _isLatLngBoundsLiteral;\r\n    private _handleMapCenterChange;\r\n    private _handleBoundsChange;\r\n    private _handleMapTypeIdChange;\r\n    private _handleMapZoomChange;\r\n    private _handleIdleEvent;\r\n    private _handleTilesLoadedEvent;\r\n    private _handleMapMouseEvents;\r\n}\r\n"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4BA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAiRA;"}