{"version":3,"file":"polygon.d.ts","sources":["v:/jad-admin-go/mazat_admin_panel/node_modules/@agm/core/directives/polygon.d.ts"],"sourcesContent":["import { AfterContentInit, EventEmitter, OnChanges, OnDestroy, SimpleChanges } from '@angular/core';\r\nimport { LatLng, LatLngLiteral, PolyMouseEvent } from '../services/google-maps-types';\r\nimport { PolygonManager } from '../services/managers/polygon-manager';\r\nimport { MvcEventType } from '../utils/mvcarray-utils';\r\n/**\r\n * AgmPolygon renders a polygon on a {@link AgmMap}\r\n *\r\n * ### Example\r\n * ```typescript\r\n * import { Component } from '@angular/core';\r\n *\r\n * @Component({\r\n *  selector: 'my-map-cmp',\r\n *  styles: [`\r\n *    agm-map {\r\n *      height: 300px;\r\n *    }\r\n * `],\r\n *  template: `\r\n *    <agm-map [latitude]=\"lat\" [longitude]=\"lng\" [zoom]=\"zoom\">\r\n *      <agm-polygon [paths]=\"paths\">\r\n *      </agm-polygon>\r\n *    </agm-map>\r\n *  `\r\n * })\r\n * export class MyMapCmp {\r\n *   lat: number = 0;\r\n *   lng: number = 0;\r\n *   zoom: number = 10;\r\n *   paths: Array<LatLngLiteral> = [\r\n *     { lat: 0,  lng: 10 },\r\n *     { lat: 0,  lng: 20 },\r\n *     { lat: 10, lng: 20 },\r\n *     { lat: 10, lng: 10 },\r\n *     { lat: 0,  lng: 10 }\r\n *   ]\r\n *   // Nesting paths will create a hole where they overlap;\r\n *   nestedPaths: Array<Array<LatLngLiteral>> = [[\r\n *     { lat: 0,  lng: 10 },\r\n *     { lat: 0,  lng: 20 },\r\n *     { lat: 10, lng: 20 },\r\n *     { lat: 10, lng: 10 },\r\n *     { lat: 0,  lng: 10 }\r\n *   ], [\r\n *     { lat: 0, lng: 15 },\r\n *     { lat: 0, lng: 20 },\r\n *     { lat: 5, lng: 20 },\r\n *     { lat: 5, lng: 15 },\r\n *     { lat: 0, lng: 15 }\r\n *   ]]\r\n * }\r\n * ```\r\n */\r\nexport declare class AgmPolygon implements OnDestroy, OnChanges, AfterContentInit {\r\n    private _polygonManager;\r\n    /**\r\n     * Indicates whether this Polygon handles mouse events. Defaults to true.\r\n     */\r\n    clickable: boolean;\r\n    /**\r\n     * If set to true, the user can drag this shape over the map. The geodesic\r\n     * property defines the mode of dragging. Defaults to false.\r\n     */\r\n    draggable: boolean;\r\n    /**\r\n     * If set to true, the user can edit this shape by dragging the control\r\n     * points shown at the vertices and on each segment. Defaults to false.\r\n     */\r\n    editable: boolean;\r\n    /**\r\n     * The fill color. All CSS3 colors are supported except for extended\r\n     * named colors.\r\n     */\r\n    fillColor: string;\r\n    /**\r\n     * The fill opacity between 0.0 and 1.0\r\n     */\r\n    fillOpacity: number;\r\n    /**\r\n     * When true, edges of the polygon are interpreted as geodesic and will\r\n     * follow the curvature of the Earth. When false, edges of the polygon are\r\n     * rendered as straight lines in screen space. Note that the shape of a\r\n     * geodesic polygon may appear to change when dragged, as the dimensions\r\n     * are maintained relative to the surface of the earth. Defaults to false.\r\n     */\r\n    geodesic: boolean;\r\n    /**\r\n     * The ordered sequence of coordinates that designates a closed loop.\r\n     * Unlike polylines, a polygon may consist of one or more paths.\r\n     *  As a result, the paths property may specify one or more arrays of\r\n     * LatLng coordinates. Paths are closed automatically; do not repeat the\r\n     * first vertex of the path as the last vertex. Simple polygons may be\r\n     * defined using a single array of LatLngs. More complex polygons may\r\n     * specify an array of arrays. Any simple arrays are converted into Arrays.\r\n     * Inserting or removing LatLngs from the Array will automatically update\r\n     * the polygon on the map.\r\n     */\r\n    paths: Array<LatLng | LatLngLiteral> | Array<Array<LatLng | LatLngLiteral>>;\r\n    /**\r\n     * The stroke color. All CSS3 colors are supported except for extended\r\n     * named colors.\r\n     */\r\n    strokeColor: string;\r\n    /**\r\n     * The stroke opacity between 0.0 and 1.0\r\n     */\r\n    strokeOpacity: number;\r\n    /**\r\n     * The stroke width in pixels.\r\n     */\r\n    strokeWeight: number;\r\n    /**\r\n     * Whether this polygon is visible on the map. Defaults to true.\r\n     */\r\n    visible: boolean;\r\n    /**\r\n     * The zIndex compared to other polys.\r\n     */\r\n    zIndex: number;\r\n    /**\r\n     * This event is fired when the DOM click event is fired on the Polygon.\r\n     */\r\n    polyClick: EventEmitter<PolyMouseEvent>;\r\n    /**\r\n     * This event is fired when the DOM dblclick event is fired on the Polygon.\r\n     */\r\n    polyDblClick: EventEmitter<PolyMouseEvent>;\r\n    /**\r\n     * This event is repeatedly fired while the user drags the polygon.\r\n     */\r\n    polyDrag: EventEmitter<MouseEvent>;\r\n    /**\r\n     * This event is fired when the user stops dragging the polygon.\r\n     */\r\n    polyDragEnd: EventEmitter<MouseEvent>;\r\n    /**\r\n     * This event is fired when the user starts dragging the polygon.\r\n     */\r\n    polyDragStart: EventEmitter<MouseEvent>;\r\n    /**\r\n     * This event is fired when the DOM mousedown event is fired on the Polygon.\r\n     */\r\n    polyMouseDown: EventEmitter<PolyMouseEvent>;\r\n    /**\r\n     * This event is fired when the DOM mousemove event is fired on the Polygon.\r\n     */\r\n    polyMouseMove: EventEmitter<PolyMouseEvent>;\r\n    /**\r\n     * This event is fired on Polygon mouseout.\r\n     */\r\n    polyMouseOut: EventEmitter<PolyMouseEvent>;\r\n    /**\r\n     * This event is fired on Polygon mouseover.\r\n     */\r\n    polyMouseOver: EventEmitter<PolyMouseEvent>;\r\n    /**\r\n     * This event is fired whe the DOM mouseup event is fired on the Polygon\r\n     */\r\n    polyMouseUp: EventEmitter<PolyMouseEvent>;\r\n    /**\r\n     * This event is fired when the Polygon is right-clicked on.\r\n     */\r\n    polyRightClick: EventEmitter<PolyMouseEvent>;\r\n    /**\r\n     * This event is fired after Polygon first path changes.\r\n     */\r\n    polyPathsChange: EventEmitter<PolygonPathEvent<any>>;\r\n    private static _polygonOptionsAttributes;\r\n    private _id;\r\n    private _polygonAddedToManager;\r\n    private _subscriptions;\r\n    constructor(_polygonManager: PolygonManager);\r\n    /** @internal */\r\n    ngAfterContentInit(): void;\r\n    ngOnChanges(changes: SimpleChanges): any;\r\n    private _init;\r\n    private _addEventListeners;\r\n    private _updatePolygonOptions;\r\n    /** @internal */\r\n    id(): string;\r\n    /** @internal */\r\n    ngOnDestroy(): void;\r\n    getPath(): Promise<Array<LatLng>>;\r\n    getPaths(): Promise<Array<Array<LatLng>>>;\r\n}\r\nexport interface PolygonPathEvent<T extends (LatLng | Array<LatLng>)> {\r\n    newArr: LatLng[][];\r\n    eventName: MvcEventType;\r\n    index: number;\r\n    previous?: T;\r\n}\r\nexport interface PathCollectionChangePolygonPathEvent extends PolygonPathEvent<Array<LatLng>> {\r\n}\r\nexport interface PathChangePolygonPathEvent extends PolygonPathEvent<LatLng> {\r\n    pathIndex: number;\r\n}\r\n"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAqDA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAmIA;;;;;;;;;;;;"}