{"version":3,"file":"circle.d.ts","sources":["v:/jad-admin-go/mazat_admin_panel/node_modules/@agm/core/directives/circle.d.ts"],"sourcesContent":["import { EventEmitter, OnChanges, OnDestroy, OnInit, SimpleChange } from '@angular/core';\r\nimport { MouseEvent } from '../map-types';\r\nimport { LatLng, LatLngBounds, LatLngLiteral } from '../services/google-maps-types';\r\nimport { CircleManager } from '../services/managers/circle-manager';\r\nexport declare class AgmCircle implements OnInit, OnChanges, OnDestroy {\r\n    private _manager;\r\n    /**\r\n     * The latitude position of the circle (required).\r\n     */\r\n    latitude: number;\r\n    /**\r\n     * The clickable position of the circle (required).\r\n     */\r\n    longitude: number;\r\n    /**\r\n     * Indicates whether this Circle handles mouse events. Defaults to true.\r\n     */\r\n    clickable: boolean;\r\n    /**\r\n     * If set to true, the user can drag this circle over the map. Defaults to false.\r\n     */\r\n    draggable: boolean;\r\n    /**\r\n     * If set to true, the user can edit this circle by dragging the control points shown at\r\n     * the center and around the circumference of the circle. Defaults to false.\r\n     */\r\n    editable: boolean;\r\n    /**\r\n     * The fill color. All CSS3 colors are supported except for extended named colors.\r\n     */\r\n    fillColor: string;\r\n    /**\r\n     * The fill opacity between 0.0 and 1.0.\r\n     */\r\n    fillOpacity: number;\r\n    /**\r\n     * The radius in meters on the Earth's surface.\r\n     */\r\n    radius: number;\r\n    /**\r\n     * The stroke color. All CSS3 colors are supported except for extended named colors.\r\n     */\r\n    strokeColor: string;\r\n    /**\r\n     * The stroke opacity between 0.0 and 1.0\r\n     */\r\n    strokeOpacity: number;\r\n    /**\r\n     * The stroke position. Defaults to CENTER.\r\n     * This property is not supported on Internet Explorer 8 and earlier.\r\n     */\r\n    strokePosition: 'CENTER' | 'INSIDE' | 'OUTSIDE';\r\n    /**\r\n     * The stroke width in pixels.\r\n     */\r\n    strokeWeight: number;\r\n    /**\r\n     * Whether this circle is visible on the map. Defaults to true.\r\n     */\r\n    visible: boolean;\r\n    /**\r\n     * The zIndex compared to other polys.\r\n     */\r\n    zIndex: number;\r\n    /**\r\n     * This event is fired when the circle's center is changed.\r\n     */\r\n    centerChange: EventEmitter<LatLngLiteral>;\r\n    /**\r\n     * This event emitter gets emitted when the user clicks on the circle.\r\n     */\r\n    circleClick: EventEmitter<MouseEvent>;\r\n    /**\r\n     * This event emitter gets emitted when the user clicks on the circle.\r\n     */\r\n    circleDblClick: EventEmitter<MouseEvent>;\r\n    /**\r\n     * This event is repeatedly fired while the user drags the circle.\r\n     */\r\n    drag: EventEmitter<MouseEvent>;\r\n    /**\r\n     * This event is fired when the user stops dragging the circle.\r\n     */\r\n    dragEnd: EventEmitter<MouseEvent>;\r\n    /**\r\n     * This event is fired when the user starts dragging the circle.\r\n     */\r\n    dragStart: EventEmitter<MouseEvent>;\r\n    /**\r\n     * This event is fired when the DOM mousedown event is fired on the circle.\r\n     */\r\n    mouseDown: EventEmitter<MouseEvent>;\r\n    /**\r\n     * This event is fired when the DOM mousemove event is fired on the circle.\r\n     */\r\n    mouseMove: EventEmitter<MouseEvent>;\r\n    /**\r\n     * This event is fired on circle mouseout.\r\n     */\r\n    mouseOut: EventEmitter<MouseEvent>;\r\n    /**\r\n     * This event is fired on circle mouseover.\r\n     */\r\n    mouseOver: EventEmitter<MouseEvent>;\r\n    /**\r\n     * This event is fired when the DOM mouseup event is fired on the circle.\r\n     */\r\n    mouseUp: EventEmitter<MouseEvent>;\r\n    /**\r\n     * This event is fired when the circle's radius is changed.\r\n     */\r\n    radiusChange: EventEmitter<number>;\r\n    /**\r\n     * This event is fired when the circle is right-clicked on.\r\n     */\r\n    rightClick: EventEmitter<MouseEvent>;\r\n    private _circleAddedToManager;\r\n    private static _mapOptions;\r\n    private _eventSubscriptions;\r\n    constructor(_manager: CircleManager);\r\n    /** @internal */\r\n    ngOnInit(): void;\r\n    /** @internal */\r\n    ngOnChanges(changes: {\r\n        [key: string]: SimpleChange;\r\n    }): void;\r\n    private _updateCircleOptionsChanges;\r\n    private _registerEventListeners;\r\n    /** @internal */\r\n    ngOnDestroy(): void;\r\n    /**\r\n     * Gets the LatLngBounds of this Circle.\r\n     */\r\n    getBounds(): Promise<LatLngBounds>;\r\n    getCenter(): Promise<LatLng>;\r\n}\r\n"],"names":[],"mappings":"AAAA;;;;;AAIA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAmIA;"}