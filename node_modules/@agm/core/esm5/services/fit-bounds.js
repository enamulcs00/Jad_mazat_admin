import * as tslib_1 from "tslib";
import { Injectable } from '@angular/core';
import { BehaviorSubject, from, timer } from 'rxjs';
import { flatMap, map, sample, shareReplay, switchMap, } from 'rxjs/operators';
import { MapsAPILoader } from './maps-api-loader/maps-api-loader';
/**
 * Class to implement when you what to be able to make it work with the auto fit bounds feature
 * of AGM.
 */
import * as ɵngcc0 from '@angular/core';
var FitBoundsAccessor = /** @class */ (function () {
    function FitBoundsAccessor() {
    }
    return FitBoundsAccessor;
}());
export { FitBoundsAccessor };
/**
 * The FitBoundsService is responsible for computing the bounds of the a single map.
 */
var FitBoundsService = /** @class */ (function () {
    function FitBoundsService(loader) {
        var _this = this;
        this._boundsChangeSampleTime$ = new BehaviorSubject(200);
        this._includeInBounds$ = new BehaviorSubject(new Map());
        this.bounds$ = from(loader.load()).pipe(flatMap(function () { return _this._includeInBounds$; }), sample(this._boundsChangeSampleTime$.pipe(switchMap(function (time) { return timer(0, time); }))), map(function (includeInBounds) { return _this._generateBounds(includeInBounds); }), shareReplay(1));
    }
    FitBoundsService.prototype._generateBounds = function (includeInBounds) {
        var bounds = new google.maps.LatLngBounds();
        includeInBounds.forEach(function (b) { return bounds.extend(b); });
        return bounds;
    };
    FitBoundsService.prototype.addToBounds = function (latLng) {
        var id = this._createIdentifier(latLng);
        if (this._includeInBounds$.value.has(id)) {
            return;
        }
        var map = this._includeInBounds$.value;
        map.set(id, latLng);
        this._includeInBounds$.next(map);
    };
    FitBoundsService.prototype.removeFromBounds = function (latLng) {
        var map = this._includeInBounds$.value;
        map.delete(this._createIdentifier(latLng));
        this._includeInBounds$.next(map);
    };
    FitBoundsService.prototype.changeFitBoundsChangeSampleTime = function (timeMs) {
        this._boundsChangeSampleTime$.next(timeMs);
    };
    FitBoundsService.prototype.getBounds$ = function () {
        return this.bounds$;
    };
    FitBoundsService.prototype._createIdentifier = function (latLng) {
        return latLng.lat + "+" + latLng.lng;
    };
    FitBoundsService.ctorParameters = function () { return [
        { type: MapsAPILoader }
    ]; };
    FitBoundsService = tslib_1.__decorate([
        tslib_1.__metadata("design:paramtypes", [MapsAPILoader])
    ], FitBoundsService);
FitBoundsService.ngInjectableDef = ɵngcc0.ɵɵdefineInjectable({ token: FitBoundsService, factory: function FitBoundsService_Factory(t) { return new (t || FitBoundsService)(ɵngcc0.ɵɵinject(MapsAPILoader)); }, providedIn: null });
/*@__PURE__*/ ɵngcc0.ɵsetClassMetadata(FitBoundsService, [{
        type: Injectable
    }], function () { return [{ type: MapsAPILoader }]; }, { _boundsChangeSampleTime$: [], _includeInBounds$: [], bounds$: [], _generateBounds: [], addToBounds: [], removeFromBounds: [], changeFitBoundsChangeSampleTime: [], getBounds$: [], _createIdentifier: [] });
    return FitBoundsService;
}());
export { FitBoundsService };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInY6L2phZC1hZG1pbi1nby9tYXphdF9hZG1pbl9wYW5lbC9ub2RlX21vZHVsZXMvQGFnbS9jb3JlL2VzbTUvc2VydmljZXMvZml0LWJvdW5kcy5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7OztBQVNBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OzsyQ0ErQzJDLEFBQ3RCOzs7Ozs7eVFBRUkiLCJmaWxlIjoiZml0LWJvdW5kcy5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIHRzbGliXzEgZnJvbSBcInRzbGliXCI7XHJcbmltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgQmVoYXZpb3JTdWJqZWN0LCBmcm9tLCB0aW1lciB9IGZyb20gJ3J4anMnO1xyXG5pbXBvcnQgeyBmbGF0TWFwLCBtYXAsIHNhbXBsZSwgc2hhcmVSZXBsYXksIHN3aXRjaE1hcCwgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XHJcbmltcG9ydCB7IE1hcHNBUElMb2FkZXIgfSBmcm9tICcuL21hcHMtYXBpLWxvYWRlci9tYXBzLWFwaS1sb2FkZXInO1xyXG4vKipcclxuICogQ2xhc3MgdG8gaW1wbGVtZW50IHdoZW4geW91IHdoYXQgdG8gYmUgYWJsZSB0byBtYWtlIGl0IHdvcmsgd2l0aCB0aGUgYXV0byBmaXQgYm91bmRzIGZlYXR1cmVcclxuICogb2YgQUdNLlxyXG4gKi9cclxudmFyIEZpdEJvdW5kc0FjY2Vzc29yID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xyXG4gICAgZnVuY3Rpb24gRml0Qm91bmRzQWNjZXNzb3IoKSB7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gRml0Qm91bmRzQWNjZXNzb3I7XHJcbn0oKSk7XHJcbmV4cG9ydCB7IEZpdEJvdW5kc0FjY2Vzc29yIH07XHJcbi8qKlxyXG4gKiBUaGUgRml0Qm91bmRzU2VydmljZSBpcyByZXNwb25zaWJsZSBmb3IgY29tcHV0aW5nIHRoZSBib3VuZHMgb2YgdGhlIGEgc2luZ2xlIG1hcC5cclxuICovXHJcbnZhciBGaXRCb3VuZHNTZXJ2aWNlID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xyXG4gICAgZnVuY3Rpb24gRml0Qm91bmRzU2VydmljZShsb2FkZXIpIHtcclxuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgICAgIHRoaXMuX2JvdW5kc0NoYW5nZVNhbXBsZVRpbWUkID0gbmV3IEJlaGF2aW9yU3ViamVjdCgyMDApO1xyXG4gICAgICAgIHRoaXMuX2luY2x1ZGVJbkJvdW5kcyQgPSBuZXcgQmVoYXZpb3JTdWJqZWN0KG5ldyBNYXAoKSk7XHJcbiAgICAgICAgdGhpcy5ib3VuZHMkID0gZnJvbShsb2FkZXIubG9hZCgpKS5waXBlKGZsYXRNYXAoZnVuY3Rpb24gKCkgeyByZXR1cm4gX3RoaXMuX2luY2x1ZGVJbkJvdW5kcyQ7IH0pLCBzYW1wbGUodGhpcy5fYm91bmRzQ2hhbmdlU2FtcGxlVGltZSQucGlwZShzd2l0Y2hNYXAoZnVuY3Rpb24gKHRpbWUpIHsgcmV0dXJuIHRpbWVyKDAsIHRpbWUpOyB9KSkpLCBtYXAoZnVuY3Rpb24gKGluY2x1ZGVJbkJvdW5kcykgeyByZXR1cm4gX3RoaXMuX2dlbmVyYXRlQm91bmRzKGluY2x1ZGVJbkJvdW5kcyk7IH0pLCBzaGFyZVJlcGxheSgxKSk7XHJcbiAgICB9XHJcbiAgICBGaXRCb3VuZHNTZXJ2aWNlLnByb3RvdHlwZS5fZ2VuZXJhdGVCb3VuZHMgPSBmdW5jdGlvbiAoaW5jbHVkZUluQm91bmRzKSB7XHJcbiAgICAgICAgdmFyIGJvdW5kcyA9IG5ldyBnb29nbGUubWFwcy5MYXRMbmdCb3VuZHMoKTtcclxuICAgICAgICBpbmNsdWRlSW5Cb3VuZHMuZm9yRWFjaChmdW5jdGlvbiAoYikgeyByZXR1cm4gYm91bmRzLmV4dGVuZChiKTsgfSk7XHJcbiAgICAgICAgcmV0dXJuIGJvdW5kcztcclxuICAgIH07XHJcbiAgICBGaXRCb3VuZHNTZXJ2aWNlLnByb3RvdHlwZS5hZGRUb0JvdW5kcyA9IGZ1bmN0aW9uIChsYXRMbmcpIHtcclxuICAgICAgICB2YXIgaWQgPSB0aGlzLl9jcmVhdGVJZGVudGlmaWVyKGxhdExuZyk7XHJcbiAgICAgICAgaWYgKHRoaXMuX2luY2x1ZGVJbkJvdW5kcyQudmFsdWUuaGFzKGlkKSkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHZhciBtYXAgPSB0aGlzLl9pbmNsdWRlSW5Cb3VuZHMkLnZhbHVlO1xyXG4gICAgICAgIG1hcC5zZXQoaWQsIGxhdExuZyk7XHJcbiAgICAgICAgdGhpcy5faW5jbHVkZUluQm91bmRzJC5uZXh0KG1hcCk7XHJcbiAgICB9O1xyXG4gICAgRml0Qm91bmRzU2VydmljZS5wcm90b3R5cGUucmVtb3ZlRnJvbUJvdW5kcyA9IGZ1bmN0aW9uIChsYXRMbmcpIHtcclxuICAgICAgICB2YXIgbWFwID0gdGhpcy5faW5jbHVkZUluQm91bmRzJC52YWx1ZTtcclxuICAgICAgICBtYXAuZGVsZXRlKHRoaXMuX2NyZWF0ZUlkZW50aWZpZXIobGF0TG5nKSk7XHJcbiAgICAgICAgdGhpcy5faW5jbHVkZUluQm91bmRzJC5uZXh0KG1hcCk7XHJcbiAgICB9O1xyXG4gICAgRml0Qm91bmRzU2VydmljZS5wcm90b3R5cGUuY2hhbmdlRml0Qm91bmRzQ2hhbmdlU2FtcGxlVGltZSA9IGZ1bmN0aW9uICh0aW1lTXMpIHtcclxuICAgICAgICB0aGlzLl9ib3VuZHNDaGFuZ2VTYW1wbGVUaW1lJC5uZXh0KHRpbWVNcyk7XHJcbiAgICB9O1xyXG4gICAgRml0Qm91bmRzU2VydmljZS5wcm90b3R5cGUuZ2V0Qm91bmRzJCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5ib3VuZHMkO1xyXG4gICAgfTtcclxuICAgIEZpdEJvdW5kc1NlcnZpY2UucHJvdG90eXBlLl9jcmVhdGVJZGVudGlmaWVyID0gZnVuY3Rpb24gKGxhdExuZykge1xyXG4gICAgICAgIHJldHVybiBsYXRMbmcubGF0ICsgXCIrXCIgKyBsYXRMbmcubG5nO1xyXG4gICAgfTtcclxuICAgIEZpdEJvdW5kc1NlcnZpY2UuY3RvclBhcmFtZXRlcnMgPSBmdW5jdGlvbiAoKSB7IHJldHVybiBbXHJcbiAgICAgICAgeyB0eXBlOiBNYXBzQVBJTG9hZGVyIH1cclxuICAgIF07IH07XHJcbiAgICBGaXRCb3VuZHNTZXJ2aWNlID0gdHNsaWJfMS5fX2RlY29yYXRlKFtcclxuICAgICAgICBJbmplY3RhYmxlKCksXHJcbiAgICAgICAgdHNsaWJfMS5fX21ldGFkYXRhKFwiZGVzaWduOnBhcmFtdHlwZXNcIiwgW01hcHNBUElMb2FkZXJdKVxyXG4gICAgXSwgRml0Qm91bmRzU2VydmljZSk7XHJcbiAgICByZXR1cm4gRml0Qm91bmRzU2VydmljZTtcclxufSgpKTtcclxuZXhwb3J0IHsgRml0Qm91bmRzU2VydmljZSB9O1xyIl19