import * as tslib_1 from "tslib";
import { Injectable } from '@angular/core';
import { GoogleMapsAPIWrapper } from '../google-maps-api-wrapper';
/**
 * This class manages Transit and Bicycling Layers for a Google Map instance.
 */
import * as ɵngcc0 from '@angular/core';
var LayerManager = /** @class */ (function () {
    function LayerManager(_wrapper) {
        this._wrapper = _wrapper;
        this._layers = new Map();
    }
    /**
     * Adds a transit layer to a map instance.
     * @param {AgmTransitLayer} layer - a TransitLayer object
     * @param {TransitLayerOptions} options - TransitLayerOptions options
     * @returns void
     */
    LayerManager.prototype.addTransitLayer = function (layer, options) {
        var newLayer = this._wrapper.createTransitLayer(options);
        this._layers.set(layer, newLayer);
    };
    /**
     * Adds a bicycling layer to a map instance.
     * @param {AgmBicyclingLayer} layer - a bicycling layer object
     * @param {BicyclingLayerOptions} options - BicyclingLayer options
     * @returns void
     */
    LayerManager.prototype.addBicyclingLayer = function (layer, options) {
        var newLayer = this._wrapper.createBicyclingLayer(options);
        this._layers.set(layer, newLayer);
    };
    /**
     * Deletes a map layer
     * @param {AgmTransitLayer|AgmBicyclingLayer} layer - the layer to delete
     * @returns  Promise<void>
     */
    LayerManager.prototype.deleteLayer = function (layer) {
        var _this = this;
        return this._layers.get(layer).then(function (currentLayer) {
            currentLayer.setMap(null);
            _this._layers.delete(layer);
        });
    };
    /**
     * Hide/Show a google map layer
     * @param { AgmTransitLayer|AgmBicyclingLayer} layer - the layer to hide/show
     * @param {TransitLayerOptions|BicyclingLayerOptions} options - used to set visibility of the layer
     * @returns Promise<void>
     */
    LayerManager.prototype.toggleLayerVisibility = function (layer, options) {
        var _this = this;
        return this._layers.get(layer).then(function (currentLayer) {
            if (!options.visible) {
                currentLayer.setMap(null);
                return;
            }
            else {
                return _this._wrapper.getNativeMap().then(function (map) {
                    currentLayer.setMap(map);
                });
            }
        });
    };
    LayerManager.ctorParameters = function () { return [
        { type: GoogleMapsAPIWrapper }
    ]; };
    LayerManager = tslib_1.__decorate([
        tslib_1.__metadata("design:paramtypes", [GoogleMapsAPIWrapper])
    ], LayerManager);
LayerManager.ngInjectableDef = ɵngcc0.ɵɵdefineInjectable({ token: LayerManager, factory: function LayerManager_Factory(t) { return new (t || LayerManager)(ɵngcc0.ɵɵinject(GoogleMapsAPIWrapper)); }, providedIn: null });
/*@__PURE__*/ ɵngcc0.ɵsetClassMetadata(LayerManager, [{
        type: Injectable
    }], function () { return [{ type: GoogleMapsAPIWrapper }]; }, { _wrapper: [], _layers: [], addTransitLayer: [], addBicyclingLayer: [], deleteLayer: [], toggleLayerVisibility: [] });
    return LayerManager;
}());
export { LayerManager };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInY6L2phZC1hZG1pbi1nby9tYXphdF9hZG1pbl9wYW5lbC9ub2RlX21vZHVsZXMvQGFnbS9jb3JlL2VzbTUvc2VydmljZXMvbWFuYWdlcnMvbGF5ZXItbWFuYWdlci5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7OztBQU1BOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7dUNBNER1QyxBQUNsQjs7Ozs7O3lMQUVBIiwiZmlsZSI6ImxheWVyLW1hbmFnZXIuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyB0c2xpYl8xIGZyb20gXCJ0c2xpYlwiO1xyXG5pbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IEdvb2dsZU1hcHNBUElXcmFwcGVyIH0gZnJvbSAnLi4vZ29vZ2xlLW1hcHMtYXBpLXdyYXBwZXInO1xyXG4vKipcclxuICogVGhpcyBjbGFzcyBtYW5hZ2VzIFRyYW5zaXQgYW5kIEJpY3ljbGluZyBMYXllcnMgZm9yIGEgR29vZ2xlIE1hcCBpbnN0YW5jZS5cclxuICovXHJcbnZhciBMYXllck1hbmFnZXIgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XHJcbiAgICBmdW5jdGlvbiBMYXllck1hbmFnZXIoX3dyYXBwZXIpIHtcclxuICAgICAgICB0aGlzLl93cmFwcGVyID0gX3dyYXBwZXI7XHJcbiAgICAgICAgdGhpcy5fbGF5ZXJzID0gbmV3IE1hcCgpO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBBZGRzIGEgdHJhbnNpdCBsYXllciB0byBhIG1hcCBpbnN0YW5jZS5cclxuICAgICAqIEBwYXJhbSB7QWdtVHJhbnNpdExheWVyfSBsYXllciAtIGEgVHJhbnNpdExheWVyIG9iamVjdFxyXG4gICAgICogQHBhcmFtIHtUcmFuc2l0TGF5ZXJPcHRpb25zfSBvcHRpb25zIC0gVHJhbnNpdExheWVyT3B0aW9ucyBvcHRpb25zXHJcbiAgICAgKiBAcmV0dXJucyB2b2lkXHJcbiAgICAgKi9cclxuICAgIExheWVyTWFuYWdlci5wcm90b3R5cGUuYWRkVHJhbnNpdExheWVyID0gZnVuY3Rpb24gKGxheWVyLCBvcHRpb25zKSB7XHJcbiAgICAgICAgdmFyIG5ld0xheWVyID0gdGhpcy5fd3JhcHBlci5jcmVhdGVUcmFuc2l0TGF5ZXIob3B0aW9ucyk7XHJcbiAgICAgICAgdGhpcy5fbGF5ZXJzLnNldChsYXllciwgbmV3TGF5ZXIpO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogQWRkcyBhIGJpY3ljbGluZyBsYXllciB0byBhIG1hcCBpbnN0YW5jZS5cclxuICAgICAqIEBwYXJhbSB7QWdtQmljeWNsaW5nTGF5ZXJ9IGxheWVyIC0gYSBiaWN5Y2xpbmcgbGF5ZXIgb2JqZWN0XHJcbiAgICAgKiBAcGFyYW0ge0JpY3ljbGluZ0xheWVyT3B0aW9uc30gb3B0aW9ucyAtIEJpY3ljbGluZ0xheWVyIG9wdGlvbnNcclxuICAgICAqIEByZXR1cm5zIHZvaWRcclxuICAgICAqL1xyXG4gICAgTGF5ZXJNYW5hZ2VyLnByb3RvdHlwZS5hZGRCaWN5Y2xpbmdMYXllciA9IGZ1bmN0aW9uIChsYXllciwgb3B0aW9ucykge1xyXG4gICAgICAgIHZhciBuZXdMYXllciA9IHRoaXMuX3dyYXBwZXIuY3JlYXRlQmljeWNsaW5nTGF5ZXIob3B0aW9ucyk7XHJcbiAgICAgICAgdGhpcy5fbGF5ZXJzLnNldChsYXllciwgbmV3TGF5ZXIpO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogRGVsZXRlcyBhIG1hcCBsYXllclxyXG4gICAgICogQHBhcmFtIHtBZ21UcmFuc2l0TGF5ZXJ8QWdtQmljeWNsaW5nTGF5ZXJ9IGxheWVyIC0gdGhlIGxheWVyIHRvIGRlbGV0ZVxyXG4gICAgICogQHJldHVybnMgIFByb21pc2U8dm9pZD5cclxuICAgICAqL1xyXG4gICAgTGF5ZXJNYW5hZ2VyLnByb3RvdHlwZS5kZWxldGVMYXllciA9IGZ1bmN0aW9uIChsYXllcikge1xyXG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2xheWVycy5nZXQobGF5ZXIpLnRoZW4oZnVuY3Rpb24gKGN1cnJlbnRMYXllcikge1xyXG4gICAgICAgICAgICBjdXJyZW50TGF5ZXIuc2V0TWFwKG51bGwpO1xyXG4gICAgICAgICAgICBfdGhpcy5fbGF5ZXJzLmRlbGV0ZShsYXllcik7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBIaWRlL1Nob3cgYSBnb29nbGUgbWFwIGxheWVyXHJcbiAgICAgKiBAcGFyYW0geyBBZ21UcmFuc2l0TGF5ZXJ8QWdtQmljeWNsaW5nTGF5ZXJ9IGxheWVyIC0gdGhlIGxheWVyIHRvIGhpZGUvc2hvd1xyXG4gICAgICogQHBhcmFtIHtUcmFuc2l0TGF5ZXJPcHRpb25zfEJpY3ljbGluZ0xheWVyT3B0aW9uc30gb3B0aW9ucyAtIHVzZWQgdG8gc2V0IHZpc2liaWxpdHkgb2YgdGhlIGxheWVyXHJcbiAgICAgKiBAcmV0dXJucyBQcm9taXNlPHZvaWQ+XHJcbiAgICAgKi9cclxuICAgIExheWVyTWFuYWdlci5wcm90b3R5cGUudG9nZ2xlTGF5ZXJWaXNpYmlsaXR5ID0gZnVuY3Rpb24gKGxheWVyLCBvcHRpb25zKSB7XHJcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgICAgICByZXR1cm4gdGhpcy5fbGF5ZXJzLmdldChsYXllcikudGhlbihmdW5jdGlvbiAoY3VycmVudExheWVyKSB7XHJcbiAgICAgICAgICAgIGlmICghb3B0aW9ucy52aXNpYmxlKSB7XHJcbiAgICAgICAgICAgICAgICBjdXJyZW50TGF5ZXIuc2V0TWFwKG51bGwpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIF90aGlzLl93cmFwcGVyLmdldE5hdGl2ZU1hcCgpLnRoZW4oZnVuY3Rpb24gKG1hcCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGN1cnJlbnRMYXllci5zZXRNYXAobWFwKTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG4gICAgTGF5ZXJNYW5hZ2VyLmN0b3JQYXJhbWV0ZXJzID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gW1xyXG4gICAgICAgIHsgdHlwZTogR29vZ2xlTWFwc0FQSVdyYXBwZXIgfVxyXG4gICAgXTsgfTtcclxuICAgIExheWVyTWFuYWdlciA9IHRzbGliXzEuX19kZWNvcmF0ZShbXHJcbiAgICAgICAgSW5qZWN0YWJsZSgpLFxyXG4gICAgICAgIHRzbGliXzEuX19tZXRhZGF0YShcImRlc2lnbjpwYXJhbXR5cGVzXCIsIFtHb29nbGVNYXBzQVBJV3JhcHBlcl0pXHJcbiAgICBdLCBMYXllck1hbmFnZXIpO1xyXG4gICAgcmV0dXJuIExheWVyTWFuYWdlcjtcclxufSgpKTtcclxuZXhwb3J0IHsgTGF5ZXJNYW5hZ2VyIH07XHIiXX0=