import * as tslib_1 from "tslib";
import { Injectable } from '@angular/core';
import { bindCallback, Observable, of, ReplaySubject, throwError } from 'rxjs';
import { map, multicast, switchMap } from 'rxjs/operators';
import { GeocoderStatus } from './google-maps-types';
import { MapsAPILoader } from './maps-api-loader/maps-api-loader';
import * as i0 from "@angular/core";
import * as i1 from "./maps-api-loader/maps-api-loader";
import * as ɵngcc0 from '@angular/core';
var AgmGeocoder = /** @class */ (function () {
    function AgmGeocoder(loader) {
        var _this = this;
        var connectableGeocoder$ = new Observable(function (subscriber) {
            loader.load().then(function () { return subscriber.next(); });
        })
            .pipe(map(function () { return _this._createGeocoder(); }), multicast(new ReplaySubject(1)));
        connectableGeocoder$.connect(); // ignore the subscription
        // since we will remain subscribed till application exits
        this.geocoder$ = connectableGeocoder$;
    }
    AgmGeocoder.prototype.geocode = function (request) {
        var _this = this;
        return this.geocoder$.pipe(switchMap(function (geocoder) { return _this._getGoogleResults(geocoder, request); }));
    };
    AgmGeocoder.prototype._getGoogleResults = function (geocoder, request) {
        var geocodeObservable = bindCallback(geocoder.geocode);
        return geocodeObservable(request).pipe(switchMap(function (_a) {
            var _b = tslib_1.__read(_a, 2), results = _b[0], status = _b[1];
            if (status === GeocoderStatus.OK) {
                return of(results);
            }
            return throwError(status);
        }));
    };
    AgmGeocoder.prototype._createGeocoder = function () {
        return new google.maps.Geocoder();
    };
    AgmGeocoder.ctorParameters = function () { return [
        { type: MapsAPILoader }
    ]; };
    AgmGeocoder.ngInjectableDef = i0.ɵɵdefineInjectable({ factory: function AgmGeocoder_Factory() { return new AgmGeocoder(i0.ɵɵinject(i1.MapsAPILoader)); }, token: AgmGeocoder, providedIn: "root" });
    AgmGeocoder = tslib_1.__decorate([
        tslib_1.__metadata("design:paramtypes", [MapsAPILoader])
    ], AgmGeocoder);
AgmGeocoder.ngInjectableDef = ɵngcc0.ɵɵdefineInjectable({ token: AgmGeocoder, factory: function AgmGeocoder_Factory(t) { return new (t || AgmGeocoder)(ɵngcc0.ɵɵinject(MapsAPILoader)); }, providedIn: 'root' });
/*@__PURE__*/ ɵngcc0.ɵsetClassMetadata(AgmGeocoder, [{
        type: Injectable,
        args: [{ providedIn: 'root' }]
    }], function () { return [{ type: MapsAPILoader }]; }, { geocoder$: [], geocode: [], _getGoogleResults: [], _createGeocoder: [] });
    return AgmGeocoder;
}());
export { AgmGeocoder };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInY6L2phZC1hZG1pbi1nby9tYXphdF9hZG1pbl9wYW5lbC9ub2RlX21vZHVsZXMvQGFnbS9jb3JlL2VzbTUvc2VydmljZXMvZ2VvY29kZXItc2VydmljZS5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7O0FBUUE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O3NDQWdDc0MsQUFDSzs7Ozs7Ozt1SUFFdkIiLCJmaWxlIjoiZ2VvY29kZXItc2VydmljZS5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIHRzbGliXzEgZnJvbSBcInRzbGliXCI7XHJcbmltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgYmluZENhbGxiYWNrLCBPYnNlcnZhYmxlLCBvZiwgUmVwbGF5U3ViamVjdCwgdGhyb3dFcnJvciB9IGZyb20gJ3J4anMnO1xyXG5pbXBvcnQgeyBtYXAsIG11bHRpY2FzdCwgc3dpdGNoTWFwIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xyXG5pbXBvcnQgeyBHZW9jb2RlclN0YXR1cyB9IGZyb20gJy4vZ29vZ2xlLW1hcHMtdHlwZXMnO1xyXG5pbXBvcnQgeyBNYXBzQVBJTG9hZGVyIH0gZnJvbSAnLi9tYXBzLWFwaS1sb2FkZXIvbWFwcy1hcGktbG9hZGVyJztcclxuaW1wb3J0ICogYXMgaTAgZnJvbSBcIkBhbmd1bGFyL2NvcmVcIjtcclxuaW1wb3J0ICogYXMgaTEgZnJvbSBcIi4vbWFwcy1hcGktbG9hZGVyL21hcHMtYXBpLWxvYWRlclwiO1xyXG52YXIgQWdtR2VvY29kZXIgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XHJcbiAgICBmdW5jdGlvbiBBZ21HZW9jb2Rlcihsb2FkZXIpIHtcclxuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgICAgIHZhciBjb25uZWN0YWJsZUdlb2NvZGVyJCA9IG5ldyBPYnNlcnZhYmxlKGZ1bmN0aW9uIChzdWJzY3JpYmVyKSB7XHJcbiAgICAgICAgICAgIGxvYWRlci5sb2FkKCkudGhlbihmdW5jdGlvbiAoKSB7IHJldHVybiBzdWJzY3JpYmVyLm5leHQoKTsgfSk7XHJcbiAgICAgICAgfSlcclxuICAgICAgICAgICAgLnBpcGUobWFwKGZ1bmN0aW9uICgpIHsgcmV0dXJuIF90aGlzLl9jcmVhdGVHZW9jb2RlcigpOyB9KSwgbXVsdGljYXN0KG5ldyBSZXBsYXlTdWJqZWN0KDEpKSk7XHJcbiAgICAgICAgY29ubmVjdGFibGVHZW9jb2RlciQuY29ubmVjdCgpOyAvLyBpZ25vcmUgdGhlIHN1YnNjcmlwdGlvblxyXG4gICAgICAgIC8vIHNpbmNlIHdlIHdpbGwgcmVtYWluIHN1YnNjcmliZWQgdGlsbCBhcHBsaWNhdGlvbiBleGl0c1xyXG4gICAgICAgIHRoaXMuZ2VvY29kZXIkID0gY29ubmVjdGFibGVHZW9jb2RlciQ7XHJcbiAgICB9XHJcbiAgICBBZ21HZW9jb2Rlci5wcm90b3R5cGUuZ2VvY29kZSA9IGZ1bmN0aW9uIChyZXF1ZXN0KSB7XHJcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgICAgICByZXR1cm4gdGhpcy5nZW9jb2RlciQucGlwZShzd2l0Y2hNYXAoZnVuY3Rpb24gKGdlb2NvZGVyKSB7IHJldHVybiBfdGhpcy5fZ2V0R29vZ2xlUmVzdWx0cyhnZW9jb2RlciwgcmVxdWVzdCk7IH0pKTtcclxuICAgIH07XHJcbiAgICBBZ21HZW9jb2Rlci5wcm90b3R5cGUuX2dldEdvb2dsZVJlc3VsdHMgPSBmdW5jdGlvbiAoZ2VvY29kZXIsIHJlcXVlc3QpIHtcclxuICAgICAgICB2YXIgZ2VvY29kZU9ic2VydmFibGUgPSBiaW5kQ2FsbGJhY2soZ2VvY29kZXIuZ2VvY29kZSk7XHJcbiAgICAgICAgcmV0dXJuIGdlb2NvZGVPYnNlcnZhYmxlKHJlcXVlc3QpLnBpcGUoc3dpdGNoTWFwKGZ1bmN0aW9uIChfYSkge1xyXG4gICAgICAgICAgICB2YXIgX2IgPSB0c2xpYl8xLl9fcmVhZChfYSwgMiksIHJlc3VsdHMgPSBfYlswXSwgc3RhdHVzID0gX2JbMV07XHJcbiAgICAgICAgICAgIGlmIChzdGF0dXMgPT09IEdlb2NvZGVyU3RhdHVzLk9LKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gb2YocmVzdWx0cyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIHRocm93RXJyb3Ioc3RhdHVzKTtcclxuICAgICAgICB9KSk7XHJcbiAgICB9O1xyXG4gICAgQWdtR2VvY29kZXIucHJvdG90eXBlLl9jcmVhdGVHZW9jb2RlciA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICByZXR1cm4gbmV3IGdvb2dsZS5tYXBzLkdlb2NvZGVyKCk7XHJcbiAgICB9O1xyXG4gICAgQWdtR2VvY29kZXIuY3RvclBhcmFtZXRlcnMgPSBmdW5jdGlvbiAoKSB7IHJldHVybiBbXHJcbiAgICAgICAgeyB0eXBlOiBNYXBzQVBJTG9hZGVyIH1cclxuICAgIF07IH07XHJcbiAgICBBZ21HZW9jb2Rlci5uZ0luamVjdGFibGVEZWYgPSBpMC7Jtcm1ZGVmaW5lSW5qZWN0YWJsZSh7IGZhY3Rvcnk6IGZ1bmN0aW9uIEFnbUdlb2NvZGVyX0ZhY3RvcnkoKSB7IHJldHVybiBuZXcgQWdtR2VvY29kZXIoaTAuybXJtWluamVjdChpMS5NYXBzQVBJTG9hZGVyKSk7IH0sIHRva2VuOiBBZ21HZW9jb2RlciwgcHJvdmlkZWRJbjogXCJyb290XCIgfSk7XHJcbiAgICBBZ21HZW9jb2RlciA9IHRzbGliXzEuX19kZWNvcmF0ZShbXHJcbiAgICAgICAgSW5qZWN0YWJsZSh7IHByb3ZpZGVkSW46ICdyb290JyB9KSxcclxuICAgICAgICB0c2xpYl8xLl9fbWV0YWRhdGEoXCJkZXNpZ246cGFyYW10eXBlc1wiLCBbTWFwc0FQSUxvYWRlcl0pXHJcbiAgICBdLCBBZ21HZW9jb2Rlcik7XHJcbiAgICByZXR1cm4gQWdtR2VvY29kZXI7XHJcbn0oKSk7XHJcbmV4cG9ydCB7IEFnbUdlb2NvZGVyIH07XHIiXX0=