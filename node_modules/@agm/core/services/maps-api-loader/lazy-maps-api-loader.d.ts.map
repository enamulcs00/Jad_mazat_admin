{"version":3,"file":"lazy-maps-api-loader.d.ts","sources":["v:/jad-admin-go/mazat_admin_panel/node_modules/@agm/core/services/maps-api-loader/lazy-maps-api-loader.d.ts"],"sourcesContent":["import { InjectionToken } from '@angular/core';\r\nimport { DocumentRef, WindowRef } from '../../utils/browser-globals';\r\nimport { MapsAPILoader } from './maps-api-loader';\r\nexport declare enum GoogleMapsScriptProtocol {\r\n    HTTP = 1,\r\n    HTTPS = 2,\r\n    AUTO = 3\r\n}\r\n/**\r\n * Token for the config of the LazyMapsAPILoader. Please provide an object of type {@link\r\n * LazyMapsAPILoaderConfig}.\r\n */\r\nexport declare const LAZY_MAPS_API_CONFIG: InjectionToken<LazyMapsAPILoaderConfigLiteral>;\r\n/**\r\n * Configuration for the {@link LazyMapsAPILoader}.\r\n */\r\nexport interface LazyMapsAPILoaderConfigLiteral {\r\n    /**\r\n     * The Google Maps API Key (see:\r\n     * https://developers.google.com/maps/documentation/javascript/get-api-key)\r\n     */\r\n    apiKey?: string;\r\n    /**\r\n     * The Google Maps client ID (for premium plans).\r\n     * When you have a Google Maps APIs Premium Plan license, you must authenticate\r\n     * your application with either an API key or a client ID.\r\n     * The Google Maps API will fail to load if both a client ID and an API key are included.\r\n     */\r\n    clientId?: string;\r\n    /**\r\n     * The Google Maps channel name (for premium plans).\r\n     * A channel parameter is an optional parameter that allows you to track usage under your client\r\n     * ID by assigning a distinct channel to each of your applications.\r\n     */\r\n    channel?: string;\r\n    /**\r\n     * Google Maps API version.\r\n     */\r\n    apiVersion?: string;\r\n    /**\r\n     * Host and Path used for the `<script>` tag.\r\n     */\r\n    hostAndPath?: string;\r\n    /**\r\n     * Protocol used for the `<script>` tag.\r\n     */\r\n    protocol?: GoogleMapsScriptProtocol;\r\n    /**\r\n     * Defines which Google Maps libraries should get loaded.\r\n     */\r\n    libraries?: string[];\r\n    /**\r\n     * The default bias for the map behavior is US.\r\n     * If you wish to alter your application to serve different map tiles or bias the\r\n     * application, you can overwrite the default behavior (US) by defining a `region`.\r\n     * See https://developers.google.com/maps/documentation/javascript/basics#Region\r\n     */\r\n    region?: string;\r\n    /**\r\n     * The Google Maps API uses the browser's preferred language when displaying\r\n     * textual information. If you wish to overwrite this behavior and force the API\r\n     * to use a given language, you can use this setting.\r\n     * See https://developers.google.com/maps/documentation/javascript/basics#Language\r\n     */\r\n    language?: string;\r\n}\r\nexport declare class LazyMapsAPILoader extends MapsAPILoader {\r\n    private localeId;\r\n    protected _scriptLoadingPromise: Promise<void>;\r\n    protected _config: LazyMapsAPILoaderConfigLiteral;\r\n    protected _windowRef: WindowRef;\r\n    protected _documentRef: DocumentRef;\r\n    protected readonly _SCRIPT_ID: string;\r\n    protected readonly callbackName: string;\r\n    constructor(config: any, w: WindowRef, d: DocumentRef, localeId: string);\r\n    load(): Promise<void>;\r\n    private _assignScriptLoadingPromise;\r\n    protected _getScriptSrc(callbackName: string): string;\r\n}\r\n"],"names":[],"mappings":"AAAA;;;;AAGA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2EA;"}