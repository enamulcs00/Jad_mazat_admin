{"version":3,"file":"google-maps-api-wrapper.d.ts","sources":["v:/jad-admin-go/mazat_admin_panel/node_modules/@agm/core/services/google-maps-api-wrapper.d.ts"],"sourcesContent":["import { NgZone } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport * as mapTypes from './google-maps-types';\r\nimport { Polyline, PolylineOptions } from './google-maps-types';\r\nimport { MapsAPILoader } from './maps-api-loader/maps-api-loader';\r\n/**\r\n * Wrapper class that handles the communication with the Google Maps Javascript\r\n * API v3\r\n */\r\nexport declare class GoogleMapsAPIWrapper {\r\n    private _loader;\r\n    private _zone;\r\n    private _map;\r\n    private _mapResolver;\r\n    constructor(_loader: MapsAPILoader, _zone: NgZone);\r\n    createMap(el: HTMLElement, mapOptions: mapTypes.MapOptions): Promise<void>;\r\n    setMapOptions(options: mapTypes.MapOptions): void;\r\n    /**\r\n     * Creates a google map marker with the map context\r\n     */\r\n    createMarker(options?: mapTypes.MarkerOptions, addToMap?: boolean): Promise<mapTypes.Marker>;\r\n    createInfoWindow(options?: mapTypes.InfoWindowOptions): Promise<mapTypes.InfoWindow>;\r\n    /**\r\n     * Creates a google.map.Circle for the current map.\r\n     */\r\n    createCircle(options: mapTypes.CircleOptions): Promise<mapTypes.Circle>;\r\n    /**\r\n     * Creates a google.map.Rectangle for the current map.\r\n     */\r\n    createRectangle(options: mapTypes.RectangleOptions): Promise<mapTypes.Rectangle>;\r\n    createPolyline(options: PolylineOptions): Promise<Polyline>;\r\n    createPolygon(options: mapTypes.PolygonOptions): Promise<mapTypes.Polygon>;\r\n    /**\r\n     * Creates a new google.map.Data layer for the current map\r\n     */\r\n    createDataLayer(options?: mapTypes.DataOptions): Promise<mapTypes.Data>;\r\n    /**\r\n     * Creates a TransitLayer instance for a map\r\n     * @param {TransitLayerOptions} options - used for setting layer options\r\n     * @returns {Promise<TransitLayer>} a new transit layer object\r\n     */\r\n    createTransitLayer(options: mapTypes.TransitLayerOptions): Promise<mapTypes.TransitLayer>;\r\n    /**\r\n     * Creates a BicyclingLayer instance for a map\r\n     * @param {BicyclingLayerOptions} options - used for setting layer options\r\n     * @returns {Promise<BicyclingLayer>} a new bicycling layer object\r\n     */\r\n    createBicyclingLayer(options: mapTypes.BicyclingLayerOptions): Promise<mapTypes.BicyclingLayer>;\r\n    /**\r\n     * Determines if given coordinates are insite a Polygon path.\r\n     */\r\n    containsLocation(latLng: mapTypes.LatLngLiteral, polygon: mapTypes.Polygon): Promise<boolean>;\r\n    subscribeToMapEvent<E>(eventName: string): Observable<E>;\r\n    clearInstanceListeners(): void;\r\n    setCenter(latLng: mapTypes.LatLngLiteral): Promise<void>;\r\n    getZoom(): Promise<number>;\r\n    getBounds(): Promise<mapTypes.LatLngBounds>;\r\n    getMapTypeId(): Promise<mapTypes.MapTypeId>;\r\n    setZoom(zoom: number): Promise<void>;\r\n    getCenter(): Promise<mapTypes.LatLng>;\r\n    panTo(latLng: mapTypes.LatLng | mapTypes.LatLngLiteral): Promise<void>;\r\n    panBy(x: number, y: number): Promise<void>;\r\n    fitBounds(latLng: mapTypes.LatLngBounds | mapTypes.LatLngBoundsLiteral, padding?: number | mapTypes.Padding): Promise<void>;\r\n    panToBounds(latLng: mapTypes.LatLngBounds | mapTypes.LatLngBoundsLiteral, padding?: number | mapTypes.Padding): Promise<void>;\r\n    /**\r\n     * Returns the native Google Maps Map instance. Be careful when using this instance directly.\r\n     */\r\n    getNativeMap(): Promise<mapTypes.GoogleMap>;\r\n    /**\r\n     * Triggers the given event name on the map instance.\r\n     */\r\n    triggerMapEvent(eventName: string): Promise<void>;\r\n}\r\n"],"names":[],"mappings":"AAAA;;;;;;;;;;AASA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA+DA;"}