{"version":3,"sources":["v:/jad-admin-go/mazat_admin_panel/node_modules/@agm/core/fesm2015/agm-core.js"],"names":[],"mappings":"AAAA;;;;;;;;;;;;AAMA;;;;;oBACC,CAAC,AAGgB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;snBAgNjB;;;;;mCAKkC,AAClB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;0MA8DhB;;;;2BAI0B,AACV;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oFA0ChB;;;;;;;;gCAQ+B,AAGzB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;kXAoFN;;;;;4BAK2B,AACX;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;cA2KhB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;sCAoHqC,AAG/B;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;6QAwFN;;;;;+BAK8B,AACd;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;cA2PhB;;;;;;;;;;;;;;;;;4CAiB2C,AAGrC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;0RA+CN;;;;+BAI8B,AACd;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;+HAuEhB;;;;;;;;;2BAS0B,AAGpB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8bA+FN;;;;;4BAK2B,AACX;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8UAyEhB;;;;;;gCAM+B,AACf;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;cAuGhB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8CAkC6C,AAOvC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;+NAiDN;;;;;8BAK6B,AACb;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;uIAoGhB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;0CAyCyC,AAGnC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;uTAuKN;;;;;6BAK4B,AACZ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;6VAsIhB;;;;;kDAKiD,AACjC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;yTAoFhB;;;;;+BAK8B,AACdcAoahB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;gCAmN+B,AAoCzB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;cA8ON;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;sCA4FqC,AAW/B;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;cA+MN;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;wCAyGuC,AAGjC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;cA4BN;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;sDAoDqD,AAGlC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;cA2BnB;;;;;;;;;;;;;oDAamD,AAM7C;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;cAiMN;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;0CAoGyC,AAGnC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;cA6KN;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4CA2H2C,AAGrC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oFA0CN;;;;;;;;8BAQ6B,AAGvB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;wJAuGN;;;;;0BAKyB,AACa;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;mOAkHtC;;;;;;;gCAO+B,AACf;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;6IA6DhB,CAAC,AAGgB","file":"agm-core.js","sourcesContent":["import { __decorate, __metadata, __param, __awaiter } from 'tslib';\r\nimport { Injectable, NgZone, Input, Directive, EventEmitter, Output, Self, ElementRef, Component, Inject, PLATFORM_ID, QueryList, ContentChildren, forwardRef, ɵɵdefineInjectable, ɵɵinject, InjectionToken, Optional, LOCALE_ID, NgModule } from '@angular/core';\r\nimport { Observable, BehaviorSubject, from, timer, Subject, fromEventPattern, merge, ReplaySubject, bindCallback, of, throwError } from 'rxjs';\r\nimport { flatMap, sample, switchMap, map, shareReplay, distinctUntilChanged, takeUntil, startWith, skip, multicast } from 'rxjs/operators';\r\nimport { isPlatformServer } from '@angular/common';\r\n\r\nlet MapsAPILoader = class MapsAPILoader {\r\n};\r\nMapsAPILoader = __decorate([\r\n    Injectable()\r\n], MapsAPILoader);\r\n\r\n/**\r\n * Wrapper class that handles the communication with the Google Maps Javascript\r\n * API v3\r\n */\r\nlet GoogleMapsAPIWrapper = class GoogleMapsAPIWrapper {\r\n    constructor(_loader, _zone) {\r\n        this._loader = _loader;\r\n        this._zone = _zone;\r\n        this._map =\r\n            new Promise((resolve) => { this._mapResolver = resolve; });\r\n    }\r\n    createMap(el, mapOptions) {\r\n        return this._zone.runOutsideAngular(() => {\r\n            return this._loader.load().then(() => {\r\n                const map = new google.maps.Map(el, mapOptions);\r\n                this._mapResolver(map);\r\n                return;\r\n            });\r\n        });\r\n    }\r\n    setMapOptions(options) {\r\n        return this._zone.runOutsideAngular(() => {\r\n            this._map.then((m) => { m.setOptions(options); });\r\n        });\r\n    }\r\n    /**\r\n     * Creates a google map marker with the map context\r\n     */\r\n    createMarker(options = {}, addToMap = true) {\r\n        return this._zone.runOutsideAngular(() => {\r\n            return this._map.then((map) => {\r\n                if (addToMap) {\r\n                    options.map = map;\r\n                }\r\n                return new google.maps.Marker(options);\r\n            });\r\n        });\r\n    }\r\n    createInfoWindow(options) {\r\n        return this._zone.runOutsideAngular(() => {\r\n            return this._map.then(() => { return new google.maps.InfoWindow(options); });\r\n        });\r\n    }\r\n    /**\r\n     * Creates a google.map.Circle for the current map.\r\n     */\r\n    createCircle(options) {\r\n        return this._zone.runOutsideAngular(() => {\r\n            return this._map.then((map) => {\r\n                if (typeof options.strokePosition === 'string') {\r\n                    options.strokePosition = google.maps.StrokePosition[options.strokePosition];\r\n                }\r\n                options.map = map;\r\n                return new google.maps.Circle(options);\r\n            });\r\n        });\r\n    }\r\n    /**\r\n     * Creates a google.map.Rectangle for the current map.\r\n     */\r\n    createRectangle(options) {\r\n        return this._zone.runOutsideAngular(() => {\r\n            return this._map.then((map) => {\r\n                options.map = map;\r\n                return new google.maps.Rectangle(options);\r\n            });\r\n        });\r\n    }\r\n    createPolyline(options) {\r\n        return this._zone.runOutsideAngular(() => {\r\n            return this.getNativeMap().then((map) => {\r\n                let line = new google.maps.Polyline(options);\r\n                line.setMap(map);\r\n                return line;\r\n            });\r\n        });\r\n    }\r\n    createPolygon(options) {\r\n        return this._zone.runOutsideAngular(() => {\r\n            return this.getNativeMap().then((map) => {\r\n                let polygon = new google.maps.Polygon(options);\r\n                polygon.setMap(map);\r\n                return polygon;\r\n            });\r\n        });\r\n    }\r\n    /**\r\n     * Creates a new google.map.Data layer for the current map\r\n     */\r\n    createDataLayer(options) {\r\n        return this._zone.runOutsideAngular(() => {\r\n            return this._map.then(m => {\r\n                let data = new google.maps.Data(options);\r\n                data.setMap(m);\r\n                return data;\r\n            });\r\n        });\r\n    }\r\n    /**\r\n     * Creates a TransitLayer instance for a map\r\n     * @param {TransitLayerOptions} options - used for setting layer options\r\n     * @returns {Promise<TransitLayer>} a new transit layer object\r\n     */\r\n    createTransitLayer(options) {\r\n        return this._zone.runOutsideAngular(() => {\r\n            return this._map.then((map) => {\r\n                let newLayer = new google.maps.TransitLayer();\r\n                newLayer.setMap(options.visible ? map : null);\r\n                return newLayer;\r\n            });\r\n        });\r\n    }\r\n    /**\r\n     * Creates a BicyclingLayer instance for a map\r\n     * @param {BicyclingLayerOptions} options - used for setting layer options\r\n     * @returns {Promise<BicyclingLayer>} a new bicycling layer object\r\n     */\r\n    createBicyclingLayer(options) {\r\n        return this._zone.runOutsideAngular(() => {\r\n            return this._map.then((map) => {\r\n                let newLayer = new google.maps.BicyclingLayer();\r\n                newLayer.setMap(options.visible ? map : null);\r\n                return newLayer;\r\n            });\r\n        });\r\n    }\r\n    /**\r\n     * Determines if given coordinates are insite a Polygon path.\r\n     */\r\n    containsLocation(latLng, polygon) {\r\n        return google.maps.geometry.poly.containsLocation(latLng, polygon);\r\n    }\r\n    subscribeToMapEvent(eventName) {\r\n        return new Observable((observer) => {\r\n            this._map.then((m) => {\r\n                m.addListener(eventName, (arg) => { this._zone.run(() => observer.next(arg)); });\r\n            });\r\n        });\r\n    }\r\n    clearInstanceListeners() {\r\n        return this._zone.runOutsideAngular(() => {\r\n            this._map.then((map) => {\r\n                google.maps.event.clearInstanceListeners(map);\r\n            });\r\n        });\r\n    }\r\n    setCenter(latLng) {\r\n        return this._zone.runOutsideAngular(() => {\r\n            return this._map.then((map) => map.setCenter(latLng));\r\n        });\r\n    }\r\n    getZoom() {\r\n        return this._zone.runOutsideAngular(() => {\r\n            return this._map.then((map) => map.getZoom());\r\n        });\r\n    }\r\n    getBounds() {\r\n        return this._zone.runOutsideAngular(() => {\r\n            return this._map.then((map) => map.getBounds());\r\n        });\r\n    }\r\n    getMapTypeId() {\r\n        return this._zone.runOutsideAngular(() => {\r\n            return this._map.then((map) => map.getMapTypeId());\r\n        });\r\n    }\r\n    setZoom(zoom) {\r\n        return this._zone.runOutsideAngular(() => {\r\n            return this._map.then((map) => map.setZoom(zoom));\r\n        });\r\n    }\r\n    getCenter() {\r\n        return this._zone.runOutsideAngular(() => {\r\n            return this._map.then((map) => map.getCenter());\r\n        });\r\n    }\r\n    panTo(latLng) {\r\n        return this._zone.runOutsideAngular(() => {\r\n            return this._map.then((map) => map.panTo(latLng));\r\n        });\r\n    }\r\n    panBy(x, y) {\r\n        return this._zone.runOutsideAngular(() => {\r\n            return this._map.then((map) => map.panBy(x, y));\r\n        });\r\n    }\r\n    fitBounds(latLng, padding) {\r\n        return this._zone.runOutsideAngular(() => {\r\n            return this._map.then((map) => map.fitBounds(latLng, padding));\r\n        });\r\n    }\r\n    panToBounds(latLng, padding) {\r\n        return this._zone.runOutsideAngular(() => {\r\n            return this._map.then((map) => map.panToBounds(latLng, padding));\r\n        });\r\n    }\r\n    /**\r\n     * Returns the native Google Maps Map instance. Be careful when using this instance directly.\r\n     */\r\n    getNativeMap() { return this._map; }\r\n    /**\r\n     * Triggers the given event name on the map instance.\r\n     */\r\n    triggerMapEvent(eventName) {\r\n        return this._map.then((m) => google.maps.event.trigger(m, eventName));\r\n    }\r\n};\r\nGoogleMapsAPIWrapper.ctorParameters = () => [\r\n    { type: MapsAPILoader },\r\n    { type: NgZone }\r\n];\r\nGoogleMapsAPIWrapper = __decorate([\r\n    Injectable(),\r\n    __metadata(\"design:paramtypes\", [MapsAPILoader, NgZone])\r\n], GoogleMapsAPIWrapper);\r\n\r\n/**\r\n * This class manages Transit and Bicycling Layers for a Google Map instance.\r\n */\r\nlet LayerManager = class LayerManager {\r\n    constructor(_wrapper) {\r\n        this._wrapper = _wrapper;\r\n        this._layers = new Map();\r\n    }\r\n    /**\r\n     * Adds a transit layer to a map instance.\r\n     * @param {AgmTransitLayer} layer - a TransitLayer object\r\n     * @param {TransitLayerOptions} options - TransitLayerOptions options\r\n     * @returns void\r\n     */\r\n    addTransitLayer(layer, options) {\r\n        const newLayer = this._wrapper.createTransitLayer(options);\r\n        this._layers.set(layer, newLayer);\r\n    }\r\n    /**\r\n     * Adds a bicycling layer to a map instance.\r\n     * @param {AgmBicyclingLayer} layer - a bicycling layer object\r\n     * @param {BicyclingLayerOptions} options - BicyclingLayer options\r\n     * @returns void\r\n     */\r\n    addBicyclingLayer(layer, options) {\r\n        const newLayer = this._wrapper.createBicyclingLayer(options);\r\n        this._layers.set(layer, newLayer);\r\n    }\r\n    /**\r\n     * Deletes a map layer\r\n     * @param {AgmTransitLayer|AgmBicyclingLayer} layer - the layer to delete\r\n     * @returns  Promise<void>\r\n     */\r\n    deleteLayer(layer) {\r\n        return this._layers.get(layer).then(currentLayer => {\r\n            currentLayer.setMap(null);\r\n            this._layers.delete(layer);\r\n        });\r\n    }\r\n    /**\r\n     * Hide/Show a google map layer\r\n     * @param { AgmTransitLayer|AgmBicyclingLayer} layer - the layer to hide/show\r\n     * @param {TransitLayerOptions|BicyclingLayerOptions} options - used to set visibility of the layer\r\n     * @returns Promise<void>\r\n     */\r\n    toggleLayerVisibility(layer, options) {\r\n        return this._layers.get(layer).then(currentLayer => {\r\n            if (!options.visible) {\r\n                currentLayer.setMap(null);\r\n                return;\r\n            }\r\n            else {\r\n                return this._wrapper.getNativeMap().then((map) => {\r\n                    currentLayer.setMap(map);\r\n                });\r\n            }\r\n        });\r\n    }\r\n};\r\nLayerManager.ctorParameters = () => [\r\n    { type: GoogleMapsAPIWrapper }\r\n];\r\nLayerManager = __decorate([\r\n    Injectable(),\r\n    __metadata(\"design:paramtypes\", [GoogleMapsAPIWrapper])\r\n], LayerManager);\r\n\r\nlet layerId = 0;\r\n/*\r\n * This directive adds a bicycling layer to a google map instance\r\n * <agm-bicycling-layer [visible]=\"true|false\"> <agm-bicycling-layer>\r\n * */\r\nlet AgmBicyclingLayer = class AgmBicyclingLayer {\r\n    constructor(_manager) {\r\n        this._manager = _manager;\r\n        this._addedToManager = false;\r\n        this._id = (layerId++).toString();\r\n        /**\r\n         * Hide/show bicycling layer\r\n         */\r\n        this.visible = true;\r\n    }\r\n    ngOnInit() {\r\n        if (this._addedToManager) {\r\n            return;\r\n        }\r\n        this._manager.addBicyclingLayer(this, { visible: this.visible });\r\n        this._addedToManager = true;\r\n    }\r\n    ngOnChanges(changes) {\r\n        if (!this._addedToManager) {\r\n            return;\r\n        }\r\n        if (changes['visible'] != null) {\r\n            this._manager.toggleLayerVisibility(this, { visible: changes['visible'].currentValue });\r\n        }\r\n    }\r\n    /** @internal */\r\n    id() { return this._id; }\r\n    /** @internal */\r\n    toString() { return `AgmBicyclingLayer-${this._id.toString()}`; }\r\n    /** @internal */\r\n    ngOnDestroy() {\r\n        this._manager.deleteLayer(this);\r\n    }\r\n};\r\nAgmBicyclingLayer.ctorParameters = () => [\r\n    { type: LayerManager }\r\n];\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Object)\r\n], AgmBicyclingLayer.prototype, \"visible\", void 0);\r\nAgmBicyclingLayer = __decorate([\r\n    Directive({\r\n        selector: 'agm-bicycling-layer',\r\n    }),\r\n    __metadata(\"design:paramtypes\", [LayerManager])\r\n], AgmBicyclingLayer);\r\n\r\nlet CircleManager = class CircleManager {\r\n    constructor(_apiWrapper, _zone) {\r\n        this._apiWrapper = _apiWrapper;\r\n        this._zone = _zone;\r\n        this._circles = new Map();\r\n    }\r\n    addCircle(circle) {\r\n        this._circles.set(circle, this._apiWrapper.createCircle({\r\n            center: { lat: circle.latitude, lng: circle.longitude },\r\n            clickable: circle.clickable,\r\n            draggable: circle.draggable,\r\n            editable: circle.editable,\r\n            fillColor: circle.fillColor,\r\n            fillOpacity: circle.fillOpacity,\r\n            radius: circle.radius,\r\n            strokeColor: circle.strokeColor,\r\n            strokeOpacity: circle.strokeOpacity,\r\n            strokePosition: circle.strokePosition,\r\n            strokeWeight: circle.strokeWeight,\r\n            visible: circle.visible,\r\n            zIndex: circle.zIndex,\r\n        }));\r\n    }\r\n    /**\r\n     * Removes the given circle from the map.\r\n     */\r\n    removeCircle(circle) {\r\n        return this._circles.get(circle).then((c) => {\r\n            c.setMap(null);\r\n            this._circles.delete(circle);\r\n        });\r\n    }\r\n    setOptions(circle, options) {\r\n        return this._circles.get(circle).then((c) => {\r\n            if (typeof options.strokePosition === 'string') {\r\n                options.strokePosition = google.maps.StrokePosition[options.strokePosition];\r\n            }\r\n            c.setOptions(options);\r\n        });\r\n    }\r\n    getBounds(circle) {\r\n        return this._circles.get(circle).then((c) => c.getBounds());\r\n    }\r\n    getCenter(circle) {\r\n        return this._circles.get(circle).then((c) => c.getCenter());\r\n    }\r\n    getRadius(circle) {\r\n        return this._circles.get(circle).then((c) => c.getRadius());\r\n    }\r\n    setCenter(circle) {\r\n        return this._circles.get(circle).then((c) => { return c.setCenter({ lat: circle.latitude, lng: circle.longitude }); });\r\n    }\r\n    setEditable(circle) {\r\n        return this._circles.get(circle).then((c) => { return c.setEditable(circle.editable); });\r\n    }\r\n    setDraggable(circle) {\r\n        return this._circles.get(circle).then((c) => { return c.setDraggable(circle.draggable); });\r\n    }\r\n    setVisible(circle) {\r\n        return this._circles.get(circle).then((c) => { return c.setVisible(circle.visible); });\r\n    }\r\n    setRadius(circle) {\r\n        return this._circles.get(circle).then((c) => { return c.setRadius(circle.radius); });\r\n    }\r\n    getNativeCircle(circle) {\r\n        return this._circles.get(circle);\r\n    }\r\n    createEventObservable(eventName, circle) {\r\n        return new Observable((observer) => {\r\n            let listener = null;\r\n            this._circles.get(circle).then((c) => {\r\n                listener = c.addListener(eventName, (e) => this._zone.run(() => observer.next(e)));\r\n            });\r\n            return () => {\r\n                if (listener !== null) {\r\n                    listener.remove();\r\n                }\r\n            };\r\n        });\r\n    }\r\n};\r\nCircleManager.ctorParameters = () => [\r\n    { type: GoogleMapsAPIWrapper },\r\n    { type: NgZone }\r\n];\r\nCircleManager = __decorate([\r\n    Injectable(),\r\n    __metadata(\"design:paramtypes\", [GoogleMapsAPIWrapper, NgZone])\r\n], CircleManager);\r\n\r\nvar AgmCircle_1;\r\nlet AgmCircle = AgmCircle_1 = class AgmCircle {\r\n    constructor(_manager) {\r\n        this._manager = _manager;\r\n        /**\r\n         * Indicates whether this Circle handles mouse events. Defaults to true.\r\n         */\r\n        this.clickable = true;\r\n        /**\r\n         * If set to true, the user can drag this circle over the map. Defaults to false.\r\n         */\r\n        // tslint:disable-next-line:no-input-rename\r\n        this.draggable = false;\r\n        /**\r\n         * If set to true, the user can edit this circle by dragging the control points shown at\r\n         * the center and around the circumference of the circle. Defaults to false.\r\n         */\r\n        this.editable = false;\r\n        /**\r\n         * The radius in meters on the Earth's surface.\r\n         */\r\n        this.radius = 0;\r\n        /**\r\n         * The stroke position. Defaults to CENTER.\r\n         * This property is not supported on Internet Explorer 8 and earlier.\r\n         */\r\n        this.strokePosition = 'CENTER';\r\n        /**\r\n         * The stroke width in pixels.\r\n         */\r\n        this.strokeWeight = 0;\r\n        /**\r\n         * Whether this circle is visible on the map. Defaults to true.\r\n         */\r\n        this.visible = true;\r\n        /**\r\n         * This event is fired when the circle's center is changed.\r\n         */\r\n        this.centerChange = new EventEmitter();\r\n        /**\r\n         * This event emitter gets emitted when the user clicks on the circle.\r\n         */\r\n        this.circleClick = new EventEmitter();\r\n        /**\r\n         * This event emitter gets emitted when the user clicks on the circle.\r\n         */\r\n        this.circleDblClick = new EventEmitter();\r\n        /**\r\n         * This event is repeatedly fired while the user drags the circle.\r\n         */\r\n        this.drag = new EventEmitter();\r\n        /**\r\n         * This event is fired when the user stops dragging the circle.\r\n         */\r\n        this.dragEnd = new EventEmitter();\r\n        /**\r\n         * This event is fired when the user starts dragging the circle.\r\n         */\r\n        this.dragStart = new EventEmitter();\r\n        /**\r\n         * This event is fired when the DOM mousedown event is fired on the circle.\r\n         */\r\n        this.mouseDown = new EventEmitter();\r\n        /**\r\n         * This event is fired when the DOM mousemove event is fired on the circle.\r\n         */\r\n        this.mouseMove = new EventEmitter();\r\n        /**\r\n         * This event is fired on circle mouseout.\r\n         */\r\n        this.mouseOut = new EventEmitter();\r\n        /**\r\n         * This event is fired on circle mouseover.\r\n         */\r\n        this.mouseOver = new EventEmitter();\r\n        /**\r\n         * This event is fired when the DOM mouseup event is fired on the circle.\r\n         */\r\n        this.mouseUp = new EventEmitter();\r\n        /**\r\n         * This event is fired when the circle's radius is changed.\r\n         */\r\n        this.radiusChange = new EventEmitter();\r\n        /**\r\n         * This event is fired when the circle is right-clicked on.\r\n         */\r\n        this.rightClick = new EventEmitter();\r\n        this._circleAddedToManager = false;\r\n        this._eventSubscriptions = [];\r\n    }\r\n    /** @internal */\r\n    ngOnInit() {\r\n        this._manager.addCircle(this);\r\n        this._circleAddedToManager = true;\r\n        this._registerEventListeners();\r\n    }\r\n    /** @internal */\r\n    ngOnChanges(changes) {\r\n        if (!this._circleAddedToManager) {\r\n            return;\r\n        }\r\n        if (changes['latitude'] || changes['longitude']) {\r\n            this._manager.setCenter(this);\r\n        }\r\n        if (changes['editable']) {\r\n            this._manager.setEditable(this);\r\n        }\r\n        if (changes['draggable']) {\r\n            this._manager.setDraggable(this);\r\n        }\r\n        if (changes['visible']) {\r\n            this._manager.setVisible(this);\r\n        }\r\n        if (changes['radius']) {\r\n            this._manager.setRadius(this);\r\n        }\r\n        this._updateCircleOptionsChanges(changes);\r\n    }\r\n    _updateCircleOptionsChanges(changes) {\r\n        let options = {};\r\n        let optionKeys = Object.keys(changes).filter(k => AgmCircle_1._mapOptions.indexOf(k) !== -1);\r\n        optionKeys.forEach((k) => { options[k] = changes[k].currentValue; });\r\n        if (optionKeys.length > 0) {\r\n            this._manager.setOptions(this, options);\r\n        }\r\n    }\r\n    _registerEventListeners() {\r\n        let events = new Map();\r\n        events.set('center_changed', this.centerChange);\r\n        events.set('click', this.circleClick);\r\n        events.set('dblclick', this.circleDblClick);\r\n        events.set('drag', this.drag);\r\n        events.set('dragend', this.dragEnd);\r\n        events.set('dragstart', this.dragStart);\r\n        events.set('mousedown', this.mouseDown);\r\n        events.set('mousemove', this.mouseMove);\r\n        events.set('mouseout', this.mouseOut);\r\n        events.set('mouseover', this.mouseOver);\r\n        events.set('mouseup', this.mouseUp);\r\n        events.set('radius_changed', this.radiusChange);\r\n        events.set('rightclick', this.rightClick);\r\n        events.forEach((eventEmitter, eventName) => {\r\n            this._eventSubscriptions.push(this._manager.createEventObservable(eventName, this).subscribe((value) => {\r\n                switch (eventName) {\r\n                    case 'radius_changed':\r\n                        this._manager.getRadius(this).then((radius) => eventEmitter.emit(radius));\r\n                        break;\r\n                    case 'center_changed':\r\n                        this._manager.getCenter(this).then((center) => eventEmitter.emit({ lat: center.lat(), lng: center.lng() }));\r\n                        break;\r\n                    default:\r\n                        eventEmitter.emit({ coords: { lat: value.latLng.lat(), lng: value.latLng.lng() } });\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /** @internal */\r\n    ngOnDestroy() {\r\n        this._eventSubscriptions.forEach(function (s) { s.unsubscribe(); });\r\n        this._eventSubscriptions = null;\r\n        this._manager.removeCircle(this);\r\n    }\r\n    /**\r\n     * Gets the LatLngBounds of this Circle.\r\n     */\r\n    getBounds() { return this._manager.getBounds(this); }\r\n    getCenter() { return this._manager.getCenter(this); }\r\n};\r\nAgmCircle._mapOptions = [\r\n    'fillColor', 'fillOpacity', 'strokeColor', 'strokeOpacity', 'strokePosition', 'strokeWeight',\r\n    'visible', 'zIndex', 'clickable',\r\n];\r\nAgmCircle.ctorParameters = () => [\r\n    { type: CircleManager }\r\n];\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Number)\r\n], AgmCircle.prototype, \"latitude\", void 0);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Number)\r\n], AgmCircle.prototype, \"longitude\", void 0);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Object)\r\n], AgmCircle.prototype, \"clickable\", void 0);\r\n__decorate([\r\n    Input('circleDraggable'),\r\n    __metadata(\"design:type\", Object)\r\n], AgmCircle.prototype, \"draggable\", void 0);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Object)\r\n], AgmCircle.prototype, \"editable\", void 0);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", String)\r\n], AgmCircle.prototype, \"fillColor\", void 0);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Number)\r\n], AgmCircle.prototype, \"fillOpacity\", void 0);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Object)\r\n], AgmCircle.prototype, \"radius\", void 0);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", String)\r\n], AgmCircle.prototype, \"strokeColor\", void 0);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Number)\r\n], AgmCircle.prototype, \"strokeOpacity\", void 0);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", String)\r\n], AgmCircle.prototype, \"strokePosition\", void 0);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Object)\r\n], AgmCircle.prototype, \"strokeWeight\", void 0);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Object)\r\n], AgmCircle.prototype, \"visible\", void 0);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Number)\r\n], AgmCircle.prototype, \"zIndex\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], AgmCircle.prototype, \"centerChange\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], AgmCircle.prototype, \"circleClick\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], AgmCircle.prototype, \"circleDblClick\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], AgmCircle.prototype, \"drag\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], AgmCircle.prototype, \"dragEnd\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], AgmCircle.prototype, \"dragStart\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], AgmCircle.prototype, \"mouseDown\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], AgmCircle.prototype, \"mouseMove\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], AgmCircle.prototype, \"mouseOut\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], AgmCircle.prototype, \"mouseOver\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], AgmCircle.prototype, \"mouseUp\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], AgmCircle.prototype, \"radiusChange\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], AgmCircle.prototype, \"rightClick\", void 0);\r\nAgmCircle = AgmCircle_1 = __decorate([\r\n    Directive({\r\n        selector: 'agm-circle',\r\n    }),\r\n    __metadata(\"design:paramtypes\", [CircleManager])\r\n], AgmCircle);\r\n\r\n/**\r\n * Manages all Data Layers for a Google Map instance.\r\n */\r\nlet DataLayerManager = class DataLayerManager {\r\n    constructor(_wrapper, _zone) {\r\n        this._wrapper = _wrapper;\r\n        this._zone = _zone;\r\n        this._layers = new Map();\r\n    }\r\n    /**\r\n     * Adds a new Data Layer to the map.\r\n     */\r\n    addDataLayer(layer) {\r\n        const newLayer = this._wrapper.createDataLayer({\r\n            style: layer.style,\r\n        })\r\n            .then(d => {\r\n            if (layer.geoJson) {\r\n                this.getDataFeatures(d, layer.geoJson).then(features => d.features = features);\r\n            }\r\n            return d;\r\n        });\r\n        this._layers.set(layer, newLayer);\r\n    }\r\n    deleteDataLayer(layer) {\r\n        this._layers.get(layer).then(l => {\r\n            l.setMap(null);\r\n            this._layers.delete(layer);\r\n        });\r\n    }\r\n    updateGeoJson(layer, geoJson) {\r\n        this._layers.get(layer).then(l => {\r\n            l.forEach(function (feature) {\r\n                l.remove(feature);\r\n                var index = l.features.indexOf(feature, 0);\r\n                if (index > -1) {\r\n                    l.features.splice(index, 1);\r\n                }\r\n            });\r\n            this.getDataFeatures(l, geoJson).then(features => l.features = features);\r\n        });\r\n    }\r\n    setDataOptions(layer, options) {\r\n        this._layers.get(layer).then(l => {\r\n            l.setControlPosition(options.controlPosition);\r\n            l.setControls(options.controls);\r\n            l.setDrawingMode(options.drawingMode);\r\n            l.setStyle(options.style);\r\n        });\r\n    }\r\n    /**\r\n     * Creates a Google Maps event listener for the given DataLayer as an Observable\r\n     */\r\n    createEventObservable(eventName, layer) {\r\n        return new Observable((observer) => {\r\n            this._layers.get(layer).then((d) => {\r\n                d.addListener(eventName, (e) => this._zone.run(() => observer.next(e)));\r\n            });\r\n        });\r\n    }\r\n    /**\r\n     * Extract features from a geoJson using google.maps Data Class\r\n     * @param d : google.maps.Data class instance\r\n     * @param geoJson : url or geojson object\r\n     */\r\n    getDataFeatures(d, geoJson) {\r\n        return new Promise((resolve, reject) => {\r\n            if (typeof geoJson === 'object') {\r\n                try {\r\n                    const features = d.addGeoJson(geoJson);\r\n                    resolve(features);\r\n                }\r\n                catch (e) {\r\n                    reject(e);\r\n                }\r\n            }\r\n            else if (typeof geoJson === 'string') {\r\n                d.loadGeoJson(geoJson, null, resolve);\r\n            }\r\n            else {\r\n                reject(`Impossible to extract features from geoJson: wrong argument type`);\r\n            }\r\n        });\r\n    }\r\n};\r\nDataLayerManager.ctorParameters = () => [\r\n    { type: GoogleMapsAPIWrapper },\r\n    { type: NgZone }\r\n];\r\nDataLayerManager = __decorate([\r\n    Injectable(),\r\n    __metadata(\"design:paramtypes\", [GoogleMapsAPIWrapper, NgZone])\r\n], DataLayerManager);\r\n\r\nvar AgmDataLayer_1;\r\nlet layerId$1 = 0;\r\n/**\r\n * AgmDataLayer enables the user to add data layers to the map.\r\n *\r\n * ### Example\r\n * ```typescript\r\n * import { Component } from 'angular2/core';\r\n * import { AgmMap, AgmDataLayer } from\r\n * 'angular-google-maps/core';\r\n *\r\n * @Component({\r\n *  selector: 'my-map-cmp',\r\n *  directives: [AgmMap, AgmDataLayer],\r\n *  styles: [`\r\n *    .agm-container {\r\n *      height: 300px;\r\n *    }\r\n * `],\r\n *  template: `\r\n * <agm-map [latitude]=\"lat\" [longitude]=\"lng\" [zoom]=\"zoom\">\r\n * \t  <agm-data-layer [geoJson]=\"geoJsonObject\" (layerClick)=\"clicked($event)\" [style]=\"styleFunc\">\r\n * \t  </agm-data-layer>\r\n * </agm-map>\r\n *  `\r\n * })\r\n * export class MyMapCmp {\r\n *   lat: number = -25.274449;\r\n *   lng: number = 133.775060;\r\n *   zoom: number = 5;\r\n *\r\n * clicked(clickEvent) {\r\n *    console.log(clickEvent);\r\n *  }\r\n *\r\n *  styleFunc(feature) {\r\n *    return ({\r\n *      clickable: false,\r\n *      fillColor: feature.getProperty('color'),\r\n *      strokeWeight: 1\r\n *    });\r\n *  }\r\n *\r\n *  geoJsonObject: Object = {\r\n *    \"type\": \"FeatureCollection\",\r\n *    \"features\": [\r\n *      {\r\n *        \"type\": \"Feature\",\r\n *        \"properties\": {\r\n *          \"letter\": \"G\",\r\n *          \"color\": \"blue\",\r\n *          \"rank\": \"7\",\r\n *          \"ascii\": \"71\"\r\n *        },\r\n *        \"geometry\": {\r\n *          \"type\": \"Polygon\",\r\n *          \"coordinates\": [\r\n *            [\r\n *              [123.61, -22.14], [122.38, -21.73], [121.06, -21.69], [119.66, -22.22], [119.00, -23.40],\r\n *              [118.65, -24.76], [118.43, -26.07], [118.78, -27.56], [119.22, -28.57], [120.23, -29.49],\r\n *              [121.77, -29.87], [123.57, -29.64], [124.45, -29.03], [124.71, -27.95], [124.80, -26.70],\r\n *              [124.80, -25.60], [123.61, -25.64], [122.56, -25.64], [121.72, -25.72], [121.81, -26.62],\r\n *              [121.86, -26.98], [122.60, -26.90], [123.57, -27.05], [123.57, -27.68], [123.35, -28.18],\r\n *              [122.51, -28.38], [121.77, -28.26], [121.02, -27.91], [120.49, -27.21], [120.14, -26.50],\r\n *              [120.10, -25.64], [120.27, -24.52], [120.67, -23.68], [121.72, -23.32], [122.43, -23.48],\r\n *              [123.04, -24.04], [124.54, -24.28], [124.58, -23.20], [123.61, -22.14]\r\n *            ]\r\n *          ]\r\n *        }\r\n *      },\r\n *      {\r\n *        \"type\": \"Feature\",\r\n *        \"properties\": {\r\n *          \"letter\": \"o\",\r\n *          \"color\": \"red\",\r\n *          \"rank\": \"15\",\r\n *          \"ascii\": \"111\"\r\n *        },\r\n *        \"geometry\": {\r\n *          \"type\": \"Polygon\",\r\n *          \"coordinates\": [\r\n *            [\r\n *              [128.84, -25.76], [128.18, -25.60], [127.96, -25.52], [127.88, -25.52], [127.70, -25.60],\r\n *              [127.26, -25.79], [126.60, -26.11], [126.16, -26.78], [126.12, -27.68], [126.21, -28.42],\r\n *              [126.69, -29.49], [127.74, -29.80], [128.80, -29.72], [129.41, -29.03], [129.72, -27.95],\r\n *              [129.68, -27.21], [129.33, -26.23], [128.84, -25.76]\r\n *            ],\r\n *            [\r\n *              [128.45, -27.44], [128.32, -26.94], [127.70, -26.82], [127.35, -27.05], [127.17, -27.80],\r\n *              [127.57, -28.22], [128.10, -28.42], [128.49, -27.80], [128.45, -27.44]\r\n *            ]\r\n *          ]\r\n *        }\r\n *      },\r\n *      {\r\n *        \"type\": \"Feature\",\r\n *        \"properties\": {\r\n *          \"letter\": \"o\",\r\n *          \"color\": \"yellow\",\r\n *          \"rank\": \"15\",\r\n *          \"ascii\": \"111\"\r\n *        },\r\n *        \"geometry\": {\r\n *          \"type\": \"Polygon\",\r\n *          \"coordinates\": [\r\n *            [\r\n *              [131.87, -25.76], [131.35, -26.07], [130.95, -26.78], [130.82, -27.64], [130.86, -28.53],\r\n *              [131.26, -29.22], [131.92, -29.76], [132.45, -29.87], [133.06, -29.76], [133.72, -29.34],\r\n *              [134.07, -28.80], [134.20, -27.91], [134.07, -27.21], [133.81, -26.31], [133.37, -25.83],\r\n *              [132.71, -25.64], [131.87, -25.76]\r\n *            ],\r\n *            [\r\n *              [133.15, -27.17], [132.71, -26.86], [132.09, -26.90], [131.74, -27.56], [131.79, -28.26],\r\n *              [132.36, -28.45], [132.93, -28.34], [133.15, -27.76], [133.15, -27.17]\r\n *            ]\r\n *          ]\r\n *        }\r\n *      },\r\n *      {\r\n *        \"type\": \"Feature\",\r\n *        \"properties\": {\r\n *          \"letter\": \"g\",\r\n *          \"color\": \"blue\",\r\n *          \"rank\": \"7\",\r\n *          \"ascii\": \"103\"\r\n *        },\r\n *        \"geometry\": {\r\n *          \"type\": \"Polygon\",\r\n *          \"coordinates\": [\r\n *            [\r\n *              [138.12, -25.04], [136.84, -25.16], [135.96, -25.36], [135.26, -25.99], [135, -26.90],\r\n *              [135.04, -27.91], [135.26, -28.88], [136.05, -29.45], [137.02, -29.49], [137.81, -29.49],\r\n *              [137.94, -29.99], [137.90, -31.20], [137.85, -32.24], [136.88, -32.69], [136.45, -32.36],\r\n *              [136.27, -31.80], [134.95, -31.84], [135.17, -32.99], [135.52, -33.43], [136.14, -33.76],\r\n *              [137.06, -33.83], [138.12, -33.65], [138.86, -33.21], [139.30, -32.28], [139.30, -31.24],\r\n *              [139.30, -30.14], [139.21, -28.96], [139.17, -28.22], [139.08, -27.41], [139.08, -26.47],\r\n *              [138.99, -25.40], [138.73, -25.00], [138.12, -25.04]\r\n *            ],\r\n *            [\r\n *              [137.50, -26.54], [136.97, -26.47], [136.49, -26.58], [136.31, -27.13], [136.31, -27.72],\r\n *              [136.58, -27.99], [137.50, -28.03], [137.68, -27.68], [137.59, -26.78], [137.50, -26.54]\r\n *            ]\r\n *          ]\r\n *        }\r\n *      },\r\n *      {\r\n *        \"type\": \"Feature\",\r\n *        \"properties\": {\r\n *          \"letter\": \"l\",\r\n *          \"color\": \"green\",\r\n *          \"rank\": \"12\",\r\n *          \"ascii\": \"108\"\r\n *        },\r\n *        \"geometry\": {\r\n *          \"type\": \"Polygon\",\r\n *          \"coordinates\": [\r\n *            [\r\n *              [140.14, -21.04], [140.31, -29.42], [141.67, -29.49], [141.59, -20.92], [140.14, -21.04]\r\n *            ]\r\n *          ]\r\n *        }\r\n *      },\r\n *      {\r\n *        \"type\": \"Feature\",\r\n *        \"properties\": {\r\n *          \"letter\": \"e\",\r\n *          \"color\": \"red\",\r\n *          \"rank\": \"5\",\r\n *          \"ascii\": \"101\"\r\n *        },\r\n *        \"geometry\": {\r\n *          \"type\": \"Polygon\",\r\n *          \"coordinates\": [\r\n *            [\r\n *              [144.14, -27.41], [145.67, -27.52], [146.86, -27.09], [146.82, -25.64], [146.25, -25.04],\r\n *              [145.45, -24.68], [144.66, -24.60], [144.09, -24.76], [143.43, -25.08], [142.99, -25.40],\r\n *              [142.64, -26.03], [142.64, -27.05], [142.64, -28.26], [143.30, -29.11], [144.18, -29.57],\r\n *              [145.41, -29.64], [146.46, -29.19], [146.64, -28.72], [146.82, -28.14], [144.84, -28.42],\r\n *              [144.31, -28.26], [144.14, -27.41]\r\n *            ],\r\n *            [\r\n *              [144.18, -26.39], [144.53, -26.58], [145.19, -26.62], [145.72, -26.35], [145.81, -25.91],\r\n *              [145.41, -25.68], [144.97, -25.68], [144.49, -25.64], [144, -25.99], [144.18, -26.39]\r\n *            ]\r\n *          ]\r\n *        }\r\n *      }\r\n *    ]\r\n *  };\r\n * }\r\n * ```\r\n */\r\nlet AgmDataLayer = AgmDataLayer_1 = class AgmDataLayer {\r\n    constructor(_manager) {\r\n        this._manager = _manager;\r\n        this._addedToManager = false;\r\n        this._id = (layerId$1++).toString();\r\n        this._subscriptions = [];\r\n        /**\r\n         * This event is fired when a feature in the layer is clicked.\r\n         */\r\n        this.layerClick = new EventEmitter();\r\n        /**\r\n         * The geoJson to be displayed\r\n         */\r\n        this.geoJson = null;\r\n    }\r\n    ngOnInit() {\r\n        if (this._addedToManager) {\r\n            return;\r\n        }\r\n        this._manager.addDataLayer(this);\r\n        this._addedToManager = true;\r\n        this._addEventListeners();\r\n    }\r\n    _addEventListeners() {\r\n        const listeners = [\r\n            { name: 'click', handler: (ev) => this.layerClick.emit(ev) },\r\n        ];\r\n        listeners.forEach((obj) => {\r\n            const os = this._manager.createEventObservable(obj.name, this).subscribe(obj.handler);\r\n            this._subscriptions.push(os);\r\n        });\r\n    }\r\n    /** @internal */\r\n    id() { return this._id; }\r\n    /** @internal */\r\n    toString() { return `AgmDataLayer-${this._id.toString()}`; }\r\n    /** @internal */\r\n    ngOnDestroy() {\r\n        this._manager.deleteDataLayer(this);\r\n        // unsubscribe all registered observable subscriptions\r\n        this._subscriptions.forEach(s => s.unsubscribe());\r\n    }\r\n    /** @internal */\r\n    ngOnChanges(changes) {\r\n        if (!this._addedToManager) {\r\n            return;\r\n        }\r\n        var geoJsonChange = changes['geoJson'];\r\n        if (geoJsonChange) {\r\n            this._manager.updateGeoJson(this, geoJsonChange.currentValue);\r\n        }\r\n        let dataOptions = {};\r\n        AgmDataLayer_1._dataOptionsAttributes.forEach(k => dataOptions[k] = changes.hasOwnProperty(k) ? changes[k].currentValue : this[k]);\r\n        this._manager.setDataOptions(this, dataOptions);\r\n    }\r\n};\r\nAgmDataLayer._dataOptionsAttributes = ['style'];\r\nAgmDataLayer.ctorParameters = () => [\r\n    { type: DataLayerManager }\r\n];\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], AgmDataLayer.prototype, \"layerClick\", void 0);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Object)\r\n], AgmDataLayer.prototype, \"geoJson\", void 0);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Function)\r\n], AgmDataLayer.prototype, \"style\", void 0);\r\nAgmDataLayer = AgmDataLayer_1 = __decorate([\r\n    Directive({\r\n        selector: 'agm-data-layer',\r\n    }),\r\n    __metadata(\"design:paramtypes\", [DataLayerManager])\r\n], AgmDataLayer);\r\n\r\n/**\r\n * Class to implement when you what to be able to make it work with the auto fit bounds feature\r\n * of AGM.\r\n */\r\nclass FitBoundsAccessor {\r\n}\r\n/**\r\n * The FitBoundsService is responsible for computing the bounds of the a single map.\r\n */\r\nlet FitBoundsService = class FitBoundsService {\r\n    constructor(loader) {\r\n        this._boundsChangeSampleTime$ = new BehaviorSubject(200);\r\n        this._includeInBounds$ = new BehaviorSubject(new Map());\r\n        this.bounds$ = from(loader.load()).pipe(flatMap(() => this._includeInBounds$), sample(this._boundsChangeSampleTime$.pipe(switchMap(time => timer(0, time)))), map(includeInBounds => this._generateBounds(includeInBounds)), shareReplay(1));\r\n    }\r\n    _generateBounds(includeInBounds) {\r\n        const bounds = new google.maps.LatLngBounds();\r\n        includeInBounds.forEach(b => bounds.extend(b));\r\n        return bounds;\r\n    }\r\n    addToBounds(latLng) {\r\n        const id = this._createIdentifier(latLng);\r\n        if (this._includeInBounds$.value.has(id)) {\r\n            return;\r\n        }\r\n        const map = this._includeInBounds$.value;\r\n        map.set(id, latLng);\r\n        this._includeInBounds$.next(map);\r\n    }\r\n    removeFromBounds(latLng) {\r\n        const map = this._includeInBounds$.value;\r\n        map.delete(this._createIdentifier(latLng));\r\n        this._includeInBounds$.next(map);\r\n    }\r\n    changeFitBoundsChangeSampleTime(timeMs) {\r\n        this._boundsChangeSampleTime$.next(timeMs);\r\n    }\r\n    getBounds$() {\r\n        return this.bounds$;\r\n    }\r\n    _createIdentifier(latLng) {\r\n        return `${latLng.lat}+${latLng.lng}`;\r\n    }\r\n};\r\nFitBoundsService.ctorParameters = () => [\r\n    { type: MapsAPILoader }\r\n];\r\nFitBoundsService = __decorate([\r\n    Injectable(),\r\n    __metadata(\"design:paramtypes\", [MapsAPILoader])\r\n], FitBoundsService);\r\n\r\n/**\r\n * Adds the given directive to the auto fit bounds feature when the value is true.\r\n * To make it work with you custom AGM component, you also have to implement the {@link FitBoundsAccessor} abstract class.\r\n * @example\r\n * <agm-marker [agmFitBounds]=\"true\"></agm-marker>\r\n */\r\nlet AgmFitBounds = class AgmFitBounds {\r\n    constructor(_fitBoundsAccessor, _fitBoundsService) {\r\n        this._fitBoundsAccessor = _fitBoundsAccessor;\r\n        this._fitBoundsService = _fitBoundsService;\r\n        /**\r\n         * If the value is true, the element gets added to the bounds of the map.\r\n         * Default: true.\r\n         */\r\n        this.agmFitBounds = true;\r\n        this._destroyed$ = new Subject();\r\n        this._latestFitBoundsDetails = null;\r\n    }\r\n    /**\r\n     * @internal\r\n     */\r\n    ngOnChanges() {\r\n        this._updateBounds();\r\n    }\r\n    /**\r\n     * @internal\r\n     */\r\n    ngOnInit() {\r\n        this._fitBoundsAccessor\r\n            .getFitBoundsDetails$()\r\n            .pipe(distinctUntilChanged((x, y) => x.latLng.lat === y.latLng.lat && x.latLng.lng === y.latLng.lng), takeUntil(this._destroyed$))\r\n            .subscribe(details => this._updateBounds(details));\r\n    }\r\n    /*\r\n     Either the location changed, or visible status changed.\r\n     Possible state changes are\r\n     invisible -> visible\r\n     visible -> invisible\r\n     visible -> visible (new location)\r\n    */\r\n    _updateBounds(newFitBoundsDetails) {\r\n        // either visibility will change, or location, so remove the old one anyway\r\n        if (this._latestFitBoundsDetails) {\r\n            this._fitBoundsService.removeFromBounds(this._latestFitBoundsDetails.latLng);\r\n            // don't set latestFitBoundsDetails to null, because we can toggle visibility from\r\n            // true -> false -> true, in which case we still need old value cached here\r\n        }\r\n        if (newFitBoundsDetails) {\r\n            this._latestFitBoundsDetails = newFitBoundsDetails;\r\n        }\r\n        if (!this._latestFitBoundsDetails) {\r\n            return;\r\n        }\r\n        if (this.agmFitBounds === true) {\r\n            this._fitBoundsService.addToBounds(this._latestFitBoundsDetails.latLng);\r\n        }\r\n    }\r\n    /**\r\n     * @internal\r\n     */\r\n    ngOnDestroy() {\r\n        this._destroyed$.next();\r\n        this._destroyed$.complete();\r\n        if (this._latestFitBoundsDetails !== null) {\r\n            this._fitBoundsService.removeFromBounds(this._latestFitBoundsDetails.latLng);\r\n        }\r\n    }\r\n};\r\nAgmFitBounds.ctorParameters = () => [\r\n    { type: FitBoundsAccessor, decorators: [{ type: Self }] },\r\n    { type: FitBoundsService }\r\n];\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Object)\r\n], AgmFitBounds.prototype, \"agmFitBounds\", void 0);\r\nAgmFitBounds = __decorate([\r\n    Directive({\r\n        selector: '[agmFitBounds]',\r\n    }),\r\n    __param(0, Self()),\r\n    __metadata(\"design:paramtypes\", [FitBoundsAccessor,\r\n        FitBoundsService])\r\n], AgmFitBounds);\r\n\r\nlet MarkerManager = class MarkerManager {\r\n    constructor(_mapsWrapper, _zone) {\r\n        this._mapsWrapper = _mapsWrapper;\r\n        this._zone = _zone;\r\n        this._markers = new Map();\r\n    }\r\n    convertAnimation(uiAnim) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            if (uiAnim === null) {\r\n                return null;\r\n            }\r\n            else {\r\n                return this._mapsWrapper.getNativeMap().then(() => google.maps.Animation[uiAnim]);\r\n            }\r\n        });\r\n    }\r\n    deleteMarker(marker) {\r\n        const m = this._markers.get(marker);\r\n        if (m == null) {\r\n            // marker already deleted\r\n            return Promise.resolve();\r\n        }\r\n        return m.then((m) => {\r\n            return this._zone.run(() => {\r\n                m.setMap(null);\r\n                this._markers.delete(marker);\r\n            });\r\n        });\r\n    }\r\n    updateMarkerPosition(marker) {\r\n        return this._markers.get(marker).then((m) => m.setPosition({ lat: marker.latitude, lng: marker.longitude }));\r\n    }\r\n    updateTitle(marker) {\r\n        return this._markers.get(marker).then((m) => m.setTitle(marker.title));\r\n    }\r\n    updateLabel(marker) {\r\n        return this._markers.get(marker).then((m) => { m.setLabel(marker.label); });\r\n    }\r\n    updateDraggable(marker) {\r\n        return this._markers.get(marker).then((m) => m.setDraggable(marker.draggable));\r\n    }\r\n    updateIcon(marker) {\r\n        return this._markers.get(marker).then((m) => m.setIcon(marker.iconUrl));\r\n    }\r\n    updateOpacity(marker) {\r\n        return this._markers.get(marker).then((m) => m.setOpacity(marker.opacity));\r\n    }\r\n    updateVisible(marker) {\r\n        return this._markers.get(marker).then((m) => m.setVisible(marker.visible));\r\n    }\r\n    updateZIndex(marker) {\r\n        return this._markers.get(marker).then((m) => m.setZIndex(marker.zIndex));\r\n    }\r\n    updateClickable(marker) {\r\n        return this._markers.get(marker).then((m) => m.setClickable(marker.clickable));\r\n    }\r\n    updateAnimation(marker) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const m = yield this._markers.get(marker);\r\n            m.setAnimation(yield this.convertAnimation(marker.animation));\r\n        });\r\n    }\r\n    addMarker(marker) {\r\n        const markerPromise = new Promise((resolve) => __awaiter(this, void 0, void 0, function* () {\r\n            return this._mapsWrapper.createMarker({\r\n                position: { lat: marker.latitude, lng: marker.longitude },\r\n                label: marker.label,\r\n                draggable: marker.draggable,\r\n                icon: marker.iconUrl,\r\n                opacity: marker.opacity,\r\n                visible: marker.visible,\r\n                zIndex: marker.zIndex,\r\n                title: marker.title,\r\n                clickable: marker.clickable,\r\n                animation: yield this.convertAnimation(marker.animation),\r\n            }).then(resolve);\r\n        }));\r\n        this._markers.set(marker, markerPromise);\r\n    }\r\n    getNativeMarker(marker) {\r\n        return this._markers.get(marker);\r\n    }\r\n    createEventObservable(eventName, marker) {\r\n        return new Observable((observer) => {\r\n            this._markers.get(marker).then((m) => {\r\n                m.addListener(eventName, (e) => this._zone.run(() => observer.next(e)));\r\n            });\r\n        });\r\n    }\r\n};\r\nMarkerManager.ctorParameters = () => [\r\n    { type: GoogleMapsAPIWrapper },\r\n    { type: NgZone }\r\n];\r\nMarkerManager = __decorate([\r\n    Injectable(),\r\n    __metadata(\"design:paramtypes\", [GoogleMapsAPIWrapper, NgZone])\r\n], MarkerManager);\r\n\r\nlet InfoWindowManager = class InfoWindowManager {\r\n    constructor(_mapsWrapper, _zone, _markerManager) {\r\n        this._mapsWrapper = _mapsWrapper;\r\n        this._zone = _zone;\r\n        this._markerManager = _markerManager;\r\n        this._infoWindows = new Map();\r\n    }\r\n    deleteInfoWindow(infoWindow) {\r\n        const iWindow = this._infoWindows.get(infoWindow);\r\n        if (iWindow == null) {\r\n            // info window already deleted\r\n            return Promise.resolve();\r\n        }\r\n        return iWindow.then((i) => {\r\n            return this._zone.run(() => {\r\n                i.close();\r\n                this._infoWindows.delete(infoWindow);\r\n            });\r\n        });\r\n    }\r\n    setPosition(infoWindow) {\r\n        return this._infoWindows.get(infoWindow).then((i) => i.setPosition({\r\n            lat: infoWindow.latitude,\r\n            lng: infoWindow.longitude,\r\n        }));\r\n    }\r\n    setZIndex(infoWindow) {\r\n        return this._infoWindows.get(infoWindow)\r\n            .then((i) => i.setZIndex(infoWindow.zIndex));\r\n    }\r\n    open(infoWindow) {\r\n        return this._infoWindows.get(infoWindow).then((w) => {\r\n            if (infoWindow.hostMarker != null) {\r\n                return this._markerManager.getNativeMarker(infoWindow.hostMarker).then((marker) => {\r\n                    return this._mapsWrapper.getNativeMap().then((map) => w.open(map, marker));\r\n                });\r\n            }\r\n            return this._mapsWrapper.getNativeMap().then((map) => w.open(map));\r\n        });\r\n    }\r\n    close(infoWindow) {\r\n        return this._infoWindows.get(infoWindow).then((w) => w.close());\r\n    }\r\n    setOptions(infoWindow, options) {\r\n        return this._infoWindows.get(infoWindow).then((i) => i.setOptions(options));\r\n    }\r\n    addInfoWindow(infoWindow) {\r\n        const options = {\r\n            content: infoWindow.content,\r\n            maxWidth: infoWindow.maxWidth,\r\n            zIndex: infoWindow.zIndex,\r\n            disableAutoPan: infoWindow.disableAutoPan,\r\n        };\r\n        if (typeof infoWindow.latitude === 'number' && typeof infoWindow.longitude === 'number') {\r\n            options.position = { lat: infoWindow.latitude, lng: infoWindow.longitude };\r\n        }\r\n        const infoWindowPromise = this._mapsWrapper.createInfoWindow(options);\r\n        this._infoWindows.set(infoWindow, infoWindowPromise);\r\n    }\r\n    /**\r\n     * Creates a Google Maps event listener for the given InfoWindow as an Observable\r\n     */\r\n    createEventObservable(eventName, infoWindow) {\r\n        return new Observable((observer) => {\r\n            this._infoWindows.get(infoWindow).then((i) => {\r\n                i.addListener(eventName, (e) => this._zone.run(() => observer.next(e)));\r\n            });\r\n        });\r\n    }\r\n};\r\nInfoWindowManager.ctorParameters = () => [\r\n    { type: GoogleMapsAPIWrapper },\r\n    { type: NgZone },\r\n    { type: MarkerManager }\r\n];\r\nInfoWindowManager = __decorate([\r\n    Injectable(),\r\n    __metadata(\"design:paramtypes\", [GoogleMapsAPIWrapper, NgZone,\r\n        MarkerManager])\r\n], InfoWindowManager);\r\n\r\nvar AgmInfoWindow_1;\r\nlet infoWindowId = 0;\r\n/**\r\n * AgmInfoWindow renders a info window inside a {@link AgmMarker} or standalone.\r\n *\r\n * ### Example\r\n * ```typescript\r\n * import { Component } from '@angular/core';\r\n *\r\n * @Component({\r\n *  selector: 'my-map-cmp',\r\n *  styles: [`\r\n *    .agm-map-container {\r\n *      height: 300px;\r\n *    }\r\n * `],\r\n *  template: `\r\n *    <agm-map [latitude]=\"lat\" [longitude]=\"lng\" [zoom]=\"zoom\">\r\n *      <agm-marker [latitude]=\"lat\" [longitude]=\"lng\" [label]=\"'M'\">\r\n *        <agm-info-window [disableAutoPan]=\"true\">\r\n *          Hi, this is the content of the <strong>info window</strong>\r\n *        </agm-info-window>\r\n *      </agm-marker>\r\n *    </agm-map>\r\n *  `\r\n * })\r\n * ```\r\n */\r\nlet AgmInfoWindow = AgmInfoWindow_1 = class AgmInfoWindow {\r\n    constructor(_infoWindowManager, _el) {\r\n        this._infoWindowManager = _infoWindowManager;\r\n        this._el = _el;\r\n        /**\r\n         * Sets the open state for the InfoWindow. You can also call the open() and close() methods.\r\n         */\r\n        this.isOpen = false;\r\n        /**\r\n         * Emits an event when the info window is closed.\r\n         */\r\n        this.infoWindowClose = new EventEmitter();\r\n        this._infoWindowAddedToManager = false;\r\n        this._id = (infoWindowId++).toString();\r\n    }\r\n    ngOnInit() {\r\n        this.content = this._el.nativeElement.querySelector('.agm-info-window-content');\r\n        this._infoWindowManager.addInfoWindow(this);\r\n        this._infoWindowAddedToManager = true;\r\n        this._updateOpenState();\r\n        this._registerEventListeners();\r\n    }\r\n    /** @internal */\r\n    ngOnChanges(changes) {\r\n        if (!this._infoWindowAddedToManager) {\r\n            return;\r\n        }\r\n        if ((changes['latitude'] || changes['longitude']) && typeof this.latitude === 'number' &&\r\n            typeof this.longitude === 'number') {\r\n            this._infoWindowManager.setPosition(this);\r\n        }\r\n        if (changes['zIndex']) {\r\n            this._infoWindowManager.setZIndex(this);\r\n        }\r\n        if (changes['isOpen']) {\r\n            this._updateOpenState();\r\n        }\r\n        this._setInfoWindowOptions(changes);\r\n    }\r\n    _registerEventListeners() {\r\n        this._infoWindowManager.createEventObservable('closeclick', this).subscribe(() => {\r\n            this.isOpen = false;\r\n            this.infoWindowClose.emit();\r\n        });\r\n    }\r\n    _updateOpenState() {\r\n        this.isOpen ? this.open() : this.close();\r\n    }\r\n    _setInfoWindowOptions(changes) {\r\n        let options = {};\r\n        let optionKeys = Object.keys(changes).filter(k => AgmInfoWindow_1._infoWindowOptionsInputs.indexOf(k) !== -1);\r\n        optionKeys.forEach((k) => { options[k] = changes[k].currentValue; });\r\n        this._infoWindowManager.setOptions(this, options);\r\n    }\r\n    /**\r\n     * Opens the info window.\r\n     */\r\n    open() { return this._infoWindowManager.open(this); }\r\n    /**\r\n     * Closes the info window.\r\n     */\r\n    close() {\r\n        return this._infoWindowManager.close(this).then(() => { this.infoWindowClose.emit(); });\r\n    }\r\n    /** @internal */\r\n    id() { return this._id; }\r\n    /** @internal */\r\n    toString() { return 'AgmInfoWindow-' + this._id.toString(); }\r\n    /** @internal */\r\n    ngOnDestroy() { this._infoWindowManager.deleteInfoWindow(this); }\r\n};\r\nAgmInfoWindow._infoWindowOptionsInputs = ['disableAutoPan', 'maxWidth'];\r\nAgmInfoWindow.ctorParameters = () => [\r\n    { type: InfoWindowManager },\r\n    { type: ElementRef }\r\n];\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Number)\r\n], AgmInfoWindow.prototype, \"latitude\", void 0);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Number)\r\n], AgmInfoWindow.prototype, \"longitude\", void 0);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Boolean)\r\n], AgmInfoWindow.prototype, \"disableAutoPan\", void 0);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Number)\r\n], AgmInfoWindow.prototype, \"zIndex\", void 0);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Number)\r\n], AgmInfoWindow.prototype, \"maxWidth\", void 0);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Object)\r\n], AgmInfoWindow.prototype, \"isOpen\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], AgmInfoWindow.prototype, \"infoWindowClose\", void 0);\r\nAgmInfoWindow = AgmInfoWindow_1 = __decorate([\r\n    Component({\r\n        selector: 'agm-info-window',\r\n        template: `<div class='agm-info-window-content'>\r\n      <ng-content></ng-content>\r\n    </div>\r\n  `\r\n    }),\r\n    __metadata(\"design:paramtypes\", [InfoWindowManager, ElementRef])\r\n], AgmInfoWindow);\r\n\r\n/**\r\n * Manages all KML Layers for a Google Map instance.\r\n */\r\nlet KmlLayerManager = class KmlLayerManager {\r\n    constructor(_wrapper, _zone) {\r\n        this._wrapper = _wrapper;\r\n        this._zone = _zone;\r\n        this._layers = new Map();\r\n    }\r\n    /**\r\n     * Adds a new KML Layer to the map.\r\n     */\r\n    addKmlLayer(layer) {\r\n        const newLayer = this._wrapper.getNativeMap().then(m => {\r\n            return new google.maps.KmlLayer({\r\n                clickable: layer.clickable,\r\n                map: m,\r\n                preserveViewport: layer.preserveViewport,\r\n                screenOverlays: layer.screenOverlays,\r\n                suppressInfoWindows: layer.suppressInfoWindows,\r\n                url: layer.url,\r\n                zIndex: layer.zIndex,\r\n            });\r\n        });\r\n        this._layers.set(layer, newLayer);\r\n    }\r\n    setOptions(layer, options) {\r\n        this._layers.get(layer).then(l => l.setOptions(options));\r\n    }\r\n    deleteKmlLayer(layer) {\r\n        this._layers.get(layer).then(l => {\r\n            l.setMap(null);\r\n            this._layers.delete(layer);\r\n        });\r\n    }\r\n    /**\r\n     * Creates a Google Maps event listener for the given KmlLayer as an Observable\r\n     */\r\n    createEventObservable(eventName, layer) {\r\n        return new Observable((observer) => {\r\n            this._layers.get(layer).then((m) => {\r\n                m.addListener(eventName, (e) => this._zone.run(() => observer.next(e)));\r\n            });\r\n        });\r\n    }\r\n};\r\nKmlLayerManager.ctorParameters = () => [\r\n    { type: GoogleMapsAPIWrapper },\r\n    { type: NgZone }\r\n];\r\nKmlLayerManager = __decorate([\r\n    Injectable(),\r\n    __metadata(\"design:paramtypes\", [GoogleMapsAPIWrapper, NgZone])\r\n], KmlLayerManager);\r\n\r\nvar AgmKmlLayer_1;\r\nlet layerId$2 = 0;\r\nlet AgmKmlLayer = AgmKmlLayer_1 = class AgmKmlLayer {\r\n    constructor(_manager) {\r\n        this._manager = _manager;\r\n        this._addedToManager = false;\r\n        this._id = (layerId$2++).toString();\r\n        this._subscriptions = [];\r\n        /**\r\n         * If true, the layer receives mouse events. Default value is true.\r\n         */\r\n        this.clickable = true;\r\n        /**\r\n         * By default, the input map is centered and zoomed to the bounding box of the contents of the\r\n         * layer.\r\n         * If this option is set to true, the viewport is left unchanged, unless the map's center and zoom\r\n         * were never set.\r\n         */\r\n        this.preserveViewport = false;\r\n        /**\r\n         * Whether to render the screen overlays. Default true.\r\n         */\r\n        this.screenOverlays = true;\r\n        /**\r\n         * Suppress the rendering of info windows when layer features are clicked.\r\n         */\r\n        this.suppressInfoWindows = false;\r\n        /**\r\n         * The URL of the KML document to display.\r\n         */\r\n        this.url = null;\r\n        /**\r\n         * The z-index of the layer.\r\n         */\r\n        this.zIndex = null;\r\n        /**\r\n         * This event is fired when a feature in the layer is clicked.\r\n         */\r\n        this.layerClick = new EventEmitter();\r\n        /**\r\n         * This event is fired when the KML layers default viewport has changed.\r\n         */\r\n        this.defaultViewportChange = new EventEmitter();\r\n        /**\r\n         * This event is fired when the KML layer has finished loading.\r\n         * At this point it is safe to read the status property to determine if the layer loaded\r\n         * successfully.\r\n         */\r\n        this.statusChange = new EventEmitter();\r\n    }\r\n    ngOnInit() {\r\n        if (this._addedToManager) {\r\n            return;\r\n        }\r\n        this._manager.addKmlLayer(this);\r\n        this._addedToManager = true;\r\n        this._addEventListeners();\r\n    }\r\n    ngOnChanges(changes) {\r\n        if (!this._addedToManager) {\r\n            return;\r\n        }\r\n        this._updatePolygonOptions(changes);\r\n    }\r\n    _updatePolygonOptions(changes) {\r\n        const options = Object.keys(changes)\r\n            .filter(k => AgmKmlLayer_1._kmlLayerOptions.indexOf(k) !== -1)\r\n            .reduce((obj, k) => {\r\n            obj[k] = changes[k].currentValue;\r\n            return obj;\r\n        }, {});\r\n        if (Object.keys(options).length > 0) {\r\n            this._manager.setOptions(this, options);\r\n        }\r\n    }\r\n    _addEventListeners() {\r\n        const listeners = [\r\n            { name: 'click', handler: (ev) => this.layerClick.emit(ev) },\r\n            { name: 'defaultviewport_changed', handler: () => this.defaultViewportChange.emit() },\r\n            { name: 'status_changed', handler: () => this.statusChange.emit() },\r\n        ];\r\n        listeners.forEach((obj) => {\r\n            const os = this._manager.createEventObservable(obj.name, this).subscribe(obj.handler);\r\n            this._subscriptions.push(os);\r\n        });\r\n    }\r\n    /** @internal */\r\n    id() { return this._id; }\r\n    /** @internal */\r\n    toString() { return `AgmKmlLayer-${this._id.toString()}`; }\r\n    /** @internal */\r\n    ngOnDestroy() {\r\n        this._manager.deleteKmlLayer(this);\r\n        // unsubscribe all registered observable subscriptions\r\n        this._subscriptions.forEach(s => s.unsubscribe());\r\n    }\r\n};\r\nAgmKmlLayer._kmlLayerOptions = ['clickable', 'preserveViewport', 'screenOverlays', 'suppressInfoWindows', 'url', 'zIndex'];\r\nAgmKmlLayer.ctorParameters = () => [\r\n    { type: KmlLayerManager }\r\n];\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Object)\r\n], AgmKmlLayer.prototype, \"clickable\", void 0);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Object)\r\n], AgmKmlLayer.prototype, \"preserveViewport\", void 0);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Object)\r\n], AgmKmlLayer.prototype, \"screenOverlays\", void 0);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Object)\r\n], AgmKmlLayer.prototype, \"suppressInfoWindows\", void 0);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", String)\r\n], AgmKmlLayer.prototype, \"url\", void 0);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Number)\r\n], AgmKmlLayer.prototype, \"zIndex\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], AgmKmlLayer.prototype, \"layerClick\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], AgmKmlLayer.prototype, \"defaultViewportChange\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], AgmKmlLayer.prototype, \"statusChange\", void 0);\r\nAgmKmlLayer = AgmKmlLayer_1 = __decorate([\r\n    Directive({\r\n        selector: 'agm-kml-layer',\r\n    }),\r\n    __metadata(\"design:paramtypes\", [KmlLayerManager])\r\n], AgmKmlLayer);\r\n\r\nfunction createMVCEventObservable(array) {\r\n    const eventNames = ['insert_at', 'remove_at', 'set_at'];\r\n    return fromEventPattern((handler) => eventNames.map(evName => array.addListener(evName, (index, previous) => handler.apply(array, [{ 'newArr': array.getArray(), evName, index, previous }]))), (_handler, evListeners) => evListeners.forEach(evListener => evListener.remove()));\r\n}\r\nclass MvcArrayMock {\r\n    constructor() {\r\n        this.vals = [];\r\n        this.listeners = {\r\n            'remove_at': [],\r\n            'insert_at': [],\r\n            'set_at': [],\r\n        };\r\n    }\r\n    clear() {\r\n        for (let i = this.vals.length - 1; i >= 0; i--) {\r\n            this.removeAt(i);\r\n        }\r\n    }\r\n    getArray() {\r\n        return [...this.vals];\r\n    }\r\n    getAt(i) {\r\n        return this.vals[i];\r\n    }\r\n    getLength() {\r\n        return this.vals.length;\r\n    }\r\n    insertAt(i, elem) {\r\n        this.vals.splice(i, 0, elem);\r\n        this.listeners.insert_at.map(listener => listener(i));\r\n    }\r\n    pop() {\r\n        const deleted = this.vals.pop();\r\n        this.listeners.remove_at.map(listener => listener(this.vals.length, deleted));\r\n        return deleted;\r\n    }\r\n    push(elem) {\r\n        this.vals.push(elem);\r\n        this.listeners.insert_at.map(listener => listener(this.vals.length - 1));\r\n        return this.vals.length;\r\n    }\r\n    removeAt(i) {\r\n        const deleted = this.vals.splice(i, 1)[0];\r\n        this.listeners.remove_at.map(listener => listener(i, deleted));\r\n        return deleted;\r\n    }\r\n    setAt(i, elem) {\r\n        const deleted = this.vals[i];\r\n        this.vals[i] = elem;\r\n        this.listeners.set_at.map(listener => listener(i, deleted));\r\n    }\r\n    forEach(callback) {\r\n        this.vals.forEach(callback);\r\n    }\r\n    addListener(eventName, handler) {\r\n        const listenerArr = this.listeners[eventName];\r\n        listenerArr.push(handler);\r\n        return {\r\n            remove: () => {\r\n                listenerArr.splice(listenerArr.indexOf(handler), 1);\r\n            },\r\n        };\r\n    }\r\n}\r\n\r\nlet PolygonManager = class PolygonManager {\r\n    constructor(_mapsWrapper, _zone) {\r\n        this._mapsWrapper = _mapsWrapper;\r\n        this._zone = _zone;\r\n        this._polygons = new Map();\r\n    }\r\n    addPolygon(path) {\r\n        const polygonPromise = this._mapsWrapper.createPolygon({\r\n            clickable: path.clickable,\r\n            draggable: path.draggable,\r\n            editable: path.editable,\r\n            fillColor: path.fillColor,\r\n            fillOpacity: path.fillOpacity,\r\n            geodesic: path.geodesic,\r\n            paths: path.paths,\r\n            strokeColor: path.strokeColor,\r\n            strokeOpacity: path.strokeOpacity,\r\n            strokeWeight: path.strokeWeight,\r\n            visible: path.visible,\r\n            zIndex: path.zIndex,\r\n        });\r\n        this._polygons.set(path, polygonPromise);\r\n    }\r\n    updatePolygon(polygon) {\r\n        const m = this._polygons.get(polygon);\r\n        if (m == null) {\r\n            return Promise.resolve();\r\n        }\r\n        return m.then((l) => this._zone.run(() => { l.setPaths(polygon.paths); }));\r\n    }\r\n    setPolygonOptions(path, options) {\r\n        return this._polygons.get(path).then((l) => { l.setOptions(options); });\r\n    }\r\n    deletePolygon(paths) {\r\n        const m = this._polygons.get(paths);\r\n        if (m == null) {\r\n            return Promise.resolve();\r\n        }\r\n        return m.then((l) => {\r\n            return this._zone.run(() => {\r\n                l.setMap(null);\r\n                this._polygons.delete(paths);\r\n            });\r\n        });\r\n    }\r\n    getPath(polygon) {\r\n        return this._polygons.get(polygon)\r\n            .then((polygon) => polygon.getPath().getArray());\r\n    }\r\n    getPaths(polygon) {\r\n        return this._polygons.get(polygon)\r\n            .then((polygon) => polygon.getPaths().getArray().map((p) => p.getArray()));\r\n    }\r\n    createEventObservable(eventName, path) {\r\n        return new Observable((observer) => {\r\n            this._polygons.get(path).then((l) => {\r\n                l.addListener(eventName, (e) => this._zone.run(() => observer.next(e)));\r\n            });\r\n        });\r\n    }\r\n    createPathEventObservable(agmPolygon) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const polygon = yield this._polygons.get(agmPolygon);\r\n            const paths = polygon.getPaths();\r\n            const pathsChanges$ = createMVCEventObservable(paths);\r\n            return pathsChanges$.pipe(startWith({ newArr: paths.getArray() }), // in order to subscribe to them all\r\n            switchMap(parentMVEvent => merge(... // rest parameter\r\n            parentMVEvent.newArr.map((chMVC, index) => createMVCEventObservable(chMVC)\r\n                .pipe(map(chMVCEvent => ({ parentMVEvent, chMVCEvent, pathIndex: index })))))\r\n                .pipe(startWith({ parentMVEvent, chMVCEvent: null, pathIndex: null }))), // start the merged ob with an event signinifing change to parent\r\n            skip(1), // skip the manually added event\r\n            map(({ parentMVEvent, chMVCEvent, pathIndex }) => {\r\n                let retVal;\r\n                if (!chMVCEvent) {\r\n                    retVal = {\r\n                        newArr: parentMVEvent.newArr.map(subArr => subArr.getArray().map(latLng => latLng.toJSON())),\r\n                        eventName: parentMVEvent.evName,\r\n                        index: parentMVEvent.index,\r\n                    };\r\n                    if (parentMVEvent.previous) {\r\n                        retVal.previous = parentMVEvent.previous.getArray();\r\n                    }\r\n                }\r\n                else {\r\n                    retVal = {\r\n                        newArr: parentMVEvent.newArr.map(subArr => subArr.getArray().map(latLng => latLng.toJSON())),\r\n                        pathIndex,\r\n                        eventName: chMVCEvent.evName,\r\n                        index: chMVCEvent.index,\r\n                    };\r\n                    if (chMVCEvent.previous) {\r\n                        retVal.previous = chMVCEvent.previous;\r\n                    }\r\n                }\r\n                return retVal;\r\n            }));\r\n        });\r\n    }\r\n};\r\nPolygonManager.ctorParameters = () => [\r\n    { type: GoogleMapsAPIWrapper },\r\n    { type: NgZone }\r\n];\r\nPolygonManager = __decorate([\r\n    Injectable(),\r\n    __metadata(\"design:paramtypes\", [GoogleMapsAPIWrapper, NgZone])\r\n], PolygonManager);\r\n\r\nvar PolylineManager_1;\r\nlet PolylineManager = PolylineManager_1 = class PolylineManager {\r\n    constructor(_mapsWrapper, _zone) {\r\n        this._mapsWrapper = _mapsWrapper;\r\n        this._zone = _zone;\r\n        this._polylines = new Map();\r\n    }\r\n    static _convertPoints(line) {\r\n        const path = line._getPoints().map((point) => {\r\n            return { lat: point.latitude, lng: point.longitude };\r\n        });\r\n        return path;\r\n    }\r\n    static _convertPath(path) {\r\n        const symbolPath = google.maps.SymbolPath[path];\r\n        if (typeof symbolPath === 'number') {\r\n            return symbolPath;\r\n        }\r\n        else {\r\n            return path;\r\n        }\r\n    }\r\n    static _convertIcons(line) {\r\n        const icons = line._getIcons().map(agmIcon => ({\r\n            fixedRotation: agmIcon.fixedRotation,\r\n            offset: agmIcon.offset,\r\n            repeat: agmIcon.repeat,\r\n            icon: {\r\n                anchor: new google.maps.Point(agmIcon.anchorX, agmIcon.anchorY),\r\n                fillColor: agmIcon.fillColor,\r\n                fillOpacity: agmIcon.fillOpacity,\r\n                path: PolylineManager_1._convertPath(agmIcon.path),\r\n                rotation: agmIcon.rotation,\r\n                scale: agmIcon.scale,\r\n                strokeColor: agmIcon.strokeColor,\r\n                strokeOpacity: agmIcon.strokeOpacity,\r\n                strokeWeight: agmIcon.strokeWeight,\r\n            },\r\n        }));\r\n        // prune undefineds;\r\n        icons.forEach(icon => {\r\n            Object.entries(icon).forEach(([key, val]) => {\r\n                if (typeof val === 'undefined') {\r\n                    delete icon[key];\r\n                }\r\n            });\r\n            if (typeof icon.icon.anchor.x === 'undefined' ||\r\n                typeof icon.icon.anchor.y === 'undefined') {\r\n                delete icon.icon.anchor;\r\n            }\r\n        });\r\n        return icons;\r\n    }\r\n    addPolyline(line) {\r\n        const polylinePromise = this._mapsWrapper.getNativeMap()\r\n            .then(() => [PolylineManager_1._convertPoints(line),\r\n            PolylineManager_1._convertIcons(line)])\r\n            .then(([path, icons]) => this._mapsWrapper.createPolyline({\r\n            clickable: line.clickable,\r\n            draggable: line.draggable,\r\n            editable: line.editable,\r\n            geodesic: line.geodesic,\r\n            strokeColor: line.strokeColor,\r\n            strokeOpacity: line.strokeOpacity,\r\n            strokeWeight: line.strokeWeight,\r\n            visible: line.visible,\r\n            zIndex: line.zIndex,\r\n            path: path,\r\n            icons: icons,\r\n        }));\r\n        this._polylines.set(line, polylinePromise);\r\n    }\r\n    updatePolylinePoints(line) {\r\n        const path = PolylineManager_1._convertPoints(line);\r\n        const m = this._polylines.get(line);\r\n        if (m == null) {\r\n            return Promise.resolve();\r\n        }\r\n        return m.then((l) => { return this._zone.run(() => { l.setPath(path); }); });\r\n    }\r\n    updateIconSequences(line) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            yield this._mapsWrapper.getNativeMap();\r\n            const icons = PolylineManager_1._convertIcons(line);\r\n            const m = this._polylines.get(line);\r\n            if (m == null) {\r\n                return;\r\n            }\r\n            return m.then(l => this._zone.run(() => l.setOptions({ icons: icons })));\r\n        });\r\n    }\r\n    setPolylineOptions(line, options) {\r\n        return this._polylines.get(line).then((l) => { l.setOptions(options); });\r\n    }\r\n    deletePolyline(line) {\r\n        const m = this._polylines.get(line);\r\n        if (m == null) {\r\n            return Promise.resolve();\r\n        }\r\n        return m.then((l) => {\r\n            return this._zone.run(() => {\r\n                l.setMap(null);\r\n                this._polylines.delete(line);\r\n            });\r\n        });\r\n    }\r\n    getMVCPath(agmPolyline) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const polyline = yield this._polylines.get(agmPolyline);\r\n            return polyline.getPath();\r\n        });\r\n    }\r\n    getPath(agmPolyline) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return (yield this.getMVCPath(agmPolyline)).getArray();\r\n        });\r\n    }\r\n    createEventObservable(eventName, line) {\r\n        return new Observable((observer) => {\r\n            this._polylines.get(line).then((l) => {\r\n                l.addListener(eventName, (e) => this._zone.run(() => observer.next(e)));\r\n            });\r\n        });\r\n    }\r\n    createPathEventObservable(line) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const mvcPath = yield this.getMVCPath(line);\r\n            return createMVCEventObservable(mvcPath);\r\n        });\r\n    }\r\n};\r\nPolylineManager.ctorParameters = () => [\r\n    { type: GoogleMapsAPIWrapper },\r\n    { type: NgZone }\r\n];\r\nPolylineManager = PolylineManager_1 = __decorate([\r\n    Injectable(),\r\n    __metadata(\"design:paramtypes\", [GoogleMapsAPIWrapper, NgZone])\r\n], PolylineManager);\r\n\r\nlet RectangleManager = class RectangleManager {\r\n    constructor(_apiWrapper, _zone) {\r\n        this._apiWrapper = _apiWrapper;\r\n        this._zone = _zone;\r\n        this._rectangles = new Map();\r\n    }\r\n    addRectangle(rectangle) {\r\n        this._rectangles.set(rectangle, this._apiWrapper.createRectangle({\r\n            bounds: {\r\n                north: rectangle.north,\r\n                east: rectangle.east,\r\n                south: rectangle.south,\r\n                west: rectangle.west,\r\n            },\r\n            clickable: rectangle.clickable,\r\n            draggable: rectangle.draggable,\r\n            editable: rectangle.editable,\r\n            fillColor: rectangle.fillColor,\r\n            fillOpacity: rectangle.fillOpacity,\r\n            strokeColor: rectangle.strokeColor,\r\n            strokeOpacity: rectangle.strokeOpacity,\r\n            strokePosition: rectangle.strokePosition,\r\n            strokeWeight: rectangle.strokeWeight,\r\n            visible: rectangle.visible,\r\n            zIndex: rectangle.zIndex,\r\n        }));\r\n    }\r\n    /**\r\n     * Removes the given rectangle from the map.\r\n     */\r\n    removeRectangle(rectangle) {\r\n        return this._rectangles.get(rectangle).then((r) => {\r\n            r.setMap(null);\r\n            this._rectangles.delete(rectangle);\r\n        });\r\n    }\r\n    setOptions(rectangle, options) {\r\n        return this._rectangles.get(rectangle).then((r) => r.setOptions(options));\r\n    }\r\n    getBounds(rectangle) {\r\n        return this._rectangles.get(rectangle).then((r) => r.getBounds());\r\n    }\r\n    setBounds(rectangle) {\r\n        return this._rectangles.get(rectangle).then((r) => {\r\n            return r.setBounds({\r\n                north: rectangle.north,\r\n                east: rectangle.east,\r\n                south: rectangle.south,\r\n                west: rectangle.west,\r\n            });\r\n        });\r\n    }\r\n    setEditable(rectangle) {\r\n        return this._rectangles.get(rectangle).then((r) => {\r\n            return r.setEditable(rectangle.editable);\r\n        });\r\n    }\r\n    setDraggable(rectangle) {\r\n        return this._rectangles.get(rectangle).then((r) => {\r\n            return r.setDraggable(rectangle.draggable);\r\n        });\r\n    }\r\n    setVisible(rectangle) {\r\n        return this._rectangles.get(rectangle).then((r) => {\r\n            return r.setVisible(rectangle.visible);\r\n        });\r\n    }\r\n    createEventObservable(eventName, rectangle) {\r\n        return Observable.create((observer) => {\r\n            let listener = null;\r\n            this._rectangles.get(rectangle).then((r) => {\r\n                listener = r.addListener(eventName, (e) => this._zone.run(() => observer.next(e)));\r\n            });\r\n            return () => {\r\n                if (listener !== null) {\r\n                    listener.remove();\r\n                }\r\n            };\r\n        });\r\n    }\r\n};\r\nRectangleManager.ctorParameters = () => [\r\n    { type: GoogleMapsAPIWrapper },\r\n    { type: NgZone }\r\n];\r\nRectangleManager = __decorate([\r\n    Injectable(),\r\n    __metadata(\"design:paramtypes\", [GoogleMapsAPIWrapper, NgZone])\r\n], RectangleManager);\r\n\r\nvar AgmMap_1;\r\n/**\r\n * AgmMap renders a Google Map.\r\n * **Important note**: To be able see a map in the browser, you have to define a height for the\r\n * element `agm-map`.\r\n *\r\n * ### Example\r\n * ```typescript\r\n * import { Component } from '@angular/core';\r\n *\r\n * @Component({\r\n *  selector: 'my-map-cmp',\r\n *  styles: [`\r\n *    agm-map {\r\n *      height: 300px;\r\n *    }\r\n * `],\r\n *  template: `\r\n *    <agm-map [latitude]=\"lat\" [longitude]=\"lng\" [zoom]=\"zoom\">\r\n *    </agm-map>\r\n *  `\r\n * })\r\n * ```\r\n */\r\nlet AgmMap = AgmMap_1 = class AgmMap {\r\n    constructor(_elem, _mapsWrapper, _platformId, _fitBoundsService, _zone) {\r\n        this._elem = _elem;\r\n        this._mapsWrapper = _mapsWrapper;\r\n        this._platformId = _platformId;\r\n        this._fitBoundsService = _fitBoundsService;\r\n        this._zone = _zone;\r\n        /**\r\n         * The longitude that defines the center of the map.\r\n         */\r\n        this.longitude = 0;\r\n        /**\r\n         * The latitude that defines the center of the map.\r\n         */\r\n        this.latitude = 0;\r\n        /**\r\n         * The zoom level of the map. The default zoom level is 8.\r\n         */\r\n        this.zoom = 8;\r\n        /**\r\n         * Enables/disables if map is draggable.\r\n         */\r\n        // tslint:disable-next-line:no-input-rename\r\n        this.draggable = true;\r\n        /**\r\n         * Enables/disables zoom and center on double click. Enabled by default.\r\n         */\r\n        this.disableDoubleClickZoom = false;\r\n        /**\r\n         * Enables/disables all default UI of the Google map. Please note: When the map is created, this\r\n         * value cannot get updated.\r\n         */\r\n        this.disableDefaultUI = false;\r\n        /**\r\n         * If false, disables scrollwheel zooming on the map. The scrollwheel is enabled by default.\r\n         */\r\n        this.scrollwheel = true;\r\n        /**\r\n         * If false, prevents the map from being controlled by the keyboard. Keyboard shortcuts are\r\n         * enabled by default.\r\n         */\r\n        this.keyboardShortcuts = true;\r\n        /**\r\n         * Styles to apply to each of the default map types. Note that for Satellite/Hybrid and Terrain\r\n         * modes, these styles will only apply to labels and geometry.\r\n         */\r\n        this.styles = [];\r\n        /**\r\n         * When true and the latitude and/or longitude values changes, the Google Maps panTo method is\r\n         * used to\r\n         * center the map. See: https://developers.google.com/maps/documentation/javascript/reference#Map\r\n         */\r\n        this.usePanning = false;\r\n        /**\r\n         * Sets the viewport to contain the given bounds.\r\n         * If this option to `true`, the bounds get automatically computed from all elements that use the {@link AgmFitBounds} directive.\r\n         */\r\n        this.fitBounds = false;\r\n        /**\r\n         * The initial enabled/disabled state of the Scale control. This is disabled by default.\r\n         */\r\n        this.scaleControl = false;\r\n        /**\r\n         * The initial enabled/disabled state of the Map type control.\r\n         */\r\n        this.mapTypeControl = false;\r\n        /**\r\n         * The initial enabled/disabled state of the Pan control.\r\n         */\r\n        this.panControl = false;\r\n        /**\r\n         * The initial enabled/disabled state of the Rotate control.\r\n         */\r\n        this.rotateControl = false;\r\n        /**\r\n         * The initial enabled/disabled state of the Fullscreen control.\r\n         */\r\n        this.fullscreenControl = false;\r\n        /**\r\n         * The map mapTypeId. Defaults to 'roadmap'.\r\n         */\r\n        this.mapTypeId = 'roadmap';\r\n        /**\r\n         * When false, map icons are not clickable. A map icon represents a point of interest,\r\n         * also known as a POI. By default map icons are clickable.\r\n         */\r\n        this.clickableIcons = true;\r\n        /**\r\n         * A map icon represents a point of interest, also known as a POI.\r\n         * When map icons are clickable by default, an info window is displayed.\r\n         * When this property is set to false, the info window will not be shown but the click event\r\n         * will still fire\r\n         */\r\n        this.showDefaultInfoWindow = true;\r\n        /**\r\n         * This setting controls how gestures on the map are handled.\r\n         * Allowed values:\r\n         * - 'cooperative' (Two-finger touch gestures pan and zoom the map. One-finger touch gestures are not handled by the map.)\r\n         * - 'greedy'      (All touch gestures pan or zoom the map.)\r\n         * - 'none'        (The map cannot be panned or zoomed by user gestures.)\r\n         * - 'auto'        [default] (Gesture handling is either cooperative or greedy, depending on whether the page is scrollable or not.\r\n         */\r\n        this.gestureHandling = 'auto';\r\n        /**\r\n         * Controls the automatic switching behavior for the angle of incidence of\r\n         * the map. The only allowed values are 0 and 45. The value 0 causes the map\r\n         * to always use a 0° overhead view regardless of the zoom level and\r\n         * viewport. The value 45 causes the tilt angle to automatically switch to\r\n         * 45 whenever 45° imagery is available for the current zoom level and\r\n         * viewport, and switch back to 0 whenever 45° imagery is not available\r\n         * (this is the default behavior). 45° imagery is only available for\r\n         * satellite and hybrid map types, within some locations, and at some zoom\r\n         * levels. Note: getTilt returns the current tilt angle, not the value\r\n         * specified by this option. Because getTilt and this option refer to\r\n         * different things, do not bind() the tilt property; doing so may yield\r\n         * unpredictable effects. (Default of AGM is 0 (disabled). Enable it with value 45.)\r\n         */\r\n        this.tilt = 0;\r\n        this._observableSubscriptions = [];\r\n        /**\r\n         * This event emitter gets emitted when the user clicks on the map (but not when they click on a\r\n         * marker or infoWindow).\r\n         */\r\n        this.mapClick = new EventEmitter();\r\n        /**\r\n         * This event emitter gets emitted when the user right-clicks on the map (but not when they click\r\n         * on a marker or infoWindow).\r\n         */\r\n        this.mapRightClick = new EventEmitter();\r\n        /**\r\n         * This event emitter gets emitted when the user double-clicks on the map (but not when they click\r\n         * on a marker or infoWindow).\r\n         */\r\n        this.mapDblClick = new EventEmitter();\r\n        /**\r\n         * This event emitter is fired when the map center changes.\r\n         */\r\n        this.centerChange = new EventEmitter();\r\n        /**\r\n         * This event is fired when the viewport bounds have changed.\r\n         */\r\n        this.boundsChange = new EventEmitter();\r\n        /**\r\n         * This event is fired when the mapTypeId property changes.\r\n         */\r\n        this.mapTypeIdChange = new EventEmitter();\r\n        /**\r\n         * This event is fired when the map becomes idle after panning or zooming.\r\n         */\r\n        this.idle = new EventEmitter();\r\n        /**\r\n         * This event is fired when the zoom level has changed.\r\n         */\r\n        this.zoomChange = new EventEmitter();\r\n        /**\r\n         * This event is fired when the google map is fully initialized.\r\n         * You get the google.maps.Map instance as a result of this EventEmitter.\r\n         */\r\n        this.mapReady = new EventEmitter();\r\n        /**\r\n         * This event is fired when the visible tiles have finished loading.\r\n         */\r\n        this.tilesLoaded = new EventEmitter();\r\n    }\r\n    /** @internal */\r\n    ngOnInit() {\r\n        if (isPlatformServer(this._platformId)) {\r\n            // The code is running on the server, do nothing\r\n            return;\r\n        }\r\n        // todo: this should be solved with a new component and a viewChild decorator\r\n        const container = this._elem.nativeElement.querySelector('.agm-map-container-inner');\r\n        this._initMapInstance(container);\r\n    }\r\n    _initMapInstance(el) {\r\n        this._mapsWrapper.createMap(el, {\r\n            center: { lat: this.latitude || 0, lng: this.longitude || 0 },\r\n            zoom: this.zoom,\r\n            minZoom: this.minZoom,\r\n            maxZoom: this.maxZoom,\r\n            controlSize: this.controlSize,\r\n            disableDefaultUI: this.disableDefaultUI,\r\n            disableDoubleClickZoom: this.disableDoubleClickZoom,\r\n            scrollwheel: this.scrollwheel,\r\n            backgroundColor: this.backgroundColor,\r\n            draggable: this.draggable,\r\n            draggableCursor: this.draggableCursor,\r\n            draggingCursor: this.draggingCursor,\r\n            keyboardShortcuts: this.keyboardShortcuts,\r\n            styles: this.styles,\r\n            zoomControl: this.zoomControl,\r\n            zoomControlOptions: this.zoomControlOptions,\r\n            streetViewControl: this.streetViewControl,\r\n            streetViewControlOptions: this.streetViewControlOptions,\r\n            scaleControl: this.scaleControl,\r\n            scaleControlOptions: this.scaleControlOptions,\r\n            mapTypeControl: this.mapTypeControl,\r\n            mapTypeControlOptions: this.mapTypeControlOptions,\r\n            panControl: this.panControl,\r\n            panControlOptions: this.panControlOptions,\r\n            rotateControl: this.rotateControl,\r\n            rotateControlOptions: this.rotateControlOptions,\r\n            fullscreenControl: this.fullscreenControl,\r\n            fullscreenControlOptions: this.fullscreenControlOptions,\r\n            mapTypeId: this.mapTypeId,\r\n            clickableIcons: this.clickableIcons,\r\n            gestureHandling: this.gestureHandling,\r\n            tilt: this.tilt,\r\n            restriction: this.restriction,\r\n        })\r\n            .then(() => this._mapsWrapper.getNativeMap())\r\n            .then(map => this.mapReady.emit(map));\r\n        // register event listeners\r\n        this._handleMapCenterChange();\r\n        this._handleMapZoomChange();\r\n        this._handleMapMouseEvents();\r\n        this._handleBoundsChange();\r\n        this._handleMapTypeIdChange();\r\n        this._handleTilesLoadedEvent();\r\n        this._handleIdleEvent();\r\n    }\r\n    /** @internal */\r\n    ngOnDestroy() {\r\n        // unsubscribe all registered observable subscriptions\r\n        this._observableSubscriptions.forEach((s) => s.unsubscribe());\r\n        // remove all listeners from the map instance\r\n        this._mapsWrapper.clearInstanceListeners();\r\n        if (this._fitBoundsSubscription) {\r\n            this._fitBoundsSubscription.unsubscribe();\r\n        }\r\n    }\r\n    /* @internal */\r\n    ngOnChanges(changes) {\r\n        this._updateMapOptionsChanges(changes);\r\n        this._updatePosition(changes);\r\n    }\r\n    _updateMapOptionsChanges(changes) {\r\n        let options = {};\r\n        let optionKeys = Object.keys(changes).filter(k => AgmMap_1._mapOptionsAttributes.indexOf(k) !== -1);\r\n        optionKeys.forEach((k) => { options[k] = changes[k].currentValue; });\r\n        this._mapsWrapper.setMapOptions(options);\r\n    }\r\n    /**\r\n     * Triggers a resize event on the google map instance.\r\n     * When recenter is true, the of the google map gets called with the current lat/lng values or fitBounds value to recenter the map.\r\n     * Returns a promise that gets resolved after the event was triggered.\r\n     */\r\n    triggerResize(recenter = true) {\r\n        // Note: When we would trigger the resize event and show the map in the same turn (which is a\r\n        // common case for triggering a resize event), then the resize event would not\r\n        // work (to show the map), so we trigger the event in a timeout.\r\n        return new Promise((resolve) => {\r\n            setTimeout(() => {\r\n                return this._mapsWrapper.triggerMapEvent('resize').then(() => {\r\n                    if (recenter) {\r\n                        this.fitBounds != null ? this._fitBounds() : this._setCenter();\r\n                    }\r\n                    resolve();\r\n                });\r\n            });\r\n        });\r\n    }\r\n    _updatePosition(changes) {\r\n        if (changes['latitude'] == null && changes['longitude'] == null &&\r\n            !changes['fitBounds']) {\r\n            // no position update needed\r\n            return;\r\n        }\r\n        // we prefer fitBounds in changes\r\n        if ('fitBounds' in changes) {\r\n            this._fitBounds();\r\n            return;\r\n        }\r\n        if (typeof this.latitude !== 'number' || typeof this.longitude !== 'number') {\r\n            return;\r\n        }\r\n        this._setCenter();\r\n    }\r\n    _setCenter() {\r\n        let newCenter = {\r\n            lat: this.latitude,\r\n            lng: this.longitude,\r\n        };\r\n        if (this.usePanning) {\r\n            this._mapsWrapper.panTo(newCenter);\r\n        }\r\n        else {\r\n            this._mapsWrapper.setCenter(newCenter);\r\n        }\r\n    }\r\n    _fitBounds() {\r\n        switch (this.fitBounds) {\r\n            case true:\r\n                this._subscribeToFitBoundsUpdates();\r\n                break;\r\n            case false:\r\n                if (this._fitBoundsSubscription) {\r\n                    this._fitBoundsSubscription.unsubscribe();\r\n                }\r\n                break;\r\n            default:\r\n                this._updateBounds(this.fitBounds, this.fitBoundsPadding);\r\n        }\r\n    }\r\n    _subscribeToFitBoundsUpdates() {\r\n        this._zone.runOutsideAngular(() => {\r\n            this._fitBoundsSubscription = this._fitBoundsService.getBounds$().subscribe(b => {\r\n                this._zone.run(() => this._updateBounds(b, this.fitBoundsPadding));\r\n            });\r\n        });\r\n    }\r\n    _updateBounds(bounds, padding) {\r\n        if (!bounds) {\r\n            return;\r\n        }\r\n        if (this._isLatLngBoundsLiteral(bounds) && typeof google !== 'undefined' && google && google.maps && google.maps.LatLngBounds) {\r\n            const newBounds = new google.maps.LatLngBounds();\r\n            newBounds.union(bounds);\r\n            bounds = newBounds;\r\n        }\r\n        if (this.usePanning) {\r\n            this._mapsWrapper.panToBounds(bounds, padding);\r\n            return;\r\n        }\r\n        this._mapsWrapper.fitBounds(bounds, padding);\r\n    }\r\n    _isLatLngBoundsLiteral(bounds) {\r\n        return bounds != null && bounds.extend === undefined;\r\n    }\r\n    _handleMapCenterChange() {\r\n        const s = this._mapsWrapper.subscribeToMapEvent('center_changed').subscribe(() => {\r\n            this._mapsWrapper.getCenter().then((center) => {\r\n                this.latitude = center.lat();\r\n                this.longitude = center.lng();\r\n                this.centerChange.emit({ lat: this.latitude, lng: this.longitude });\r\n            });\r\n        });\r\n        this._observableSubscriptions.push(s);\r\n    }\r\n    _handleBoundsChange() {\r\n        const s = this._mapsWrapper.subscribeToMapEvent('bounds_changed').subscribe(() => {\r\n            this._mapsWrapper.getBounds().then((bounds) => { this.boundsChange.emit(bounds); });\r\n        });\r\n        this._observableSubscriptions.push(s);\r\n    }\r\n    _handleMapTypeIdChange() {\r\n        const s = this._mapsWrapper.subscribeToMapEvent('maptypeid_changed').subscribe(() => {\r\n            this._mapsWrapper.getMapTypeId().then((mapTypeId) => { this.mapTypeIdChange.emit(mapTypeId); });\r\n        });\r\n        this._observableSubscriptions.push(s);\r\n    }\r\n    _handleMapZoomChange() {\r\n        const s = this._mapsWrapper.subscribeToMapEvent('zoom_changed').subscribe(() => {\r\n            this._mapsWrapper.getZoom().then((z) => {\r\n                this.zoom = z;\r\n                this.zoomChange.emit(z);\r\n            });\r\n        });\r\n        this._observableSubscriptions.push(s);\r\n    }\r\n    _handleIdleEvent() {\r\n        const s = this._mapsWrapper.subscribeToMapEvent('idle').subscribe(() => { this.idle.emit(void 0); });\r\n        this._observableSubscriptions.push(s);\r\n    }\r\n    _handleTilesLoadedEvent() {\r\n        const s = this._mapsWrapper.subscribeToMapEvent('tilesloaded').subscribe(() => this.tilesLoaded.emit(void 0));\r\n        this._observableSubscriptions.push(s);\r\n    }\r\n    _handleMapMouseEvents() {\r\n        const events = [\r\n            { name: 'click', emitter: this.mapClick },\r\n            { name: 'rightclick', emitter: this.mapRightClick },\r\n            { name: 'dblclick', emitter: this.mapDblClick },\r\n        ];\r\n        events.forEach((e) => {\r\n            const s = this._mapsWrapper.subscribeToMapEvent(e.name).subscribe((event) => {\r\n                let value = {\r\n                    coords: {\r\n                        lat: event.latLng.lat(),\r\n                        lng: event.latLng.lng(),\r\n                    },\r\n                    placeId: event.placeId,\r\n                };\r\n                // the placeId will be undefined in case the event was not an IconMouseEvent (google types)\r\n                if (value.placeId && !this.showDefaultInfoWindow) {\r\n                    event.stop();\r\n                }\r\n                e.emitter.emit(value);\r\n            });\r\n            this._observableSubscriptions.push(s);\r\n        });\r\n    }\r\n};\r\n/**\r\n * Map option attributes that can change over time\r\n */\r\nAgmMap._mapOptionsAttributes = [\r\n    'disableDoubleClickZoom', 'scrollwheel', 'draggable', 'draggableCursor', 'draggingCursor',\r\n    'keyboardShortcuts', 'zoomControl', 'zoomControlOptions', 'styles', 'streetViewControl',\r\n    'streetViewControlOptions', 'zoom', 'mapTypeControl', 'mapTypeControlOptions', 'minZoom',\r\n    'maxZoom', 'panControl', 'panControlOptions', 'rotateControl', 'rotateControlOptions',\r\n    'fullscreenControl', 'fullscreenControlOptions', 'scaleControl', 'scaleControlOptions',\r\n    'mapTypeId', 'clickableIcons', 'gestureHandling', 'tilt', 'restriction',\r\n];\r\nAgmMap.ctorParameters = () => [\r\n    { type: ElementRef },\r\n    { type: GoogleMapsAPIWrapper },\r\n    { type: Object, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] },\r\n    { type: FitBoundsService },\r\n    { type: NgZone }\r\n];\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Object)\r\n], AgmMap.prototype, \"longitude\", void 0);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Object)\r\n], AgmMap.prototype, \"latitude\", void 0);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Object)\r\n], AgmMap.prototype, \"zoom\", void 0);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Number)\r\n], AgmMap.prototype, \"minZoom\", void 0);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Number)\r\n], AgmMap.prototype, \"maxZoom\", void 0);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Number)\r\n], AgmMap.prototype, \"controlSize\", void 0);\r\n__decorate([\r\n    Input('mapDraggable'),\r\n    __metadata(\"design:type\", Object)\r\n], AgmMap.prototype, \"draggable\", void 0);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Object)\r\n], AgmMap.prototype, \"disableDoubleClickZoom\", void 0);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Object)\r\n], AgmMap.prototype, \"disableDefaultUI\", void 0);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Object)\r\n], AgmMap.prototype, \"scrollwheel\", void 0);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", String)\r\n], AgmMap.prototype, \"backgroundColor\", void 0);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", String)\r\n], AgmMap.prototype, \"draggableCursor\", void 0);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", String)\r\n], AgmMap.prototype, \"draggingCursor\", void 0);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Object)\r\n], AgmMap.prototype, \"keyboardShortcuts\", void 0);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Boolean)\r\n], AgmMap.prototype, \"zoomControl\", void 0);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Object)\r\n], AgmMap.prototype, \"zoomControlOptions\", void 0);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Array)\r\n], AgmMap.prototype, \"styles\", void 0);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Object)\r\n], AgmMap.prototype, \"usePanning\", void 0);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Boolean)\r\n], AgmMap.prototype, \"streetViewControl\", void 0);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Object)\r\n], AgmMap.prototype, \"streetViewControlOptions\", void 0);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Object)\r\n], AgmMap.prototype, \"fitBounds\", void 0);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Object)\r\n], AgmMap.prototype, \"fitBoundsPadding\", void 0);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Object)\r\n], AgmMap.prototype, \"scaleControl\", void 0);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Object)\r\n], AgmMap.prototype, \"scaleControlOptions\", void 0);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Object)\r\n], AgmMap.prototype, \"mapTypeControl\", void 0);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Object)\r\n], AgmMap.prototype, \"mapTypeControlOptions\", void 0);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Object)\r\n], AgmMap.prototype, \"panControl\", void 0);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Object)\r\n], AgmMap.prototype, \"panControlOptions\", void 0);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Object)\r\n], AgmMap.prototype, \"rotateControl\", void 0);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Object)\r\n], AgmMap.prototype, \"rotateControlOptions\", void 0);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Object)\r\n], AgmMap.prototype, \"fullscreenControl\", void 0);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Object)\r\n], AgmMap.prototype, \"fullscreenControlOptions\", void 0);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", String)\r\n], AgmMap.prototype, \"mapTypeId\", void 0);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Object)\r\n], AgmMap.prototype, \"clickableIcons\", void 0);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Object)\r\n], AgmMap.prototype, \"showDefaultInfoWindow\", void 0);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", String)\r\n], AgmMap.prototype, \"gestureHandling\", void 0);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Object)\r\n], AgmMap.prototype, \"tilt\", void 0);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Object)\r\n], AgmMap.prototype, \"restriction\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], AgmMap.prototype, \"mapClick\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], AgmMap.prototype, \"mapRightClick\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], AgmMap.prototype, \"mapDblClick\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], AgmMap.prototype, \"centerChange\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], AgmMap.prototype, \"boundsChange\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], AgmMap.prototype, \"mapTypeIdChange\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], AgmMap.prototype, \"idle\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], AgmMap.prototype, \"zoomChange\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], AgmMap.prototype, \"mapReady\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], AgmMap.prototype, \"tilesLoaded\", void 0);\r\nAgmMap = AgmMap_1 = __decorate([\r\n    Component({\r\n        selector: 'agm-map',\r\n        providers: [\r\n            CircleManager,\r\n            DataLayerManager,\r\n            DataLayerManager,\r\n            FitBoundsService,\r\n            GoogleMapsAPIWrapper,\r\n            InfoWindowManager,\r\n            KmlLayerManager,\r\n            LayerManager,\r\n            MarkerManager,\r\n            PolygonManager,\r\n            PolylineManager,\r\n            RectangleManager,\r\n        ],\r\n        host: {\r\n            // todo: deprecated - we will remove it with the next version\r\n            '[class.sebm-google-map-container]': 'true',\r\n        },\r\n        template: `\r\n              <div class='agm-map-container-inner sebm-google-map-container-inner'></div>\r\n              <div class='agm-map-content'>\r\n                <ng-content></ng-content>\r\n              </div>\r\n  `,\r\n        styles: [`\r\n    .agm-map-container-inner {\r\n      width: inherit;\r\n      height: inherit;\r\n    }\r\n    .agm-map-content {\r\n      display:none;\r\n    }\r\n  `]\r\n    }),\r\n    __param(2, Inject(PLATFORM_ID)),\r\n    __metadata(\"design:paramtypes\", [ElementRef,\r\n        GoogleMapsAPIWrapper,\r\n        Object,\r\n        FitBoundsService,\r\n        NgZone])\r\n], AgmMap);\r\n\r\nvar AgmMarker_1;\r\nlet markerId = 0;\r\n/**\r\n * AgmMarker renders a map marker inside a {@link AgmMap}.\r\n *\r\n * ### Example\r\n * ```typescript\r\n * import { Component } from '@angular/core';\r\n *\r\n * @Component({\r\n *  selector: 'my-map-cmp',\r\n *  styles: [`\r\n *    .agm-map-container {\r\n *      height: 300px;\r\n *    }\r\n * `],\r\n *  template: `\r\n *    <agm-map [latitude]=\"lat\" [longitude]=\"lng\" [zoom]=\"zoom\">\r\n *      <agm-marker [latitude]=\"lat\" [longitude]=\"lng\" [label]=\"'M'\">\r\n *      </agm-marker>\r\n *    </agm-map>\r\n *  `\r\n * })\r\n * ```\r\n */\r\nlet AgmMarker = AgmMarker_1 = class AgmMarker {\r\n    constructor(_markerManager) {\r\n        this._markerManager = _markerManager;\r\n        /**\r\n         * If true, the marker can be dragged. Default value is false.\r\n         */\r\n        // tslint:disable-next-line:no-input-rename\r\n        this.draggable = false;\r\n        /**\r\n         * If true, the marker is visible\r\n         */\r\n        this.visible = true;\r\n        /**\r\n         * Whether to automatically open the child info window when the marker is clicked.\r\n         */\r\n        this.openInfoWindow = true;\r\n        /**\r\n         * The marker's opacity between 0.0 and 1.0.\r\n         */\r\n        this.opacity = 1;\r\n        /**\r\n         * All markers are displayed on the map in order of their zIndex, with higher values displaying in\r\n         * front of markers with lower values. By default, markers are displayed according to their\r\n         * vertical position on screen, with lower markers appearing in front of markers further up the\r\n         * screen.\r\n         */\r\n        this.zIndex = 1;\r\n        /**\r\n         * If true, the marker can be clicked. Default value is true.\r\n         */\r\n        // tslint:disable-next-line:no-input-rename\r\n        this.clickable = true;\r\n        /**\r\n         * This event is fired when the marker's animation property changes.\r\n         *\r\n         * @memberof AgmMarker\r\n         */\r\n        this.animationChange = new EventEmitter();\r\n        /**\r\n         * This event emitter gets emitted when the user clicks on the marker.\r\n         */\r\n        this.markerClick = new EventEmitter();\r\n        /**\r\n         * This event emitter gets emitted when the user clicks twice on the marker.\r\n         */\r\n        this.markerDblClick = new EventEmitter();\r\n        /**\r\n         * This event is fired when the user rightclicks on the marker.\r\n         */\r\n        this.markerRightClick = new EventEmitter();\r\n        /**\r\n         * This event is fired when the user starts dragging the marker.\r\n         */\r\n        this.dragStart = new EventEmitter();\r\n        /**\r\n         * This event is repeatedly fired while the user drags the marker.\r\n         */\r\n        this.drag = new EventEmitter();\r\n        /**\r\n         * This event is fired when the user stops dragging the marker.\r\n         */\r\n        this.dragEnd = new EventEmitter();\r\n        /**\r\n         * This event is fired when the user mouses over the marker.\r\n         */\r\n        this.mouseOver = new EventEmitter();\r\n        /**\r\n         * This event is fired when the user mouses outside the marker.\r\n         */\r\n        this.mouseOut = new EventEmitter();\r\n        /** @internal */\r\n        this.infoWindow = new QueryList();\r\n        this._markerAddedToManger = false;\r\n        this._observableSubscriptions = [];\r\n        this._fitBoundsDetails$ = new ReplaySubject(1);\r\n        this._id = (markerId++).toString();\r\n    }\r\n    /* @internal */\r\n    ngAfterContentInit() {\r\n        this.handleInfoWindowUpdate();\r\n        this.infoWindow.changes.subscribe(() => this.handleInfoWindowUpdate());\r\n    }\r\n    handleInfoWindowUpdate() {\r\n        if (this.infoWindow.length > 1) {\r\n            throw new Error('Expected no more than one info window.');\r\n        }\r\n        this.infoWindow.forEach(marker => {\r\n            marker.hostMarker = this;\r\n        });\r\n    }\r\n    /** @internal */\r\n    ngOnChanges(changes) {\r\n        if (typeof this.latitude === 'string') {\r\n            this.latitude = Number(this.latitude);\r\n        }\r\n        if (typeof this.longitude === 'string') {\r\n            this.longitude = Number(this.longitude);\r\n        }\r\n        if (typeof this.latitude !== 'number' || typeof this.longitude !== 'number') {\r\n            return;\r\n        }\r\n        if (!this._markerAddedToManger) {\r\n            this._markerManager.addMarker(this);\r\n            this._updateFitBoundsDetails();\r\n            this._markerAddedToManger = true;\r\n            this._addEventListeners();\r\n            return;\r\n        }\r\n        if (changes['latitude'] || changes['longitude']) {\r\n            this._markerManager.updateMarkerPosition(this);\r\n            this._updateFitBoundsDetails();\r\n        }\r\n        if (changes['title']) {\r\n            this._markerManager.updateTitle(this);\r\n        }\r\n        if (changes['label']) {\r\n            this._markerManager.updateLabel(this);\r\n        }\r\n        if (changes['draggable']) {\r\n            this._markerManager.updateDraggable(this);\r\n        }\r\n        if (changes['iconUrl']) {\r\n            this._markerManager.updateIcon(this);\r\n        }\r\n        if (changes['opacity']) {\r\n            this._markerManager.updateOpacity(this);\r\n        }\r\n        if (changes['visible']) {\r\n            this._markerManager.updateVisible(this);\r\n        }\r\n        if (changes['zIndex']) {\r\n            this._markerManager.updateZIndex(this);\r\n        }\r\n        if (changes['clickable']) {\r\n            this._markerManager.updateClickable(this);\r\n        }\r\n        if (changes['animation']) {\r\n            this._markerManager.updateAnimation(this);\r\n        }\r\n    }\r\n    /** @internal */\r\n    getFitBoundsDetails$() {\r\n        return this._fitBoundsDetails$.asObservable();\r\n    }\r\n    _updateFitBoundsDetails() {\r\n        this._fitBoundsDetails$.next({ latLng: { lat: this.latitude, lng: this.longitude } });\r\n    }\r\n    _addEventListeners() {\r\n        const cs = this._markerManager.createEventObservable('click', this).subscribe(() => {\r\n            if (this.openInfoWindow) {\r\n                this.infoWindow.forEach(infoWindow => infoWindow.open());\r\n            }\r\n            this.markerClick.emit(this);\r\n        });\r\n        this._observableSubscriptions.push(cs);\r\n        const dcs = this._markerManager.createEventObservable('dblclick', this).subscribe(() => {\r\n            this.markerDblClick.emit(null);\r\n        });\r\n        this._observableSubscriptions.push(dcs);\r\n        const rc = this._markerManager.createEventObservable('rightclick', this).subscribe(() => {\r\n            this.markerRightClick.emit(null);\r\n        });\r\n        this._observableSubscriptions.push(rc);\r\n        const ds = this._markerManager.createEventObservable('dragstart', this)\r\n            .subscribe((e) => {\r\n            this.dragStart.emit({ coords: { lat: e.latLng.lat(), lng: e.latLng.lng() } });\r\n        });\r\n        this._observableSubscriptions.push(ds);\r\n        const d = this._markerManager.createEventObservable('drag', this)\r\n            .subscribe((e) => {\r\n            this.drag.emit({ coords: { lat: e.latLng.lat(), lng: e.latLng.lng() } });\r\n        });\r\n        this._observableSubscriptions.push(d);\r\n        const de = this._markerManager.createEventObservable('dragend', this)\r\n            .subscribe((e) => {\r\n            this.dragEnd.emit({ coords: { lat: e.latLng.lat(), lng: e.latLng.lng() } });\r\n        });\r\n        this._observableSubscriptions.push(de);\r\n        const mover = this._markerManager.createEventObservable('mouseover', this)\r\n            .subscribe((e) => {\r\n            this.mouseOver.emit({ coords: { lat: e.latLng.lat(), lng: e.latLng.lng() } });\r\n        });\r\n        this._observableSubscriptions.push(mover);\r\n        const mout = this._markerManager.createEventObservable('mouseout', this)\r\n            .subscribe((e) => {\r\n            this.mouseOut.emit({ coords: { lat: e.latLng.lat(), lng: e.latLng.lng() } });\r\n        });\r\n        this._observableSubscriptions.push(mout);\r\n        const anChng = this._markerManager.createEventObservable('animation_changed', this)\r\n            .subscribe(() => {\r\n            this.animationChange.emit(this.animation);\r\n        });\r\n        this._observableSubscriptions.push(anChng);\r\n    }\r\n    /** @internal */\r\n    id() { return this._id; }\r\n    /** @internal */\r\n    toString() { return 'AgmMarker-' + this._id.toString(); }\r\n    /** @internal */\r\n    ngOnDestroy() {\r\n        this._markerManager.deleteMarker(this);\r\n        // unsubscribe all registered observable subscriptions\r\n        this._observableSubscriptions.forEach((s) => s.unsubscribe());\r\n    }\r\n};\r\nAgmMarker.ctorParameters = () => [\r\n    { type: MarkerManager }\r\n];\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Number)\r\n], AgmMarker.prototype, \"latitude\", void 0);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Number)\r\n], AgmMarker.prototype, \"longitude\", void 0);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", String)\r\n], AgmMarker.prototype, \"title\", void 0);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Object)\r\n], AgmMarker.prototype, \"label\", void 0);\r\n__decorate([\r\n    Input('markerDraggable'),\r\n    __metadata(\"design:type\", Object)\r\n], AgmMarker.prototype, \"draggable\", void 0);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", String)\r\n], AgmMarker.prototype, \"iconUrl\", void 0);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Object)\r\n], AgmMarker.prototype, \"visible\", void 0);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Object)\r\n], AgmMarker.prototype, \"openInfoWindow\", void 0);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Object)\r\n], AgmMarker.prototype, \"opacity\", void 0);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Object)\r\n], AgmMarker.prototype, \"zIndex\", void 0);\r\n__decorate([\r\n    Input('markerClickable'),\r\n    __metadata(\"design:type\", Object)\r\n], AgmMarker.prototype, \"clickable\", void 0);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", String)\r\n], AgmMarker.prototype, \"animation\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", Object)\r\n], AgmMarker.prototype, \"animationChange\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], AgmMarker.prototype, \"markerClick\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], AgmMarker.prototype, \"markerDblClick\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], AgmMarker.prototype, \"markerRightClick\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], AgmMarker.prototype, \"dragStart\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], AgmMarker.prototype, \"drag\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], AgmMarker.prototype, \"dragEnd\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], AgmMarker.prototype, \"mouseOver\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], AgmMarker.prototype, \"mouseOut\", void 0);\r\n__decorate([\r\n    ContentChildren(AgmInfoWindow),\r\n    __metadata(\"design:type\", QueryList)\r\n], AgmMarker.prototype, \"infoWindow\", void 0);\r\nAgmMarker = AgmMarker_1 = __decorate([\r\n    Directive({\r\n        selector: 'agm-marker',\r\n        providers: [\r\n            { provide: FitBoundsAccessor, useExisting: forwardRef(() => AgmMarker_1) },\r\n        ],\r\n        inputs: [\r\n            'latitude', 'longitude', 'title', 'label', 'draggable: markerDraggable', 'iconUrl',\r\n            'openInfoWindow', 'opacity', 'visible', 'zIndex', 'animation',\r\n        ],\r\n        outputs: ['markerClick', 'dragStart', 'drag', 'dragEnd', 'mouseOver', 'mouseOut'],\r\n    }),\r\n    __metadata(\"design:paramtypes\", [MarkerManager])\r\n], AgmMarker);\r\n\r\nvar AgmPolygon_1;\r\n/**\r\n * AgmPolygon renders a polygon on a {@link AgmMap}\r\n *\r\n * ### Example\r\n * ```typescript\r\n * import { Component } from '@angular/core';\r\n *\r\n * @Component({\r\n *  selector: 'my-map-cmp',\r\n *  styles: [`\r\n *    agm-map {\r\n *      height: 300px;\r\n *    }\r\n * `],\r\n *  template: `\r\n *    <agm-map [latitude]=\"lat\" [longitude]=\"lng\" [zoom]=\"zoom\">\r\n *      <agm-polygon [paths]=\"paths\">\r\n *      </agm-polygon>\r\n *    </agm-map>\r\n *  `\r\n * })\r\n * export class MyMapCmp {\r\n *   lat: number = 0;\r\n *   lng: number = 0;\r\n *   zoom: number = 10;\r\n *   paths: Array<LatLngLiteral> = [\r\n *     { lat: 0,  lng: 10 },\r\n *     { lat: 0,  lng: 20 },\r\n *     { lat: 10, lng: 20 },\r\n *     { lat: 10, lng: 10 },\r\n *     { lat: 0,  lng: 10 }\r\n *   ]\r\n *   // Nesting paths will create a hole where they overlap;\r\n *   nestedPaths: Array<Array<LatLngLiteral>> = [[\r\n *     { lat: 0,  lng: 10 },\r\n *     { lat: 0,  lng: 20 },\r\n *     { lat: 10, lng: 20 },\r\n *     { lat: 10, lng: 10 },\r\n *     { lat: 0,  lng: 10 }\r\n *   ], [\r\n *     { lat: 0, lng: 15 },\r\n *     { lat: 0, lng: 20 },\r\n *     { lat: 5, lng: 20 },\r\n *     { lat: 5, lng: 15 },\r\n *     { lat: 0, lng: 15 }\r\n *   ]]\r\n * }\r\n * ```\r\n */\r\nlet AgmPolygon = AgmPolygon_1 = class AgmPolygon {\r\n    constructor(_polygonManager) {\r\n        this._polygonManager = _polygonManager;\r\n        /**\r\n         * Indicates whether this Polygon handles mouse events. Defaults to true.\r\n         */\r\n        this.clickable = true;\r\n        /**\r\n         * If set to true, the user can drag this shape over the map. The geodesic\r\n         * property defines the mode of dragging. Defaults to false.\r\n         */\r\n        // tslint:disable-next-line:no-input-rename\r\n        this.draggable = false;\r\n        /**\r\n         * If set to true, the user can edit this shape by dragging the control\r\n         * points shown at the vertices and on each segment. Defaults to false.\r\n         */\r\n        this.editable = false;\r\n        /**\r\n         * When true, edges of the polygon are interpreted as geodesic and will\r\n         * follow the curvature of the Earth. When false, edges of the polygon are\r\n         * rendered as straight lines in screen space. Note that the shape of a\r\n         * geodesic polygon may appear to change when dragged, as the dimensions\r\n         * are maintained relative to the surface of the earth. Defaults to false.\r\n         */\r\n        this.geodesic = false;\r\n        /**\r\n         * The ordered sequence of coordinates that designates a closed loop.\r\n         * Unlike polylines, a polygon may consist of one or more paths.\r\n         *  As a result, the paths property may specify one or more arrays of\r\n         * LatLng coordinates. Paths are closed automatically; do not repeat the\r\n         * first vertex of the path as the last vertex. Simple polygons may be\r\n         * defined using a single array of LatLngs. More complex polygons may\r\n         * specify an array of arrays. Any simple arrays are converted into Arrays.\r\n         * Inserting or removing LatLngs from the Array will automatically update\r\n         * the polygon on the map.\r\n         */\r\n        this.paths = [];\r\n        /**\r\n         * This event is fired when the DOM click event is fired on the Polygon.\r\n         */\r\n        this.polyClick = new EventEmitter();\r\n        /**\r\n         * This event is fired when the DOM dblclick event is fired on the Polygon.\r\n         */\r\n        this.polyDblClick = new EventEmitter();\r\n        /**\r\n         * This event is repeatedly fired while the user drags the polygon.\r\n         */\r\n        this.polyDrag = new EventEmitter();\r\n        /**\r\n         * This event is fired when the user stops dragging the polygon.\r\n         */\r\n        this.polyDragEnd = new EventEmitter();\r\n        /**\r\n         * This event is fired when the user starts dragging the polygon.\r\n         */\r\n        this.polyDragStart = new EventEmitter();\r\n        /**\r\n         * This event is fired when the DOM mousedown event is fired on the Polygon.\r\n         */\r\n        this.polyMouseDown = new EventEmitter();\r\n        /**\r\n         * This event is fired when the DOM mousemove event is fired on the Polygon.\r\n         */\r\n        this.polyMouseMove = new EventEmitter();\r\n        /**\r\n         * This event is fired on Polygon mouseout.\r\n         */\r\n        this.polyMouseOut = new EventEmitter();\r\n        /**\r\n         * This event is fired on Polygon mouseover.\r\n         */\r\n        this.polyMouseOver = new EventEmitter();\r\n        /**\r\n         * This event is fired whe the DOM mouseup event is fired on the Polygon\r\n         */\r\n        this.polyMouseUp = new EventEmitter();\r\n        /**\r\n         * This event is fired when the Polygon is right-clicked on.\r\n         */\r\n        this.polyRightClick = new EventEmitter();\r\n        /**\r\n         * This event is fired after Polygon first path changes.\r\n         */\r\n        this.polyPathsChange = new EventEmitter();\r\n        this._polygonAddedToManager = false;\r\n        this._subscriptions = [];\r\n    }\r\n    /** @internal */\r\n    ngAfterContentInit() {\r\n        if (!this._polygonAddedToManager) {\r\n            this._init();\r\n        }\r\n    }\r\n    ngOnChanges(changes) {\r\n        if (!this._polygonAddedToManager) {\r\n            this._init();\r\n            return;\r\n        }\r\n        this._polygonManager.setPolygonOptions(this, this._updatePolygonOptions(changes));\r\n    }\r\n    _init() {\r\n        this._polygonManager.addPolygon(this);\r\n        this._polygonAddedToManager = true;\r\n        this._addEventListeners();\r\n    }\r\n    _addEventListeners() {\r\n        const handlers = [\r\n            { name: 'click', handler: (ev) => this.polyClick.emit(ev) },\r\n            { name: 'dblclick', handler: (ev) => this.polyDblClick.emit(ev) },\r\n            { name: 'drag', handler: (ev) => this.polyDrag.emit(ev) },\r\n            { name: 'dragend', handler: (ev) => this.polyDragEnd.emit(ev) },\r\n            { name: 'dragstart', handler: (ev) => this.polyDragStart.emit(ev) },\r\n            { name: 'mousedown', handler: (ev) => this.polyMouseDown.emit(ev) },\r\n            { name: 'mousemove', handler: (ev) => this.polyMouseMove.emit(ev) },\r\n            { name: 'mouseout', handler: (ev) => this.polyMouseOut.emit(ev) },\r\n            { name: 'mouseover', handler: (ev) => this.polyMouseOver.emit(ev) },\r\n            { name: 'mouseup', handler: (ev) => this.polyMouseUp.emit(ev) },\r\n            { name: 'rightclick', handler: (ev) => this.polyRightClick.emit(ev) },\r\n        ];\r\n        handlers.forEach((obj) => {\r\n            const os = this._polygonManager.createEventObservable(obj.name, this).subscribe(obj.handler);\r\n            this._subscriptions.push(os);\r\n        });\r\n        this._polygonManager.createPathEventObservable(this)\r\n            .then(paths$ => {\r\n            const os = paths$.subscribe(pathEvent => this.polyPathsChange.emit(pathEvent));\r\n            this._subscriptions.push(os);\r\n        });\r\n    }\r\n    _updatePolygonOptions(changes) {\r\n        return Object.keys(changes)\r\n            .filter(k => AgmPolygon_1._polygonOptionsAttributes.indexOf(k) !== -1)\r\n            .reduce((obj, k) => {\r\n            obj[k] = changes[k].currentValue;\r\n            return obj;\r\n        }, {});\r\n    }\r\n    /** @internal */\r\n    id() { return this._id; }\r\n    /** @internal */\r\n    ngOnDestroy() {\r\n        this._polygonManager.deletePolygon(this);\r\n        // unsubscribe all registered observable subscriptions\r\n        this._subscriptions.forEach((s) => s.unsubscribe());\r\n    }\r\n    getPath() {\r\n        return this._polygonManager.getPath(this);\r\n    }\r\n    getPaths() {\r\n        return this._polygonManager.getPaths(this);\r\n    }\r\n};\r\nAgmPolygon._polygonOptionsAttributes = [\r\n    'clickable', 'draggable', 'editable', 'fillColor', 'fillOpacity', 'geodesic', 'icon', 'map',\r\n    'paths', 'strokeColor', 'strokeOpacity', 'strokeWeight', 'visible', 'zIndex', 'draggable',\r\n    'editable', 'visible',\r\n];\r\nAgmPolygon.ctorParameters = () => [\r\n    { type: PolygonManager }\r\n];\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Object)\r\n], AgmPolygon.prototype, \"clickable\", void 0);\r\n__decorate([\r\n    Input('polyDraggable'),\r\n    __metadata(\"design:type\", Object)\r\n], AgmPolygon.prototype, \"draggable\", void 0);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Object)\r\n], AgmPolygon.prototype, \"editable\", void 0);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", String)\r\n], AgmPolygon.prototype, \"fillColor\", void 0);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Number)\r\n], AgmPolygon.prototype, \"fillOpacity\", void 0);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Object)\r\n], AgmPolygon.prototype, \"geodesic\", void 0);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Array)\r\n], AgmPolygon.prototype, \"paths\", void 0);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", String)\r\n], AgmPolygon.prototype, \"strokeColor\", void 0);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Number)\r\n], AgmPolygon.prototype, \"strokeOpacity\", void 0);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Number)\r\n], AgmPolygon.prototype, \"strokeWeight\", void 0);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Boolean)\r\n], AgmPolygon.prototype, \"visible\", void 0);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Number)\r\n], AgmPolygon.prototype, \"zIndex\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], AgmPolygon.prototype, \"polyClick\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], AgmPolygon.prototype, \"polyDblClick\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], AgmPolygon.prototype, \"polyDrag\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], AgmPolygon.prototype, \"polyDragEnd\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], AgmPolygon.prototype, \"polyDragStart\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], AgmPolygon.prototype, \"polyMouseDown\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], AgmPolygon.prototype, \"polyMouseMove\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], AgmPolygon.prototype, \"polyMouseOut\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], AgmPolygon.prototype, \"polyMouseOver\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], AgmPolygon.prototype, \"polyMouseUp\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], AgmPolygon.prototype, \"polyRightClick\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", Object)\r\n], AgmPolygon.prototype, \"polyPathsChange\", void 0);\r\nAgmPolygon = AgmPolygon_1 = __decorate([\r\n    Directive({\r\n        selector: 'agm-polygon',\r\n    }),\r\n    __metadata(\"design:paramtypes\", [PolygonManager])\r\n], AgmPolygon);\r\n\r\n/**\r\n * AgmPolylineIcon enables to add polyline sequences to add arrows, circle,\r\n * or custom icons either along the entire line, or in a specific part of it.\r\n * See https://developers.google.com/maps/documentation/javascript/shapes#polyline_customize\r\n *\r\n * ### Example\r\n * ```html\r\n *    <agm-map [latitude]=\"lat\" [longitude]=\"lng\" [zoom]=\"zoom\">\r\n *      <agm-polyline>\r\n *          <agm-icon-sequence [fixedRotation]=\"true\" [path]=\"'FORWARD_OPEN_ARROW'\">\r\n *          </agm-icon-sequence>\r\n *      </agm-polyline>\r\n *    </agm-map>\r\n * ```\r\n *\r\n * @export\r\n * @class AgmPolylineIcon\r\n */\r\nlet AgmPolylineIcon = class AgmPolylineIcon {\r\n    ngOnInit() {\r\n        if (this.path == null) {\r\n            throw new Error('Icon Sequence path is required');\r\n        }\r\n    }\r\n};\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Boolean)\r\n], AgmPolylineIcon.prototype, \"fixedRotation\", void 0);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", String)\r\n], AgmPolylineIcon.prototype, \"offset\", void 0);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", String)\r\n], AgmPolylineIcon.prototype, \"repeat\", void 0);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Number)\r\n], AgmPolylineIcon.prototype, \"anchorX\", void 0);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Number)\r\n], AgmPolylineIcon.prototype, \"anchorY\", void 0);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", String)\r\n], AgmPolylineIcon.prototype, \"fillColor\", void 0);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Number)\r\n], AgmPolylineIcon.prototype, \"fillOpacity\", void 0);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", String)\r\n], AgmPolylineIcon.prototype, \"path\", void 0);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Number)\r\n], AgmPolylineIcon.prototype, \"rotation\", void 0);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Number)\r\n], AgmPolylineIcon.prototype, \"scale\", void 0);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", String)\r\n], AgmPolylineIcon.prototype, \"strokeColor\", void 0);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Number)\r\n], AgmPolylineIcon.prototype, \"strokeOpacity\", void 0);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Number)\r\n], AgmPolylineIcon.prototype, \"strokeWeight\", void 0);\r\nAgmPolylineIcon = __decorate([\r\n    Directive({ selector: 'agm-polyline agm-icon-sequence' })\r\n], AgmPolylineIcon);\r\n\r\nvar AgmPolylinePoint_1;\r\n/**\r\n * AgmPolylinePoint represents one element of a polyline within a  {@link\r\n * AgmPolyline}\r\n */\r\nlet AgmPolylinePoint = AgmPolylinePoint_1 = class AgmPolylinePoint {\r\n    constructor() {\r\n        /**\r\n         * This event emitter gets emitted when the position of the point changed.\r\n         */\r\n        this.positionChanged = new EventEmitter();\r\n    }\r\n    ngOnChanges(changes) {\r\n        if (changes['latitude'] || changes['longitude']) {\r\n            const position = {\r\n                lat: changes['latitude'] ? changes['latitude'].currentValue : this.latitude,\r\n                lng: changes['longitude'] ? changes['longitude'].currentValue : this.longitude,\r\n            };\r\n            this.positionChanged.emit(position);\r\n        }\r\n    }\r\n    /** @internal */\r\n    getFitBoundsDetails$() {\r\n        return this.positionChanged.pipe(startWith({ lat: this.latitude, lng: this.longitude }), map(position => ({ latLng: position })));\r\n    }\r\n};\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Number)\r\n], AgmPolylinePoint.prototype, \"latitude\", void 0);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Number)\r\n], AgmPolylinePoint.prototype, \"longitude\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], AgmPolylinePoint.prototype, \"positionChanged\", void 0);\r\nAgmPolylinePoint = AgmPolylinePoint_1 = __decorate([\r\n    Directive({\r\n        selector: 'agm-polyline-point',\r\n        providers: [\r\n            { provide: FitBoundsAccessor, useExisting: forwardRef(() => AgmPolylinePoint_1) },\r\n        ],\r\n    }),\r\n    __metadata(\"design:paramtypes\", [])\r\n], AgmPolylinePoint);\r\n\r\nvar AgmPolyline_1;\r\nlet polylineId = 0;\r\n/**\r\n * AgmPolyline renders a polyline on a {@link AgmMap}\r\n *\r\n * ### Example\r\n * ```typescript\r\n * import { Component } from '@angular/core';\r\n *\r\n * @Component({\r\n *  selector: 'my-map-cmp',\r\n *  styles: [`\r\n *    .agm-map-container {\r\n *      height: 300px;\r\n *    }\r\n * `],\r\n *  template: `\r\n *    <agm-map [latitude]=\"lat\" [longitude]=\"lng\" [zoom]=\"zoom\">\r\n *      <agm-polyline>\r\n *          <agm-polyline-point [latitude]=\"latA\" [longitude]=\"lngA\">\r\n *          </agm-polyline-point>\r\n *          <agm-polyline-point [latitude]=\"latB\" [longitude]=\"lngB\">\r\n *          </agm-polyline-point>\r\n *      </agm-polyline>\r\n *    </agm-map>\r\n *  `\r\n * })\r\n * ```\r\n */\r\nlet AgmPolyline = AgmPolyline_1 = class AgmPolyline {\r\n    constructor(_polylineManager) {\r\n        this._polylineManager = _polylineManager;\r\n        /**\r\n         * Indicates whether this Polyline handles mouse events. Defaults to true.\r\n         */\r\n        this.clickable = true;\r\n        /**\r\n         * If set to true, the user can drag this shape over the map. The geodesic property defines the\r\n         * mode of dragging. Defaults to false.\r\n         */\r\n        // tslint:disable-next-line:no-input-rename\r\n        this.draggable = false;\r\n        /**\r\n         * If set to true, the user can edit this shape by dragging the control points shown at the\r\n         * vertices and on each segment. Defaults to false.\r\n         */\r\n        this.editable = false;\r\n        /**\r\n         * When true, edges of the polygon are interpreted as geodesic and will follow the curvature of\r\n         * the Earth. When false, edges of the polygon are rendered as straight lines in screen space.\r\n         * Note that the shape of a geodesic polygon may appear to change when dragged, as the dimensions\r\n         * are maintained relative to the surface of the earth. Defaults to false.\r\n         */\r\n        this.geodesic = false;\r\n        /**\r\n         * Whether this polyline is visible on the map. Defaults to true.\r\n         */\r\n        this.visible = true;\r\n        /**\r\n         * This event is fired when the DOM click event is fired on the Polyline.\r\n         */\r\n        this.lineClick = new EventEmitter();\r\n        /**\r\n         * This event is fired when the DOM dblclick event is fired on the Polyline.\r\n         */\r\n        this.lineDblClick = new EventEmitter();\r\n        /**\r\n         * This event is repeatedly fired while the user drags the polyline.\r\n         */\r\n        this.lineDrag = new EventEmitter();\r\n        /**\r\n         * This event is fired when the user stops dragging the polyline.\r\n         */\r\n        this.lineDragEnd = new EventEmitter();\r\n        /**\r\n         * This event is fired when the user starts dragging the polyline.\r\n         */\r\n        this.lineDragStart = new EventEmitter();\r\n        /**\r\n         * This event is fired when the DOM mousedown event is fired on the Polyline.\r\n         */\r\n        this.lineMouseDown = new EventEmitter();\r\n        /**\r\n         * This event is fired when the DOM mousemove event is fired on the Polyline.\r\n         */\r\n        this.lineMouseMove = new EventEmitter();\r\n        /**\r\n         * This event is fired on Polyline mouseout.\r\n         */\r\n        this.lineMouseOut = new EventEmitter();\r\n        /**\r\n         * This event is fired on Polyline mouseover.\r\n         */\r\n        this.lineMouseOver = new EventEmitter();\r\n        /**\r\n         * This event is fired whe the DOM mouseup event is fired on the Polyline\r\n         */\r\n        this.lineMouseUp = new EventEmitter();\r\n        /**\r\n         * This event is fired when the Polyline is right-clicked on.\r\n         */\r\n        this.lineRightClick = new EventEmitter();\r\n        /**\r\n         * This event is fired after Polyline's path changes.\r\n         */\r\n        this.polyPathChange = new EventEmitter();\r\n        this._polylineAddedToManager = false;\r\n        this._subscriptions = [];\r\n        this._id = (polylineId++).toString();\r\n    }\r\n    /** @internal */\r\n    ngAfterContentInit() {\r\n        if (this.points.length) {\r\n            this.points.forEach((point) => {\r\n                const s = point.positionChanged.subscribe(() => { this._polylineManager.updatePolylinePoints(this); });\r\n                this._subscriptions.push(s);\r\n            });\r\n        }\r\n        if (!this._polylineAddedToManager) {\r\n            this._init();\r\n        }\r\n        const pointSub = this.points.changes.subscribe(() => this._polylineManager.updatePolylinePoints(this));\r\n        this._subscriptions.push(pointSub);\r\n        this._polylineManager.updatePolylinePoints(this);\r\n        const iconSub = this.iconSequences.changes.subscribe(() => this._polylineManager.updateIconSequences(this));\r\n        this._subscriptions.push(iconSub);\r\n    }\r\n    ngOnChanges(changes) {\r\n        if (!this._polylineAddedToManager) {\r\n            this._init();\r\n            return;\r\n        }\r\n        let options = {};\r\n        const optionKeys = Object.keys(changes).filter(k => AgmPolyline_1._polylineOptionsAttributes.indexOf(k) !== -1);\r\n        optionKeys.forEach(k => options[k] = changes[k].currentValue);\r\n        this._polylineManager.setPolylineOptions(this, options);\r\n    }\r\n    getPath() {\r\n        return this._polylineManager.getPath(this);\r\n    }\r\n    _init() {\r\n        this._polylineManager.addPolyline(this);\r\n        this._polylineAddedToManager = true;\r\n        this._addEventListeners();\r\n    }\r\n    _addEventListeners() {\r\n        const handlers = [\r\n            { name: 'click', handler: (ev) => this.lineClick.emit(ev) },\r\n            { name: 'dblclick', handler: (ev) => this.lineDblClick.emit(ev) },\r\n            { name: 'drag', handler: (ev) => this.lineDrag.emit(ev) },\r\n            { name: 'dragend', handler: (ev) => this.lineDragEnd.emit(ev) },\r\n            { name: 'dragstart', handler: (ev) => this.lineDragStart.emit(ev) },\r\n            { name: 'mousedown', handler: (ev) => this.lineMouseDown.emit(ev) },\r\n            { name: 'mousemove', handler: (ev) => this.lineMouseMove.emit(ev) },\r\n            { name: 'mouseout', handler: (ev) => this.lineMouseOut.emit(ev) },\r\n            { name: 'mouseover', handler: (ev) => this.lineMouseOver.emit(ev) },\r\n            { name: 'mouseup', handler: (ev) => this.lineMouseUp.emit(ev) },\r\n            { name: 'rightclick', handler: (ev) => this.lineRightClick.emit(ev) },\r\n        ];\r\n        handlers.forEach((obj) => {\r\n            const os = this._polylineManager.createEventObservable(obj.name, this).subscribe(obj.handler);\r\n            this._subscriptions.push(os);\r\n        });\r\n        this._polylineManager.createPathEventObservable(this).then((ob$) => {\r\n            const os = ob$.subscribe(pathEvent => this.polyPathChange.emit(pathEvent));\r\n            this._subscriptions.push(os);\r\n        });\r\n    }\r\n    /** @internal */\r\n    _getPoints() {\r\n        if (this.points) {\r\n            return this.points.toArray();\r\n        }\r\n        return [];\r\n    }\r\n    _getIcons() {\r\n        if (this.iconSequences) {\r\n            return this.iconSequences.toArray();\r\n        }\r\n        return [];\r\n    }\r\n    /** @internal */\r\n    id() { return this._id; }\r\n    /** @internal */\r\n    ngOnDestroy() {\r\n        this._polylineManager.deletePolyline(this);\r\n        // unsubscribe all registered observable subscriptions\r\n        this._subscriptions.forEach((s) => s.unsubscribe());\r\n    }\r\n};\r\nAgmPolyline._polylineOptionsAttributes = [\r\n    'draggable', 'editable', 'visible', 'geodesic', 'strokeColor', 'strokeOpacity', 'strokeWeight',\r\n    'zIndex',\r\n];\r\nAgmPolyline.ctorParameters = () => [\r\n    { type: PolylineManager }\r\n];\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Object)\r\n], AgmPolyline.prototype, \"clickable\", void 0);\r\n__decorate([\r\n    Input('polylineDraggable'),\r\n    __metadata(\"design:type\", Object)\r\n], AgmPolyline.prototype, \"draggable\", void 0);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Object)\r\n], AgmPolyline.prototype, \"editable\", void 0);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Object)\r\n], AgmPolyline.prototype, \"geodesic\", void 0);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", String)\r\n], AgmPolyline.prototype, \"strokeColor\", void 0);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Number)\r\n], AgmPolyline.prototype, \"strokeOpacity\", void 0);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Number)\r\n], AgmPolyline.prototype, \"strokeWeight\", void 0);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Object)\r\n], AgmPolyline.prototype, \"visible\", void 0);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Number)\r\n], AgmPolyline.prototype, \"zIndex\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], AgmPolyline.prototype, \"lineClick\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], AgmPolyline.prototype, \"lineDblClick\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], AgmPolyline.prototype, \"lineDrag\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], AgmPolyline.prototype, \"lineDragEnd\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], AgmPolyline.prototype, \"lineDragStart\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], AgmPolyline.prototype, \"lineMouseDown\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], AgmPolyline.prototype, \"lineMouseMove\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], AgmPolyline.prototype, \"lineMouseOut\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], AgmPolyline.prototype, \"lineMouseOver\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], AgmPolyline.prototype, \"lineMouseUp\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], AgmPolyline.prototype, \"lineRightClick\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", Object)\r\n], AgmPolyline.prototype, \"polyPathChange\", void 0);\r\n__decorate([\r\n    ContentChildren(AgmPolylinePoint),\r\n    __metadata(\"design:type\", QueryList)\r\n], AgmPolyline.prototype, \"points\", void 0);\r\n__decorate([\r\n    ContentChildren(AgmPolylineIcon),\r\n    __metadata(\"design:type\", QueryList)\r\n], AgmPolyline.prototype, \"iconSequences\", void 0);\r\nAgmPolyline = AgmPolyline_1 = __decorate([\r\n    Directive({\r\n        selector: 'agm-polyline',\r\n    }),\r\n    __metadata(\"design:paramtypes\", [PolylineManager])\r\n], AgmPolyline);\r\n\r\nvar AgmRectangle_1;\r\nlet AgmRectangle = AgmRectangle_1 = class AgmRectangle {\r\n    constructor(_manager) {\r\n        this._manager = _manager;\r\n        /**\r\n         * Indicates whether this Rectangle handles mouse events. Defaults to true.\r\n         */\r\n        this.clickable = true;\r\n        /**\r\n         * If set to true, the user can drag this rectangle over the map. Defaults to false.\r\n         */\r\n        // tslint:disable-next-line:no-input-rename\r\n        this.draggable = false;\r\n        /**\r\n         * If set to true, the user can edit this rectangle by dragging the control points shown at\r\n         * the center and around the circumference of the rectangle. Defaults to false.\r\n         */\r\n        this.editable = false;\r\n        /**\r\n         * The stroke position. Defaults to CENTER.\r\n         * This property is not supported on Internet Explorer 8 and earlier.\r\n         */\r\n        this.strokePosition = 'CENTER';\r\n        /**\r\n         * The stroke width in pixels.\r\n         */\r\n        this.strokeWeight = 0;\r\n        /**\r\n         * Whether this rectangle is visible on the map. Defaults to true.\r\n         */\r\n        this.visible = true;\r\n        /**\r\n         * This event is fired when the rectangle's is changed.\r\n         */\r\n        this.boundsChange = new EventEmitter();\r\n        /**\r\n         * This event emitter gets emitted when the user clicks on the rectangle.\r\n         */\r\n        this.rectangleClick = new EventEmitter();\r\n        /**\r\n         * This event emitter gets emitted when the user clicks on the rectangle.\r\n         */\r\n        this.rectangleDblClick = new EventEmitter();\r\n        /**\r\n         * This event is repeatedly fired while the user drags the rectangle.\r\n         */\r\n        this.drag = new EventEmitter();\r\n        /**\r\n         * This event is fired when the user stops dragging the rectangle.\r\n         */\r\n        this.dragEnd = new EventEmitter();\r\n        /**\r\n         * This event is fired when the user starts dragging the rectangle.\r\n         */\r\n        this.dragStart = new EventEmitter();\r\n        /**\r\n         * This event is fired when the DOM mousedown event is fired on the rectangle.\r\n         */\r\n        this.mouseDown = new EventEmitter();\r\n        /**\r\n         * This event is fired when the DOM mousemove event is fired on the rectangle.\r\n         */\r\n        this.mouseMove = new EventEmitter();\r\n        /**\r\n         * This event is fired on rectangle mouseout.\r\n         */\r\n        this.mouseOut = new EventEmitter();\r\n        /**\r\n         * This event is fired on rectangle mouseover.\r\n         */\r\n        this.mouseOver = new EventEmitter();\r\n        /**\r\n         * This event is fired when the DOM mouseup event is fired on the rectangle.\r\n         */\r\n        this.mouseUp = new EventEmitter();\r\n        /**\r\n         * This event is fired when the rectangle is right-clicked on.\r\n         */\r\n        this.rightClick = new EventEmitter();\r\n        this._rectangleAddedToManager = false;\r\n        this._eventSubscriptions = [];\r\n    }\r\n    /** @internal */\r\n    ngOnInit() {\r\n        this._manager.addRectangle(this);\r\n        this._rectangleAddedToManager = true;\r\n        this._registerEventListeners();\r\n    }\r\n    /** @internal */\r\n    ngOnChanges(changes) {\r\n        if (!this._rectangleAddedToManager) {\r\n            return;\r\n        }\r\n        if (changes['north'] ||\r\n            changes['east'] ||\r\n            changes['south'] ||\r\n            changes['west']) {\r\n            this._manager.setBounds(this);\r\n        }\r\n        if (changes['editable']) {\r\n            this._manager.setEditable(this);\r\n        }\r\n        if (changes['draggable']) {\r\n            this._manager.setDraggable(this);\r\n        }\r\n        if (changes['visible']) {\r\n            this._manager.setVisible(this);\r\n        }\r\n        this._updateRectangleOptionsChanges(changes);\r\n    }\r\n    _updateRectangleOptionsChanges(changes) {\r\n        let options = {};\r\n        let optionKeys = Object.keys(changes).filter(k => AgmRectangle_1._mapOptions.indexOf(k) !== -1);\r\n        optionKeys.forEach(k => {\r\n            options[k] = changes[k].currentValue;\r\n        });\r\n        if (optionKeys.length > 0) {\r\n            this._manager.setOptions(this, options);\r\n        }\r\n    }\r\n    _registerEventListeners() {\r\n        let events = new Map();\r\n        events.set('bounds_changed', this.boundsChange);\r\n        events.set('click', this.rectangleClick);\r\n        events.set('dblclick', this.rectangleDblClick);\r\n        events.set('drag', this.drag);\r\n        events.set('dragend', this.dragEnd);\r\n        events.set('dragStart', this.dragStart);\r\n        events.set('mousedown', this.mouseDown);\r\n        events.set('mousemove', this.mouseMove);\r\n        events.set('mouseout', this.mouseOut);\r\n        events.set('mouseover', this.mouseOver);\r\n        events.set('mouseup', this.mouseUp);\r\n        events.set('rightclick', this.rightClick);\r\n        events.forEach((eventEmitter, eventName) => {\r\n            this._eventSubscriptions.push(this._manager\r\n                .createEventObservable(eventName, this)\r\n                .subscribe(value => {\r\n                switch (eventName) {\r\n                    case 'bounds_changed':\r\n                        this._manager.getBounds(this).then(bounds => eventEmitter.emit({\r\n                            north: bounds.getNorthEast().lat(),\r\n                            east: bounds.getNorthEast().lng(),\r\n                            south: bounds.getSouthWest().lat(),\r\n                            west: bounds.getSouthWest().lng(),\r\n                        }));\r\n                        break;\r\n                    default:\r\n                        eventEmitter.emit({\r\n                            coords: { lat: value.latLng.lat(), lng: value.latLng.lng() },\r\n                        });\r\n                }\r\n            }));\r\n        });\r\n    }\r\n    /** @internal */\r\n    ngOnDestroy() {\r\n        this._eventSubscriptions.forEach(function (s) {\r\n            s.unsubscribe();\r\n        });\r\n        this._eventSubscriptions = null;\r\n        this._manager.removeRectangle(this);\r\n    }\r\n    /**\r\n     * Gets the LatLngBounds of this Rectangle.\r\n     */\r\n    getBounds() {\r\n        return this._manager.getBounds(this);\r\n    }\r\n};\r\nAgmRectangle._mapOptions = [\r\n    'fillColor',\r\n    'fillOpacity',\r\n    'strokeColor',\r\n    'strokeOpacity',\r\n    'strokePosition',\r\n    'strokeWeight',\r\n    'visible',\r\n    'zIndex',\r\n    'clickable',\r\n];\r\nAgmRectangle.ctorParameters = () => [\r\n    { type: RectangleManager }\r\n];\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Number)\r\n], AgmRectangle.prototype, \"north\", void 0);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Number)\r\n], AgmRectangle.prototype, \"east\", void 0);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Number)\r\n], AgmRectangle.prototype, \"south\", void 0);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Number)\r\n], AgmRectangle.prototype, \"west\", void 0);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Object)\r\n], AgmRectangle.prototype, \"clickable\", void 0);\r\n__decorate([\r\n    Input('rectangleDraggable'),\r\n    __metadata(\"design:type\", Object)\r\n], AgmRectangle.prototype, \"draggable\", void 0);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Object)\r\n], AgmRectangle.prototype, \"editable\", void 0);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", String)\r\n], AgmRectangle.prototype, \"fillColor\", void 0);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Number)\r\n], AgmRectangle.prototype, \"fillOpacity\", void 0);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", String)\r\n], AgmRectangle.prototype, \"strokeColor\", void 0);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Number)\r\n], AgmRectangle.prototype, \"strokeOpacity\", void 0);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", String)\r\n], AgmRectangle.prototype, \"strokePosition\", void 0);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Object)\r\n], AgmRectangle.prototype, \"strokeWeight\", void 0);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Object)\r\n], AgmRectangle.prototype, \"visible\", void 0);\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Number)\r\n], AgmRectangle.prototype, \"zIndex\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], AgmRectangle.prototype, \"boundsChange\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], AgmRectangle.prototype, \"rectangleClick\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], AgmRectangle.prototype, \"rectangleDblClick\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], AgmRectangle.prototype, \"drag\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], AgmRectangle.prototype, \"dragEnd\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], AgmRectangle.prototype, \"dragStart\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], AgmRectangle.prototype, \"mouseDown\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], AgmRectangle.prototype, \"mouseMove\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], AgmRectangle.prototype, \"mouseOut\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], AgmRectangle.prototype, \"mouseOver\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], AgmRectangle.prototype, \"mouseUp\", void 0);\r\n__decorate([\r\n    Output(),\r\n    __metadata(\"design:type\", EventEmitter)\r\n], AgmRectangle.prototype, \"rightClick\", void 0);\r\nAgmRectangle = AgmRectangle_1 = __decorate([\r\n    Directive({\r\n        selector: 'agm-rectangle',\r\n    }),\r\n    __metadata(\"design:paramtypes\", [RectangleManager])\r\n], AgmRectangle);\r\n\r\nlet layerId$3 = 0;\r\n/*\r\n * This directive adds a transit layer to a google map instance\r\n * <agm-transit-layer [visible]=\"true|false\"> <agm-transit-layer>\r\n * */\r\nlet AgmTransitLayer = class AgmTransitLayer {\r\n    constructor(_manager) {\r\n        this._manager = _manager;\r\n        this._addedToManager = false;\r\n        this._id = (layerId$3++).toString();\r\n        /**\r\n         * Hide/show transit layer\r\n         */\r\n        this.visible = true;\r\n    }\r\n    ngOnInit() {\r\n        if (this._addedToManager) {\r\n            return;\r\n        }\r\n        this._manager.addTransitLayer(this, { visible: this.visible });\r\n        this._addedToManager = true;\r\n    }\r\n    ngOnChanges(changes) {\r\n        if (!this._addedToManager) {\r\n            return;\r\n        }\r\n        if (changes['visible'] != null) {\r\n            this._manager.toggleLayerVisibility(this, { visible: changes['visible'].currentValue });\r\n        }\r\n    }\r\n    /** @internal */\r\n    id() { return this._id; }\r\n    /** @internal */\r\n    toString() { return `AgmTransitLayer-${this._id.toString()}`; }\r\n    /** @internal */\r\n    ngOnDestroy() {\r\n        this._manager.deleteLayer(this);\r\n    }\r\n};\r\nAgmTransitLayer.ctorParameters = () => [\r\n    { type: LayerManager }\r\n];\r\n__decorate([\r\n    Input(),\r\n    __metadata(\"design:type\", Object)\r\n], AgmTransitLayer.prototype, \"visible\", void 0);\r\nAgmTransitLayer = __decorate([\r\n    Directive({\r\n        selector: 'agm-transit-layer',\r\n    }),\r\n    __metadata(\"design:paramtypes\", [LayerManager])\r\n], AgmTransitLayer);\r\n\r\nvar google$1;\r\nvar SymbolPath;\r\n(function (SymbolPath) {\r\n    SymbolPath[SymbolPath[\"BACKWARD_CLOSED_ARROW\"] = 3] = \"BACKWARD_CLOSED_ARROW\";\r\n    SymbolPath[SymbolPath[\"BACKWARD_OPEN_ARROW\"] = 4] = \"BACKWARD_OPEN_ARROW\";\r\n    SymbolPath[SymbolPath[\"CIRCLE\"] = 0] = \"CIRCLE\";\r\n    SymbolPath[SymbolPath[\"FORWARD_CLOSED_ARROW\"] = 1] = \"FORWARD_CLOSED_ARROW\";\r\n    SymbolPath[SymbolPath[\"FORWARD_OPEN_ARROW\"] = 2] = \"FORWARD_OPEN_ARROW\";\r\n})(SymbolPath || (SymbolPath = {}));\r\n/**\r\n * Identifiers used to specify the placement of controls on the map. Controls are\r\n * positioned relative to other controls in the same layout position. Controls that\r\n * are added first are positioned closer to the edge of the map.\r\n */\r\nvar ControlPosition;\r\n(function (ControlPosition) {\r\n    ControlPosition[ControlPosition[\"RIGHT_BOTTOM\"] = 0] = \"RIGHT_BOTTOM\";\r\n    ControlPosition[ControlPosition[\"TOP_LEFT\"] = 1] = \"TOP_LEFT\";\r\n    ControlPosition[ControlPosition[\"TOP_CENTER\"] = 2] = \"TOP_CENTER\";\r\n    ControlPosition[ControlPosition[\"TOP_RIGHT\"] = 3] = \"TOP_RIGHT\";\r\n    ControlPosition[ControlPosition[\"LEFT_CENTER\"] = 4] = \"LEFT_CENTER\";\r\n    ControlPosition[ControlPosition[\"LEFT_TOP\"] = 5] = \"LEFT_TOP\";\r\n    ControlPosition[ControlPosition[\"LEFT_BOTTOM\"] = 6] = \"LEFT_BOTTOM\";\r\n    ControlPosition[ControlPosition[\"RIGHT_TOP\"] = 7] = \"RIGHT_TOP\";\r\n    ControlPosition[ControlPosition[\"RIGHT_CENTER\"] = 8] = \"RIGHT_CENTER\";\r\n    ControlPosition[ControlPosition[\"BOTTOM_RIGHT\"] = 9] = \"BOTTOM_RIGHT\";\r\n    ControlPosition[ControlPosition[\"BOTTOM_LEFT\"] = 10] = \"BOTTOM_LEFT\";\r\n    ControlPosition[ControlPosition[\"BOTTOM_CENTER\"] = 11] = \"BOTTOM_CENTER\";\r\n})(ControlPosition || (ControlPosition = {}));\r\nvar MapTypeId;\r\n(function (MapTypeId) {\r\n    /** This map type displays a transparent layer of major streets on satellite images. */\r\n    MapTypeId[MapTypeId[\"HYBRID\"] = 0] = \"HYBRID\";\r\n    /** This map type displays a normal street map. */\r\n    MapTypeId[MapTypeId[\"ROADMAP\"] = 1] = \"ROADMAP\";\r\n    /** This map type displays satellite images. */\r\n    MapTypeId[MapTypeId[\"SATELLITE\"] = 2] = \"SATELLITE\";\r\n    /** This map type displays maps with physical features such as terrain and vegetation. */\r\n    MapTypeId[MapTypeId[\"TERRAIN\"] = 3] = \"TERRAIN\";\r\n})(MapTypeId || (MapTypeId = {}));\r\nvar MapTypeControlStyle;\r\n(function (MapTypeControlStyle) {\r\n    MapTypeControlStyle[MapTypeControlStyle[\"DEFAULT\"] = 0] = \"DEFAULT\";\r\n    MapTypeControlStyle[MapTypeControlStyle[\"DROPDOWN_MENU\"] = 2] = \"DROPDOWN_MENU\";\r\n    MapTypeControlStyle[MapTypeControlStyle[\"HORIZONTAL_BAR\"] = 1] = \"HORIZONTAL_BAR\";\r\n})(MapTypeControlStyle || (MapTypeControlStyle = {}));\r\nvar ScaleControlStyle;\r\n(function (ScaleControlStyle) {\r\n    ScaleControlStyle[ScaleControlStyle[\"DEFAULT\"] = 0] = \"DEFAULT\";\r\n})(ScaleControlStyle || (ScaleControlStyle = {}));\r\nvar ZoomControlStyle;\r\n(function (ZoomControlStyle) {\r\n    ZoomControlStyle[ZoomControlStyle[\"DEFAULT\"] = 0] = \"DEFAULT\";\r\n    ZoomControlStyle[ZoomControlStyle[\"LARGE\"] = 1] = \"LARGE\";\r\n    ZoomControlStyle[ZoomControlStyle[\"SMALL\"] = 2] = \"SMALL\";\r\n})(ZoomControlStyle || (ZoomControlStyle = {}));\r\nvar GeocoderLocationType;\r\n(function (GeocoderLocationType) {\r\n    GeocoderLocationType[\"APPROXIMATE\"] = \"APPROXIMATE\";\r\n    GeocoderLocationType[\"GEOMETRIC_CENTER\"] = \"GEOMETRIC_CENTER\";\r\n    GeocoderLocationType[\"RANGE_INTERPOLATED\"] = \"RANGE_INTERPOLATED\";\r\n    GeocoderLocationType[\"ROOFTOP\"] = \"ROOFTOP\";\r\n})(GeocoderLocationType || (GeocoderLocationType = {}));\r\nvar GeocoderStatus;\r\n(function (GeocoderStatus) {\r\n    GeocoderStatus[\"ERROR\"] = \"ERROR\";\r\n    GeocoderStatus[\"INVALID_REQUEST\"] = \"INVALID_REQUEST\";\r\n    GeocoderStatus[\"OK\"] = \"OK\";\r\n    GeocoderStatus[\"OVER_QUERY_LIMIT\"] = \"OVER_QUERY_LIMIT\";\r\n    GeocoderStatus[\"REQUEST_DENIED\"] = \"REQUEST_DENIED\";\r\n    GeocoderStatus[\"UNKNOWN_ERROR\"] = \"UNKNOWN_ERROR\";\r\n    GeocoderStatus[\"ZERO_RESULTS\"] = \"ZERO_RESULTS\";\r\n})(GeocoderStatus || (GeocoderStatus = {}));\r\n\r\nlet AgmGeocoder = class AgmGeocoder {\r\n    constructor(loader) {\r\n        const connectableGeocoder$ = new Observable(subscriber => {\r\n            loader.load().then(() => subscriber.next());\r\n        })\r\n            .pipe(map(() => this._createGeocoder()), multicast(new ReplaySubject(1)));\r\n        connectableGeocoder$.connect(); // ignore the subscription\r\n        // since we will remain subscribed till application exits\r\n        this.geocoder$ = connectableGeocoder$;\r\n    }\r\n    geocode(request) {\r\n        return this.geocoder$.pipe(switchMap((geocoder) => this._getGoogleResults(geocoder, request)));\r\n    }\r\n    _getGoogleResults(geocoder, request) {\r\n        const geocodeObservable = bindCallback(geocoder.geocode);\r\n        return geocodeObservable(request).pipe(switchMap(([results, status]) => {\r\n            if (status === GeocoderStatus.OK) {\r\n                return of(results);\r\n            }\r\n            return throwError(status);\r\n        }));\r\n    }\r\n    _createGeocoder() {\r\n        return new google.maps.Geocoder();\r\n    }\r\n};\r\nAgmGeocoder.ctorParameters = () => [\r\n    { type: MapsAPILoader }\r\n];\r\nAgmGeocoder.ngInjectableDef = ɵɵdefineInjectable({ factory: function AgmGeocoder_Factory() { return new AgmGeocoder(ɵɵinject(MapsAPILoader)); }, token: AgmGeocoder, providedIn: \"root\" });\r\nAgmGeocoder = __decorate([\r\n    Injectable({ providedIn: 'root' }),\r\n    __metadata(\"design:paramtypes\", [MapsAPILoader])\r\n], AgmGeocoder);\r\n\r\nclass WindowRef {\r\n    getNativeWindow() { return window; }\r\n}\r\nclass DocumentRef {\r\n    getNativeDocument() { return document; }\r\n}\r\nconst BROWSER_GLOBALS_PROVIDERS = [WindowRef, DocumentRef];\r\n\r\nvar GoogleMapsScriptProtocol;\r\n(function (GoogleMapsScriptProtocol) {\r\n    GoogleMapsScriptProtocol[GoogleMapsScriptProtocol[\"HTTP\"] = 1] = \"HTTP\";\r\n    GoogleMapsScriptProtocol[GoogleMapsScriptProtocol[\"HTTPS\"] = 2] = \"HTTPS\";\r\n    GoogleMapsScriptProtocol[GoogleMapsScriptProtocol[\"AUTO\"] = 3] = \"AUTO\";\r\n})(GoogleMapsScriptProtocol || (GoogleMapsScriptProtocol = {}));\r\n/**\r\n * Token for the config of the LazyMapsAPILoader. Please provide an object of type {@link\r\n * LazyMapsAPILoaderConfig}.\r\n */\r\nconst LAZY_MAPS_API_CONFIG = new InjectionToken('angular-google-maps LAZY_MAPS_API_CONFIG');\r\nlet LazyMapsAPILoader = class LazyMapsAPILoader extends MapsAPILoader {\r\n    constructor(config = null, w, d, localeId) {\r\n        super();\r\n        this.localeId = localeId;\r\n        this._SCRIPT_ID = 'agmGoogleMapsApiScript';\r\n        this.callbackName = `agmLazyMapsAPILoader`;\r\n        this._config = config || {};\r\n        this._windowRef = w;\r\n        this._documentRef = d;\r\n    }\r\n    load() {\r\n        const window = this._windowRef.getNativeWindow();\r\n        if (window.google && window.google.maps) {\r\n            // Google maps already loaded on the page.\r\n            return Promise.resolve();\r\n        }\r\n        if (this._scriptLoadingPromise) {\r\n            return this._scriptLoadingPromise;\r\n        }\r\n        // this can happen in HMR situations or Stackblitz.io editors.\r\n        const scriptOnPage = this._documentRef.getNativeDocument().getElementById(this._SCRIPT_ID);\r\n        if (scriptOnPage) {\r\n            this._assignScriptLoadingPromise(scriptOnPage);\r\n            return this._scriptLoadingPromise;\r\n        }\r\n        const script = this._documentRef.getNativeDocument().createElement('script');\r\n        script.type = 'text/javascript';\r\n        script.async = true;\r\n        script.defer = true;\r\n        script.id = this._SCRIPT_ID;\r\n        script.src = this._getScriptSrc(this.callbackName);\r\n        this._assignScriptLoadingPromise(script);\r\n        this._documentRef.getNativeDocument().body.appendChild(script);\r\n        return this._scriptLoadingPromise;\r\n    }\r\n    _assignScriptLoadingPromise(scriptElem) {\r\n        this._scriptLoadingPromise = new Promise((resolve, reject) => {\r\n            this._windowRef.getNativeWindow()[this.callbackName] = () => {\r\n                resolve();\r\n            };\r\n            scriptElem.onerror = (error) => {\r\n                reject(error);\r\n            };\r\n        });\r\n    }\r\n    _getScriptSrc(callbackName) {\r\n        let protocolType = (this._config && this._config.protocol) || GoogleMapsScriptProtocol.HTTPS;\r\n        let protocol;\r\n        switch (protocolType) {\r\n            case GoogleMapsScriptProtocol.AUTO:\r\n                protocol = '';\r\n                break;\r\n            case GoogleMapsScriptProtocol.HTTP:\r\n                protocol = 'http:';\r\n                break;\r\n            case GoogleMapsScriptProtocol.HTTPS:\r\n                protocol = 'https:';\r\n                break;\r\n        }\r\n        const hostAndPath = this._config.hostAndPath || 'maps.googleapis.com/maps/api/js';\r\n        const queryParams = {\r\n            v: this._config.apiVersion || 'quarterly',\r\n            callback: callbackName,\r\n            key: this._config.apiKey,\r\n            client: this._config.clientId,\r\n            channel: this._config.channel,\r\n            libraries: this._config.libraries,\r\n            region: this._config.region,\r\n            language: this._config.language || this.localeId !== 'en-US' ? this.localeId : null,\r\n        };\r\n        const params = Object.keys(queryParams)\r\n            .filter((k) => queryParams[k] != null)\r\n            .filter((k) => {\r\n            // remove empty arrays\r\n            return !Array.isArray(queryParams[k]) ||\r\n                (Array.isArray(queryParams[k]) && queryParams[k].length > 0);\r\n        })\r\n            .map((k) => {\r\n            // join arrays as comma seperated strings\r\n            let i = queryParams[k];\r\n            if (Array.isArray(i)) {\r\n                return { key: k, value: i.join(',') };\r\n            }\r\n            return { key: k, value: queryParams[k] };\r\n        })\r\n            .map((entry) => {\r\n            return `${entry.key}=${entry.value}`;\r\n        })\r\n            .join('&');\r\n        return `${protocol}//${hostAndPath}?${params}`;\r\n    }\r\n};\r\nLazyMapsAPILoader.ctorParameters = () => [\r\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [LAZY_MAPS_API_CONFIG,] }] },\r\n    { type: WindowRef },\r\n    { type: DocumentRef },\r\n    { type: String, decorators: [{ type: Inject, args: [LOCALE_ID,] }] }\r\n];\r\nLazyMapsAPILoader = __decorate([\r\n    Injectable(),\r\n    __param(0, Optional()), __param(0, Inject(LAZY_MAPS_API_CONFIG)),\r\n    __param(3, Inject(LOCALE_ID)),\r\n    __metadata(\"design:paramtypes\", [Object, WindowRef, DocumentRef, String])\r\n], LazyMapsAPILoader);\r\n\r\n/**\r\n * When using the NoOpMapsAPILoader, the Google Maps API must be added to the page via a `<script>`\r\n * Tag.\r\n * It's important that the Google Maps API script gets loaded first on the page.\r\n */\r\nclass NoOpMapsAPILoader {\r\n    load() {\r\n        if (!window.google || !window.google.maps) {\r\n            throw new Error('Google Maps API not loaded on page. Make sure window.google.maps is available!');\r\n        }\r\n        return Promise.resolve();\r\n    }\r\n}\r\n\r\n// exported map types\r\n\r\nvar AgmCoreModule_1;\r\n/**\r\n * @internal\r\n */\r\nfunction coreDirectives() {\r\n    return [\r\n        AgmBicyclingLayer,\r\n        AgmCircle,\r\n        AgmDataLayer,\r\n        AgmFitBounds,\r\n        AgmInfoWindow,\r\n        AgmKmlLayer,\r\n        AgmMap,\r\n        AgmMarker,\r\n        AgmPolygon,\r\n        AgmPolyline,\r\n        AgmPolylineIcon,\r\n        AgmPolylinePoint,\r\n        AgmRectangle,\r\n        AgmTransitLayer,\r\n    ];\r\n}\r\n/**\r\n * The angular-google-maps core module. Contains all Directives/Services/Pipes\r\n * of the core module. Please use `AgmCoreModule.forRoot()` in your app module.\r\n */\r\nlet AgmCoreModule = AgmCoreModule_1 = class AgmCoreModule {\r\n    /**\r\n     * Please use this method when you register the module at the root level.\r\n     */\r\n    static forRoot(lazyMapsAPILoaderConfig) {\r\n        return {\r\n            ngModule: AgmCoreModule_1,\r\n            providers: [\r\n                ...BROWSER_GLOBALS_PROVIDERS, { provide: MapsAPILoader, useClass: LazyMapsAPILoader },\r\n                { provide: LAZY_MAPS_API_CONFIG, useValue: lazyMapsAPILoaderConfig },\r\n            ],\r\n        };\r\n    }\r\n};\r\nAgmCoreModule = AgmCoreModule_1 = __decorate([\r\n    NgModule({ declarations: coreDirectives(), exports: coreDirectives() })\r\n], AgmCoreModule);\r\n\r\n// main modules\r\n\r\n/**\r\n * Generated bundle index. Do not edit.\r\n */\r\n\r\nexport { AgmBicyclingLayer, AgmCircle, AgmCoreModule, AgmDataLayer, AgmFitBounds, AgmGeocoder, AgmInfoWindow, AgmKmlLayer, AgmMap, AgmMarker, AgmPolygon, AgmPolyline, AgmPolylineIcon, AgmPolylinePoint, AgmRectangle, AgmTransitLayer, CircleManager, ControlPosition, DataLayerManager, FitBoundsAccessor, GeocoderLocationType, GeocoderStatus, GoogleMapsAPIWrapper, GoogleMapsScriptProtocol, InfoWindowManager, KmlLayerManager, LAZY_MAPS_API_CONFIG, LayerManager, LazyMapsAPILoader, MapTypeId, MapsAPILoader, MarkerManager, NoOpMapsAPILoader, PolygonManager, PolylineManager, RectangleManager, ScaleControlStyle, ZoomControlStyle, FitBoundsService as ɵa, coreDirectives as ɵb, WindowRef as ɵc, DocumentRef as ɵd, BROWSER_GLOBALS_PROVIDERS as ɵe };\r\n\r\n"]}