{"version":3,"sources":["v:/jad-admin-go/mazat_admin_panel/node_modules/@angular/cdk/esm5/collections.es5.js"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;AAomfM,AAGA;;;;;;iGAC6O","file":"collections.es5.js","sourcesContent":["/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nimport { __extends } from 'tslib';\r\nimport { Observable, of, Subject } from 'rxjs';\r\nimport { Injectable, ɵɵdefineInjectable } from '@angular/core';\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n\r\n/**\r\n * @abstract\r\n * @template T\r\n */\r\nvar  /**\r\n * @abstract\r\n * @template T\r\n */\r\nDataSource = /** @class */ (function () {\r\n    function DataSource() {\r\n    }\r\n    return DataSource;\r\n}());\r\n/**\r\n * Checks whether an object is a data source.\r\n * @param {?} value\r\n * @return {?}\r\n */\r\nfunction isDataSource(value) {\r\n    // Check if the value is a DataSource by observing if it has a connect function. Cannot\r\n    // be checked as an `instanceof DataSource` since people could create their own sources\r\n    // that match the interface, but don't extend DataSource.\r\n    return value && typeof value.connect === 'function';\r\n}\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n/**\r\n * DataSource wrapper for a native array.\r\n * @template T\r\n */\r\nvar  /**\r\n * DataSource wrapper for a native array.\r\n * @template T\r\n */\r\nArrayDataSource = /** @class */ (function (_super) {\r\n    __extends(ArrayDataSource, _super);\r\n    function ArrayDataSource(_data) {\r\n        var _this = _super.call(this) || this;\r\n        _this._data = _data;\r\n        return _this;\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    ArrayDataSource.prototype.connect = /**\r\n     * @return {?}\r\n     */\r\n    function () {\r\n        return this._data instanceof Observable ? this._data : of(this._data);\r\n    };\r\n    /**\r\n     * @return {?}\r\n     */\r\n    ArrayDataSource.prototype.disconnect = /**\r\n     * @return {?}\r\n     */\r\n    function () { };\r\n    return ArrayDataSource;\r\n}(DataSource));\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n/**\r\n * Class to be used to power selecting one or more options from a list.\r\n * @template T\r\n */\r\nvar  /**\r\n * Class to be used to power selecting one or more options from a list.\r\n * @template T\r\n */\r\nSelectionModel = /** @class */ (function () {\r\n    function SelectionModel(_multiple, initiallySelectedValues, _emitChanges) {\r\n        var _this = this;\r\n        if (_multiple === void 0) { _multiple = false; }\r\n        if (_emitChanges === void 0) { _emitChanges = true; }\r\n        this._multiple = _multiple;\r\n        this._emitChanges = _emitChanges;\r\n        /**\r\n         * Currently-selected values.\r\n         */\r\n        this._selection = new Set();\r\n        /**\r\n         * Keeps track of the deselected options that haven't been emitted by the change event.\r\n         */\r\n        this._deselectedToEmit = [];\r\n        /**\r\n         * Keeps track of the selected options that haven't been emitted by the change event.\r\n         */\r\n        this._selectedToEmit = [];\r\n        /**\r\n         * Event emitted when the value has changed.\r\n         */\r\n        this.changed = new Subject();\r\n        /**\r\n         * Event emitted when the value has changed.\r\n         * @deprecated Use `changed` instead.\r\n         * \\@breaking-change 8.0.0 To be changed to `changed`\r\n         */\r\n        this.onChange = this.changed;\r\n        if (initiallySelectedValues && initiallySelectedValues.length) {\r\n            if (_multiple) {\r\n                initiallySelectedValues.forEach((/**\r\n                 * @param {?} value\r\n                 * @return {?}\r\n                 */\r\n                function (value) { return _this._markSelected(value); }));\r\n            }\r\n            else {\r\n                this._markSelected(initiallySelectedValues[0]);\r\n            }\r\n            // Clear the array in order to avoid firing the change event for preselected values.\r\n            this._selectedToEmit.length = 0;\r\n        }\r\n    }\r\n    Object.defineProperty(SelectionModel.prototype, \"selected\", {\r\n        /** Selected values. */\r\n        get: /**\r\n         * Selected values.\r\n         * @return {?}\r\n         */\r\n        function () {\r\n            if (!this._selected) {\r\n                this._selected = Array.from(this._selection.values());\r\n            }\r\n            return this._selected;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Selects a value or an array of values.\r\n     */\r\n    /**\r\n     * Selects a value or an array of values.\r\n     * @param {...?} values\r\n     * @return {?}\r\n     */\r\n    SelectionModel.prototype.select = /**\r\n     * Selects a value or an array of values.\r\n     * @param {...?} values\r\n     * @return {?}\r\n     */\r\n    function () {\r\n        var _this = this;\r\n        var values = [];\r\n        for (var _i = 0; _i < arguments.length; _i++) {\r\n            values[_i] = arguments[_i];\r\n        }\r\n        this._verifyValueAssignment(values);\r\n        values.forEach((/**\r\n         * @param {?} value\r\n         * @return {?}\r\n         */\r\n        function (value) { return _this._markSelected(value); }));\r\n        this._emitChangeEvent();\r\n    };\r\n    /**\r\n     * Deselects a value or an array of values.\r\n     */\r\n    /**\r\n     * Deselects a value or an array of values.\r\n     * @param {...?} values\r\n     * @return {?}\r\n     */\r\n    SelectionModel.prototype.deselect = /**\r\n     * Deselects a value or an array of values.\r\n     * @param {...?} values\r\n     * @return {?}\r\n     */\r\n    function () {\r\n        var _this = this;\r\n        var values = [];\r\n        for (var _i = 0; _i < arguments.length; _i++) {\r\n            values[_i] = arguments[_i];\r\n        }\r\n        this._verifyValueAssignment(values);\r\n        values.forEach((/**\r\n         * @param {?} value\r\n         * @return {?}\r\n         */\r\n        function (value) { return _this._unmarkSelected(value); }));\r\n        this._emitChangeEvent();\r\n    };\r\n    /**\r\n     * Toggles a value between selected and deselected.\r\n     */\r\n    /**\r\n     * Toggles a value between selected and deselected.\r\n     * @param {?} value\r\n     * @return {?}\r\n     */\r\n    SelectionModel.prototype.toggle = /**\r\n     * Toggles a value between selected and deselected.\r\n     * @param {?} value\r\n     * @return {?}\r\n     */\r\n    function (value) {\r\n        this.isSelected(value) ? this.deselect(value) : this.select(value);\r\n    };\r\n    /**\r\n     * Clears all of the selected values.\r\n     */\r\n    /**\r\n     * Clears all of the selected values.\r\n     * @return {?}\r\n     */\r\n    SelectionModel.prototype.clear = /**\r\n     * Clears all of the selected values.\r\n     * @return {?}\r\n     */\r\n    function () {\r\n        this._unmarkAll();\r\n        this._emitChangeEvent();\r\n    };\r\n    /**\r\n     * Determines whether a value is selected.\r\n     */\r\n    /**\r\n     * Determines whether a value is selected.\r\n     * @param {?} value\r\n     * @return {?}\r\n     */\r\n    SelectionModel.prototype.isSelected = /**\r\n     * Determines whether a value is selected.\r\n     * @param {?} value\r\n     * @return {?}\r\n     */\r\n    function (value) {\r\n        return this._selection.has(value);\r\n    };\r\n    /**\r\n     * Determines whether the model does not have a value.\r\n     */\r\n    /**\r\n     * Determines whether the model does not have a value.\r\n     * @return {?}\r\n     */\r\n    SelectionModel.prototype.isEmpty = /**\r\n     * Determines whether the model does not have a value.\r\n     * @return {?}\r\n     */\r\n    function () {\r\n        return this._selection.size === 0;\r\n    };\r\n    /**\r\n     * Determines whether the model has a value.\r\n     */\r\n    /**\r\n     * Determines whether the model has a value.\r\n     * @return {?}\r\n     */\r\n    SelectionModel.prototype.hasValue = /**\r\n     * Determines whether the model has a value.\r\n     * @return {?}\r\n     */\r\n    function () {\r\n        return !this.isEmpty();\r\n    };\r\n    /**\r\n     * Sorts the selected values based on a predicate function.\r\n     */\r\n    /**\r\n     * Sorts the selected values based on a predicate function.\r\n     * @param {?=} predicate\r\n     * @return {?}\r\n     */\r\n    SelectionModel.prototype.sort = /**\r\n     * Sorts the selected values based on a predicate function.\r\n     * @param {?=} predicate\r\n     * @return {?}\r\n     */\r\n    function (predicate) {\r\n        if (this._multiple && this.selected) {\r\n            (/** @type {?} */ (this._selected)).sort(predicate);\r\n        }\r\n    };\r\n    /**\r\n     * Gets whether multiple values can be selected.\r\n     */\r\n    /**\r\n     * Gets whether multiple values can be selected.\r\n     * @return {?}\r\n     */\r\n    SelectionModel.prototype.isMultipleSelection = /**\r\n     * Gets whether multiple values can be selected.\r\n     * @return {?}\r\n     */\r\n    function () {\r\n        return this._multiple;\r\n    };\r\n    /** Emits a change event and clears the records of selected and deselected values. */\r\n    /**\r\n     * Emits a change event and clears the records of selected and deselected values.\r\n     * @private\r\n     * @return {?}\r\n     */\r\n    SelectionModel.prototype._emitChangeEvent = /**\r\n     * Emits a change event and clears the records of selected and deselected values.\r\n     * @private\r\n     * @return {?}\r\n     */\r\n    function () {\r\n        // Clear the selected values so they can be re-cached.\r\n        this._selected = null;\r\n        if (this._selectedToEmit.length || this._deselectedToEmit.length) {\r\n            this.changed.next({\r\n                source: this,\r\n                added: this._selectedToEmit,\r\n                removed: this._deselectedToEmit\r\n            });\r\n            this._deselectedToEmit = [];\r\n            this._selectedToEmit = [];\r\n        }\r\n    };\r\n    /** Selects a value. */\r\n    /**\r\n     * Selects a value.\r\n     * @private\r\n     * @param {?} value\r\n     * @return {?}\r\n     */\r\n    SelectionModel.prototype._markSelected = /**\r\n     * Selects a value.\r\n     * @private\r\n     * @param {?} value\r\n     * @return {?}\r\n     */\r\n    function (value) {\r\n        if (!this.isSelected(value)) {\r\n            if (!this._multiple) {\r\n                this._unmarkAll();\r\n            }\r\n            this._selection.add(value);\r\n            if (this._emitChanges) {\r\n                this._selectedToEmit.push(value);\r\n            }\r\n        }\r\n    };\r\n    /** Deselects a value. */\r\n    /**\r\n     * Deselects a value.\r\n     * @private\r\n     * @param {?} value\r\n     * @return {?}\r\n     */\r\n    SelectionModel.prototype._unmarkSelected = /**\r\n     * Deselects a value.\r\n     * @private\r\n     * @param {?} value\r\n     * @return {?}\r\n     */\r\n    function (value) {\r\n        if (this.isSelected(value)) {\r\n            this._selection.delete(value);\r\n            if (this._emitChanges) {\r\n                this._deselectedToEmit.push(value);\r\n            }\r\n        }\r\n    };\r\n    /** Clears out the selected values. */\r\n    /**\r\n     * Clears out the selected values.\r\n     * @private\r\n     * @return {?}\r\n     */\r\n    SelectionModel.prototype._unmarkAll = /**\r\n     * Clears out the selected values.\r\n     * @private\r\n     * @return {?}\r\n     */\r\n    function () {\r\n        var _this = this;\r\n        if (!this.isEmpty()) {\r\n            this._selection.forEach((/**\r\n             * @param {?} value\r\n             * @return {?}\r\n             */\r\n            function (value) { return _this._unmarkSelected(value); }));\r\n        }\r\n    };\r\n    /**\r\n     * Verifies the value assignment and throws an error if the specified value array is\r\n     * including multiple values while the selection model is not supporting multiple values.\r\n     */\r\n    /**\r\n     * Verifies the value assignment and throws an error if the specified value array is\r\n     * including multiple values while the selection model is not supporting multiple values.\r\n     * @private\r\n     * @param {?} values\r\n     * @return {?}\r\n     */\r\n    SelectionModel.prototype._verifyValueAssignment = /**\r\n     * Verifies the value assignment and throws an error if the specified value array is\r\n     * including multiple values while the selection model is not supporting multiple values.\r\n     * @private\r\n     * @param {?} values\r\n     * @return {?}\r\n     */\r\n    function (values) {\r\n        if (values.length > 1 && !this._multiple) {\r\n            throw getMultipleValuesInSingleSelectionError();\r\n        }\r\n    };\r\n    return SelectionModel;\r\n}());\r\n/**\r\n * Returns an error that reports that multiple values are passed into a selection model\r\n * with a single value.\r\n * \\@docs-private\r\n * @return {?}\r\n */\r\nfunction getMultipleValuesInSingleSelectionError() {\r\n    return Error('Cannot pass multiple values into SelectionModel with single-value mode.');\r\n}\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n/**\r\n * Class to coordinate unique selection based on name.\r\n * Intended to be consumed as an Angular service.\r\n * This service is needed because native radio change events are only fired on the item currently\r\n * being selected, and we still need to uncheck the previous selection.\r\n *\r\n * This service does not *store* any IDs and names because they may change at any time, so it is\r\n * less error-prone if they are simply passed through when the events occur.\r\n */\r\nvar UniqueSelectionDispatcher = /** @class */ (function () {\r\n    function UniqueSelectionDispatcher() {\r\n        this._listeners = [];\r\n    }\r\n    /**\r\n     * Notify other items that selection for the given name has been set.\r\n     * @param id ID of the item.\r\n     * @param name Name of the item.\r\n     */\r\n    /**\r\n     * Notify other items that selection for the given name has been set.\r\n     * @param {?} id ID of the item.\r\n     * @param {?} name Name of the item.\r\n     * @return {?}\r\n     */\r\n    UniqueSelectionDispatcher.prototype.notify = /**\r\n     * Notify other items that selection for the given name has been set.\r\n     * @param {?} id ID of the item.\r\n     * @param {?} name Name of the item.\r\n     * @return {?}\r\n     */\r\n    function (id, name) {\r\n        for (var _i = 0, _a = this._listeners; _i < _a.length; _i++) {\r\n            var listener = _a[_i];\r\n            listener(id, name);\r\n        }\r\n    };\r\n    /**\r\n     * Listen for future changes to item selection.\r\n     * @return Function used to deregister listener\r\n     */\r\n    /**\r\n     * Listen for future changes to item selection.\r\n     * @param {?} listener\r\n     * @return {?} Function used to deregister listener\r\n     */\r\n    UniqueSelectionDispatcher.prototype.listen = /**\r\n     * Listen for future changes to item selection.\r\n     * @param {?} listener\r\n     * @return {?} Function used to deregister listener\r\n     */\r\n    function (listener) {\r\n        var _this = this;\r\n        this._listeners.push(listener);\r\n        return (/**\r\n         * @return {?}\r\n         */\r\n        function () {\r\n            _this._listeners = _this._listeners.filter((/**\r\n             * @param {?} registered\r\n             * @return {?}\r\n             */\r\n            function (registered) {\r\n                return listener !== registered;\r\n            }));\r\n        });\r\n    };\r\n    /**\r\n     * @return {?}\r\n     */\r\n    UniqueSelectionDispatcher.prototype.ngOnDestroy = /**\r\n     * @return {?}\r\n     */\r\n    function () {\r\n        this._listeners = [];\r\n    };\r\n    UniqueSelectionDispatcher.decorators = [\r\n        { type: Injectable, args: [{ providedIn: 'root' },] },\r\n    ];\r\n    /** @nocollapse */ UniqueSelectionDispatcher.ngInjectableDef = ɵɵdefineInjectable({ factory: function UniqueSelectionDispatcher_Factory() { return new UniqueSelectionDispatcher(); }, token: UniqueSelectionDispatcher, providedIn: \"root\" });\r\n    return UniqueSelectionDispatcher;\r\n}());\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n\r\nexport { UniqueSelectionDispatcher, ArrayDataSource, isDataSource, DataSource, getMultipleValuesInSingleSelectionError, SelectionModel };\r\n\r\n"]}