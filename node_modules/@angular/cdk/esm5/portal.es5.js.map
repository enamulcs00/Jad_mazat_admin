{"version":3,"sources":["v:/jad-admin-go/mazat_admin_panel/node_modules/@angular/cdk/esm5/portal.es5.js"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;AAokiBK,AAMC;;;;;;;;;;;;;2FAKG;;;;;;;;;;;KAWJ;;;;;;;;;;;;;;;;oBAUC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;MAmKA,AAOA;;;;;;;;;;;;;;;;;;;cAQA;;;;;;;;;;;KAWD;;;;;;;;;;;;;;;;;oBAWC;;;;;KAKD;;;;;;;;;;;;;;;;0IAMC","file":"portal.es5.js","sourcesContent":["/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nimport { __extends } from 'tslib';\r\nimport { ComponentFactoryResolver, Directive, EventEmitter, NgModule, Output, TemplateRef, ViewContainerRef } from '@angular/core';\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n\r\n/**\r\n * Throws an exception when attempting to attach a null portal to a host.\r\n * \\@docs-private\r\n * @return {?}\r\n */\r\nfunction throwNullPortalError() {\r\n    throw Error('Must provide a portal to attach');\r\n}\r\n/**\r\n * Throws an exception when attempting to attach a portal to a host that is already attached.\r\n * \\@docs-private\r\n * @return {?}\r\n */\r\nfunction throwPortalAlreadyAttachedError() {\r\n    throw Error('Host already has a portal attached');\r\n}\r\n/**\r\n * Throws an exception when attempting to attach a portal to an already-disposed host.\r\n * \\@docs-private\r\n * @return {?}\r\n */\r\nfunction throwPortalOutletAlreadyDisposedError() {\r\n    throw Error('This PortalOutlet has already been disposed');\r\n}\r\n/**\r\n * Throws an exception when attempting to attach an unknown portal type.\r\n * \\@docs-private\r\n * @return {?}\r\n */\r\nfunction throwUnknownPortalTypeError() {\r\n    throw Error('Attempting to attach an unknown Portal type. BasePortalOutlet accepts either ' +\r\n        'a ComponentPortal or a TemplatePortal.');\r\n}\r\n/**\r\n * Throws an exception when attempting to attach a portal to a null host.\r\n * \\@docs-private\r\n * @return {?}\r\n */\r\nfunction throwNullPortalOutletError() {\r\n    throw Error('Attempting to attach a portal to a null PortalOutlet');\r\n}\r\n/**\r\n * Throws an exception when attempting to detach a portal that is not attached.\r\n * \\@docs-private\r\n * @return {?}\r\n */\r\nfunction throwNoPortalAttachedError() {\r\n    throw Error('Attempting to detach a portal that is not attached to a host');\r\n}\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n/**\r\n * A `Portal` is something that you want to render somewhere else.\r\n * It can be attach to / detached from a `PortalOutlet`.\r\n * @abstract\r\n * @template T\r\n */\r\nvar  /**\r\n * A `Portal` is something that you want to render somewhere else.\r\n * It can be attach to / detached from a `PortalOutlet`.\r\n * @abstract\r\n * @template T\r\n */\r\nPortal = /** @class */ (function () {\r\n    function Portal() {\r\n    }\r\n    /** Attach this portal to a host. */\r\n    /**\r\n     * Attach this portal to a host.\r\n     * @param {?} host\r\n     * @return {?}\r\n     */\r\n    Portal.prototype.attach = /**\r\n     * Attach this portal to a host.\r\n     * @param {?} host\r\n     * @return {?}\r\n     */\r\n    function (host) {\r\n        if (host == null) {\r\n            throwNullPortalOutletError();\r\n        }\r\n        if (host.hasAttached()) {\r\n            throwPortalAlreadyAttachedError();\r\n        }\r\n        this._attachedHost = host;\r\n        return (/** @type {?} */ (host.attach(this)));\r\n    };\r\n    /** Detach this portal from its host */\r\n    /**\r\n     * Detach this portal from its host\r\n     * @return {?}\r\n     */\r\n    Portal.prototype.detach = /**\r\n     * Detach this portal from its host\r\n     * @return {?}\r\n     */\r\n    function () {\r\n        /** @type {?} */\r\n        var host = this._attachedHost;\r\n        if (host == null) {\r\n            throwNoPortalAttachedError();\r\n        }\r\n        else {\r\n            this._attachedHost = null;\r\n            host.detach();\r\n        }\r\n    };\r\n    Object.defineProperty(Portal.prototype, \"isAttached\", {\r\n        /** Whether this portal is attached to a host. */\r\n        get: /**\r\n         * Whether this portal is attached to a host.\r\n         * @return {?}\r\n         */\r\n        function () {\r\n            return this._attachedHost != null;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Sets the PortalOutlet reference without performing `attach()`. This is used directly by\r\n     * the PortalOutlet when it is performing an `attach()` or `detach()`.\r\n     */\r\n    /**\r\n     * Sets the PortalOutlet reference without performing `attach()`. This is used directly by\r\n     * the PortalOutlet when it is performing an `attach()` or `detach()`.\r\n     * @param {?} host\r\n     * @return {?}\r\n     */\r\n    Portal.prototype.setAttachedHost = /**\r\n     * Sets the PortalOutlet reference without performing `attach()`. This is used directly by\r\n     * the PortalOutlet when it is performing an `attach()` or `detach()`.\r\n     * @param {?} host\r\n     * @return {?}\r\n     */\r\n    function (host) {\r\n        this._attachedHost = host;\r\n    };\r\n    return Portal;\r\n}());\r\n/**\r\n * A `ComponentPortal` is a portal that instantiates some Component upon attachment.\r\n * @template T\r\n */\r\nvar  /**\r\n * A `ComponentPortal` is a portal that instantiates some Component upon attachment.\r\n * @template T\r\n */\r\nComponentPortal = /** @class */ (function (_super) {\r\n    __extends(ComponentPortal, _super);\r\n    function ComponentPortal(component, viewContainerRef, injector, componentFactoryResolver) {\r\n        var _this = _super.call(this) || this;\r\n        _this.component = component;\r\n        _this.viewContainerRef = viewContainerRef;\r\n        _this.injector = injector;\r\n        _this.componentFactoryResolver = componentFactoryResolver;\r\n        return _this;\r\n    }\r\n    return ComponentPortal;\r\n}(Portal));\r\n/**\r\n * A `TemplatePortal` is a portal that represents some embedded template (TemplateRef).\r\n * @template C\r\n */\r\nvar  /**\r\n * A `TemplatePortal` is a portal that represents some embedded template (TemplateRef).\r\n * @template C\r\n */\r\nTemplatePortal = /** @class */ (function (_super) {\r\n    __extends(TemplatePortal, _super);\r\n    function TemplatePortal(template, viewContainerRef, context) {\r\n        var _this = _super.call(this) || this;\r\n        _this.templateRef = template;\r\n        _this.viewContainerRef = viewContainerRef;\r\n        _this.context = context;\r\n        return _this;\r\n    }\r\n    Object.defineProperty(TemplatePortal.prototype, \"origin\", {\r\n        get: /**\r\n         * @return {?}\r\n         */\r\n        function () {\r\n            return this.templateRef.elementRef;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Attach the portal to the provided `PortalOutlet`.\r\n     * When a context is provided it will override the `context` property of the `TemplatePortal`\r\n     * instance.\r\n     */\r\n    /**\r\n     * Attach the portal to the provided `PortalOutlet`.\r\n     * When a context is provided it will override the `context` property of the `TemplatePortal`\r\n     * instance.\r\n     * @param {?} host\r\n     * @param {?=} context\r\n     * @return {?}\r\n     */\r\n    TemplatePortal.prototype.attach = /**\r\n     * Attach the portal to the provided `PortalOutlet`.\r\n     * When a context is provided it will override the `context` property of the `TemplatePortal`\r\n     * instance.\r\n     * @param {?} host\r\n     * @param {?=} context\r\n     * @return {?}\r\n     */\r\n    function (host, context) {\r\n        if (context === void 0) { context = this.context; }\r\n        this.context = context;\r\n        return _super.prototype.attach.call(this, host);\r\n    };\r\n    /**\r\n     * @return {?}\r\n     */\r\n    TemplatePortal.prototype.detach = /**\r\n     * @return {?}\r\n     */\r\n    function () {\r\n        this.context = undefined;\r\n        return _super.prototype.detach.call(this);\r\n    };\r\n    return TemplatePortal;\r\n}(Portal));\r\n/**\r\n * Partial implementation of PortalOutlet that handles attaching\r\n * ComponentPortal and TemplatePortal.\r\n * @abstract\r\n */\r\nvar  /**\r\n * Partial implementation of PortalOutlet that handles attaching\r\n * ComponentPortal and TemplatePortal.\r\n * @abstract\r\n */\r\nBasePortalOutlet = /** @class */ (function () {\r\n    function BasePortalOutlet() {\r\n        /**\r\n         * Whether this host has already been permanently disposed.\r\n         */\r\n        this._isDisposed = false;\r\n    }\r\n    /** Whether this host has an attached portal. */\r\n    /**\r\n     * Whether this host has an attached portal.\r\n     * @return {?}\r\n     */\r\n    BasePortalOutlet.prototype.hasAttached = /**\r\n     * Whether this host has an attached portal.\r\n     * @return {?}\r\n     */\r\n    function () {\r\n        return !!this._attachedPortal;\r\n    };\r\n    /** Attaches a portal. */\r\n    /**\r\n     * Attaches a portal.\r\n     * @param {?} portal\r\n     * @return {?}\r\n     */\r\n    BasePortalOutlet.prototype.attach = /**\r\n     * Attaches a portal.\r\n     * @param {?} portal\r\n     * @return {?}\r\n     */\r\n    function (portal) {\r\n        if (!portal) {\r\n            throwNullPortalError();\r\n        }\r\n        if (this.hasAttached()) {\r\n            throwPortalAlreadyAttachedError();\r\n        }\r\n        if (this._isDisposed) {\r\n            throwPortalOutletAlreadyDisposedError();\r\n        }\r\n        if (portal instanceof ComponentPortal) {\r\n            this._attachedPortal = portal;\r\n            return this.attachComponentPortal(portal);\r\n        }\r\n        else if (portal instanceof TemplatePortal) {\r\n            this._attachedPortal = portal;\r\n            return this.attachTemplatePortal(portal);\r\n        }\r\n        throwUnknownPortalTypeError();\r\n    };\r\n    /** Detaches a previously attached portal. */\r\n    /**\r\n     * Detaches a previously attached portal.\r\n     * @return {?}\r\n     */\r\n    BasePortalOutlet.prototype.detach = /**\r\n     * Detaches a previously attached portal.\r\n     * @return {?}\r\n     */\r\n    function () {\r\n        if (this._attachedPortal) {\r\n            this._attachedPortal.setAttachedHost(null);\r\n            this._attachedPortal = null;\r\n        }\r\n        this._invokeDisposeFn();\r\n    };\r\n    /** Permanently dispose of this portal host. */\r\n    /**\r\n     * Permanently dispose of this portal host.\r\n     * @return {?}\r\n     */\r\n    BasePortalOutlet.prototype.dispose = /**\r\n     * Permanently dispose of this portal host.\r\n     * @return {?}\r\n     */\r\n    function () {\r\n        if (this.hasAttached()) {\r\n            this.detach();\r\n        }\r\n        this._invokeDisposeFn();\r\n        this._isDisposed = true;\r\n    };\r\n    /** @docs-private */\r\n    /**\r\n     * \\@docs-private\r\n     * @param {?} fn\r\n     * @return {?}\r\n     */\r\n    BasePortalOutlet.prototype.setDisposeFn = /**\r\n     * \\@docs-private\r\n     * @param {?} fn\r\n     * @return {?}\r\n     */\r\n    function (fn) {\r\n        this._disposeFn = fn;\r\n    };\r\n    /**\r\n     * @private\r\n     * @return {?}\r\n     */\r\n    BasePortalOutlet.prototype._invokeDisposeFn = /**\r\n     * @private\r\n     * @return {?}\r\n     */\r\n    function () {\r\n        if (this._disposeFn) {\r\n            this._disposeFn();\r\n            this._disposeFn = null;\r\n        }\r\n    };\r\n    return BasePortalOutlet;\r\n}());\r\n/**\r\n * @deprecated Use `BasePortalOutlet` instead.\r\n * \\@breaking-change 9.0.0\r\n * @abstract\r\n */\r\nvar  /**\r\n * @deprecated Use `BasePortalOutlet` instead.\r\n * \\@breaking-change 9.0.0\r\n * @abstract\r\n */\r\nBasePortalHost = /** @class */ (function (_super) {\r\n    __extends(BasePortalHost, _super);\r\n    function BasePortalHost() {\r\n        return _super !== null && _super.apply(this, arguments) || this;\r\n    }\r\n    return BasePortalHost;\r\n}(BasePortalOutlet));\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n/**\r\n * A PortalOutlet for attaching portals to an arbitrary DOM element outside of the Angular\r\n * application context.\r\n */\r\nvar  /**\r\n * A PortalOutlet for attaching portals to an arbitrary DOM element outside of the Angular\r\n * application context.\r\n */\r\nDomPortalOutlet = /** @class */ (function (_super) {\r\n    __extends(DomPortalOutlet, _super);\r\n    function DomPortalOutlet(outletElement, _componentFactoryResolver, _appRef, _defaultInjector) {\r\n        var _this = _super.call(this) || this;\r\n        _this.outletElement = outletElement;\r\n        _this._componentFactoryResolver = _componentFactoryResolver;\r\n        _this._appRef = _appRef;\r\n        _this._defaultInjector = _defaultInjector;\r\n        return _this;\r\n    }\r\n    /**\r\n     * Attach the given ComponentPortal to DOM element using the ComponentFactoryResolver.\r\n     * @param portal Portal to be attached\r\n     * @returns Reference to the created component.\r\n     */\r\n    /**\r\n     * Attach the given ComponentPortal to DOM element using the ComponentFactoryResolver.\r\n     * @template T\r\n     * @param {?} portal Portal to be attached\r\n     * @return {?} Reference to the created component.\r\n     */\r\n    DomPortalOutlet.prototype.attachComponentPortal = /**\r\n     * Attach the given ComponentPortal to DOM element using the ComponentFactoryResolver.\r\n     * @template T\r\n     * @param {?} portal Portal to be attached\r\n     * @return {?} Reference to the created component.\r\n     */\r\n    function (portal) {\r\n        var _this = this;\r\n        /** @type {?} */\r\n        var resolver = portal.componentFactoryResolver || this._componentFactoryResolver;\r\n        /** @type {?} */\r\n        var componentFactory = resolver.resolveComponentFactory(portal.component);\r\n        /** @type {?} */\r\n        var componentRef;\r\n        // If the portal specifies a ViewContainerRef, we will use that as the attachment point\r\n        // for the component (in terms of Angular's component tree, not rendering).\r\n        // When the ViewContainerRef is missing, we use the factory to create the component directly\r\n        // and then manually attach the view to the application.\r\n        if (portal.viewContainerRef) {\r\n            componentRef = portal.viewContainerRef.createComponent(componentFactory, portal.viewContainerRef.length, portal.injector || portal.viewContainerRef.injector);\r\n            this.setDisposeFn((/**\r\n             * @return {?}\r\n             */\r\n            function () { return componentRef.destroy(); }));\r\n        }\r\n        else {\r\n            componentRef = componentFactory.create(portal.injector || this._defaultInjector);\r\n            this._appRef.attachView(componentRef.hostView);\r\n            this.setDisposeFn((/**\r\n             * @return {?}\r\n             */\r\n            function () {\r\n                _this._appRef.detachView(componentRef.hostView);\r\n                componentRef.destroy();\r\n            }));\r\n        }\r\n        // At this point the component has been instantiated, so we move it to the location in the DOM\r\n        // where we want it to be rendered.\r\n        this.outletElement.appendChild(this._getComponentRootNode(componentRef));\r\n        return componentRef;\r\n    };\r\n    /**\r\n     * Attaches a template portal to the DOM as an embedded view.\r\n     * @param portal Portal to be attached.\r\n     * @returns Reference to the created embedded view.\r\n     */\r\n    /**\r\n     * Attaches a template portal to the DOM as an embedded view.\r\n     * @template C\r\n     * @param {?} portal Portal to be attached.\r\n     * @return {?} Reference to the created embedded view.\r\n     */\r\n    DomPortalOutlet.prototype.attachTemplatePortal = /**\r\n     * Attaches a template portal to the DOM as an embedded view.\r\n     * @template C\r\n     * @param {?} portal Portal to be attached.\r\n     * @return {?} Reference to the created embedded view.\r\n     */\r\n    function (portal) {\r\n        var _this = this;\r\n        /** @type {?} */\r\n        var viewContainer = portal.viewContainerRef;\r\n        /** @type {?} */\r\n        var viewRef = viewContainer.createEmbeddedView(portal.templateRef, portal.context);\r\n        viewRef.detectChanges();\r\n        // The method `createEmbeddedView` will add the view as a child of the viewContainer.\r\n        // But for the DomPortalOutlet the view can be added everywhere in the DOM\r\n        // (e.g Overlay Container) To move the view to the specified host element. We just\r\n        // re-append the existing root nodes.\r\n        viewRef.rootNodes.forEach((/**\r\n         * @param {?} rootNode\r\n         * @return {?}\r\n         */\r\n        function (rootNode) { return _this.outletElement.appendChild(rootNode); }));\r\n        this.setDisposeFn(((/**\r\n         * @return {?}\r\n         */\r\n        function () {\r\n            /** @type {?} */\r\n            var index = viewContainer.indexOf(viewRef);\r\n            if (index !== -1) {\r\n                viewContainer.remove(index);\r\n            }\r\n        })));\r\n        // TODO(jelbourn): Return locals from view.\r\n        return viewRef;\r\n    };\r\n    /**\r\n     * Clears out a portal from the DOM.\r\n     */\r\n    /**\r\n     * Clears out a portal from the DOM.\r\n     * @return {?}\r\n     */\r\n    DomPortalOutlet.prototype.dispose = /**\r\n     * Clears out a portal from the DOM.\r\n     * @return {?}\r\n     */\r\n    function () {\r\n        _super.prototype.dispose.call(this);\r\n        if (this.outletElement.parentNode != null) {\r\n            this.outletElement.parentNode.removeChild(this.outletElement);\r\n        }\r\n    };\r\n    /** Gets the root HTMLElement for an instantiated component. */\r\n    /**\r\n     * Gets the root HTMLElement for an instantiated component.\r\n     * @private\r\n     * @param {?} componentRef\r\n     * @return {?}\r\n     */\r\n    DomPortalOutlet.prototype._getComponentRootNode = /**\r\n     * Gets the root HTMLElement for an instantiated component.\r\n     * @private\r\n     * @param {?} componentRef\r\n     * @return {?}\r\n     */\r\n    function (componentRef) {\r\n        return (/** @type {?} */ (((/** @type {?} */ (componentRef.hostView))).rootNodes[0]));\r\n    };\r\n    return DomPortalOutlet;\r\n}(BasePortalOutlet));\r\n/**\r\n * @deprecated Use `DomPortalOutlet` instead.\r\n * \\@breaking-change 9.0.0\r\n */\r\nvar  /**\r\n * @deprecated Use `DomPortalOutlet` instead.\r\n * \\@breaking-change 9.0.0\r\n */\r\nDomPortalHost = /** @class */ (function (_super) {\r\n    __extends(DomPortalHost, _super);\r\n    function DomPortalHost() {\r\n        return _super !== null && _super.apply(this, arguments) || this;\r\n    }\r\n    return DomPortalHost;\r\n}(DomPortalOutlet));\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n/**\r\n * Directive version of a `TemplatePortal`. Because the directive *is* a TemplatePortal,\r\n * the directive instance itself can be attached to a host, enabling declarative use of portals.\r\n */\r\nvar CdkPortal = /** @class */ (function (_super) {\r\n    __extends(CdkPortal, _super);\r\n    function CdkPortal(templateRef, viewContainerRef) {\r\n        return _super.call(this, templateRef, viewContainerRef) || this;\r\n    }\r\n    CdkPortal.decorators = [\r\n        { type: Directive, args: [{\r\n                    selector: '[cdkPortal]',\r\n                    exportAs: 'cdkPortal',\r\n                },] },\r\n    ];\r\n    /** @nocollapse */\r\n    CdkPortal.ctorParameters = function () { return [\r\n        { type: TemplateRef },\r\n        { type: ViewContainerRef }\r\n    ]; };\r\n    return CdkPortal;\r\n}(TemplatePortal));\r\n/**\r\n * @deprecated Use `CdkPortal` instead.\r\n * \\@breaking-change 9.0.0\r\n */\r\nvar TemplatePortalDirective = /** @class */ (function (_super) {\r\n    __extends(TemplatePortalDirective, _super);\r\n    function TemplatePortalDirective() {\r\n        return _super !== null && _super.apply(this, arguments) || this;\r\n    }\r\n    TemplatePortalDirective.decorators = [\r\n        { type: Directive, args: [{\r\n                    selector: '[cdk-portal], [portal]',\r\n                    exportAs: 'cdkPortal',\r\n                    providers: [{\r\n                            provide: CdkPortal,\r\n                            useExisting: TemplatePortalDirective\r\n                        }]\r\n                },] },\r\n    ];\r\n    return TemplatePortalDirective;\r\n}(CdkPortal));\r\n/**\r\n * Directive version of a PortalOutlet. Because the directive *is* a PortalOutlet, portals can be\r\n * directly attached to it, enabling declarative use.\r\n *\r\n * Usage:\r\n * `<ng-template [cdkPortalOutlet]=\"greeting\"></ng-template>`\r\n */\r\nvar CdkPortalOutlet = /** @class */ (function (_super) {\r\n    __extends(CdkPortalOutlet, _super);\r\n    function CdkPortalOutlet(_componentFactoryResolver, _viewContainerRef) {\r\n        var _this = _super.call(this) || this;\r\n        _this._componentFactoryResolver = _componentFactoryResolver;\r\n        _this._viewContainerRef = _viewContainerRef;\r\n        /**\r\n         * Whether the portal component is initialized.\r\n         */\r\n        _this._isInitialized = false;\r\n        /**\r\n         * Emits when a portal is attached to the outlet.\r\n         */\r\n        _this.attached = new EventEmitter();\r\n        return _this;\r\n    }\r\n    Object.defineProperty(CdkPortalOutlet.prototype, \"portal\", {\r\n        /** Portal associated with the Portal outlet. */\r\n        get: /**\r\n         * Portal associated with the Portal outlet.\r\n         * @return {?}\r\n         */\r\n        function () {\r\n            return this._attachedPortal;\r\n        },\r\n        set: /**\r\n         * @param {?} portal\r\n         * @return {?}\r\n         */\r\n        function (portal) {\r\n            // Ignore the cases where the `portal` is set to a falsy value before the lifecycle hooks have\r\n            // run. This handles the cases where the user might do something like `<div cdkPortalOutlet>`\r\n            // and attach a portal programmatically in the parent component. When Angular does the first CD\r\n            // round, it will fire the setter with empty string, causing the user's content to be cleared.\r\n            if (this.hasAttached() && !portal && !this._isInitialized) {\r\n                return;\r\n            }\r\n            if (this.hasAttached()) {\r\n                _super.prototype.detach.call(this);\r\n            }\r\n            if (portal) {\r\n                _super.prototype.attach.call(this, portal);\r\n            }\r\n            this._attachedPortal = portal;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(CdkPortalOutlet.prototype, \"attachedRef\", {\r\n        /** Component or view reference that is attached to the portal. */\r\n        get: /**\r\n         * Component or view reference that is attached to the portal.\r\n         * @return {?}\r\n         */\r\n        function () {\r\n            return this._attachedRef;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * @return {?}\r\n     */\r\n    CdkPortalOutlet.prototype.ngOnInit = /**\r\n     * @return {?}\r\n     */\r\n    function () {\r\n        this._isInitialized = true;\r\n    };\r\n    /**\r\n     * @return {?}\r\n     */\r\n    CdkPortalOutlet.prototype.ngOnDestroy = /**\r\n     * @return {?}\r\n     */\r\n    function () {\r\n        _super.prototype.dispose.call(this);\r\n        this._attachedPortal = null;\r\n        this._attachedRef = null;\r\n    };\r\n    /**\r\n     * Attach the given ComponentPortal to this PortalOutlet using the ComponentFactoryResolver.\r\n     *\r\n     * @param portal Portal to be attached to the portal outlet.\r\n     * @returns Reference to the created component.\r\n     */\r\n    /**\r\n     * Attach the given ComponentPortal to this PortalOutlet using the ComponentFactoryResolver.\r\n     *\r\n     * @template T\r\n     * @param {?} portal Portal to be attached to the portal outlet.\r\n     * @return {?} Reference to the created component.\r\n     */\r\n    CdkPortalOutlet.prototype.attachComponentPortal = /**\r\n     * Attach the given ComponentPortal to this PortalOutlet using the ComponentFactoryResolver.\r\n     *\r\n     * @template T\r\n     * @param {?} portal Portal to be attached to the portal outlet.\r\n     * @return {?} Reference to the created component.\r\n     */\r\n    function (portal) {\r\n        portal.setAttachedHost(this);\r\n        // If the portal specifies an origin, use that as the logical location of the component\r\n        // in the application tree. Otherwise use the location of this PortalOutlet.\r\n        /** @type {?} */\r\n        var viewContainerRef = portal.viewContainerRef != null ?\r\n            portal.viewContainerRef :\r\n            this._viewContainerRef;\r\n        /** @type {?} */\r\n        var resolver = portal.componentFactoryResolver || this._componentFactoryResolver;\r\n        /** @type {?} */\r\n        var componentFactory = resolver.resolveComponentFactory(portal.component);\r\n        /** @type {?} */\r\n        var ref = viewContainerRef.createComponent(componentFactory, viewContainerRef.length, portal.injector || viewContainerRef.injector);\r\n        _super.prototype.setDisposeFn.call(this, (/**\r\n         * @return {?}\r\n         */\r\n        function () { return ref.destroy(); }));\r\n        this._attachedPortal = portal;\r\n        this._attachedRef = ref;\r\n        this.attached.emit(ref);\r\n        return ref;\r\n    };\r\n    /**\r\n     * Attach the given TemplatePortal to this PortlHost as an embedded View.\r\n     * @param portal Portal to be attached.\r\n     * @returns Reference to the created embedded view.\r\n     */\r\n    /**\r\n     * Attach the given TemplatePortal to this PortlHost as an embedded View.\r\n     * @template C\r\n     * @param {?} portal Portal to be attached.\r\n     * @return {?} Reference to the created embedded view.\r\n     */\r\n    CdkPortalOutlet.prototype.attachTemplatePortal = /**\r\n     * Attach the given TemplatePortal to this PortlHost as an embedded View.\r\n     * @template C\r\n     * @param {?} portal Portal to be attached.\r\n     * @return {?} Reference to the created embedded view.\r\n     */\r\n    function (portal) {\r\n        var _this = this;\r\n        portal.setAttachedHost(this);\r\n        /** @type {?} */\r\n        var viewRef = this._viewContainerRef.createEmbeddedView(portal.templateRef, portal.context);\r\n        _super.prototype.setDisposeFn.call(this, (/**\r\n         * @return {?}\r\n         */\r\n        function () { return _this._viewContainerRef.clear(); }));\r\n        this._attachedPortal = portal;\r\n        this._attachedRef = viewRef;\r\n        this.attached.emit(viewRef);\r\n        return viewRef;\r\n    };\r\n    CdkPortalOutlet.decorators = [\r\n        { type: Directive, args: [{\r\n                    selector: '[cdkPortalOutlet]',\r\n                    exportAs: 'cdkPortalOutlet',\r\n                    inputs: ['portal: cdkPortalOutlet']\r\n                },] },\r\n    ];\r\n    /** @nocollapse */\r\n    CdkPortalOutlet.ctorParameters = function () { return [\r\n        { type: ComponentFactoryResolver },\r\n        { type: ViewContainerRef }\r\n    ]; };\r\n    CdkPortalOutlet.propDecorators = {\r\n        attached: [{ type: Output }]\r\n    };\r\n    return CdkPortalOutlet;\r\n}(BasePortalOutlet));\r\n/**\r\n * @deprecated Use `CdkPortalOutlet` instead.\r\n * \\@breaking-change 9.0.0\r\n */\r\nvar PortalHostDirective = /** @class */ (function (_super) {\r\n    __extends(PortalHostDirective, _super);\r\n    function PortalHostDirective() {\r\n        return _super !== null && _super.apply(this, arguments) || this;\r\n    }\r\n    PortalHostDirective.decorators = [\r\n        { type: Directive, args: [{\r\n                    selector: '[cdkPortalHost], [portalHost]',\r\n                    exportAs: 'cdkPortalHost',\r\n                    inputs: ['portal: cdkPortalHost'],\r\n                    providers: [{\r\n                            provide: CdkPortalOutlet,\r\n                            useExisting: PortalHostDirective\r\n                        }]\r\n                },] },\r\n    ];\r\n    return PortalHostDirective;\r\n}(CdkPortalOutlet));\r\nvar PortalModule = /** @class */ (function () {\r\n    function PortalModule() {\r\n    }\r\n    PortalModule.decorators = [\r\n        { type: NgModule, args: [{\r\n                    exports: [CdkPortal, CdkPortalOutlet, TemplatePortalDirective, PortalHostDirective],\r\n                    declarations: [CdkPortal, CdkPortalOutlet, TemplatePortalDirective, PortalHostDirective],\r\n                },] },\r\n    ];\r\n    return PortalModule;\r\n}());\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n\r\n/**\r\n * Custom injector to be used when providing custom\r\n * injection tokens to components inside a portal.\r\n * \\@docs-private\r\n */\r\nvar  /**\r\n * Custom injector to be used when providing custom\r\n * injection tokens to components inside a portal.\r\n * \\@docs-private\r\n */\r\nPortalInjector = /** @class */ (function () {\r\n    function PortalInjector(_parentInjector, _customTokens) {\r\n        this._parentInjector = _parentInjector;\r\n        this._customTokens = _customTokens;\r\n    }\r\n    /**\r\n     * @param {?} token\r\n     * @param {?=} notFoundValue\r\n     * @return {?}\r\n     */\r\n    PortalInjector.prototype.get = /**\r\n     * @param {?} token\r\n     * @param {?=} notFoundValue\r\n     * @return {?}\r\n     */\r\n    function (token, notFoundValue) {\r\n        /** @type {?} */\r\n        var value = this._customTokens.get(token);\r\n        if (typeof value !== 'undefined') {\r\n            return value;\r\n        }\r\n        return this._parentInjector.get(token, notFoundValue);\r\n    };\r\n    return PortalInjector;\r\n}());\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n\r\nexport { Portal, ComponentPortal, TemplatePortal, BasePortalOutlet, BasePortalHost, DomPortalOutlet, DomPortalHost, CdkPortal, TemplatePortalDirective, CdkPortalOutlet, PortalHostDirective, PortalModule, PortalInjector };\r\n\r\n"]}