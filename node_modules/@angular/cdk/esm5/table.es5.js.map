{"version":3,"sources":["v:/jad-admin-go/mazat_admin_panel/node_modules/@angular/cdk/esm5/table.es5.js"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAYA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;KAiGK,AAGC;;;;;;;;;2EAIG;;;;;;;;;;KAUJ,AAGC;;;;;;;;;2EAIG;;;;;;;;;;KAUJ,AAGC;;;;;;;;;2EAIG;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;OAkFF,AAOD;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;cAOA;;;;;;;;;;;;;;;;;;;;;;;;KAwBD,AASC;;;;;;;;;;;;;;;;;;sFAKG;;;;;;;;;;KAUJ,AASC;;;;;;;;;;;;;;;;;;sFAKG;;;;;;;;;;KAUJ,AASC;;;;;;;;;;;;;;;;;;sFAKG;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;MAoIH,AAMA;;;;;;;;;;;;;yGAKG;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;MA+CH,AAMA;;;;;;;;;;;;;yGAKG;;;;;;;;;;;;;;;KAeJ,AAMC;;;;;;;;;;;;;0FAKG;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8CAgCqC,AAGxC;;;;;;;;;uGAIG;;;;;;;;KAQJ;;;;;;;;;;;;;;;;;;;0CAaC;;;;;;;;KAQD;;;;;;;;;;;;;;;;;;;0CAaC;;;;;;;;KAQD;;;;;;;;;;;;;;;;;;;0CAakji8CH,AAeA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;cAsBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;MAoJA,AAaA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;cAcA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;KAgCD;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2KAOC","file":"table.es5.js","sourcesContent":["/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nimport { __extends } from 'tslib';\r\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\r\nimport { ContentChild, Directive, ElementRef, Input, TemplateRef, ChangeDetectionStrategy, Component, IterableDiffers, ViewContainerRef, ViewEncapsulation, Attribute, ChangeDetectorRef, ContentChildren, EmbeddedViewRef, Inject, isDevMode, Optional, ViewChild, InjectionToken, NgModule } from '@angular/core';\r\nimport { Directionality } from '@angular/cdk/bidi';\r\nimport { isDataSource } from '@angular/cdk/collections';\r\nexport { DataSource } from '@angular/cdk/collections';\r\nimport { Platform } from '@angular/cdk/platform';\r\nimport { DOCUMENT, CommonModule } from '@angular/common';\r\nimport { BehaviorSubject, Observable, of, Subject } from 'rxjs';\r\nimport { takeUntil } from 'rxjs/operators';\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n/**\r\n * Mixin to provide a directive with a function that checks if the sticky input has been\r\n * changed since the last time the function was called. Essentially adds a dirty-check to the\r\n * sticky value.\r\n * \\@docs-private\r\n * @template T\r\n * @param {?} base\r\n * @return {?}\r\n */\r\nfunction mixinHasStickyInput(base) {\r\n    return /** @class */ (function (_super) {\r\n        __extends(class_1, _super);\r\n        function class_1() {\r\n            var args = [];\r\n            for (var _i = 0; _i < arguments.length; _i++) {\r\n                args[_i] = arguments[_i];\r\n            }\r\n            var _this = _super.apply(this, args) || this;\r\n            _this._sticky = false;\r\n            /**\r\n             * Whether the sticky input has changed since it was last checked.\r\n             */\r\n            _this._hasStickyChanged = false;\r\n            return _this;\r\n        }\r\n        Object.defineProperty(class_1.prototype, \"sticky\", {\r\n            /** Whether sticky positioning should be applied. */\r\n            get: /**\r\n             * Whether sticky positioning should be applied.\r\n             * @return {?}\r\n             */\r\n            function () { return this._sticky; },\r\n            set: /**\r\n             * @param {?} v\r\n             * @return {?}\r\n             */\r\n            function (v) {\r\n                /** @type {?} */\r\n                var prevValue = this._sticky;\r\n                this._sticky = coerceBooleanProperty(v);\r\n                this._hasStickyChanged = prevValue !== this._sticky;\r\n            },\r\n            enumerable: true,\r\n            configurable: true\r\n        });\r\n        /** Whether the sticky value has changed since this was last called. */\r\n        /**\r\n         * Whether the sticky value has changed since this was last called.\r\n         * @return {?}\r\n         */\r\n        class_1.prototype.hasStickyChanged = /**\r\n         * Whether the sticky value has changed since this was last called.\r\n         * @return {?}\r\n         */\r\n        function () {\r\n            /** @type {?} */\r\n            var hasStickyChanged = this._hasStickyChanged;\r\n            this._hasStickyChanged = false;\r\n            return hasStickyChanged;\r\n        };\r\n        /** Resets the dirty check for cases where the sticky state has been used without checking. */\r\n        /**\r\n         * Resets the dirty check for cases where the sticky state has been used without checking.\r\n         * @return {?}\r\n         */\r\n        class_1.prototype.resetStickyChanged = /**\r\n         * Resets the dirty check for cases where the sticky state has been used without checking.\r\n         * @return {?}\r\n         */\r\n        function () {\r\n            this._hasStickyChanged = false;\r\n        };\r\n        return class_1;\r\n    }(base));\r\n}\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n/**\r\n * Cell definition for a CDK table.\r\n * Captures the template of a column's data row cell as well as cell-specific properties.\r\n */\r\nvar CdkCellDef = /** @class */ (function () {\r\n    function CdkCellDef(/** @docs-private */ template) {\r\n        this.template = template;\r\n    }\r\n    CdkCellDef.decorators = [\r\n        { type: Directive, args: [{ selector: '[cdkCellDef]' },] },\r\n    ];\r\n    /** @nocollapse */\r\n    CdkCellDef.ctorParameters = function () { return [\r\n        { type: TemplateRef }\r\n    ]; };\r\n    return CdkCellDef;\r\n}());\r\n/**\r\n * Header cell definition for a CDK table.\r\n * Captures the template of a column's header cell and as well as cell-specific properties.\r\n */\r\nvar CdkHeaderCellDef = /** @class */ (function () {\r\n    function CdkHeaderCellDef(/** @docs-private */ template) {\r\n        this.template = template;\r\n    }\r\n    CdkHeaderCellDef.decorators = [\r\n        { type: Directive, args: [{ selector: '[cdkHeaderCellDef]' },] },\r\n    ];\r\n    /** @nocollapse */\r\n    CdkHeaderCellDef.ctorParameters = function () { return [\r\n        { type: TemplateRef }\r\n    ]; };\r\n    return CdkHeaderCellDef;\r\n}());\r\n/**\r\n * Footer cell definition for a CDK table.\r\n * Captures the template of a column's footer cell and as well as cell-specific properties.\r\n */\r\nvar CdkFooterCellDef = /** @class */ (function () {\r\n    function CdkFooterCellDef(/** @docs-private */ template) {\r\n        this.template = template;\r\n    }\r\n    CdkFooterCellDef.decorators = [\r\n        { type: Directive, args: [{ selector: '[cdkFooterCellDef]' },] },\r\n    ];\r\n    /** @nocollapse */\r\n    CdkFooterCellDef.ctorParameters = function () { return [\r\n        { type: TemplateRef }\r\n    ]; };\r\n    return CdkFooterCellDef;\r\n}());\r\n// Boilerplate for applying mixins to CdkColumnDef.\r\n/**\r\n * \\@docs-private\r\n */\r\nvar \r\n// Boilerplate for applying mixins to CdkColumnDef.\r\n/**\r\n * \\@docs-private\r\n */\r\nCdkColumnDefBase = /** @class */ (function () {\r\n    function CdkColumnDefBase() {\r\n    }\r\n    return CdkColumnDefBase;\r\n}());\r\n/** @type {?} */\r\nvar _CdkColumnDefBase = mixinHasStickyInput(CdkColumnDefBase);\r\n/**\r\n * Column definition for the CDK table.\r\n * Defines a set of cells available for a table column.\r\n */\r\nvar CdkColumnDef = /** @class */ (function (_super) {\r\n    __extends(CdkColumnDef, _super);\r\n    function CdkColumnDef() {\r\n        var _this = _super !== null && _super.apply(this, arguments) || this;\r\n        _this._stickyEnd = false;\r\n        return _this;\r\n    }\r\n    Object.defineProperty(CdkColumnDef.prototype, \"name\", {\r\n        /** Unique name for this column. */\r\n        get: /**\r\n         * Unique name for this column.\r\n         * @return {?}\r\n         */\r\n        function () {\r\n            return this._name;\r\n        },\r\n        set: /**\r\n         * @param {?} name\r\n         * @return {?}\r\n         */\r\n        function (name) {\r\n            // If the directive is set without a name (updated programatically), then this setter will\r\n            // trigger with an empty string and should not overwrite the programatically set value.\r\n            if (!name) {\r\n                return;\r\n            }\r\n            this._name = name;\r\n            this.cssClassFriendlyName = name.replace(/[^a-z0-9_-]/ig, '-');\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(CdkColumnDef.prototype, \"stickyEnd\", {\r\n        /**\r\n         * Whether this column should be sticky positioned on the end of the row. Should make sure\r\n         * that it mimics the `CanStick` mixin such that `_hasStickyChanged` is set to true if the value\r\n         * has been changed.\r\n         */\r\n        get: /**\r\n         * Whether this column should be sticky positioned on the end of the row. Should make sure\r\n         * that it mimics the `CanStick` mixin such that `_hasStickyChanged` is set to true if the value\r\n         * has been changed.\r\n         * @return {?}\r\n         */\r\n        function () {\r\n            return this._stickyEnd;\r\n        },\r\n        set: /**\r\n         * @param {?} v\r\n         * @return {?}\r\n         */\r\n        function (v) {\r\n            /** @type {?} */\r\n            var prevValue = this._stickyEnd;\r\n            this._stickyEnd = coerceBooleanProperty(v);\r\n            this._hasStickyChanged = prevValue !== this._stickyEnd;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    CdkColumnDef.decorators = [\r\n        { type: Directive, args: [{\r\n                    selector: '[cdkColumnDef]',\r\n                    inputs: ['sticky'],\r\n                    providers: [{ provide: 'MAT_SORT_HEADER_COLUMN_DEF', useExisting: CdkColumnDef }],\r\n                },] },\r\n    ];\r\n    CdkColumnDef.propDecorators = {\r\n        name: [{ type: Input, args: ['cdkColumnDef',] }],\r\n        stickyEnd: [{ type: Input, args: ['stickyEnd',] }],\r\n        cell: [{ type: ContentChild, args: [CdkCellDef, { static: false },] }],\r\n        headerCell: [{ type: ContentChild, args: [CdkHeaderCellDef, { static: false },] }],\r\n        footerCell: [{ type: ContentChild, args: [CdkFooterCellDef, { static: false },] }]\r\n    };\r\n    return CdkColumnDef;\r\n}(_CdkColumnDefBase));\r\n/**\r\n * Base class for the cells. Adds a CSS classname that identifies the column it renders in.\r\n */\r\nvar  /**\r\n * Base class for the cells. Adds a CSS classname that identifies the column it renders in.\r\n */\r\nBaseCdkCell = /** @class */ (function () {\r\n    function BaseCdkCell(columnDef, elementRef) {\r\n        /** @type {?} */\r\n        var columnClassName = \"cdk-column-\" + columnDef.cssClassFriendlyName;\r\n        elementRef.nativeElement.classList.add(columnClassName);\r\n    }\r\n    return BaseCdkCell;\r\n}());\r\n/**\r\n * Header cell template container that adds the right classes and role.\r\n */\r\nvar CdkHeaderCell = /** @class */ (function (_super) {\r\n    __extends(CdkHeaderCell, _super);\r\n    function CdkHeaderCell(columnDef, elementRef) {\r\n        return _super.call(this, columnDef, elementRef) || this;\r\n    }\r\n    CdkHeaderCell.decorators = [\r\n        { type: Directive, args: [{\r\n                    selector: 'cdk-header-cell, th[cdk-header-cell]',\r\n                    host: {\r\n                        'class': 'cdk-header-cell',\r\n                        'role': 'columnheader',\r\n                    },\r\n                },] },\r\n    ];\r\n    /** @nocollapse */\r\n    CdkHeaderCell.ctorParameters = function () { return [\r\n        { type: CdkColumnDef },\r\n        { type: ElementRef }\r\n    ]; };\r\n    return CdkHeaderCell;\r\n}(BaseCdkCell));\r\n/**\r\n * Footer cell template container that adds the right classes and role.\r\n */\r\nvar CdkFooterCell = /** @class */ (function (_super) {\r\n    __extends(CdkFooterCell, _super);\r\n    function CdkFooterCell(columnDef, elementRef) {\r\n        return _super.call(this, columnDef, elementRef) || this;\r\n    }\r\n    CdkFooterCell.decorators = [\r\n        { type: Directive, args: [{\r\n                    selector: 'cdk-footer-cell, td[cdk-footer-cell]',\r\n                    host: {\r\n                        'class': 'cdk-footer-cell',\r\n                        'role': 'gridcell',\r\n                    },\r\n                },] },\r\n    ];\r\n    /** @nocollapse */\r\n    CdkFooterCell.ctorParameters = function () { return [\r\n        { type: CdkColumnDef },\r\n        { type: ElementRef }\r\n    ]; };\r\n    return CdkFooterCell;\r\n}(BaseCdkCell));\r\n/**\r\n * Cell template container that adds the right classes and role.\r\n */\r\nvar CdkCell = /** @class */ (function (_super) {\r\n    __extends(CdkCell, _super);\r\n    function CdkCell(columnDef, elementRef) {\r\n        return _super.call(this, columnDef, elementRef) || this;\r\n    }\r\n    CdkCell.decorators = [\r\n        { type: Directive, args: [{\r\n                    selector: 'cdk-cell, td[cdk-cell]',\r\n                    host: {\r\n                        'class': 'cdk-cell',\r\n                        'role': 'gridcell',\r\n                    },\r\n                },] },\r\n    ];\r\n    /** @nocollapse */\r\n    CdkCell.ctorParameters = function () { return [\r\n        { type: CdkColumnDef },\r\n        { type: ElementRef }\r\n    ]; };\r\n    return CdkCell;\r\n}(BaseCdkCell));\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n/**\r\n * The row template that can be used by the mat-table. Should not be used outside of the\r\n * material library.\r\n * @type {?}\r\n */\r\nvar CDK_ROW_TEMPLATE = \"<ng-container cdkCellOutlet></ng-container>\";\r\n/**\r\n * Base class for the CdkHeaderRowDef and CdkRowDef that handles checking their columns inputs\r\n * for changes and notifying the table.\r\n * @abstract\r\n */\r\nvar  /**\r\n * Base class for the CdkHeaderRowDef and CdkRowDef that handles checking their columns inputs\r\n * for changes and notifying the table.\r\n * @abstract\r\n */\r\nBaseRowDef = /** @class */ (function () {\r\n    function BaseRowDef(template, _differs) {\r\n        this.template = template;\r\n        this._differs = _differs;\r\n    }\r\n    /**\r\n     * @param {?} changes\r\n     * @return {?}\r\n     */\r\n    BaseRowDef.prototype.ngOnChanges = /**\r\n     * @param {?} changes\r\n     * @return {?}\r\n     */\r\n    function (changes) {\r\n        // Create a new columns differ if one does not yet exist. Initialize it based on initial value\r\n        // of the columns property or an empty array if none is provided.\r\n        if (!this._columnsDiffer) {\r\n            /** @type {?} */\r\n            var columns = (changes['columns'] && changes['columns'].currentValue) || [];\r\n            this._columnsDiffer = this._differs.find(columns).create();\r\n            this._columnsDiffer.diff(columns);\r\n        }\r\n    };\r\n    /**\r\n     * Returns the difference between the current columns and the columns from the last diff, or null\r\n     * if there is no difference.\r\n     */\r\n    /**\r\n     * Returns the difference between the current columns and the columns from the last diff, or null\r\n     * if there is no difference.\r\n     * @return {?}\r\n     */\r\n    BaseRowDef.prototype.getColumnsDiff = /**\r\n     * Returns the difference between the current columns and the columns from the last diff, or null\r\n     * if there is no difference.\r\n     * @return {?}\r\n     */\r\n    function () {\r\n        return this._columnsDiffer.diff(this.columns);\r\n    };\r\n    /** Gets this row def's relevant cell template from the provided column def. */\r\n    /**\r\n     * Gets this row def's relevant cell template from the provided column def.\r\n     * @param {?} column\r\n     * @return {?}\r\n     */\r\n    BaseRowDef.prototype.extractCellTemplate = /**\r\n     * Gets this row def's relevant cell template from the provided column def.\r\n     * @param {?} column\r\n     * @return {?}\r\n     */\r\n    function (column) {\r\n        if (this instanceof CdkHeaderRowDef) {\r\n            return column.headerCell.template;\r\n        }\r\n        if (this instanceof CdkFooterRowDef) {\r\n            return column.footerCell.template;\r\n        }\r\n        else {\r\n            return column.cell.template;\r\n        }\r\n    };\r\n    return BaseRowDef;\r\n}());\r\n// Boilerplate for applying mixins to CdkHeaderRowDef.\r\n/**\r\n * \\@docs-private\r\n */\r\nvar \r\n// Boilerplate for applying mixins to CdkHeaderRowDef.\r\n/**\r\n * \\@docs-private\r\n */\r\nCdkHeaderRowDefBase = /** @class */ (function (_super) {\r\n    __extends(CdkHeaderRowDefBase, _super);\r\n    function CdkHeaderRowDefBase() {\r\n        return _super !== null && _super.apply(this, arguments) || this;\r\n    }\r\n    return CdkHeaderRowDefBase;\r\n}(BaseRowDef));\r\n/** @type {?} */\r\nvar _CdkHeaderRowDefBase = mixinHasStickyInput(CdkHeaderRowDefBase);\r\n/**\r\n * Header row definition for the CDK table.\r\n * Captures the header row's template and other header properties such as the columns to display.\r\n */\r\nvar CdkHeaderRowDef = /** @class */ (function (_super) {\r\n    __extends(CdkHeaderRowDef, _super);\r\n    function CdkHeaderRowDef(template, _differs) {\r\n        return _super.call(this, template, _differs) || this;\r\n    }\r\n    // Prerender fails to recognize that ngOnChanges in a part of this class through inheritance.\r\n    // Explicitly define it so that the method is called as part of the Angular lifecycle.\r\n    // Prerender fails to recognize that ngOnChanges in a part of this class through inheritance.\r\n    // Explicitly define it so that the method is called as part of the Angular lifecycle.\r\n    /**\r\n     * @param {?} changes\r\n     * @return {?}\r\n     */\r\n    CdkHeaderRowDef.prototype.ngOnChanges = \r\n    // Prerender fails to recognize that ngOnChanges in a part of this class through inheritance.\r\n    // Explicitly define it so that the method is called as part of the Angular lifecycle.\r\n    /**\r\n     * @param {?} changes\r\n     * @return {?}\r\n     */\r\n    function (changes) {\r\n        _super.prototype.ngOnChanges.call(this, changes);\r\n    };\r\n    CdkHeaderRowDef.decorators = [\r\n        { type: Directive, args: [{\r\n                    selector: '[cdkHeaderRowDef]',\r\n                    inputs: ['columns: cdkHeaderRowDef', 'sticky: cdkHeaderRowDefSticky'],\r\n                },] },\r\n    ];\r\n    /** @nocollapse */\r\n    CdkHeaderRowDef.ctorParameters = function () { return [\r\n        { type: TemplateRef },\r\n        { type: IterableDiffers }\r\n    ]; };\r\n    return CdkHeaderRowDef;\r\n}(_CdkHeaderRowDefBase));\r\n// Boilerplate for applying mixins to CdkFooterRowDef.\r\n/**\r\n * \\@docs-private\r\n */\r\nvar \r\n// Boilerplate for applying mixins to CdkFooterRowDef.\r\n/**\r\n * \\@docs-private\r\n */\r\nCdkFooterRowDefBase = /** @class */ (function (_super) {\r\n    __extends(CdkFooterRowDefBase, _super);\r\n    function CdkFooterRowDefBase() {\r\n        return _super !== null && _super.apply(this, arguments) || this;\r\n    }\r\n    return CdkFooterRowDefBase;\r\n}(BaseRowDef));\r\n/** @type {?} */\r\nvar _CdkFooterRowDefBase = mixinHasStickyInput(CdkFooterRowDefBase);\r\n/**\r\n * Footer row definition for the CDK table.\r\n * Captures the footer row's template and other footer properties such as the columns to display.\r\n */\r\nvar CdkFooterRowDef = /** @class */ (function (_super) {\r\n    __extends(CdkFooterRowDef, _super);\r\n    function CdkFooterRowDef(template, _differs) {\r\n        return _super.call(this, template, _differs) || this;\r\n    }\r\n    // Prerender fails to recognize that ngOnChanges in a part of this class through inheritance.\r\n    // Explicitly define it so that the method is called as part of the Angular lifecycle.\r\n    // Prerender fails to recognize that ngOnChanges in a part of this class through inheritance.\r\n    // Explicitly define it so that the method is called as part of the Angular lifecycle.\r\n    /**\r\n     * @param {?} changes\r\n     * @return {?}\r\n     */\r\n    CdkFooterRowDef.prototype.ngOnChanges = \r\n    // Prerender fails to recognize that ngOnChanges in a part of this class through inheritance.\r\n    // Explicitly define it so that the method is called as part of the Angular lifecycle.\r\n    /**\r\n     * @param {?} changes\r\n     * @return {?}\r\n     */\r\n    function (changes) {\r\n        _super.prototype.ngOnChanges.call(this, changes);\r\n    };\r\n    CdkFooterRowDef.decorators = [\r\n        { type: Directive, args: [{\r\n                    selector: '[cdkFooterRowDef]',\r\n                    inputs: ['columns: cdkFooterRowDef', 'sticky: cdkFooterRowDefSticky'],\r\n                },] },\r\n    ];\r\n    /** @nocollapse */\r\n    CdkFooterRowDef.ctorParameters = function () { return [\r\n        { type: TemplateRef },\r\n        { type: IterableDiffers }\r\n    ]; };\r\n    return CdkFooterRowDef;\r\n}(_CdkFooterRowDefBase));\r\n/**\r\n * Data row definition for the CDK table.\r\n * Captures the header row's template and other row properties such as the columns to display and\r\n * a when predicate that describes when this row should be used.\r\n * @template T\r\n */\r\nvar CdkRowDef = /** @class */ (function (_super) {\r\n    __extends(CdkRowDef, _super);\r\n    // TODO(andrewseguin): Add an input for providing a switch function to determine\r\n    //   if this template should be used.\r\n    function CdkRowDef(template, _differs) {\r\n        return _super.call(this, template, _differs) || this;\r\n    }\r\n    CdkRowDef.decorators = [\r\n        { type: Directive, args: [{\r\n                    selector: '[cdkRowDef]',\r\n                    inputs: ['columns: cdkRowDefColumns', 'when: cdkRowDefWhen'],\r\n                },] },\r\n    ];\r\n    /** @nocollapse */\r\n    CdkRowDef.ctorParameters = function () { return [\r\n        { type: TemplateRef },\r\n        { type: IterableDiffers }\r\n    ]; };\r\n    return CdkRowDef;\r\n}(BaseRowDef));\r\n/**\r\n * Outlet for rendering cells inside of a row or header row.\r\n * \\@docs-private\r\n */\r\nvar CdkCellOutlet = /** @class */ (function () {\r\n    function CdkCellOutlet(_viewContainer) {\r\n        this._viewContainer = _viewContainer;\r\n        CdkCellOutlet.mostRecentCellOutlet = this;\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    CdkCellOutlet.prototype.ngOnDestroy = /**\r\n     * @return {?}\r\n     */\r\n    function () {\r\n        // If this was the last outlet being rendered in the view, remove the reference\r\n        // from the static property after it has been destroyed to avoid leaking memory.\r\n        if (CdkCellOutlet.mostRecentCellOutlet === this) {\r\n            CdkCellOutlet.mostRecentCellOutlet = null;\r\n        }\r\n    };\r\n    /**\r\n     * Static property containing the latest constructed instance of this class.\r\n     * Used by the CDK table when each CdkHeaderRow and CdkRow component is created using\r\n     * createEmbeddedView. After one of these components are created, this property will provide\r\n     * a handle to provide that component's cells and context. After init, the CdkCellOutlet will\r\n     * construct the cells with the provided context.\r\n     */\r\n    CdkCellOutlet.mostRecentCellOutlet = null;\r\n    CdkCellOutlet.decorators = [\r\n        { type: Directive, args: [{ selector: '[cdkCellOutlet]' },] },\r\n    ];\r\n    /** @nocollapse */\r\n    CdkCellOutlet.ctorParameters = function () { return [\r\n        { type: ViewContainerRef }\r\n    ]; };\r\n    return CdkCellOutlet;\r\n}());\r\n/**\r\n * Header template container that contains the cell outlet. Adds the right class and role.\r\n */\r\nvar CdkHeaderRow = /** @class */ (function () {\r\n    function CdkHeaderRow() {\r\n    }\r\n    CdkHeaderRow.decorators = [\r\n        { type: Component, args: [{selector: 'cdk-header-row, tr[cdk-header-row]',\r\n                    template: CDK_ROW_TEMPLATE,\r\n                    host: {\r\n                        'class': 'cdk-header-row',\r\n                        'role': 'row',\r\n                    },\r\n                    // See note on CdkTable for explanation on why this uses the default change detection strategy.\r\n                    // tslint:disable-next-line:validate-decorators\r\n                    changeDetection: ChangeDetectionStrategy.Default,\r\n                    encapsulation: ViewEncapsulation.None,\r\n                },] },\r\n    ];\r\n    return CdkHeaderRow;\r\n}());\r\n/**\r\n * Footer template container that contains the cell outlet. Adds the right class and role.\r\n */\r\nvar CdkFooterRow = /** @class */ (function () {\r\n    function CdkFooterRow() {\r\n    }\r\n    CdkFooterRow.decorators = [\r\n        { type: Component, args: [{selector: 'cdk-footer-row, tr[cdk-footer-row]',\r\n                    template: CDK_ROW_TEMPLATE,\r\n                    host: {\r\n                        'class': 'cdk-footer-row',\r\n                        'role': 'row',\r\n                    },\r\n                    // See note on CdkTable for explanation on why this uses the default change detection strategy.\r\n                    // tslint:disable-next-line:validate-decorators\r\n                    changeDetection: ChangeDetectionStrategy.Default,\r\n                    encapsulation: ViewEncapsulation.None,\r\n                },] },\r\n    ];\r\n    return CdkFooterRow;\r\n}());\r\n/**\r\n * Data row template container that contains the cell outlet. Adds the right class and role.\r\n */\r\nvar CdkRow = /** @class */ (function () {\r\n    function CdkRow() {\r\n    }\r\n    CdkRow.decorators = [\r\n        { type: Component, args: [{selector: 'cdk-row, tr[cdk-row]',\r\n                    template: CDK_ROW_TEMPLATE,\r\n                    host: {\r\n                        'class': 'cdk-row',\r\n                        'role': 'row',\r\n                    },\r\n                    // See note on CdkTable for explanation on why this uses the default change detection strategy.\r\n                    // tslint:disable-next-line:validate-decorators\r\n                    changeDetection: ChangeDetectionStrategy.Default,\r\n                    encapsulation: ViewEncapsulation.None,\r\n                },] },\r\n    ];\r\n    return CdkRow;\r\n}());\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n\r\n/**\r\n * List of all possible directions that can be used for sticky positioning.\r\n * \\@docs-private\r\n * @type {?}\r\n */\r\nvar STICKY_DIRECTIONS = ['top', 'bottom', 'left', 'right'];\r\n/**\r\n * Applies and removes sticky positioning styles to the `CdkTable` rows and columns cells.\r\n * \\@docs-private\r\n */\r\nvar  /**\r\n * Applies and removes sticky positioning styles to the `CdkTable` rows and columns cells.\r\n * \\@docs-private\r\n */\r\nStickyStyler = /** @class */ (function () {\r\n    /**\r\n     * @param _isNativeHtmlTable Whether the sticky logic should be based on a table\r\n     *     that uses the native `<table>` element.\r\n     * @param _stickCellCss The CSS class that will be applied to every row/cell that has\r\n     *     sticky positioning applied.\r\n     * @param direction The directionality context of the table (ltr/rtl); affects column positioning\r\n     *     by reversing left/right positions.\r\n     * @param _isBrowser Whether the table is currently being rendered on the server or the client.\r\n     */\r\n    function StickyStyler(_isNativeHtmlTable, _stickCellCss, direction, _isBrowser) {\r\n        if (_isBrowser === void 0) { _isBrowser = true; }\r\n        this._isNativeHtmlTable = _isNativeHtmlTable;\r\n        this._stickCellCss = _stickCellCss;\r\n        this.direction = direction;\r\n        this._isBrowser = _isBrowser;\r\n    }\r\n    /**\r\n     * Clears the sticky positioning styles from the row and its cells by resetting the `position`\r\n     * style, setting the zIndex to 0, and unsetting each provided sticky direction.\r\n     * @param rows The list of rows that should be cleared from sticking in the provided directions\r\n     * @param stickyDirections The directions that should no longer be set as sticky on the rows.\r\n     */\r\n    /**\r\n     * Clears the sticky positioning styles from the row and its cells by resetting the `position`\r\n     * style, setting the zIndex to 0, and unsetting each provided sticky direction.\r\n     * @param {?} rows The list of rows that should be cleared from sticking in the provided directions\r\n     * @param {?} stickyDirections The directions that should no longer be set as sticky on the rows.\r\n     * @return {?}\r\n     */\r\n    StickyStyler.prototype.clearStickyPositioning = /**\r\n     * Clears the sticky positioning styles from the row and its cells by resetting the `position`\r\n     * style, setting the zIndex to 0, and unsetting each provided sticky direction.\r\n     * @param {?} rows The list of rows that should be cleared from sticking in the provided directions\r\n     * @param {?} stickyDirections The directions that should no longer be set as sticky on the rows.\r\n     * @return {?}\r\n     */\r\n    function (rows, stickyDirections) {\r\n        for (var _i = 0, rows_1 = rows; _i < rows_1.length; _i++) {\r\n            var row = rows_1[_i];\r\n            // If the row isn't an element (e.g. if it's an `ng-container`),\r\n            // it won't have inline styles or `children` so we skip it.\r\n            if (row.nodeType !== row.ELEMENT_NODE) {\r\n                continue;\r\n            }\r\n            this._removeStickyStyle(row, stickyDirections);\r\n            for (var i = 0; i < row.children.length; i++) {\r\n                /** @type {?} */\r\n                var cell = (/** @type {?} */ (row.children[i]));\r\n                this._removeStickyStyle(cell, stickyDirections);\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Applies sticky left and right positions to the cells of each row according to the sticky\r\n     * states of the rendered column definitions.\r\n     * @param rows The rows that should have its set of cells stuck according to the sticky states.\r\n     * @param stickyStartStates A list of boolean states where each state represents whether the cell\r\n     *     in this index position should be stuck to the start of the row.\r\n     * @param stickyEndStates A list of boolean states where each state represents whether the cell\r\n     *     in this index position should be stuck to the end of the row.\r\n     */\r\n    /**\r\n     * Applies sticky left and right positions to the cells of each row according to the sticky\r\n     * states of the rendered column definitions.\r\n     * @param {?} rows The rows that should have its set of cells stuck according to the sticky states.\r\n     * @param {?} stickyStartStates A list of boolean states where each state represents whether the cell\r\n     *     in this index position should be stuck to the start of the row.\r\n     * @param {?} stickyEndStates A list of boolean states where each state represents whether the cell\r\n     *     in this index position should be stuck to the end of the row.\r\n     * @return {?}\r\n     */\r\n    StickyStyler.prototype.updateStickyColumns = /**\r\n     * Applies sticky left and right positions to the cells of each row according to the sticky\r\n     * states of the rendered column definitions.\r\n     * @param {?} rows The rows that should have its set of cells stuck according to the sticky states.\r\n     * @param {?} stickyStartStates A list of boolean states where each state represents whether the cell\r\n     *     in this index position should be stuck to the start of the row.\r\n     * @param {?} stickyEndStates A list of boolean states where each state represents whether the cell\r\n     *     in this index position should be stuck to the end of the row.\r\n     * @return {?}\r\n     */\r\n    function (rows, stickyStartStates, stickyEndStates) {\r\n        /** @type {?} */\r\n        var hasStickyColumns = stickyStartStates.some((/**\r\n         * @param {?} state\r\n         * @return {?}\r\n         */\r\n        function (state) { return state; })) || stickyEndStates.some((/**\r\n         * @param {?} state\r\n         * @return {?}\r\n         */\r\n        function (state) { return state; }));\r\n        if (!rows.length || !hasStickyColumns || !this._isBrowser) {\r\n            return;\r\n        }\r\n        /** @type {?} */\r\n        var firstRow = rows[0];\r\n        /** @type {?} */\r\n        var numCells = firstRow.children.length;\r\n        /** @type {?} */\r\n        var cellWidths = this._getCellWidths(firstRow);\r\n        /** @type {?} */\r\n        var startPositions = this._getStickyStartColumnPositions(cellWidths, stickyStartStates);\r\n        /** @type {?} */\r\n        var endPositions = this._getStickyEndColumnPositions(cellWidths, stickyEndStates);\r\n        /** @type {?} */\r\n        var isRtl = this.direction === 'rtl';\r\n        for (var _i = 0, rows_2 = rows; _i < rows_2.length; _i++) {\r\n            var row = rows_2[_i];\r\n            for (var i = 0; i < numCells; i++) {\r\n                /** @type {?} */\r\n                var cell = (/** @type {?} */ (row.children[i]));\r\n                if (stickyStartStates[i]) {\r\n                    this._addStickyStyle(cell, isRtl ? 'right' : 'left', startPositions[i]);\r\n                }\r\n                if (stickyEndStates[i]) {\r\n                    this._addStickyStyle(cell, isRtl ? 'left' : 'right', endPositions[i]);\r\n                }\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Applies sticky positioning to the row's cells if using the native table layout, and to the\r\n     * row itself otherwise.\r\n     * @param rowsToStick The list of rows that should be stuck according to their corresponding\r\n     *     sticky state and to the provided top or bottom position.\r\n     * @param stickyStates A list of boolean states where each state represents whether the row\r\n     *     should be stuck in the particular top or bottom position.\r\n     * @param position The position direction in which the row should be stuck if that row should be\r\n     *     sticky.\r\n     *\r\n     */\r\n    /**\r\n     * Applies sticky positioning to the row's cells if using the native table layout, and to the\r\n     * row itself otherwise.\r\n     * @param {?} rowsToStick The list of rows that should be stuck according to their corresponding\r\n     *     sticky state and to the provided top or bottom position.\r\n     * @param {?} stickyStates A list of boolean states where each state represents whether the row\r\n     *     should be stuck in the particular top or bottom position.\r\n     * @param {?} position The position direction in which the row should be stuck if that row should be\r\n     *     sticky.\r\n     *\r\n     * @return {?}\r\n     */\r\n    StickyStyler.prototype.stickRows = /**\r\n     * Applies sticky positioning to the row's cells if using the native table layout, and to the\r\n     * row itself otherwise.\r\n     * @param {?} rowsToStick The list of rows that should be stuck according to their corresponding\r\n     *     sticky state and to the provided top or bottom position.\r\n     * @param {?} stickyStates A list of boolean states where each state represents whether the row\r\n     *     should be stuck in the particular top or bottom position.\r\n     * @param {?} position The position direction in which the row should be stuck if that row should be\r\n     *     sticky.\r\n     *\r\n     * @return {?}\r\n     */\r\n    function (rowsToStick, stickyStates, position) {\r\n        // Since we can't measure the rows on the server, we can't stick the rows properly.\r\n        if (!this._isBrowser) {\r\n            return;\r\n        }\r\n        // If positioning the rows to the bottom, reverse their order when evaluating the sticky\r\n        // position such that the last row stuck will be \"bottom: 0px\" and so on.\r\n        /** @type {?} */\r\n        var rows = position === 'bottom' ? rowsToStick.reverse() : rowsToStick;\r\n        /** @type {?} */\r\n        var stickyHeight = 0;\r\n        for (var rowIndex = 0; rowIndex < rows.length; rowIndex++) {\r\n            if (!stickyStates[rowIndex]) {\r\n                continue;\r\n            }\r\n            /** @type {?} */\r\n            var row = rows[rowIndex];\r\n            if (this._isNativeHtmlTable) {\r\n                for (var j = 0; j < row.children.length; j++) {\r\n                    /** @type {?} */\r\n                    var cell = (/** @type {?} */ (row.children[j]));\r\n                    this._addStickyStyle(cell, position, stickyHeight);\r\n                }\r\n            }\r\n            else {\r\n                // Flex does not respect the stick positioning on the cells, needs to be applied to the row.\r\n                // If this is applied on a native table, Safari causes the header to fly in wrong direction.\r\n                this._addStickyStyle(row, position, stickyHeight);\r\n            }\r\n            if (rowIndex === rows.length - 1) {\r\n                // prevent unnecessary reflow from getBoundingClientRect()\r\n                return;\r\n            }\r\n            stickyHeight += row.getBoundingClientRect().height;\r\n        }\r\n    };\r\n    /**\r\n     * When using the native table in Safari, sticky footer cells do not stick. The only way to stick\r\n     * footer rows is to apply sticky styling to the tfoot container. This should only be done if\r\n     * all footer rows are sticky. If not all footer rows are sticky, remove sticky positioning from\r\n     * the tfoot element.\r\n     */\r\n    /**\r\n     * When using the native table in Safari, sticky footer cells do not stick. The only way to stick\r\n     * footer rows is to apply sticky styling to the tfoot container. This should only be done if\r\n     * all footer rows are sticky. If not all footer rows are sticky, remove sticky positioning from\r\n     * the tfoot element.\r\n     * @param {?} tableElement\r\n     * @param {?} stickyStates\r\n     * @return {?}\r\n     */\r\n    StickyStyler.prototype.updateStickyFooterContainer = /**\r\n     * When using the native table in Safari, sticky footer cells do not stick. The only way to stick\r\n     * footer rows is to apply sticky styling to the tfoot container. This should only be done if\r\n     * all footer rows are sticky. If not all footer rows are sticky, remove sticky positioning from\r\n     * the tfoot element.\r\n     * @param {?} tableElement\r\n     * @param {?} stickyStates\r\n     * @return {?}\r\n     */\r\n    function (tableElement, stickyStates) {\r\n        if (!this._isNativeHtmlTable) {\r\n            return;\r\n        }\r\n        /** @type {?} */\r\n        var tfoot = (/** @type {?} */ (tableElement.querySelector('tfoot')));\r\n        if (stickyStates.some((/**\r\n         * @param {?} state\r\n         * @return {?}\r\n         */\r\n        function (state) { return !state; }))) {\r\n            this._removeStickyStyle(tfoot, ['bottom']);\r\n        }\r\n        else {\r\n            this._addStickyStyle(tfoot, 'bottom', 0);\r\n        }\r\n    };\r\n    /**\r\n     * Removes the sticky style on the element by removing the sticky cell CSS class, re-evaluating\r\n     * the zIndex, removing each of the provided sticky directions, and removing the\r\n     * sticky position if there are no more directions.\r\n     */\r\n    /**\r\n     * Removes the sticky style on the element by removing the sticky cell CSS class, re-evaluating\r\n     * the zIndex, removing each of the provided sticky directions, and removing the\r\n     * sticky position if there are no more directions.\r\n     * @param {?} element\r\n     * @param {?} stickyDirections\r\n     * @return {?}\r\n     */\r\n    StickyStyler.prototype._removeStickyStyle = /**\r\n     * Removes the sticky style on the element by removing the sticky cell CSS class, re-evaluating\r\n     * the zIndex, removing each of the provided sticky directions, and removing the\r\n     * sticky position if there are no more directions.\r\n     * @param {?} element\r\n     * @param {?} stickyDirections\r\n     * @return {?}\r\n     */\r\n    function (element, stickyDirections) {\r\n        for (var _i = 0, stickyDirections_1 = stickyDirections; _i < stickyDirections_1.length; _i++) {\r\n            var dir = stickyDirections_1[_i];\r\n            element.style[dir] = '';\r\n        }\r\n        element.style.zIndex = this._getCalculatedZIndex(element);\r\n        // If the element no longer has any more sticky directions, remove sticky positioning and\r\n        // the sticky CSS class.\r\n        /** @type {?} */\r\n        var hasDirection = STICKY_DIRECTIONS.some((/**\r\n         * @param {?} dir\r\n         * @return {?}\r\n         */\r\n        function (dir) { return !!element.style[dir]; }));\r\n        if (!hasDirection) {\r\n            element.style.position = '';\r\n            element.classList.remove(this._stickCellCss);\r\n        }\r\n    };\r\n    /**\r\n     * Adds the sticky styling to the element by adding the sticky style class, changing position\r\n     * to be sticky (and -webkit-sticky), setting the appropriate zIndex, and adding a sticky\r\n     * direction and value.\r\n     */\r\n    /**\r\n     * Adds the sticky styling to the element by adding the sticky style class, changing position\r\n     * to be sticky (and -webkit-sticky), setting the appropriate zIndex, and adding a sticky\r\n     * direction and value.\r\n     * @param {?} element\r\n     * @param {?} dir\r\n     * @param {?} dirValue\r\n     * @return {?}\r\n     */\r\n    StickyStyler.prototype._addStickyStyle = /**\r\n     * Adds the sticky styling to the element by adding the sticky style class, changing position\r\n     * to be sticky (and -webkit-sticky), setting the appropriate zIndex, and adding a sticky\r\n     * direction and value.\r\n     * @param {?} element\r\n     * @param {?} dir\r\n     * @param {?} dirValue\r\n     * @return {?}\r\n     */\r\n    function (element, dir, dirValue) {\r\n        element.classList.add(this._stickCellCss);\r\n        element.style[dir] = dirValue + \"px\";\r\n        element.style.cssText += 'position: -webkit-sticky; position: sticky; ';\r\n        element.style.zIndex = this._getCalculatedZIndex(element);\r\n    };\r\n    /**\r\n     * Calculate what the z-index should be for the element, depending on what directions (top,\r\n     * bottom, left, right) have been set. It should be true that elements with a top direction\r\n     * should have the highest index since these are elements like a table header. If any of those\r\n     * elements are also sticky in another direction, then they should appear above other elements\r\n     * that are only sticky top (e.g. a sticky column on a sticky header). Bottom-sticky elements\r\n     * (e.g. footer rows) should then be next in the ordering such that they are below the header\r\n     * but above any non-sticky elements. Finally, left/right sticky elements (e.g. sticky columns)\r\n     * should minimally increment so that they are above non-sticky elements but below top and bottom\r\n     * elements.\r\n     */\r\n    /**\r\n     * Calculate what the z-index should be for the element, depending on what directions (top,\r\n     * bottom, left, right) have been set. It should be true that elements with a top direction\r\n     * should have the highest index since these are elements like a table header. If any of those\r\n     * elements are also sticky in another direction, then they should appear above other elements\r\n     * that are only sticky top (e.g. a sticky column on a sticky header). Bottom-sticky elements\r\n     * (e.g. footer rows) should then be next in the ordering such that they are below the header\r\n     * but above any non-sticky elements. Finally, left/right sticky elements (e.g. sticky columns)\r\n     * should minimally increment so that they are above non-sticky elements but below top and bottom\r\n     * elements.\r\n     * @param {?} element\r\n     * @return {?}\r\n     */\r\n    StickyStyler.prototype._getCalculatedZIndex = /**\r\n     * Calculate what the z-index should be for the element, depending on what directions (top,\r\n     * bottom, left, right) have been set. It should be true that elements with a top direction\r\n     * should have the highest index since these are elements like a table header. If any of those\r\n     * elements are also sticky in another direction, then they should appear above other elements\r\n     * that are only sticky top (e.g. a sticky column on a sticky header). Bottom-sticky elements\r\n     * (e.g. footer rows) should then be next in the ordering such that they are below the header\r\n     * but above any non-sticky elements. Finally, left/right sticky elements (e.g. sticky columns)\r\n     * should minimally increment so that they are above non-sticky elements but below top and bottom\r\n     * elements.\r\n     * @param {?} element\r\n     * @return {?}\r\n     */\r\n    function (element) {\r\n        /** @type {?} */\r\n        var zIndexIncrements = {\r\n            top: 100,\r\n            bottom: 10,\r\n            left: 1,\r\n            right: 1,\r\n        };\r\n        /** @type {?} */\r\n        var zIndex = 0;\r\n        for (var _i = 0, STICKY_DIRECTIONS_1 = STICKY_DIRECTIONS; _i < STICKY_DIRECTIONS_1.length; _i++) {\r\n            var dir = STICKY_DIRECTIONS_1[_i];\r\n            if (element.style[dir]) {\r\n                zIndex += zIndexIncrements[dir];\r\n            }\r\n        }\r\n        return zIndex ? \"\" + zIndex : '';\r\n    };\r\n    /** Gets the widths for each cell in the provided row. */\r\n    /**\r\n     * Gets the widths for each cell in the provided row.\r\n     * @param {?} row\r\n     * @return {?}\r\n     */\r\n    StickyStyler.prototype._getCellWidths = /**\r\n     * Gets the widths for each cell in the provided row.\r\n     * @param {?} row\r\n     * @return {?}\r\n     */\r\n    function (row) {\r\n        /** @type {?} */\r\n        var cellWidths = [];\r\n        /** @type {?} */\r\n        var firstRowCells = row.children;\r\n        for (var i = 0; i < firstRowCells.length; i++) {\r\n            /** @type {?} */\r\n            var cell = (/** @type {?} */ (firstRowCells[i]));\r\n            cellWidths.push(cell.getBoundingClientRect().width);\r\n        }\r\n        return cellWidths;\r\n    };\r\n    /**\r\n     * Determines the left and right positions of each sticky column cell, which will be the\r\n     * accumulation of all sticky column cell widths to the left and right, respectively.\r\n     * Non-sticky cells do not need to have a value set since their positions will not be applied.\r\n     */\r\n    /**\r\n     * Determines the left and right positions of each sticky column cell, which will be the\r\n     * accumulation of all sticky column cell widths to the left and right, respectively.\r\n     * Non-sticky cells do not need to have a value set since their positions will not be applied.\r\n     * @param {?} widths\r\n     * @param {?} stickyStates\r\n     * @return {?}\r\n     */\r\n    StickyStyler.prototype._getStickyStartColumnPositions = /**\r\n     * Determines the left and right positions of each sticky column cell, which will be the\r\n     * accumulation of all sticky column cell widths to the left and right, respectively.\r\n     * Non-sticky cells do not need to have a value set since their positions will not be applied.\r\n     * @param {?} widths\r\n     * @param {?} stickyStates\r\n     * @return {?}\r\n     */\r\n    function (widths, stickyStates) {\r\n        /** @type {?} */\r\n        var positions = [];\r\n        /** @type {?} */\r\n        var nextPosition = 0;\r\n        for (var i = 0; i < widths.length; i++) {\r\n            if (stickyStates[i]) {\r\n                positions[i] = nextPosition;\r\n                nextPosition += widths[i];\r\n            }\r\n        }\r\n        return positions;\r\n    };\r\n    /**\r\n     * Determines the left and right positions of each sticky column cell, which will be the\r\n     * accumulation of all sticky column cell widths to the left and right, respectively.\r\n     * Non-sticky cells do not need to have a value set since their positions will not be applied.\r\n     */\r\n    /**\r\n     * Determines the left and right positions of each sticky column cell, which will be the\r\n     * accumulation of all sticky column cell widths to the left and right, respectively.\r\n     * Non-sticky cells do not need to have a value set since their positions will not be applied.\r\n     * @param {?} widths\r\n     * @param {?} stickyStates\r\n     * @return {?}\r\n     */\r\n    StickyStyler.prototype._getStickyEndColumnPositions = /**\r\n     * Determines the left and right positions of each sticky column cell, which will be the\r\n     * accumulation of all sticky column cell widths to the left and right, respectively.\r\n     * Non-sticky cells do not need to have a value set since their positions will not be applied.\r\n     * @param {?} widths\r\n     * @param {?} stickyStates\r\n     * @return {?}\r\n     */\r\n    function (widths, stickyStates) {\r\n        /** @type {?} */\r\n        var positions = [];\r\n        /** @type {?} */\r\n        var nextPosition = 0;\r\n        for (var i = widths.length; i > 0; i--) {\r\n            if (stickyStates[i]) {\r\n                positions[i] = nextPosition;\r\n                nextPosition += widths[i];\r\n            }\r\n        }\r\n        return positions;\r\n    };\r\n    return StickyStyler;\r\n}());\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n\r\n/**\r\n * Returns an error to be thrown when attempting to find an unexisting column.\r\n * \\@docs-private\r\n * @param {?} id Id whose lookup failed.\r\n * @return {?}\r\n */\r\nfunction getTableUnknownColumnError(id) {\r\n    return Error(\"Could not find column with id \\\"\" + id + \"\\\".\");\r\n}\r\n/**\r\n * Returns an error to be thrown when two column definitions have the same name.\r\n * \\@docs-private\r\n * @param {?} name\r\n * @return {?}\r\n */\r\nfunction getTableDuplicateColumnNameError(name) {\r\n    return Error(\"Duplicate column definition name provided: \\\"\" + name + \"\\\".\");\r\n}\r\n/**\r\n * Returns an error to be thrown when there are multiple rows that are missing a when function.\r\n * \\@docs-private\r\n * @return {?}\r\n */\r\nfunction getTableMultipleDefaultRowDefsError() {\r\n    return Error(\"There can only be one default row without a when predicate function.\");\r\n}\r\n/**\r\n * Returns an error to be thrown when there are no matching row defs for a particular set of data.\r\n * \\@docs-private\r\n * @param {?} data\r\n * @return {?}\r\n */\r\nfunction getTableMissingMatchingRowDefError(data) {\r\n    return Error(\"Could not find a matching row definition for the\" +\r\n        (\"provided row data: \" + JSON.stringify(data)));\r\n}\r\n/**\r\n * Returns an error to be thrown when there is no row definitions present in the content.\r\n * \\@docs-private\r\n * @return {?}\r\n */\r\nfunction getTableMissingRowDefsError() {\r\n    return Error('Missing definitions for header, footer, and row; ' +\r\n        'cannot determine which columns should be rendered.');\r\n}\r\n/**\r\n * Returns an error to be thrown when the data source does not match the compatible types.\r\n * \\@docs-private\r\n * @return {?}\r\n */\r\nfunction getTableUnknownDataSourceError() {\r\n    return Error(\"Provided data source did not match an array, Observable, or DataSource\");\r\n}\r\n/**\r\n * Returns an error to be thrown when the text column cannot find a parent table to inject.\r\n * \\@docs-private\r\n * @return {?}\r\n */\r\nfunction getTableTextColumnMissingParentTableError() {\r\n    return Error(\"Text column could not find a parent table for registration.\");\r\n}\r\n/**\r\n * Returns an error to be thrown when a table text column doesn't have a name.\r\n * \\@docs-private\r\n * @return {?}\r\n */\r\nfunction getTableTextColumnMissingNameError() {\r\n    return Error(\"Table text column must have a name.\");\r\n}\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n/**\r\n * Provides a handle for the table to grab the view container's ng-container to insert data rows.\r\n * \\@docs-private\r\n */\r\nvar DataRowOutlet = /** @class */ (function () {\r\n    function DataRowOutlet(viewContainer, elementRef) {\r\n        this.viewContainer = viewContainer;\r\n        this.elementRef = elementRef;\r\n    }\r\n    DataRowOutlet.decorators = [\r\n        { type: Directive, args: [{ selector: '[rowOutlet]' },] },\r\n    ];\r\n    /** @nocollapse */\r\n    DataRowOutlet.ctorParameters = function () { return [\r\n        { type: ViewContainerRef },\r\n        { type: ElementRef }\r\n    ]; };\r\n    return DataRowOutlet;\r\n}());\r\n/**\r\n * Provides a handle for the table to grab the view container's ng-container to insert the header.\r\n * \\@docs-private\r\n */\r\nvar HeaderRowOutlet = /** @class */ (function () {\r\n    function HeaderRowOutlet(viewContainer, elementRef) {\r\n        this.viewContainer = viewContainer;\r\n        this.elementRef = elementRef;\r\n    }\r\n    HeaderRowOutlet.decorators = [\r\n        { type: Directive, args: [{ selector: '[headerRowOutlet]' },] },\r\n    ];\r\n    /** @nocollapse */\r\n    HeaderRowOutlet.ctorParameters = function () { return [\r\n        { type: ViewContainerRef },\r\n        { type: ElementRef }\r\n    ]; };\r\n    return HeaderRowOutlet;\r\n}());\r\n/**\r\n * Provides a handle for the table to grab the view container's ng-container to insert the footer.\r\n * \\@docs-private\r\n */\r\nvar FooterRowOutlet = /** @class */ (function () {\r\n    function FooterRowOutlet(viewContainer, elementRef) {\r\n        this.viewContainer = viewContainer;\r\n        this.elementRef = elementRef;\r\n    }\r\n    FooterRowOutlet.decorators = [\r\n        { type: Directive, args: [{ selector: '[footerRowOutlet]' },] },\r\n    ];\r\n    /** @nocollapse */\r\n    FooterRowOutlet.ctorParameters = function () { return [\r\n        { type: ViewContainerRef },\r\n        { type: ElementRef }\r\n    ]; };\r\n    return FooterRowOutlet;\r\n}());\r\n/**\r\n * The table template that can be used by the mat-table. Should not be used outside of the\r\n * material library.\r\n * \\@docs-private\r\n * @type {?}\r\n */\r\nvar CDK_TABLE_TEMPLATE = \r\n// Note that according to MDN, the `caption` element has to be projected as the **first**\r\n// element in the table. See https://developer.mozilla.org/en-US/docs/Web/HTML/Element/caption\r\n\"\\n  <ng-content select=\\\"caption\\\"></ng-content>\\n  <ng-container headerRowOutlet></ng-container>\\n  <ng-container rowOutlet></ng-container>\\n  <ng-container footerRowOutlet></ng-container>\\n\";\r\n/**\r\n * Class used to conveniently type the embedded view ref for rows with a context.\r\n * \\@docs-private\r\n * @abstract\r\n * @template T\r\n */\r\nvar /**\r\n * Class used to conveniently type the embedded view ref for rows with a context.\r\n * \\@docs-private\r\n * @abstract\r\n * @template T\r\n */\r\nRowViewRef = /** @class */ (function (_super) {\r\n    __extends(RowViewRef, _super);\r\n    function RowViewRef() {\r\n        return _super !== null && _super.apply(this, arguments) || this;\r\n    }\r\n    return RowViewRef;\r\n}(EmbeddedViewRef));\r\n/**\r\n * A data table that can render a header row, data rows, and a footer row.\r\n * Uses the dataSource input to determine the data to be rendered. The data can be provided either\r\n * as a data array, an Observable stream that emits the data array to render, or a DataSource with a\r\n * connect function that will return an Observable stream that emits the data array to render.\r\n * @template T\r\n */\r\nvar CdkTable = /** @class */ (function () {\r\n    function CdkTable(_differs, _changeDetectorRef, _elementRef, role, _dir, _document, _platform) {\r\n        this._differs = _differs;\r\n        this._changeDetectorRef = _changeDetectorRef;\r\n        this._elementRef = _elementRef;\r\n        this._dir = _dir;\r\n        this._platform = _platform;\r\n        /**\r\n         * Subject that emits when the component has been destroyed.\r\n         */\r\n        this._onDestroy = new Subject();\r\n        /**\r\n         * Map of all the user's defined columns (header, data, and footer cell template) identified by\r\n         * name. Collection populated by the column definitions gathered by `ContentChildren` as well as\r\n         * any custom column definitions added to `_customColumnDefs`.\r\n         */\r\n        this._columnDefsByName = new Map();\r\n        /**\r\n         * Column definitions that were defined outside of the direct content children of the table.\r\n         * These will be defined when, e.g., creating a wrapper around the cdkTable that has\r\n         * column definitions as *its* content child.\r\n         */\r\n        this._customColumnDefs = new Set();\r\n        /**\r\n         * Data row definitions that were defined outside of the direct content children of the table.\r\n         * These will be defined when, e.g., creating a wrapper around the cdkTable that has\r\n         * built-in data rows as *its* content child.\r\n         */\r\n        this._customRowDefs = new Set();\r\n        /**\r\n         * Header row definitions that were defined outside of the direct content children of the table.\r\n         * These will be defined when, e.g., creating a wrapper around the cdkTable that has\r\n         * built-in header rows as *its* content child.\r\n         */\r\n        this._customHeaderRowDefs = new Set();\r\n        /**\r\n         * Footer row definitions that were defined outside of the direct content children of the table.\r\n         * These will be defined when, e.g., creating a wrapper around the cdkTable that has a\r\n         * built-in footer row as *its* content child.\r\n         */\r\n        this._customFooterRowDefs = new Set();\r\n        /**\r\n         * Whether the header row definition has been changed. Triggers an update to the header row after\r\n         * content is checked. Initialized as true so that the table renders the initial set of rows.\r\n         */\r\n        this._headerRowDefChanged = true;\r\n        /**\r\n         * Whether the footer row definition has been changed. Triggers an update to the footer row after\r\n         * content is checked. Initialized as true so that the table renders the initial set of rows.\r\n         */\r\n        this._footerRowDefChanged = true;\r\n        /**\r\n         * Cache of the latest rendered `RenderRow` objects as a map for easy retrieval when constructing\r\n         * a new list of `RenderRow` objects for rendering rows. Since the new list is constructed with\r\n         * the cached `RenderRow` objects when possible, the row identity is preserved when the data\r\n         * and row template matches, which allows the `IterableDiffer` to check rows by reference\r\n         * and understand which rows are added/moved/removed.\r\n         *\r\n         * Implemented as a map of maps where the first key is the `data: T` object and the second is the\r\n         * `CdkRowDef<T>` object. With the two keys, the cache points to a `RenderRow<T>` object that\r\n         * contains an array of created pairs. The array is necessary to handle cases where the data\r\n         * array contains multiple duplicate data objects and each instantiated `RenderRow` must be\r\n         * stored.\r\n         */\r\n        this._cachedRenderRowsMap = new Map();\r\n        /**\r\n         * CSS class added to any row or cell that has sticky positioning applied. May be overriden by\r\n         * table subclasses.\r\n         */\r\n        this.stickyCssClass = 'cdk-table-sticky';\r\n        this._multiTemplateDataRows = false;\r\n        // TODO(andrewseguin): Remove max value as the end index\r\n        //   and instead calculate the view on init and scroll.\r\n        /**\r\n         * Stream containing the latest information on what rows are being displayed on screen.\r\n         * Can be used by the data source to as a heuristic of what data should be provided.\r\n         *\r\n         * \\@docs-private\r\n         */\r\n        this.viewChange = new BehaviorSubject({ start: 0, end: Number.MAX_VALUE });\r\n        if (!role) {\r\n            this._elementRef.nativeElement.setAttribute('role', 'grid');\r\n        }\r\n        this._document = _document;\r\n        this._isNativeHtmlTable = this._elementRef.nativeElement.nodeName === 'TABLE';\r\n    }\r\n    Object.defineProperty(CdkTable.prototype, \"trackBy\", {\r\n        /**\r\n         * Tracking function that will be used to check the differences in data changes. Used similarly\r\n         * to `ngFor` `trackBy` function. Optimize row operations by identifying a row based on its data\r\n         * relative to the function to know if a row should be added/removed/moved.\r\n         * Accepts a function that takes two parameters, `index` and `item`.\r\n         */\r\n        get: /**\r\n         * Tracking function that will be used to check the differences in data changes. Used similarly\r\n         * to `ngFor` `trackBy` function. Optimize row operations by identifying a row based on its data\r\n         * relative to the function to know if a row should be added/removed/moved.\r\n         * Accepts a function that takes two parameters, `index` and `item`.\r\n         * @return {?}\r\n         */\r\n        function () {\r\n            return this._trackByFn;\r\n        },\r\n        set: /**\r\n         * @param {?} fn\r\n         * @return {?}\r\n         */\r\n        function (fn) {\r\n            if (isDevMode() && fn != null && typeof fn !== 'function' && (/** @type {?} */ (console)) &&\r\n                (/** @type {?} */ (console.warn))) {\r\n                console.warn(\"trackBy must be a function, but received \" + JSON.stringify(fn) + \".\");\r\n            }\r\n            this._trackByFn = fn;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(CdkTable.prototype, \"dataSource\", {\r\n        /**\r\n         * The table's source of data, which can be provided in three ways (in order of complexity):\r\n         *   - Simple data array (each object represents one table row)\r\n         *   - Stream that emits a data array each time the array changes\r\n         *   - `DataSource` object that implements the connect/disconnect interface.\r\n         *\r\n         * If a data array is provided, the table must be notified when the array's objects are\r\n         * added, removed, or moved. This can be done by calling the `renderRows()` function which will\r\n         * render the diff since the last table render. If the data array reference is changed, the table\r\n         * will automatically trigger an update to the rows.\r\n         *\r\n         * When providing an Observable stream, the table will trigger an update automatically when the\r\n         * stream emits a new array of data.\r\n         *\r\n         * Finally, when providing a `DataSource` object, the table will use the Observable stream\r\n         * provided by the connect function and trigger updates when that stream emits new data array\r\n         * values. During the table's ngOnDestroy or when the data source is removed from the table, the\r\n         * table will call the DataSource's `disconnect` function (may be useful for cleaning up any\r\n         * subscriptions registered during the connect process).\r\n         */\r\n        get: /**\r\n         * The table's source of data, which can be provided in three ways (in order of complexity):\r\n         *   - Simple data array (each object represents one table row)\r\n         *   - Stream that emits a data array each time the array changes\r\n         *   - `DataSource` object that implements the connect/disconnect interface.\r\n         *\r\n         * If a data array is provided, the table must be notified when the array's objects are\r\n         * added, removed, or moved. This can be done by calling the `renderRows()` function which will\r\n         * render the diff since the last table render. If the data array reference is changed, the table\r\n         * will automatically trigger an update to the rows.\r\n         *\r\n         * When providing an Observable stream, the table will trigger an update automatically when the\r\n         * stream emits a new array of data.\r\n         *\r\n         * Finally, when providing a `DataSource` object, the table will use the Observable stream\r\n         * provided by the connect function and trigger updates when that stream emits new data array\r\n         * values. During the table's ngOnDestroy or when the data source is removed from the table, the\r\n         * table will call the DataSource's `disconnect` function (may be useful for cleaning up any\r\n         * subscriptions registered during the connect process).\r\n         * @return {?}\r\n         */\r\n        function () {\r\n            return this._dataSource;\r\n        },\r\n        set: /**\r\n         * @param {?} dataSource\r\n         * @return {?}\r\n         */\r\n        function (dataSource) {\r\n            if (this._dataSource !== dataSource) {\r\n                this._switchDataSource(dataSource);\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(CdkTable.prototype, \"multiTemplateDataRows\", {\r\n        /**\r\n         * Whether to allow multiple rows per data object by evaluating which rows evaluate their 'when'\r\n         * predicate to true. If `multiTemplateDataRows` is false, which is the default value, then each\r\n         * dataobject will render the first row that evaluates its when predicate to true, in the order\r\n         * defined in the table, or otherwise the default row which does not have a when predicate.\r\n         */\r\n        get: /**\r\n         * Whether to allow multiple rows per data object by evaluating which rows evaluate their 'when'\r\n         * predicate to true. If `multiTemplateDataRows` is false, which is the default value, then each\r\n         * dataobject will render the first row that evaluates its when predicate to true, in the order\r\n         * defined in the table, or otherwise the default row which does not have a when predicate.\r\n         * @return {?}\r\n         */\r\n        function () {\r\n            return this._multiTemplateDataRows;\r\n        },\r\n        set: /**\r\n         * @param {?} v\r\n         * @return {?}\r\n         */\r\n        function (v) {\r\n            this._multiTemplateDataRows = coerceBooleanProperty(v);\r\n            // In Ivy if this value is set via a static attribute (e.g. <table multiTemplateDataRows>),\r\n            // this setter will be invoked before the row outlet has been defined hence the null check.\r\n            if (this._rowOutlet && this._rowOutlet.viewContainer.length) {\r\n                this._forceRenderDataRows();\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * @return {?}\r\n     */\r\n    CdkTable.prototype.ngOnInit = /**\r\n     * @return {?}\r\n     */\r\n    function () {\r\n        var _this = this;\r\n        this._setupStickyStyler();\r\n        if (this._isNativeHtmlTable) {\r\n            this._applyNativeTableSections();\r\n        }\r\n        // Set up the trackBy function so that it uses the `RenderRow` as its identity by default. If\r\n        // the user has provided a custom trackBy, return the result of that function as evaluated\r\n        // with the values of the `RenderRow`'s data and index.\r\n        this._dataDiffer = this._differs.find([]).create((/**\r\n         * @param {?} _i\r\n         * @param {?} dataRow\r\n         * @return {?}\r\n         */\r\n        function (_i, dataRow) {\r\n            return _this.trackBy ? _this.trackBy(dataRow.dataIndex, dataRow.data) : dataRow;\r\n        }));\r\n    };\r\n    /**\r\n     * @return {?}\r\n     */\r\n    CdkTable.prototype.ngAfterContentChecked = /**\r\n     * @return {?}\r\n     */\r\n    function () {\r\n        // Cache the row and column definitions gathered by ContentChildren and programmatic injection.\r\n        this._cacheRowDefs();\r\n        this._cacheColumnDefs();\r\n        // Make sure that the user has at least added header, footer, or data row def.\r\n        if (!this._headerRowDefs.length && !this._footerRowDefs.length && !this._rowDefs.length) {\r\n            throw getTableMissingRowDefsError();\r\n        }\r\n        // Render updates if the list of columns have been changed for the header, row, or footer defs.\r\n        this._renderUpdatedColumns();\r\n        // If the header row definition has been changed, trigger a render to the header row.\r\n        if (this._headerRowDefChanged) {\r\n            this._forceRenderHeaderRows();\r\n            this._headerRowDefChanged = false;\r\n        }\r\n        // If the footer row definition has been changed, trigger a render to the footer row.\r\n        if (this._footerRowDefChanged) {\r\n            this._forceRenderFooterRows();\r\n            this._footerRowDefChanged = false;\r\n        }\r\n        // If there is a data source and row definitions, connect to the data source unless a\r\n        // connection has already been made.\r\n        if (this.dataSource && this._rowDefs.length > 0 && !this._renderChangeSubscription) {\r\n            this._observeRenderChanges();\r\n        }\r\n        this._checkStickyStates();\r\n    };\r\n    /**\r\n     * @return {?}\r\n     */\r\n    CdkTable.prototype.ngOnDestroy = /**\r\n     * @return {?}\r\n     */\r\n    function () {\r\n        this._rowOutlet.viewContainer.clear();\r\n        this._headerRowOutlet.viewContainer.clear();\r\n        this._footerRowOutlet.viewContainer.clear();\r\n        this._cachedRenderRowsMap.clear();\r\n        this._onDestroy.next();\r\n        this._onDestroy.complete();\r\n        if (isDataSource(this.dataSource)) {\r\n            this.dataSource.disconnect(this);\r\n        }\r\n    };\r\n    /**\r\n     * Renders rows based on the table's latest set of data, which was either provided directly as an\r\n     * input or retrieved through an Observable stream (directly or from a DataSource).\r\n     * Checks for differences in the data since the last diff to perform only the necessary\r\n     * changes (add/remove/move rows).\r\n     *\r\n     * If the table's data source is a DataSource or Observable, this will be invoked automatically\r\n     * each time the provided Observable stream emits a new data array. Otherwise if your data is\r\n     * an array, this function will need to be called to render any changes.\r\n     */\r\n    /**\r\n     * Renders rows based on the table's latest set of data, which was either provided directly as an\r\n     * input or retrieved through an Observable stream (directly or from a DataSource).\r\n     * Checks for differences in the data since the last diff to perform only the necessary\r\n     * changes (add/remove/move rows).\r\n     *\r\n     * If the table's data source is a DataSource or Observable, this will be invoked automatically\r\n     * each time the provided Observable stream emits a new data array. Otherwise if your data is\r\n     * an array, this function will need to be called to render any changes.\r\n     * @return {?}\r\n     */\r\n    CdkTable.prototype.renderRows = /**\r\n     * Renders rows based on the table's latest set of data, which was either provided directly as an\r\n     * input or retrieved through an Observable stream (directly or from a DataSource).\r\n     * Checks for differences in the data since the last diff to perform only the necessary\r\n     * changes (add/remove/move rows).\r\n     *\r\n     * If the table's data source is a DataSource or Observable, this will be invoked automatically\r\n     * each time the provided Observable stream emits a new data array. Otherwise if your data is\r\n     * an array, this function will need to be called to render any changes.\r\n     * @return {?}\r\n     */\r\n    function () {\r\n        var _this = this;\r\n        this._renderRows = this._getAllRenderRows();\r\n        /** @type {?} */\r\n        var changes = this._dataDiffer.diff(this._renderRows);\r\n        if (!changes) {\r\n            return;\r\n        }\r\n        /** @type {?} */\r\n        var viewContainer = this._rowOutlet.viewContainer;\r\n        changes.forEachOperation((/**\r\n         * @param {?} record\r\n         * @param {?} prevIndex\r\n         * @param {?} currentIndex\r\n         * @return {?}\r\n         */\r\n        function (record, prevIndex, currentIndex) {\r\n            if (record.previousIndex == null) {\r\n                _this._insertRow(record.item, (/** @type {?} */ (currentIndex)));\r\n            }\r\n            else if (currentIndex == null) {\r\n                viewContainer.remove((/** @type {?} */ (prevIndex)));\r\n            }\r\n            else {\r\n                /** @type {?} */\r\n                var view = (/** @type {?} */ (viewContainer.get((/** @type {?} */ (prevIndex)))));\r\n                viewContainer.move((/** @type {?} */ (view)), currentIndex);\r\n            }\r\n        }));\r\n        // Update the meta context of a row's context data (index, count, first, last, ...)\r\n        this._updateRowIndexContext();\r\n        // Update rows that did not get added/removed/moved but may have had their identity changed,\r\n        // e.g. if trackBy matched data on some property but the actual data reference changed.\r\n        changes.forEachIdentityChange((/**\r\n         * @param {?} record\r\n         * @return {?}\r\n         */\r\n        function (record) {\r\n            /** @type {?} */\r\n            var rowView = (/** @type {?} */ (viewContainer.get((/** @type {?} */ (record.currentIndex)))));\r\n            rowView.context.$implicit = record.item.data;\r\n        }));\r\n        this.updateStickyColumnStyles();\r\n    };\r\n    /**\r\n     * Sets the header row definition to be used. Overrides the header row definition gathered by\r\n     * using `ContentChild`, if one exists. Sets a flag that will re-render the header row after the\r\n     * table's content is checked.\r\n     * @docs-private\r\n     * @deprecated Use `addHeaderRowDef` and `removeHeaderRowDef` instead\r\n     * @breaking-change 8.0.0\r\n     */\r\n    /**\r\n     * Sets the header row definition to be used. Overrides the header row definition gathered by\r\n     * using `ContentChild`, if one exists. Sets a flag that will re-render the header row after the\r\n     * table's content is checked.\r\n     * \\@docs-private\r\n     * @deprecated Use `addHeaderRowDef` and `removeHeaderRowDef` instead\r\n     * \\@breaking-change 8.0.0\r\n     * @param {?} headerRowDef\r\n     * @return {?}\r\n     */\r\n    CdkTable.prototype.setHeaderRowDef = /**\r\n     * Sets the header row definition to be used. Overrides the header row definition gathered by\r\n     * using `ContentChild`, if one exists. Sets a flag that will re-render the header row after the\r\n     * table's content is checked.\r\n     * \\@docs-private\r\n     * @deprecated Use `addHeaderRowDef` and `removeHeaderRowDef` instead\r\n     * \\@breaking-change 8.0.0\r\n     * @param {?} headerRowDef\r\n     * @return {?}\r\n     */\r\n    function (headerRowDef) {\r\n        this._customHeaderRowDefs = new Set([headerRowDef]);\r\n        this._headerRowDefChanged = true;\r\n    };\r\n    /**\r\n     * Sets the footer row definition to be used. Overrides the footer row definition gathered by\r\n     * using `ContentChild`, if one exists. Sets a flag that will re-render the footer row after the\r\n     * table's content is checked.\r\n     * @docs-private\r\n     * @deprecated Use `addFooterRowDef` and `removeFooterRowDef` instead\r\n     * @breaking-change 8.0.0\r\n     */\r\n    /**\r\n     * Sets the footer row definition to be used. Overrides the footer row definition gathered by\r\n     * using `ContentChild`, if one exists. Sets a flag that will re-render the footer row after the\r\n     * table's content is checked.\r\n     * \\@docs-private\r\n     * @deprecated Use `addFooterRowDef` and `removeFooterRowDef` instead\r\n     * \\@breaking-change 8.0.0\r\n     * @param {?} footerRowDef\r\n     * @return {?}\r\n     */\r\n    CdkTable.prototype.setFooterRowDef = /**\r\n     * Sets the footer row definition to be used. Overrides the footer row definition gathered by\r\n     * using `ContentChild`, if one exists. Sets a flag that will re-render the footer row after the\r\n     * table's content is checked.\r\n     * \\@docs-private\r\n     * @deprecated Use `addFooterRowDef` and `removeFooterRowDef` instead\r\n     * \\@breaking-change 8.0.0\r\n     * @param {?} footerRowDef\r\n     * @return {?}\r\n     */\r\n    function (footerRowDef) {\r\n        this._customFooterRowDefs = new Set([footerRowDef]);\r\n        this._footerRowDefChanged = true;\r\n    };\r\n    /** Adds a column definition that was not included as part of the content children. */\r\n    /**\r\n     * Adds a column definition that was not included as part of the content children.\r\n     * @param {?} columnDef\r\n     * @return {?}\r\n     */\r\n    CdkTable.prototype.addColumnDef = /**\r\n     * Adds a column definition that was not included as part of the content children.\r\n     * @param {?} columnDef\r\n     * @return {?}\r\n     */\r\n    function (columnDef) {\r\n        this._customColumnDefs.add(columnDef);\r\n    };\r\n    /** Removes a column definition that was not included as part of the content children. */\r\n    /**\r\n     * Removes a column definition that was not included as part of the content children.\r\n     * @param {?} columnDef\r\n     * @return {?}\r\n     */\r\n    CdkTable.prototype.removeColumnDef = /**\r\n     * Removes a column definition that was not included as part of the content children.\r\n     * @param {?} columnDef\r\n     * @return {?}\r\n     */\r\n    function (columnDef) {\r\n        this._customColumnDefs.delete(columnDef);\r\n    };\r\n    /** Adds a row definition that was not included as part of the content children. */\r\n    /**\r\n     * Adds a row definition that was not included as part of the content children.\r\n     * @param {?} rowDef\r\n     * @return {?}\r\n     */\r\n    CdkTable.prototype.addRowDef = /**\r\n     * Adds a row definition that was not included as part of the content children.\r\n     * @param {?} rowDef\r\n     * @return {?}\r\n     */\r\n    function (rowDef) {\r\n        this._customRowDefs.add(rowDef);\r\n    };\r\n    /** Removes a row definition that was not included as part of the content children. */\r\n    /**\r\n     * Removes a row definition that was not included as part of the content children.\r\n     * @param {?} rowDef\r\n     * @return {?}\r\n     */\r\n    CdkTable.prototype.removeRowDef = /**\r\n     * Removes a row definition that was not included as part of the content children.\r\n     * @param {?} rowDef\r\n     * @return {?}\r\n     */\r\n    function (rowDef) {\r\n        this._customRowDefs.delete(rowDef);\r\n    };\r\n    /** Adds a header row definition that was not included as part of the content children. */\r\n    /**\r\n     * Adds a header row definition that was not included as part of the content children.\r\n     * @param {?} headerRowDef\r\n     * @return {?}\r\n     */\r\n    CdkTable.prototype.addHeaderRowDef = /**\r\n     * Adds a header row definition that was not included as part of the content children.\r\n     * @param {?} headerRowDef\r\n     * @return {?}\r\n     */\r\n    function (headerRowDef) {\r\n        this._customHeaderRowDefs.add(headerRowDef);\r\n        this._headerRowDefChanged = true;\r\n    };\r\n    /** Removes a header row definition that was not included as part of the content children. */\r\n    /**\r\n     * Removes a header row definition that was not included as part of the content children.\r\n     * @param {?} headerRowDef\r\n     * @return {?}\r\n     */\r\n    CdkTable.prototype.removeHeaderRowDef = /**\r\n     * Removes a header row definition that was not included as part of the content children.\r\n     * @param {?} headerRowDef\r\n     * @return {?}\r\n     */\r\n    function (headerRowDef) {\r\n        this._customHeaderRowDefs.delete(headerRowDef);\r\n        this._headerRowDefChanged = true;\r\n    };\r\n    /** Adds a footer row definition that was not included as part of the content children. */\r\n    /**\r\n     * Adds a footer row definition that was not included as part of the content children.\r\n     * @param {?} footerRowDef\r\n     * @return {?}\r\n     */\r\n    CdkTable.prototype.addFooterRowDef = /**\r\n     * Adds a footer row definition that was not included as part of the content children.\r\n     * @param {?} footerRowDef\r\n     * @return {?}\r\n     */\r\n    function (footerRowDef) {\r\n        this._customFooterRowDefs.add(footerRowDef);\r\n        this._footerRowDefChanged = true;\r\n    };\r\n    /** Removes a footer row definition that was not included as part of the content children. */\r\n    /**\r\n     * Removes a footer row definition that was not included as part of the content children.\r\n     * @param {?} footerRowDef\r\n     * @return {?}\r\n     */\r\n    CdkTable.prototype.removeFooterRowDef = /**\r\n     * Removes a footer row definition that was not included as part of the content children.\r\n     * @param {?} footerRowDef\r\n     * @return {?}\r\n     */\r\n    function (footerRowDef) {\r\n        this._customFooterRowDefs.delete(footerRowDef);\r\n        this._footerRowDefChanged = true;\r\n    };\r\n    /**\r\n     * Updates the header sticky styles. First resets all applied styles with respect to the cells\r\n     * sticking to the top. Then, evaluating which cells need to be stuck to the top. This is\r\n     * automatically called when the header row changes its displayed set of columns, or if its\r\n     * sticky input changes. May be called manually for cases where the cell content changes outside\r\n     * of these events.\r\n     */\r\n    /**\r\n     * Updates the header sticky styles. First resets all applied styles with respect to the cells\r\n     * sticking to the top. Then, evaluating which cells need to be stuck to the top. This is\r\n     * automatically called when the header row changes its displayed set of columns, or if its\r\n     * sticky input changes. May be called manually for cases where the cell content changes outside\r\n     * of these events.\r\n     * @return {?}\r\n     */\r\n    CdkTable.prototype.updateStickyHeaderRowStyles = /**\r\n     * Updates the header sticky styles. First resets all applied styles with respect to the cells\r\n     * sticking to the top. Then, evaluating which cells need to be stuck to the top. This is\r\n     * automatically called when the header row changes its displayed set of columns, or if its\r\n     * sticky input changes. May be called manually for cases where the cell content changes outside\r\n     * of these events.\r\n     * @return {?}\r\n     */\r\n    function () {\r\n        /** @type {?} */\r\n        var headerRows = this._getRenderedRows(this._headerRowOutlet);\r\n        /** @type {?} */\r\n        var tableElement = (/** @type {?} */ (this._elementRef.nativeElement));\r\n        // Hide the thead element if there are no header rows. This is necessary to satisfy\r\n        // overzealous a11y checkers that fail because the `rowgroup` element does not contain\r\n        // required child `row`.\r\n        /** @type {?} */\r\n        var thead = tableElement.querySelector('thead');\r\n        if (thead) {\r\n            thead.style.display = headerRows.length ? '' : 'none';\r\n        }\r\n        /** @type {?} */\r\n        var stickyStates = this._headerRowDefs.map((/**\r\n         * @param {?} def\r\n         * @return {?}\r\n         */\r\n        function (def) { return def.sticky; }));\r\n        this._stickyStyler.clearStickyPositioning(headerRows, ['top']);\r\n        this._stickyStyler.stickRows(headerRows, stickyStates, 'top');\r\n        // Reset the dirty state of the sticky input change since it has been used.\r\n        this._headerRowDefs.forEach((/**\r\n         * @param {?} def\r\n         * @return {?}\r\n         */\r\n        function (def) { return def.resetStickyChanged(); }));\r\n    };\r\n    /**\r\n     * Updates the footer sticky styles. First resets all applied styles with respect to the cells\r\n     * sticking to the bottom. Then, evaluating which cells need to be stuck to the bottom. This is\r\n     * automatically called when the footer row changes its displayed set of columns, or if its\r\n     * sticky input changes. May be called manually for cases where the cell content changes outside\r\n     * of these events.\r\n     */\r\n    /**\r\n     * Updates the footer sticky styles. First resets all applied styles with respect to the cells\r\n     * sticking to the bottom. Then, evaluating which cells need to be stuck to the bottom. This is\r\n     * automatically called when the footer row changes its displayed set of columns, or if its\r\n     * sticky input changes. May be called manually for cases where the cell content changes outside\r\n     * of these events.\r\n     * @return {?}\r\n     */\r\n    CdkTable.prototype.updateStickyFooterRowStyles = /**\r\n     * Updates the footer sticky styles. First resets all applied styles with respect to the cells\r\n     * sticking to the bottom. Then, evaluating which cells need to be stuck to the bottom. This is\r\n     * automatically called when the footer row changes its displayed set of columns, or if its\r\n     * sticky input changes. May be called manually for cases where the cell content changes outside\r\n     * of these events.\r\n     * @return {?}\r\n     */\r\n    function () {\r\n        /** @type {?} */\r\n        var footerRows = this._getRenderedRows(this._footerRowOutlet);\r\n        /** @type {?} */\r\n        var tableElement = (/** @type {?} */ (this._elementRef.nativeElement));\r\n        // Hide the tfoot element if there are no footer rows. This is necessary to satisfy\r\n        // overzealous a11y checkers that fail because the `rowgroup` element does not contain\r\n        // required child `row`.\r\n        /** @type {?} */\r\n        var tfoot = tableElement.querySelector('tfoot');\r\n        if (tfoot) {\r\n            tfoot.style.display = footerRows.length ? '' : 'none';\r\n        }\r\n        /** @type {?} */\r\n        var stickyStates = this._footerRowDefs.map((/**\r\n         * @param {?} def\r\n         * @return {?}\r\n         */\r\n        function (def) { return def.sticky; }));\r\n        this._stickyStyler.clearStickyPositioning(footerRows, ['bottom']);\r\n        this._stickyStyler.stickRows(footerRows, stickyStates, 'bottom');\r\n        this._stickyStyler.updateStickyFooterContainer(this._elementRef.nativeElement, stickyStates);\r\n        // Reset the dirty state of the sticky input change since it has been used.\r\n        this._footerRowDefs.forEach((/**\r\n         * @param {?} def\r\n         * @return {?}\r\n         */\r\n        function (def) { return def.resetStickyChanged(); }));\r\n    };\r\n    /**\r\n     * Updates the column sticky styles. First resets all applied styles with respect to the cells\r\n     * sticking to the left and right. Then sticky styles are added for the left and right according\r\n     * to the column definitions for each cell in each row. This is automatically called when\r\n     * the data source provides a new set of data or when a column definition changes its sticky\r\n     * input. May be called manually for cases where the cell content changes outside of these events.\r\n     */\r\n    /**\r\n     * Updates the column sticky styles. First resets all applied styles with respect to the cells\r\n     * sticking to the left and right. Then sticky styles are added for the left and right according\r\n     * to the column definitions for each cell in each row. This is automatically called when\r\n     * the data source provides a new set of data or when a column definition changes its sticky\r\n     * input. May be called manually for cases where the cell content changes outside of these events.\r\n     * @return {?}\r\n     */\r\n    CdkTable.prototype.updateStickyColumnStyles = /**\r\n     * Updates the column sticky styles. First resets all applied styles with respect to the cells\r\n     * sticking to the left and right. Then sticky styles are added for the left and right according\r\n     * to the column definitions for each cell in each row. This is automatically called when\r\n     * the data source provides a new set of data or when a column definition changes its sticky\r\n     * input. May be called manually for cases where the cell content changes outside of these events.\r\n     * @return {?}\r\n     */\r\n    function () {\r\n        var _this = this;\r\n        /** @type {?} */\r\n        var headerRows = this._getRenderedRows(this._headerRowOutlet);\r\n        /** @type {?} */\r\n        var dataRows = this._getRenderedRows(this._rowOutlet);\r\n        /** @type {?} */\r\n        var footerRows = this._getRenderedRows(this._footerRowOutlet);\r\n        // Clear the left and right positioning from all columns in the table across all rows since\r\n        // sticky columns span across all table sections (header, data, footer)\r\n        this._stickyStyler.clearStickyPositioning(headerRows.concat(dataRows, footerRows), ['left', 'right']);\r\n        // Update the sticky styles for each header row depending on the def's sticky state\r\n        headerRows.forEach((/**\r\n         * @param {?} headerRow\r\n         * @param {?} i\r\n         * @return {?}\r\n         */\r\n        function (headerRow, i) {\r\n            _this._addStickyColumnStyles([headerRow], _this._headerRowDefs[i]);\r\n        }));\r\n        // Update the sticky styles for each data row depending on its def's sticky state\r\n        this._rowDefs.forEach((/**\r\n         * @param {?} rowDef\r\n         * @return {?}\r\n         */\r\n        function (rowDef) {\r\n            // Collect all the rows rendered with this row definition.\r\n            /** @type {?} */\r\n            var rows = [];\r\n            for (var i = 0; i < dataRows.length; i++) {\r\n                if (_this._renderRows[i].rowDef === rowDef) {\r\n                    rows.push(dataRows[i]);\r\n                }\r\n            }\r\n            _this._addStickyColumnStyles(rows, rowDef);\r\n        }));\r\n        // Update the sticky styles for each footer row depending on the def's sticky state\r\n        footerRows.forEach((/**\r\n         * @param {?} footerRow\r\n         * @param {?} i\r\n         * @return {?}\r\n         */\r\n        function (footerRow, i) {\r\n            _this._addStickyColumnStyles([footerRow], _this._footerRowDefs[i]);\r\n        }));\r\n        // Reset the dirty state of the sticky input change since it has been used.\r\n        Array.from(this._columnDefsByName.values()).forEach((/**\r\n         * @param {?} def\r\n         * @return {?}\r\n         */\r\n        function (def) { return def.resetStickyChanged(); }));\r\n    };\r\n    /**\r\n     * Get the list of RenderRow objects to render according to the current list of data and defined\r\n     * row definitions. If the previous list already contained a particular pair, it should be reused\r\n     * so that the differ equates their references.\r\n     */\r\n    /**\r\n     * Get the list of RenderRow objects to render according to the current list of data and defined\r\n     * row definitions. If the previous list already contained a particular pair, it should be reused\r\n     * so that the differ equates their references.\r\n     * @private\r\n     * @return {?}\r\n     */\r\n    CdkTable.prototype._getAllRenderRows = /**\r\n     * Get the list of RenderRow objects to render according to the current list of data and defined\r\n     * row definitions. If the previous list already contained a particular pair, it should be reused\r\n     * so that the differ equates their references.\r\n     * @private\r\n     * @return {?}\r\n     */\r\n    function () {\r\n        /** @type {?} */\r\n        var renderRows = [];\r\n        // Store the cache and create a new one. Any re-used RenderRow objects will be moved into the\r\n        // new cache while unused ones can be picked up by garbage collection.\r\n        /** @type {?} */\r\n        var prevCachedRenderRows = this._cachedRenderRowsMap;\r\n        this._cachedRenderRowsMap = new Map();\r\n        // For each data object, get the list of rows that should be rendered, represented by the\r\n        // respective `RenderRow` object which is the pair of `data` and `CdkRowDef`.\r\n        for (var i = 0; i < this._data.length; i++) {\r\n            /** @type {?} */\r\n            var data = this._data[i];\r\n            /** @type {?} */\r\n            var renderRowsForData = this._getRenderRowsForData(data, i, prevCachedRenderRows.get(data));\r\n            if (!this._cachedRenderRowsMap.has(data)) {\r\n                this._cachedRenderRowsMap.set(data, new WeakMap());\r\n            }\r\n            for (var j = 0; j < renderRowsForData.length; j++) {\r\n                /** @type {?} */\r\n                var renderRow = renderRowsForData[j];\r\n                /** @type {?} */\r\n                var cache = (/** @type {?} */ (this._cachedRenderRowsMap.get(renderRow.data)));\r\n                if (cache.has(renderRow.rowDef)) {\r\n                    (/** @type {?} */ (cache.get(renderRow.rowDef))).push(renderRow);\r\n                }\r\n                else {\r\n                    cache.set(renderRow.rowDef, [renderRow]);\r\n                }\r\n                renderRows.push(renderRow);\r\n            }\r\n        }\r\n        return renderRows;\r\n    };\r\n    /**\r\n     * Gets a list of `RenderRow<T>` for the provided data object and any `CdkRowDef` objects that\r\n     * should be rendered for this data. Reuses the cached RenderRow objects if they match the same\r\n     * `(T, CdkRowDef)` pair.\r\n     */\r\n    /**\r\n     * Gets a list of `RenderRow<T>` for the provided data object and any `CdkRowDef` objects that\r\n     * should be rendered for this data. Reuses the cached RenderRow objects if they match the same\r\n     * `(T, CdkRowDef)` pair.\r\n     * @private\r\n     * @param {?} data\r\n     * @param {?} dataIndex\r\n     * @param {?=} cache\r\n     * @return {?}\r\n     */\r\n    CdkTable.prototype._getRenderRowsForData = /**\r\n     * Gets a list of `RenderRow<T>` for the provided data object and any `CdkRowDef` objects that\r\n     * should be rendered for this data. Reuses the cached RenderRow objects if they match the same\r\n     * `(T, CdkRowDef)` pair.\r\n     * @private\r\n     * @param {?} data\r\n     * @param {?} dataIndex\r\n     * @param {?=} cache\r\n     * @return {?}\r\n     */\r\n    function (data, dataIndex, cache) {\r\n        /** @type {?} */\r\n        var rowDefs = this._getRowDefs(data, dataIndex);\r\n        return rowDefs.map((/**\r\n         * @param {?} rowDef\r\n         * @return {?}\r\n         */\r\n        function (rowDef) {\r\n            /** @type {?} */\r\n            var cachedRenderRows = (cache && cache.has(rowDef)) ? (/** @type {?} */ (cache.get(rowDef))) : [];\r\n            if (cachedRenderRows.length) {\r\n                /** @type {?} */\r\n                var dataRow = (/** @type {?} */ (cachedRenderRows.shift()));\r\n                dataRow.dataIndex = dataIndex;\r\n                return dataRow;\r\n            }\r\n            else {\r\n                return { data: data, rowDef: rowDef, dataIndex: dataIndex };\r\n            }\r\n        }));\r\n    };\r\n    /** Update the map containing the content's column definitions. */\r\n    /**\r\n     * Update the map containing the content's column definitions.\r\n     * @private\r\n     * @return {?}\r\n     */\r\n    CdkTable.prototype._cacheColumnDefs = /**\r\n     * Update the map containing the content's column definitions.\r\n     * @private\r\n     * @return {?}\r\n     */\r\n    function () {\r\n        var _this = this;\r\n        this._columnDefsByName.clear();\r\n        /** @type {?} */\r\n        var columnDefs = mergeQueryListAndSet(this._contentColumnDefs, this._customColumnDefs);\r\n        columnDefs.forEach((/**\r\n         * @param {?} columnDef\r\n         * @return {?}\r\n         */\r\n        function (columnDef) {\r\n            if (_this._columnDefsByName.has(columnDef.name)) {\r\n                throw getTableDuplicateColumnNameError(columnDef.name);\r\n            }\r\n            _this._columnDefsByName.set(columnDef.name, columnDef);\r\n        }));\r\n    };\r\n    /** Update the list of all available row definitions that can be used. */\r\n    /**\r\n     * Update the list of all available row definitions that can be used.\r\n     * @private\r\n     * @return {?}\r\n     */\r\n    CdkTable.prototype._cacheRowDefs = /**\r\n     * Update the list of all available row definitions that can be used.\r\n     * @private\r\n     * @return {?}\r\n     */\r\n    function () {\r\n        this._headerRowDefs =\r\n            mergeQueryListAndSet(this._contentHeaderRowDefs, this._customHeaderRowDefs);\r\n        this._footerRowDefs =\r\n            mergeQueryListAndSet(this._contentFooterRowDefs, this._customFooterRowDefs);\r\n        this._rowDefs = mergeQueryListAndSet(this._contentRowDefs, this._customRowDefs);\r\n        // After all row definitions are determined, find the row definition to be considered default.\r\n        /** @type {?} */\r\n        var defaultRowDefs = this._rowDefs.filter((/**\r\n         * @param {?} def\r\n         * @return {?}\r\n         */\r\n        function (def) { return !def.when; }));\r\n        if (!this.multiTemplateDataRows && defaultRowDefs.length > 1) {\r\n            throw getTableMultipleDefaultRowDefsError();\r\n        }\r\n        this._defaultRowDef = defaultRowDefs[0];\r\n    };\r\n    /**\r\n     * Check if the header, data, or footer rows have changed what columns they want to display or\r\n     * whether the sticky states have changed for the header or footer. If there is a diff, then\r\n     * re-render that section.\r\n     */\r\n    /**\r\n     * Check if the header, data, or footer rows have changed what columns they want to display or\r\n     * whether the sticky states have changed for the header or footer. If there is a diff, then\r\n     * re-render that section.\r\n     * @private\r\n     * @return {?}\r\n     */\r\n    CdkTable.prototype._renderUpdatedColumns = /**\r\n     * Check if the header, data, or footer rows have changed what columns they want to display or\r\n     * whether the sticky states have changed for the header or footer. If there is a diff, then\r\n     * re-render that section.\r\n     * @private\r\n     * @return {?}\r\n     */\r\n    function () {\r\n        /** @type {?} */\r\n        var columnsDiffReducer = (/**\r\n         * @param {?} acc\r\n         * @param {?} def\r\n         * @return {?}\r\n         */\r\n        function (acc, def) { return acc || !!def.getColumnsDiff(); });\r\n        // Force re-render data rows if the list of column definitions have changed.\r\n        if (this._rowDefs.reduce(columnsDiffReducer, false)) {\r\n            this._forceRenderDataRows();\r\n        }\r\n        // Force re-render header/footer rows if the list of column definitions have changed..\r\n        if (this._headerRowDefs.reduce(columnsDiffReducer, false)) {\r\n            this._forceRenderHeaderRows();\r\n        }\r\n        if (this._footerRowDefs.reduce(columnsDiffReducer, false)) {\r\n            this._forceRenderFooterRows();\r\n        }\r\n    };\r\n    /**\r\n     * Switch to the provided data source by resetting the data and unsubscribing from the current\r\n     * render change subscription if one exists. If the data source is null, interpret this by\r\n     * clearing the row outlet. Otherwise start listening for new data.\r\n     */\r\n    /**\r\n     * Switch to the provided data source by resetting the data and unsubscribing from the current\r\n     * render change subscription if one exists. If the data source is null, interpret this by\r\n     * clearing the row outlet. Otherwise start listening for new data.\r\n     * @private\r\n     * @param {?} dataSource\r\n     * @return {?}\r\n     */\r\n    CdkTable.prototype._switchDataSource = /**\r\n     * Switch to the provided data source by resetting the data and unsubscribing from the current\r\n     * render change subscription if one exists. If the data source is null, interpret this by\r\n     * clearing the row outlet. Otherwise start listening for new data.\r\n     * @private\r\n     * @param {?} dataSource\r\n     * @return {?}\r\n     */\r\n    function (dataSource) {\r\n        this._data = [];\r\n        if (isDataSource(this.dataSource)) {\r\n            this.dataSource.disconnect(this);\r\n        }\r\n        // Stop listening for data from the previous data source.\r\n        if (this._renderChangeSubscription) {\r\n            this._renderChangeSubscription.unsubscribe();\r\n            this._renderChangeSubscription = null;\r\n        }\r\n        if (!dataSource) {\r\n            if (this._dataDiffer) {\r\n                this._dataDiffer.diff([]);\r\n            }\r\n            this._rowOutlet.viewContainer.clear();\r\n        }\r\n        this._dataSource = dataSource;\r\n    };\r\n    /** Set up a subscription for the data provided by the data source. */\r\n    /**\r\n     * Set up a subscription for the data provided by the data source.\r\n     * @private\r\n     * @return {?}\r\n     */\r\n    CdkTable.prototype._observeRenderChanges = /**\r\n     * Set up a subscription for the data provided by the data source.\r\n     * @private\r\n     * @return {?}\r\n     */\r\n    function () {\r\n        var _this = this;\r\n        // If no data source has been set, there is nothing to observe for changes.\r\n        if (!this.dataSource) {\r\n            return;\r\n        }\r\n        /** @type {?} */\r\n        var dataStream;\r\n        if (isDataSource(this.dataSource)) {\r\n            dataStream = this.dataSource.connect(this);\r\n        }\r\n        else if (this.dataSource instanceof Observable) {\r\n            dataStream = this.dataSource;\r\n        }\r\n        else if (Array.isArray(this.dataSource)) {\r\n            dataStream = of(this.dataSource);\r\n        }\r\n        if (dataStream === undefined) {\r\n            throw getTableUnknownDataSourceError();\r\n        }\r\n        this._renderChangeSubscription = dataStream.pipe(takeUntil(this._onDestroy)).subscribe((/**\r\n         * @param {?} data\r\n         * @return {?}\r\n         */\r\n        function (data) {\r\n            _this._data = data || [];\r\n            _this.renderRows();\r\n        }));\r\n    };\r\n    /**\r\n     * Clears any existing content in the header row outlet and creates a new embedded view\r\n     * in the outlet using the header row definition.\r\n     */\r\n    /**\r\n     * Clears any existing content in the header row outlet and creates a new embedded view\r\n     * in the outlet using the header row definition.\r\n     * @private\r\n     * @return {?}\r\n     */\r\n    CdkTable.prototype._forceRenderHeaderRows = /**\r\n     * Clears any existing content in the header row outlet and creates a new embedded view\r\n     * in the outlet using the header row definition.\r\n     * @private\r\n     * @return {?}\r\n     */\r\n    function () {\r\n        var _this = this;\r\n        // Clear the header row outlet if any content exists.\r\n        if (this._headerRowOutlet.viewContainer.length > 0) {\r\n            this._headerRowOutlet.viewContainer.clear();\r\n        }\r\n        this._headerRowDefs.forEach((/**\r\n         * @param {?} def\r\n         * @param {?} i\r\n         * @return {?}\r\n         */\r\n        function (def, i) { return _this._renderRow(_this._headerRowOutlet, def, i); }));\r\n        this.updateStickyHeaderRowStyles();\r\n        this.updateStickyColumnStyles();\r\n    };\r\n    /**\r\n     * Clears any existing content in the footer row outlet and creates a new embedded view\r\n     * in the outlet using the footer row definition.\r\n     */\r\n    /**\r\n     * Clears any existing content in the footer row outlet and creates a new embedded view\r\n     * in the outlet using the footer row definition.\r\n     * @private\r\n     * @return {?}\r\n     */\r\n    CdkTable.prototype._forceRenderFooterRows = /**\r\n     * Clears any existing content in the footer row outlet and creates a new embedded view\r\n     * in the outlet using the footer row definition.\r\n     * @private\r\n     * @return {?}\r\n     */\r\n    function () {\r\n        var _this = this;\r\n        // Clear the footer row outlet if any content exists.\r\n        if (this._footerRowOutlet.viewContainer.length > 0) {\r\n            this._footerRowOutlet.viewContainer.clear();\r\n        }\r\n        this._footerRowDefs.forEach((/**\r\n         * @param {?} def\r\n         * @param {?} i\r\n         * @return {?}\r\n         */\r\n        function (def, i) { return _this._renderRow(_this._footerRowOutlet, def, i); }));\r\n        this.updateStickyFooterRowStyles();\r\n        this.updateStickyColumnStyles();\r\n    };\r\n    /** Adds the sticky column styles for the rows according to the columns' stick states. */\r\n    /**\r\n     * Adds the sticky column styles for the rows according to the columns' stick states.\r\n     * @private\r\n     * @param {?} rows\r\n     * @param {?} rowDef\r\n     * @return {?}\r\n     */\r\n    CdkTable.prototype._addStickyColumnStyles = /**\r\n     * Adds the sticky column styles for the rows according to the columns' stick states.\r\n     * @private\r\n     * @param {?} rows\r\n     * @param {?} rowDef\r\n     * @return {?}\r\n     */\r\n    function (rows, rowDef) {\r\n        var _this = this;\r\n        /** @type {?} */\r\n        var columnDefs = Array.from(rowDef.columns || []).map((/**\r\n         * @param {?} columnName\r\n         * @return {?}\r\n         */\r\n        function (columnName) {\r\n            /** @type {?} */\r\n            var columnDef = _this._columnDefsByName.get(columnName);\r\n            if (!columnDef) {\r\n                throw getTableUnknownColumnError(columnName);\r\n            }\r\n            return (/** @type {?} */ (columnDef));\r\n        }));\r\n        /** @type {?} */\r\n        var stickyStartStates = columnDefs.map((/**\r\n         * @param {?} columnDef\r\n         * @return {?}\r\n         */\r\n        function (columnDef) { return columnDef.sticky; }));\r\n        /** @type {?} */\r\n        var stickyEndStates = columnDefs.map((/**\r\n         * @param {?} columnDef\r\n         * @return {?}\r\n         */\r\n        function (columnDef) { return columnDef.stickyEnd; }));\r\n        this._stickyStyler.updateStickyColumns(rows, stickyStartStates, stickyEndStates);\r\n    };\r\n    /** Gets the list of rows that have been rendered in the row outlet. */\r\n    /**\r\n     * Gets the list of rows that have been rendered in the row outlet.\r\n     * @param {?} rowOutlet\r\n     * @return {?}\r\n     */\r\n    CdkTable.prototype._getRenderedRows = /**\r\n     * Gets the list of rows that have been rendered in the row outlet.\r\n     * @param {?} rowOutlet\r\n     * @return {?}\r\n     */\r\n    function (rowOutlet) {\r\n        /** @type {?} */\r\n        var renderedRows = [];\r\n        for (var i = 0; i < rowOutlet.viewContainer.length; i++) {\r\n            /** @type {?} */\r\n            var viewRef = ((/** @type {?} */ ((/** @type {?} */ (rowOutlet.viewContainer.get(i))))));\r\n            renderedRows.push(viewRef.rootNodes[0]);\r\n        }\r\n        return renderedRows;\r\n    };\r\n    /**\r\n     * Get the matching row definitions that should be used for this row data. If there is only\r\n     * one row definition, it is returned. Otherwise, find the row definitions that has a when\r\n     * predicate that returns true with the data. If none return true, return the default row\r\n     * definition.\r\n     */\r\n    /**\r\n     * Get the matching row definitions that should be used for this row data. If there is only\r\n     * one row definition, it is returned. Otherwise, find the row definitions that has a when\r\n     * predicate that returns true with the data. If none return true, return the default row\r\n     * definition.\r\n     * @param {?} data\r\n     * @param {?} dataIndex\r\n     * @return {?}\r\n     */\r\n    CdkTable.prototype._getRowDefs = /**\r\n     * Get the matching row definitions that should be used for this row data. If there is only\r\n     * one row definition, it is returned. Otherwise, find the row definitions that has a when\r\n     * predicate that returns true with the data. If none return true, return the default row\r\n     * definition.\r\n     * @param {?} data\r\n     * @param {?} dataIndex\r\n     * @return {?}\r\n     */\r\n    function (data, dataIndex) {\r\n        if (this._rowDefs.length == 1) {\r\n            return [this._rowDefs[0]];\r\n        }\r\n        /** @type {?} */\r\n        var rowDefs = [];\r\n        if (this.multiTemplateDataRows) {\r\n            rowDefs = this._rowDefs.filter((/**\r\n             * @param {?} def\r\n             * @return {?}\r\n             */\r\n            function (def) { return !def.when || def.when(dataIndex, data); }));\r\n        }\r\n        else {\r\n            /** @type {?} */\r\n            var rowDef = this._rowDefs.find((/**\r\n             * @param {?} def\r\n             * @return {?}\r\n             */\r\n            function (def) { return def.when && def.when(dataIndex, data); })) || this._defaultRowDef;\r\n            if (rowDef) {\r\n                rowDefs.push(rowDef);\r\n            }\r\n        }\r\n        if (!rowDefs.length) {\r\n            throw getTableMissingMatchingRowDefError(data);\r\n        }\r\n        return rowDefs;\r\n    };\r\n    /**\r\n     * Create the embedded view for the data row template and place it in the correct index location\r\n     * within the data row view container.\r\n     */\r\n    /**\r\n     * Create the embedded view for the data row template and place it in the correct index location\r\n     * within the data row view container.\r\n     * @private\r\n     * @param {?} renderRow\r\n     * @param {?} renderIndex\r\n     * @return {?}\r\n     */\r\n    CdkTable.prototype._insertRow = /**\r\n     * Create the embedded view for the data row template and place it in the correct index location\r\n     * within the data row view container.\r\n     * @private\r\n     * @param {?} renderRow\r\n     * @param {?} renderIndex\r\n     * @return {?}\r\n     */\r\n    function (renderRow, renderIndex) {\r\n        /** @type {?} */\r\n        var rowDef = renderRow.rowDef;\r\n        /** @type {?} */\r\n        var context = { $implicit: renderRow.data };\r\n        this._renderRow(this._rowOutlet, rowDef, renderIndex, context);\r\n    };\r\n    /**\r\n     * Creates a new row template in the outlet and fills it with the set of cell templates.\r\n     * Optionally takes a context to provide to the row and cells, as well as an optional index\r\n     * of where to place the new row template in the outlet.\r\n     */\r\n    /**\r\n     * Creates a new row template in the outlet and fills it with the set of cell templates.\r\n     * Optionally takes a context to provide to the row and cells, as well as an optional index\r\n     * of where to place the new row template in the outlet.\r\n     * @private\r\n     * @param {?} outlet\r\n     * @param {?} rowDef\r\n     * @param {?} index\r\n     * @param {?=} context\r\n     * @return {?}\r\n     */\r\n    CdkTable.prototype._renderRow = /**\r\n     * Creates a new row template in the outlet and fills it with the set of cell templates.\r\n     * Optionally takes a context to provide to the row and cells, as well as an optional index\r\n     * of where to place the new row template in the outlet.\r\n     * @private\r\n     * @param {?} outlet\r\n     * @param {?} rowDef\r\n     * @param {?} index\r\n     * @param {?=} context\r\n     * @return {?}\r\n     */\r\n    function (outlet, rowDef, index, context) {\r\n        if (context === void 0) { context = {}; }\r\n        // TODO(andrewseguin): enforce that one outlet was instantiated from createEmbeddedView\r\n        outlet.viewContainer.createEmbeddedView(rowDef.template, context, index);\r\n        for (var _a = 0, _b = this._getCellTemplates(rowDef); _a < _b.length; _a++) {\r\n            var cellTemplate = _b[_a];\r\n            if (CdkCellOutlet.mostRecentCellOutlet) {\r\n                CdkCellOutlet.mostRecentCellOutlet._viewContainer.createEmbeddedView(cellTemplate, context);\r\n            }\r\n        }\r\n        this._changeDetectorRef.markForCheck();\r\n    };\r\n    /**\r\n     * Updates the index-related context for each row to reflect any changes in the index of the rows,\r\n     * e.g. first/last/even/odd.\r\n     */\r\n    /**\r\n     * Updates the index-related context for each row to reflect any changes in the index of the rows,\r\n     * e.g. first/last/even/odd.\r\n     * @private\r\n     * @return {?}\r\n     */\r\n    CdkTable.prototype._updateRowIndexContext = /**\r\n     * Updates the index-related context for each row to reflect any changes in the index of the rows,\r\n     * e.g. first/last/even/odd.\r\n     * @private\r\n     * @return {?}\r\n     */\r\n    function () {\r\n        /** @type {?} */\r\n        var viewContainer = this._rowOutlet.viewContainer;\r\n        for (var renderIndex = 0, count = viewContainer.length; renderIndex < count; renderIndex++) {\r\n            /** @type {?} */\r\n            var viewRef = (/** @type {?} */ (viewContainer.get(renderIndex)));\r\n            /** @type {?} */\r\n            var context = (/** @type {?} */ (viewRef.context));\r\n            context.count = count;\r\n            context.first = renderIndex === 0;\r\n            context.last = renderIndex === count - 1;\r\n            context.even = renderIndex % 2 === 0;\r\n            context.odd = !context.even;\r\n            if (this.multiTemplateDataRows) {\r\n                context.dataIndex = this._renderRows[renderIndex].dataIndex;\r\n                context.renderIndex = renderIndex;\r\n            }\r\n            else {\r\n                context.index = this._renderRows[renderIndex].dataIndex;\r\n            }\r\n        }\r\n    };\r\n    /** Gets the column definitions for the provided row def. */\r\n    /**\r\n     * Gets the column definitions for the provided row def.\r\n     * @private\r\n     * @param {?} rowDef\r\n     * @return {?}\r\n     */\r\n    CdkTable.prototype._getCellTemplates = /**\r\n     * Gets the column definitions for the provided row def.\r\n     * @private\r\n     * @param {?} rowDef\r\n     * @return {?}\r\n     */\r\n    function (rowDef) {\r\n        var _this = this;\r\n        if (!rowDef || !rowDef.columns) {\r\n            return [];\r\n        }\r\n        return Array.from(rowDef.columns, (/**\r\n         * @param {?} columnId\r\n         * @return {?}\r\n         */\r\n        function (columnId) {\r\n            /** @type {?} */\r\n            var column = _this._columnDefsByName.get(columnId);\r\n            if (!column) {\r\n                throw getTableUnknownColumnError(columnId);\r\n            }\r\n            return rowDef.extractCellTemplate(column);\r\n        }));\r\n    };\r\n    /** Adds native table sections (e.g. tbody) and moves the row outlets into them. */\r\n    /**\r\n     * Adds native table sections (e.g. tbody) and moves the row outlets into them.\r\n     * @private\r\n     * @return {?}\r\n     */\r\n    CdkTable.prototype._applyNativeTableSections = /**\r\n     * Adds native table sections (e.g. tbody) and moves the row outlets into them.\r\n     * @private\r\n     * @return {?}\r\n     */\r\n    function () {\r\n        /** @type {?} */\r\n        var documentFragment = this._document.createDocumentFragment();\r\n        /** @type {?} */\r\n        var sections = [\r\n            { tag: 'thead', outlet: this._headerRowOutlet },\r\n            { tag: 'tbody', outlet: this._rowOutlet },\r\n            { tag: 'tfoot', outlet: this._footerRowOutlet },\r\n        ];\r\n        for (var _a = 0, sections_1 = sections; _a < sections_1.length; _a++) {\r\n            var section = sections_1[_a];\r\n            /** @type {?} */\r\n            var element = this._document.createElement(section.tag);\r\n            element.setAttribute('role', 'rowgroup');\r\n            element.appendChild(section.outlet.elementRef.nativeElement);\r\n            documentFragment.appendChild(element);\r\n        }\r\n        // Use a DocumentFragment so we don't hit the DOM on each iteration.\r\n        this._elementRef.nativeElement.appendChild(documentFragment);\r\n    };\r\n    /**\r\n     * Forces a re-render of the data rows. Should be called in cases where there has been an input\r\n     * change that affects the evaluation of which rows should be rendered, e.g. toggling\r\n     * `multiTemplateDataRows` or adding/removing row definitions.\r\n     */\r\n    /**\r\n     * Forces a re-render of the data rows. Should be called in cases where there has been an input\r\n     * change that affects the evaluation of which rows should be rendered, e.g. toggling\r\n     * `multiTemplateDataRows` or adding/removing row definitions.\r\n     * @private\r\n     * @return {?}\r\n     */\r\n    CdkTable.prototype._forceRenderDataRows = /**\r\n     * Forces a re-render of the data rows. Should be called in cases where there has been an input\r\n     * change that affects the evaluation of which rows should be rendered, e.g. toggling\r\n     * `multiTemplateDataRows` or adding/removing row definitions.\r\n     * @private\r\n     * @return {?}\r\n     */\r\n    function () {\r\n        this._dataDiffer.diff([]);\r\n        this._rowOutlet.viewContainer.clear();\r\n        this.renderRows();\r\n        this.updateStickyColumnStyles();\r\n    };\r\n    /**\r\n     * Checks if there has been a change in sticky states since last check and applies the correct\r\n     * sticky styles. Since checking resets the \"dirty\" state, this should only be performed once\r\n     * during a change detection and after the inputs are settled (after content check).\r\n     */\r\n    /**\r\n     * Checks if there has been a change in sticky states since last check and applies the correct\r\n     * sticky styles. Since checking resets the \"dirty\" state, this should only be performed once\r\n     * during a change detection and after the inputs are settled (after content check).\r\n     * @private\r\n     * @return {?}\r\n     */\r\n    CdkTable.prototype._checkStickyStates = /**\r\n     * Checks if there has been a change in sticky states since last check and applies the correct\r\n     * sticky styles. Since checking resets the \"dirty\" state, this should only be performed once\r\n     * during a change detection and after the inputs are settled (after content check).\r\n     * @private\r\n     * @return {?}\r\n     */\r\n    function () {\r\n        /** @type {?} */\r\n        var stickyCheckReducer = (/**\r\n         * @param {?} acc\r\n         * @param {?} d\r\n         * @return {?}\r\n         */\r\n        function (acc, d) {\r\n            return acc || d.hasStickyChanged();\r\n        });\r\n        // Note that the check needs to occur for every definition since it notifies the definition\r\n        // that it can reset its dirty state. Using another operator like `some` may short-circuit\r\n        // remaining definitions and leave them in an unchecked state.\r\n        if (this._headerRowDefs.reduce(stickyCheckReducer, false)) {\r\n            this.updateStickyHeaderRowStyles();\r\n        }\r\n        if (this._footerRowDefs.reduce(stickyCheckReducer, false)) {\r\n            this.updateStickyFooterRowStyles();\r\n        }\r\n        if (Array.from(this._columnDefsByName.values()).reduce(stickyCheckReducer, false)) {\r\n            this.updateStickyColumnStyles();\r\n        }\r\n    };\r\n    /**\r\n     * Creates the sticky styler that will be used for sticky rows and columns. Listens\r\n     * for directionality changes and provides the latest direction to the styler. Re-applies column\r\n     * stickiness when directionality changes.\r\n     */\r\n    /**\r\n     * Creates the sticky styler that will be used for sticky rows and columns. Listens\r\n     * for directionality changes and provides the latest direction to the styler. Re-applies column\r\n     * stickiness when directionality changes.\r\n     * @private\r\n     * @return {?}\r\n     */\r\n    CdkTable.prototype._setupStickyStyler = /**\r\n     * Creates the sticky styler that will be used for sticky rows and columns. Listens\r\n     * for directionality changes and provides the latest direction to the styler. Re-applies column\r\n     * stickiness when directionality changes.\r\n     * @private\r\n     * @return {?}\r\n     */\r\n    function () {\r\n        var _this = this;\r\n        /** @type {?} */\r\n        var direction = this._dir ? this._dir.value : 'ltr';\r\n        this._stickyStyler = new StickyStyler(this._isNativeHtmlTable, this.stickyCssClass, direction, this._platform.isBrowser);\r\n        (this._dir ? this._dir.change : of())\r\n            .pipe(takeUntil(this._onDestroy))\r\n            .subscribe((/**\r\n         * @param {?} value\r\n         * @return {?}\r\n         */\r\n        function (value) {\r\n            _this._stickyStyler.direction = value;\r\n            _this.updateStickyColumnStyles();\r\n        }));\r\n    };\r\n    CdkTable.decorators = [\r\n        { type: Component, args: [{selector: 'cdk-table, table[cdk-table]',\r\n                    exportAs: 'cdkTable',\r\n                    template: CDK_TABLE_TEMPLATE,\r\n                    host: {\r\n                        'class': 'cdk-table',\r\n                    },\r\n                    encapsulation: ViewEncapsulation.None,\r\n                    // The \"OnPush\" status for the `MatTable` component is effectively a noop, so we are removing it.\r\n                    // The view for `MatTable` consists entirely of templates declared in other views. As they are\r\n                    // declared elsewhere, they are checked when their declaration points are checked.\r\n                    // tslint:disable-next-line:validate-decorators\r\n                    changeDetection: ChangeDetectionStrategy.Default,\r\n                },] },\r\n    ];\r\n    /** @nocollapse */\r\n    CdkTable.ctorParameters = function () { return [\r\n        { type: IterableDiffers },\r\n        { type: ChangeDetectorRef },\r\n        { type: ElementRef },\r\n        { type: String, decorators: [{ type: Attribute, args: ['role',] }] },\r\n        { type: Directionality, decorators: [{ type: Optional }] },\r\n        { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },\r\n        { type: Platform }\r\n    ]; };\r\n    CdkTable.propDecorators = {\r\n        trackBy: [{ type: Input }],\r\n        dataSource: [{ type: Input }],\r\n        multiTemplateDataRows: [{ type: Input }],\r\n        _rowOutlet: [{ type: ViewChild, args: [DataRowOutlet, { static: true },] }],\r\n        _headerRowOutlet: [{ type: ViewChild, args: [HeaderRowOutlet, { static: true },] }],\r\n        _footerRowOutlet: [{ type: ViewChild, args: [FooterRowOutlet, { static: true },] }],\r\n        _contentColumnDefs: [{ type: ContentChildren, args: [CdkColumnDef,] }],\r\n        _contentRowDefs: [{ type: ContentChildren, args: [CdkRowDef,] }],\r\n        _contentHeaderRowDefs: [{ type: ContentChildren, args: [CdkHeaderRowDef,] }],\r\n        _contentFooterRowDefs: [{ type: ContentChildren, args: [CdkFooterRowDef,] }]\r\n    };\r\n    return CdkTable;\r\n}());\r\n/**\r\n * Utility function that gets a merged list of the entries in a QueryList and values of a Set.\r\n * @template T\r\n * @param {?} queryList\r\n * @param {?} set\r\n * @return {?}\r\n */\r\nfunction mergeQueryListAndSet(queryList, set) {\r\n    return queryList.toArray().concat(Array.from(set));\r\n}\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n/**\r\n * Injection token that can be used to specify the text column options.\r\n * @type {?}\r\n */\r\nvar TEXT_COLUMN_OPTIONS = new InjectionToken('text-column-options');\r\n/**\r\n * Column that simply shows text content for the header and row cells. Assumes that the table\r\n * is using the native table implementation (`<table>`).\r\n *\r\n * By default, the name of this column will be the header text and data property accessor.\r\n * The header text can be overridden with the `headerText` input. Cell values can be overridden with\r\n * the `dataAccessor` input. Change the text justification to the start or end using the `justify`\r\n * input.\r\n * @template T\r\n */\r\nvar CdkTextColumn = /** @class */ (function () {\r\n    function CdkTextColumn(_table, _options) {\r\n        this._table = _table;\r\n        this._options = _options;\r\n        /**\r\n         * Alignment of the cell values.\r\n         */\r\n        this.justify = 'start';\r\n        this._options = _options || {};\r\n    }\r\n    Object.defineProperty(CdkTextColumn.prototype, \"name\", {\r\n        /** Column name that should be used to reference this column. */\r\n        get: /**\r\n         * Column name that should be used to reference this column.\r\n         * @return {?}\r\n         */\r\n        function () {\r\n            return this._name;\r\n        },\r\n        set: /**\r\n         * @param {?} name\r\n         * @return {?}\r\n         */\r\n        function (name) {\r\n            this._name = name;\r\n            // With Ivy, inputs can be initialized before static query results are\r\n            // available. In that case, we defer the synchronization until \"ngOnInit\" fires.\r\n            this._syncColumnDefName();\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * @return {?}\r\n     */\r\n    CdkTextColumn.prototype.ngOnInit = /**\r\n     * @return {?}\r\n     */\r\n    function () {\r\n        this._syncColumnDefName();\r\n        if (this.headerText === undefined) {\r\n            this.headerText = this._createDefaultHeaderText();\r\n        }\r\n        if (!this.dataAccessor) {\r\n            this.dataAccessor =\r\n                this._options.defaultDataAccessor || ((/**\r\n                 * @param {?} data\r\n                 * @param {?} name\r\n                 * @return {?}\r\n                 */\r\n                function (data, name) { return ((/** @type {?} */ (data)))[name]; }));\r\n        }\r\n        if (this._table) {\r\n            // Provide the cell and headerCell directly to the table with the static `ViewChild` query,\r\n            // since the columnDef will not pick up its content by the time the table finishes checking\r\n            // its content and initializing the rows.\r\n            this.columnDef.cell = this.cell;\r\n            this.columnDef.headerCell = this.headerCell;\r\n            this._table.addColumnDef(this.columnDef);\r\n        }\r\n        else {\r\n            throw getTableTextColumnMissingParentTableError();\r\n        }\r\n    };\r\n    /**\r\n     * @return {?}\r\n     */\r\n    CdkTextColumn.prototype.ngOnDestroy = /**\r\n     * @return {?}\r\n     */\r\n    function () {\r\n        if (this._table) {\r\n            this._table.removeColumnDef(this.columnDef);\r\n        }\r\n    };\r\n    /**\r\n     * Creates a default header text. Use the options' header text transformation function if one\r\n     * has been provided. Otherwise simply capitalize the column name.\r\n     */\r\n    /**\r\n     * Creates a default header text. Use the options' header text transformation function if one\r\n     * has been provided. Otherwise simply capitalize the column name.\r\n     * @return {?}\r\n     */\r\n    CdkTextColumn.prototype._createDefaultHeaderText = /**\r\n     * Creates a default header text. Use the options' header text transformation function if one\r\n     * has been provided. Otherwise simply capitalize the column name.\r\n     * @return {?}\r\n     */\r\n    function () {\r\n        /** @type {?} */\r\n        var name = this.name;\r\n        if (isDevMode() && !name) {\r\n            throw getTableTextColumnMissingNameError();\r\n        }\r\n        if (this._options && this._options.defaultHeaderTextTransform) {\r\n            return this._options.defaultHeaderTextTransform(name);\r\n        }\r\n        return name[0].toUpperCase() + name.slice(1);\r\n    };\r\n    /** Synchronizes the column definition name with the text column name. */\r\n    /**\r\n     * Synchronizes the column definition name with the text column name.\r\n     * @private\r\n     * @return {?}\r\n     */\r\n    CdkTextColumn.prototype._syncColumnDefName = /**\r\n     * Synchronizes the column definition name with the text column name.\r\n     * @private\r\n     * @return {?}\r\n     */\r\n    function () {\r\n        if (this.columnDef) {\r\n            this.columnDef.name = this.name;\r\n        }\r\n    };\r\n    CdkTextColumn.decorators = [\r\n        { type: Component, args: [{selector: 'cdk-text-column',\r\n                    template: \"\\n    <ng-container cdkColumnDef>\\n      <th cdk-header-cell *cdkHeaderCellDef [style.text-align]=\\\"justify\\\">\\n        {{headerText}}\\n      </th>\\n      <td cdk-cell *cdkCellDef=\\\"let data\\\" [style.text-align]=\\\"justify\\\">\\n        {{dataAccessor(data, name)}}\\n      </td>\\n    </ng-container>\\n  \",\r\n                    encapsulation: ViewEncapsulation.None,\r\n                    // Change detection is intentionally not set to OnPush. This component's template will be provided\r\n                    // to the table to be inserted into its view. This is problematic when change detection runs since\r\n                    // the bindings in this template will be evaluated _after_ the table's view is evaluated, which\r\n                    // mean's the template in the table's view will not have the updated value (and in fact will cause\r\n                    // an ExpressionChangedAfterItHasBeenCheckedError).\r\n                    // tslint:disable-next-line:validate-decorators\r\n                    changeDetection: ChangeDetectionStrategy.Default,\r\n                },] },\r\n    ];\r\n    /** @nocollapse */\r\n    CdkTextColumn.ctorParameters = function () { return [\r\n        { type: CdkTable, decorators: [{ type: Optional }] },\r\n        { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [TEXT_COLUMN_OPTIONS,] }] }\r\n    ]; };\r\n    CdkTextColumn.propDecorators = {\r\n        name: [{ type: Input }],\r\n        headerText: [{ type: Input }],\r\n        dataAccessor: [{ type: Input }],\r\n        justify: [{ type: Input }],\r\n        columnDef: [{ type: ViewChild, args: [CdkColumnDef, { static: true },] }],\r\n        cell: [{ type: ViewChild, args: [CdkCellDef, { static: true },] }],\r\n        headerCell: [{ type: ViewChild, args: [CdkHeaderCellDef, { static: true },] }]\r\n    };\r\n    return CdkTextColumn;\r\n}());\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n/** @type {?} */\r\nvar EXPORTED_DECLARATIONS = [\r\n    CdkTable,\r\n    CdkRowDef,\r\n    CdkCellDef,\r\n    CdkCellOutlet,\r\n    CdkHeaderCellDef,\r\n    CdkFooterCellDef,\r\n    CdkColumnDef,\r\n    CdkCell,\r\n    CdkRow,\r\n    CdkHeaderCell,\r\n    CdkFooterCell,\r\n    CdkHeaderRow,\r\n    CdkHeaderRowDef,\r\n    CdkFooterRow,\r\n    CdkFooterRowDef,\r\n    DataRowOutlet,\r\n    HeaderRowOutlet,\r\n    FooterRowOutlet,\r\n    CdkTextColumn,\r\n];\r\nvar CdkTableModule = /** @class */ (function () {\r\n    function CdkTableModule() {\r\n    }\r\n    CdkTableModule.decorators = [\r\n        { type: NgModule, args: [{\r\n                    imports: [CommonModule],\r\n                    exports: EXPORTED_DECLARATIONS,\r\n                    declarations: EXPORTED_DECLARATIONS\r\n                },] },\r\n    ];\r\n    return CdkTableModule;\r\n}());\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n\r\nexport { DataRowOutlet, HeaderRowOutlet, FooterRowOutlet, CDK_TABLE_TEMPLATE, CdkTable, CdkCellDef, CdkHeaderCellDef, CdkFooterCellDef, CdkColumnDef, BaseCdkCell, CdkHeaderCell, CdkFooterCell, CdkCell, CDK_ROW_TEMPLATE, BaseRowDef, CdkHeaderRowDef, CdkFooterRowDef, CdkRowDef, CdkCellOutlet, CdkHeaderRow, CdkFooterRow, CdkRow, CdkTableModule, STICKY_DIRECTIONS, StickyStyler, mixinHasStickyInput, TEXT_COLUMN_OPTIONS, CdkTextColumn };\r\n\r\n"]}