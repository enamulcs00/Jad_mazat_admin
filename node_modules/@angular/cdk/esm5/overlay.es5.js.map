{"version":3,"sources":["v:/jad-admin-go/mazat_admin_panel/node_modules/@angular/cdk/esm5/overlay.es5.js"],"names":[],"mappingsfK,AAGC;;;;;;;;;;;;;;;;iJAQsT;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;MAmStT,AAGA;;;;;;;;;;;;;0JAK+P;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;MA0G/P,AAGA;;;;;;;;;;;;;gqG3N,AAGA;;;;;;;;;;;;;;;;yMAQ4T;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;MAwJ5T,AAGA;;;;;;;;;;;;;;;;;;;;;;oVAaG;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;KAkDJ,AAMC;;;;;;;;;;;;4EAIG;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;MA6ZH,AAMA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;cAiCA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;KA8BD;;;;;;;;;;;;;;;;;;;;;;4BAWC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;MAuJA,AAGA;;;;;;;;;;;;;yOAKmQ","file":"overlay.es5.js","sourcesContent":["/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nimport { coerceCssPixelValue, coerceArray, coerceBooleanProperty } from '@angular/cdk/coercion';\r\nimport { ScrollDispatcher, ViewportRuler, ScrollingModule, VIEWPORT_RULER_PROVIDER } from '@angular/cdk/scrolling';\r\nexport { ViewportRuler, VIEWPORT_RULER_PROVIDER, CdkScrollable, ScrollDispatcher } from '@angular/cdk/scrolling';\r\nimport { DOCUMENT, Location } from '@angular/common';\r\nimport { Inject, Injectable, NgZone, Optional, NgModule, SkipSelf, ApplicationRef, ComponentFactoryResolver, Injector, ElementRef, Directive, EventEmitter, InjectionToken, Input, Output, TemplateRef, ViewContainerRef, ɵɵdefineInjectable, ɵɵinject } from '@angular/core';\r\nimport { __assign, __extends } from 'tslib';\r\nimport { Observable, Subject, merge, Subscription } from 'rxjs';\r\nimport { take, takeUntil } from 'rxjs/operators';\r\nimport { Platform } from '@angular/cdk/platform';\r\nimport { Directionality, BidiModule } from '@angular/cdk/bidi';\r\nimport { DomPortalOutlet, TemplatePortal, PortalModule } from '@angular/cdk/portal';\r\nimport { ESCAPE, hasModifierKey } from '@angular/cdk/keycodes';\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n/**\r\n * Strategy that will prevent the user from scrolling while the overlay is visible.\r\n */\r\nvar  /**\r\n * Strategy that will prevent the user from scrolling while the overlay is visible.\r\n */\r\nBlockScrollStrategy = /** @class */ (function () {\r\n    function BlockScrollStrategy(_viewportRuler, document) {\r\n        this._viewportRuler = _viewportRuler;\r\n        this._previousHTMLStyles = { top: '', left: '' };\r\n        this._isEnabled = false;\r\n        this._document = document;\r\n    }\r\n    /** Attaches this scroll strategy to an overlay. */\r\n    /**\r\n     * Attaches this scroll strategy to an overlay.\r\n     * @return {?}\r\n     */\r\n    BlockScrollStrategy.prototype.attach = /**\r\n     * Attaches this scroll strategy to an overlay.\r\n     * @return {?}\r\n     */\r\n    function () { };\r\n    /** Blocks page-level scroll while the attached overlay is open. */\r\n    /**\r\n     * Blocks page-level scroll while the attached overlay is open.\r\n     * @return {?}\r\n     */\r\n    BlockScrollStrategy.prototype.enable = /**\r\n     * Blocks page-level scroll while the attached overlay is open.\r\n     * @return {?}\r\n     */\r\n    function () {\r\n        if (this._canBeEnabled()) {\r\n            /** @type {?} */\r\n            var root = (/** @type {?} */ (this._document.documentElement));\r\n            this._previousScrollPosition = this._viewportRuler.getViewportScrollPosition();\r\n            // Cache the previous inline styles in case the user had set them.\r\n            this._previousHTMLStyles.left = root.style.left || '';\r\n            this._previousHTMLStyles.top = root.style.top || '';\r\n            // Note: we're using the `html` node, instead of the `body`, because the `body` may\r\n            // have the user agent margin, whereas the `html` is guaranteed not to have one.\r\n            root.style.left = coerceCssPixelValue(-this._previousScrollPosition.left);\r\n            root.style.top = coerceCssPixelValue(-this._previousScrollPosition.top);\r\n            root.classList.add('cdk-global-scrollblock');\r\n            this._isEnabled = true;\r\n        }\r\n    };\r\n    /** Unblocks page-level scroll while the attached overlay is open. */\r\n    /**\r\n     * Unblocks page-level scroll while the attached overlay is open.\r\n     * @return {?}\r\n     */\r\n    BlockScrollStrategy.prototype.disable = /**\r\n     * Unblocks page-level scroll while the attached overlay is open.\r\n     * @return {?}\r\n     */\r\n    function () {\r\n        if (this._isEnabled) {\r\n            /** @type {?} */\r\n            var html = (/** @type {?} */ (this._document.documentElement));\r\n            /** @type {?} */\r\n            var body = (/** @type {?} */ (this._document.body));\r\n            /** @type {?} */\r\n            var htmlStyle = (/** @type {?} */ (html.style));\r\n            /** @type {?} */\r\n            var bodyStyle = (/** @type {?} */ (body.style));\r\n            /** @type {?} */\r\n            var previousHtmlScrollBehavior = htmlStyle.scrollBehavior || '';\r\n            /** @type {?} */\r\n            var previousBodyScrollBehavior = bodyStyle.scrollBehavior || '';\r\n            this._isEnabled = false;\r\n            htmlStyle.left = this._previousHTMLStyles.left;\r\n            htmlStyle.top = this._previousHTMLStyles.top;\r\n            html.classList.remove('cdk-global-scrollblock');\r\n            // Disable user-defined smooth scrolling temporarily while we restore the scroll position.\r\n            // See https://developer.mozilla.org/en-US/docs/Web/CSS/scroll-behavior\r\n            htmlStyle.scrollBehavior = bodyStyle.scrollBehavior = 'auto';\r\n            window.scroll(this._previousScrollPosition.left, this._previousScrollPosition.top);\r\n            htmlStyle.scrollBehavior = previousHtmlScrollBehavior;\r\n            bodyStyle.scrollBehavior = previousBodyScrollBehavior;\r\n        }\r\n    };\r\n    /**\r\n     * @private\r\n     * @return {?}\r\n     */\r\n    BlockScrollStrategy.prototype._canBeEnabled = /**\r\n     * @private\r\n     * @return {?}\r\n     */\r\n    function () {\r\n        // Since the scroll strategies can't be singletons, we have to use a global CSS class\r\n        // (`cdk-global-scrollblock`) to make sure that we don't try to disable global\r\n        // scrolling multiple times.\r\n        /** @type {?} */\r\n        var html = (/** @type {?} */ (this._document.documentElement));\r\n        if (html.classList.contains('cdk-global-scrollblock') || this._isEnabled) {\r\n            return false;\r\n        }\r\n        /** @type {?} */\r\n        var body = this._document.body;\r\n        /** @type {?} */\r\n        var viewport = this._viewportRuler.getViewportSize();\r\n        return body.scrollHeight > viewport.height || body.scrollWidth > viewport.width;\r\n    };\r\n    return BlockScrollStrategy;\r\n}());\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n/**\r\n * Returns an error to be thrown when attempting to attach an already-attached scroll strategy.\r\n * @return {?}\r\n */\r\nfunction getMatScrollStrategyAlreadyAttachedError() {\r\n    return Error(\"Scroll strategy has already been attached.\");\r\n}\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n/**\r\n * Strategy that will close the overlay as soon as the user starts scrolling.\r\n */\r\nvar  /**\r\n * Strategy that will close the overlay as soon as the user starts scrolling.\r\n */\r\nCloseScrollStrategy = /** @class */ (function () {\r\n    function CloseScrollStrategy(_scrollDispatcher, _ngZone, _viewportRuler, _config) {\r\n        var _this = this;\r\n        this._scrollDispatcher = _scrollDispatcher;\r\n        this._ngZone = _ngZone;\r\n        this._viewportRuler = _viewportRuler;\r\n        this._config = _config;\r\n        this._scrollSubscription = null;\r\n        /**\r\n         * Detaches the overlay ref and disables the scroll strategy.\r\n         */\r\n        this._detach = (/**\r\n         * @return {?}\r\n         */\r\n        function () {\r\n            _this.disable();\r\n            if (_this._overlayRef.hasAttached()) {\r\n                _this._ngZone.run((/**\r\n                 * @return {?}\r\n                 */\r\n                function () { return _this._overlayRef.detach(); }));\r\n            }\r\n        });\r\n    }\r\n    /** Attaches this scroll strategy to an overlay. */\r\n    /**\r\n     * Attaches this scroll strategy to an overlay.\r\n     * @param {?} overlayRef\r\n     * @return {?}\r\n     */\r\n    CloseScrollStrategy.prototype.attach = /**\r\n     * Attaches this scroll strategy to an overlay.\r\n     * @param {?} overlayRef\r\n     * @return {?}\r\n     */\r\n    function (overlayRef) {\r\n        if (this._overlayRef) {\r\n            throw getMatScrollStrategyAlreadyAttachedError();\r\n        }\r\n        this._overlayRef = overlayRef;\r\n    };\r\n    /** Enables the closing of the attached overlay on scroll. */\r\n    /**\r\n     * Enables the closing of the attached overlay on scroll.\r\n     * @return {?}\r\n     */\r\n    CloseScrollStrategy.prototype.enable = /**\r\n     * Enables the closing of the attached overlay on scroll.\r\n     * @return {?}\r\n     */\r\n    function () {\r\n        var _this = this;\r\n        if (this._scrollSubscription) {\r\n            return;\r\n        }\r\n        /** @type {?} */\r\n        var stream = this._scrollDispatcher.scrolled(0);\r\n        if (this._config && this._config.threshold && this._config.threshold > 1) {\r\n            this._initialScrollPosition = this._viewportRuler.getViewportScrollPosition().top;\r\n            this._scrollSubscription = stream.subscribe((/**\r\n             * @return {?}\r\n             */\r\n            function () {\r\n                /** @type {?} */\r\n                var scrollPosition = _this._viewportRuler.getViewportScrollPosition().top;\r\n                if (Math.abs(scrollPosition - _this._initialScrollPosition) > (/** @type {?} */ ((/** @type {?} */ (_this._config)).threshold))) {\r\n                    _this._detach();\r\n                }\r\n                else {\r\n                    _this._overlayRef.updatePosition();\r\n                }\r\n            }));\r\n        }\r\n        else {\r\n            this._scrollSubscription = stream.subscribe(this._detach);\r\n        }\r\n    };\r\n    /** Disables the closing the attached overlay on scroll. */\r\n    /**\r\n     * Disables the closing the attached overlay on scroll.\r\n     * @return {?}\r\n     */\r\n    CloseScrollStrategy.prototype.disable = /**\r\n     * Disables the closing the attached overlay on scroll.\r\n     * @return {?}\r\n     */\r\n    function () {\r\n        if (this._scrollSubscription) {\r\n            this._scrollSubscription.unsubscribe();\r\n            this._scrollSubscription = null;\r\n        }\r\n    };\r\n    /**\r\n     * @return {?}\r\n     */\r\n    CloseScrollStrategy.prototype.detach = /**\r\n     * @return {?}\r\n     */\r\n    function () {\r\n        this.disable();\r\n        this._overlayRef = (/** @type {?} */ (null));\r\n    };\r\n    return CloseScrollStrategy;\r\n}());\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n\r\n/**\r\n * Scroll strategy that doesn't do anything.\r\n */\r\nvar  /**\r\n * Scroll strategy that doesn't do anything.\r\n */\r\nNoopScrollStrategy = /** @class */ (function () {\r\n    function NoopScrollStrategy() {\r\n    }\r\n    /** Does nothing, as this scroll strategy is a no-op. */\r\n    /**\r\n     * Does nothing, as this scroll strategy is a no-op.\r\n     * @return {?}\r\n     */\r\n    NoopScrollStrategy.prototype.enable = /**\r\n     * Does nothing, as this scroll strategy is a no-op.\r\n     * @return {?}\r\n     */\r\n    function () { };\r\n    /** Does nothing, as this scroll strategy is a no-op. */\r\n    /**\r\n     * Does nothing, as this scroll strategy is a no-op.\r\n     * @return {?}\r\n     */\r\n    NoopScrollStrategy.prototype.disable = /**\r\n     * Does nothing, as this scroll strategy is a no-op.\r\n     * @return {?}\r\n     */\r\n    function () { };\r\n    /** Does nothing, as this scroll strategy is a no-op. */\r\n    /**\r\n     * Does nothing, as this scroll strategy is a no-op.\r\n     * @return {?}\r\n     */\r\n    NoopScrollStrategy.prototype.attach = /**\r\n     * Does nothing, as this scroll strategy is a no-op.\r\n     * @return {?}\r\n     */\r\n    function () { };\r\n    return NoopScrollStrategy;\r\n}());\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n\r\n// TODO(jelbourn): move this to live with the rest of the scrolling code\r\n// TODO(jelbourn): someday replace this with IntersectionObservers\r\n/**\r\n * Gets whether an element is scrolled outside of view by any of its parent scrolling containers.\r\n * \\@docs-private\r\n * @param {?} element Dimensions of the element (from getBoundingClientRect)\r\n * @param {?} scrollContainers Dimensions of element's scrolling containers (from getBoundingClientRect)\r\n * @return {?} Whether the element is scrolled out of view\r\n */\r\nfunction isElementScrolledOutsideView(element, scrollContainers) {\r\n    return scrollContainers.some((/**\r\n     * @param {?} containerBounds\r\n     * @return {?}\r\n     */\r\n    function (containerBounds) {\r\n        /** @type {?} */\r\n        var outsideAbove = element.bottom < containerBounds.top;\r\n        /** @type {?} */\r\n        var outsideBelow = element.top > containerBounds.bottom;\r\n        /** @type {?} */\r\n        var outsideLeft = element.right < containerBounds.left;\r\n        /** @type {?} */\r\n        var outsideRight = element.left > containerBounds.right;\r\n        return outsideAbove || outsideBelow || outsideLeft || outsideRight;\r\n    }));\r\n}\r\n/**\r\n * Gets whether an element is clipped by any of its scrolling containers.\r\n * \\@docs-private\r\n * @param {?} element Dimensions of the element (from getBoundingClientRect)\r\n * @param {?} scrollContainers Dimensions of element's scrolling containers (from getBoundingClientRect)\r\n * @return {?} Whether the element is clipped\r\n */\r\nfunction isElementClippedByScrolling(element, scrollContainers) {\r\n    return scrollContainers.some((/**\r\n     * @param {?} scrollContainerRect\r\n     * @return {?}\r\n     */\r\n    function (scrollContainerRect) {\r\n        /** @type {?} */\r\n        var clippedAbove = element.top < scrollContainerRect.top;\r\n        /** @type {?} */\r\n        var clippedBelow = element.bottom > scrollContainerRect.bottom;\r\n        /** @type {?} */\r\n        var clippedLeft = element.left < scrollContainerRect.left;\r\n        /** @type {?} */\r\n        var clippedRight = element.right > scrollContainerRect.right;\r\n        return clippedAbove || clippedBelow || clippedLeft || clippedRight;\r\n    }));\r\n}\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n/**\r\n * Strategy that will update the element position as the user is scrolling.\r\n */\r\nvar  /**\r\n * Strategy that will update the element position as the user is scrolling.\r\n */\r\nRepositionScrollStrategy = /** @class */ (function () {\r\n    function RepositionScrollStrategy(_scrollDispatcher, _viewportRuler, _ngZone, _config) {\r\n        this._scrollDispatcher = _scrollDispatcher;\r\n        this._viewportRuler = _viewportRuler;\r\n        this._ngZone = _ngZone;\r\n        this._config = _config;\r\n        this._scrollSubscription = null;\r\n    }\r\n    /** Attaches this scroll strategy to an overlay. */\r\n    /**\r\n     * Attaches this scroll strategy to an overlay.\r\n     * @param {?} overlayRef\r\n     * @return {?}\r\n     */\r\n    RepositionScrollStrategy.prototype.attach = /**\r\n     * Attaches this scroll strategy to an overlay.\r\n     * @param {?} overlayRef\r\n     * @return {?}\r\n     */\r\n    function (overlayRef) {\r\n        if (this._overlayRef) {\r\n            throw getMatScrollStrategyAlreadyAttachedError();\r\n        }\r\n        this._overlayRef = overlayRef;\r\n    };\r\n    /** Enables repositioning of the attached overlay on scroll. */\r\n    /**\r\n     * Enables repositioning of the attached overlay on scroll.\r\n     * @return {?}\r\n     */\r\n    RepositionScrollStrategy.prototype.enable = /**\r\n     * Enables repositioning of the attached overlay on scroll.\r\n     * @return {?}\r\n     */\r\n    function () {\r\n        var _this = this;\r\n        if (!this._scrollSubscription) {\r\n            /** @type {?} */\r\n            var throttle = this._config ? this._config.scrollThrottle : 0;\r\n            this._scrollSubscription = this._scrollDispatcher.scrolled(throttle).subscribe((/**\r\n             * @return {?}\r\n             */\r\n            function () {\r\n                _this._overlayRef.updatePosition();\r\n                // TODO(crisbeto): make `close` on by default once all components can handle it.\r\n                if (_this._config && _this._config.autoClose) {\r\n                    /** @type {?} */\r\n                    var overlayRect = _this._overlayRef.overlayElement.getBoundingClientRect();\r\n                    var _a = _this._viewportRuler.getViewportSize(), width = _a.width, height = _a.height;\r\n                    // TODO(crisbeto): include all ancestor scroll containers here once\r\n                    // we have a way of exposing the trigger element to the scroll strategy.\r\n                    /** @type {?} */\r\n                    var parentRects = [{ width: width, height: height, bottom: height, right: width, top: 0, left: 0 }];\r\n                    if (isElementScrolledOutsideView(overlayRect, parentRects)) {\r\n                        _this.disable();\r\n                        _this._ngZone.run((/**\r\n                         * @return {?}\r\n                         */\r\n                        function () { return _this._overlayRef.detach(); }));\r\n                    }\r\n                }\r\n            }));\r\n        }\r\n    };\r\n    /** Disables repositioning of the attached overlay on scroll. */\r\n    /**\r\n     * Disables repositioning of the attached overlay on scroll.\r\n     * @return {?}\r\n     */\r\n    RepositionScrollStrategy.prototype.disable = /**\r\n     * Disables repositioning of the attached overlay on scroll.\r\n     * @return {?}\r\n     */\r\n    function () {\r\n        if (this._scrollSubscription) {\r\n            this._scrollSubscription.unsubscribe();\r\n            this._scrollSubscription = null;\r\n        }\r\n    };\r\n    /**\r\n     * @return {?}\r\n     */\r\n    RepositionScrollStrategy.prototype.detach = /**\r\n     * @return {?}\r\n     */\r\n    function () {\r\n        this.disable();\r\n        this._overlayRef = (/** @type {?} */ (null));\r\n    };\r\n    return RepositionScrollStrategy;\r\n}());\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n/**\r\n * Options for how an overlay will handle scrolling.\r\n *\r\n * Users can provide a custom value for `ScrollStrategyOptions` to replace the default\r\n * behaviors. This class primarily acts as a factory for ScrollStrategy instances.\r\n */\r\nvar ScrollStrategyOptions = /** @class */ (function () {\r\n    function ScrollStrategyOptions(_scrollDispatcher, _viewportRuler, _ngZone, document) {\r\n        var _this = this;\r\n        this._scrollDispatcher = _scrollDispatcher;\r\n        this._viewportRuler = _viewportRuler;\r\n        this._ngZone = _ngZone;\r\n        /**\r\n         * Do nothing on scroll.\r\n         */\r\n        this.noop = (/**\r\n         * @return {?}\r\n         */\r\n        function () { return new NoopScrollStrategy(); });\r\n        /**\r\n         * Close the overlay as soon as the user scrolls.\r\n         * @param config Configuration to be used inside the scroll strategy.\r\n         */\r\n        this.close = (/**\r\n         * @param {?=} config\r\n         * @return {?}\r\n         */\r\n        function (config) { return new CloseScrollStrategy(_this._scrollDispatcher, _this._ngZone, _this._viewportRuler, config); });\r\n        /**\r\n         * Block scrolling.\r\n         */\r\n        this.block = (/**\r\n         * @return {?}\r\n         */\r\n        function () { return new BlockScrollStrategy(_this._viewportRuler, _this._document); });\r\n        /**\r\n         * Update the overlay's position on scroll.\r\n         * @param config Configuration to be used inside the scroll strategy.\r\n         * Allows debouncing the reposition calls.\r\n         */\r\n        this.reposition = (/**\r\n         * @param {?=} config\r\n         * @return {?}\r\n         */\r\n        function (config) { return new RepositionScrollStrategy(_this._scrollDispatcher, _this._viewportRuler, _this._ngZone, config); });\r\n        this._document = document;\r\n    }\r\n    ScrollStrategyOptions.decorators = [\r\n        { type: Injectable, args: [{ providedIn: 'root' },] },\r\n    ];\r\n    /** @nocollapse */\r\n    ScrollStrategyOptions.ctorParameters = function () { return [\r\n        { type: ScrollDispatcher },\r\n        { type: ViewportRuler },\r\n        { type: NgZone },\r\n        { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] }\r\n    ]; };\r\n    /** @nocollapse */ ScrollStrategyOptions.ngInjectableDef = ɵɵdefineInjectable({ factory: function ScrollStrategyOptions_Factory() { return new ScrollStrategyOptions(ɵɵinject(ScrollDispatcher), ɵɵinject(ViewportRuler), ɵɵinject(NgZone), ɵɵinject(DOCUMENT)); }, token: ScrollStrategyOptions, providedIn: \"root\" });\r\n    return ScrollStrategyOptions;\r\n}());\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n/**\r\n * Initial configuration used when creating an overlay.\r\n */\r\nvar  /**\r\n * Initial configuration used when creating an overlay.\r\n */\r\nOverlayConfig = /** @class */ (function () {\r\n    function OverlayConfig(config) {\r\n        /**\r\n         * Strategy to be used when handling scroll events while the overlay is open.\r\n         */\r\n        this.scrollStrategy = new NoopScrollStrategy();\r\n        /**\r\n         * Custom class to add to the overlay pane.\r\n         */\r\n        this.panelClass = '';\r\n        /**\r\n         * Whether the overlay has a backdrop.\r\n         */\r\n        this.hasBackdrop = false;\r\n        /**\r\n         * Custom class to add to the backdrop\r\n         */\r\n        this.backdropClass = 'cdk-overlay-dark-backdrop';\r\n        /**\r\n         * Whether the overlay should be disposed of when the user goes backwards/forwards in history.\r\n         * Note that this usually doesn't include clicking on links (unless the user is using\r\n         * the `HashLocationStrategy`).\r\n         */\r\n        this.disposeOnNavigation = false;\r\n        if (config) {\r\n            /** @type {?} */\r\n            var configKeys = (/** @type {?} */ (Object.keys(config)));\r\n            for (var _i = 0, configKeys_1 = configKeys; _i < configKeys_1.length; _i++) {\r\n                var key = configKeys_1[_i];\r\n                if (config[key] !== undefined) {\r\n                    // TypeScript, as of version 3.5, sees the left-hand-side of this expression\r\n                    // as \"I don't know *which* key this is, so the only valid value is the intersection\r\n                    // of all the posible values.\" In this case, that happens to be `undefined`. TypeScript\r\n                    // is not smart enough to see that the right-hand-side is actually an access of the same\r\n                    // exact type with the same exact key, meaning that the value type must be identical.\r\n                    // So we use `any` to work around this.\r\n                    this[key] = (/** @type {?} */ (config[key]));\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return OverlayConfig;\r\n}());\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n/**\r\n * The points of the origin element and the overlay element to connect.\r\n */\r\nvar  /**\r\n * The points of the origin element and the overlay element to connect.\r\n */\r\nConnectionPositionPair = /** @class */ (function () {\r\n    function ConnectionPositionPair(origin, overlay, offsetX, offsetY, panelClass) {\r\n        this.offsetX = offsetX;\r\n        this.offsetY = offsetY;\r\n        this.panelClass = panelClass;\r\n        this.originX = origin.originX;\r\n        this.originY = origin.originY;\r\n        this.overlayX = overlay.overlayX;\r\n        this.overlayY = overlay.overlayY;\r\n    }\r\n    return ConnectionPositionPair;\r\n}());\r\n/**\r\n * Set of properties regarding the position of the origin and overlay relative to the viewport\r\n * with respect to the containing Scrollable elements.\r\n *\r\n * The overlay and origin are clipped if any part of their bounding client rectangle exceeds the\r\n * bounds of any one of the strategy's Scrollable's bounding client rectangle.\r\n *\r\n * The overlay and origin are outside view if there is no overlap between their bounding client\r\n * rectangle and any one of the strategy's Scrollable's bounding client rectangle.\r\n *\r\n *       -----------                    -----------\r\n *       | outside |                    | clipped |\r\n *       |  view   |              --------------------------\r\n *       |         |              |     |         |        |\r\n *       ----------               |     -----------        |\r\n *  --------------------------    |                        |\r\n *  |                        |    |      Scrollable        |\r\n *  |                        |    |                        |\r\n *  |                        |     --------------------------\r\n *  |      Scrollable        |\r\n *  |                        |\r\n *  --------------------------\r\n *\r\n * \\@docs-private\r\n */\r\nvar  /**\r\n * Set of properties regarding the position of the origin and overlay relative to the viewport\r\n * with respect to the containing Scrollable elements.\r\n *\r\n * The overlay and origin are clipped if any part of their bounding client rectangle exceeds the\r\n * bounds of any one of the strategy's Scrollable's bounding client rectangle.\r\n *\r\n * The overlay and origin are outside view if there is no overlap between their bounding client\r\n * rectangle and any one of the strategy's Scrollable's bounding client rectangle.\r\n *\r\n *       -----------                    -----------\r\n *       | outside |                    | clipped |\r\n *       |  view   |              --------------------------\r\n *       |         |              |     |         |        |\r\n *       ----------               |     -----------        |\r\n *  --------------------------    |                        |\r\n *  |                        |    |      Scrollable        |\r\n *  |                        |    |                        |\r\n *  |                        |     --------------------------\r\n *  |      Scrollable        |\r\n *  |                        |\r\n *  --------------------------\r\n *\r\n * \\@docs-private\r\n */\r\nScrollingVisibility = /** @class */ (function () {\r\n    function ScrollingVisibility() {\r\n    }\r\n    return ScrollingVisibility;\r\n}());\r\n/**\r\n * The change event emitted by the strategy when a fallback position is used.\r\n */\r\nvar ConnectedOverlayPositionChange = /** @class */ (function () {\r\n    function ConnectedOverlayPositionChange(connectionPair, scrollableViewProperties) {\r\n        this.connectionPair = connectionPair;\r\n        this.scrollableViewProperties = scrollableViewProperties;\r\n    }\r\n    /** @nocollapse */\r\n    ConnectedOverlayPositionChange.ctorParameters = function () { return [\r\n        { type: ConnectionPositionPair },\r\n        { type: ScrollingVisibility, decorators: [{ type: Optional }] }\r\n    ]; };\r\n    return ConnectedOverlayPositionChange;\r\n}());\r\n/**\r\n * Validates whether a vertical position property matches the expected values.\r\n * \\@docs-private\r\n * @param {?} property Name of the property being validated.\r\n * @param {?} value Value of the property being validated.\r\n * @return {?}\r\n */\r\nfunction validateVerticalPosition(property, value) {\r\n    if (value !== 'top' && value !== 'bottom' && value !== 'center') {\r\n        throw Error(\"ConnectedPosition: Invalid \" + property + \" \\\"\" + value + \"\\\". \" +\r\n            \"Expected \\\"top\\\", \\\"bottom\\\" or \\\"center\\\".\");\r\n    }\r\n}\r\n/**\r\n * Validates whether a horizontal position property matches the expected values.\r\n * \\@docs-private\r\n * @param {?} property Name of the property being validated.\r\n * @param {?} value Value of the property being validated.\r\n * @return {?}\r\n */\r\nfunction validateHorizontalPosition(property, value) {\r\n    if (value !== 'start' && value !== 'end' && value !== 'center') {\r\n        throw Error(\"ConnectedPosition: Invalid \" + property + \" \\\"\" + value + \"\\\". \" +\r\n            \"Expected \\\"start\\\", \\\"end\\\" or \\\"center\\\".\");\r\n    }\r\n}\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n/**\r\n * Service for dispatching keyboard events that land on the body to appropriate overlay ref,\r\n * if any. It maintains a list of attached overlays to determine best suited overlay based\r\n * on event target and order of overlay opens.\r\n */\r\nvar OverlayKeyboardDispatcher = /** @class */ (function () {\r\n    function OverlayKeyboardDispatcher(document) {\r\n        var _this = this;\r\n        /**\r\n         * Currently attached overlays in the order they were attached.\r\n         */\r\n        this._attachedOverlays = [];\r\n        /**\r\n         * Keyboard event listener that will be attached to the body.\r\n         */\r\n        this._keydownListener = (/**\r\n         * @param {?} event\r\n         * @return {?}\r\n         */\r\n        function (event) {\r\n            /** @type {?} */\r\n            var overlays = _this._attachedOverlays;\r\n            for (var i = overlays.length - 1; i > -1; i--) {\r\n                // Dispatch the keydown event to the top overlay which has subscribers to its keydown events.\r\n                // We want to target the most recent overlay, rather than trying to match where the event came\r\n                // from, because some components might open an overlay, but keep focus on a trigger element\r\n                // (e.g. for select and autocomplete). We skip overlays without keydown event subscriptions,\r\n                // because we don't want overlays that don't handle keyboard events to block the ones below\r\n                // them that do.\r\n                if (overlays[i]._keydownEventSubscriptions > 0) {\r\n                    overlays[i]._keydownEvents.next(event);\r\n                    break;\r\n                }\r\n            }\r\n        });\r\n        this._document = document;\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    OverlayKeyboardDispatcher.prototype.ngOnDestroy = /**\r\n     * @return {?}\r\n     */\r\n    function () {\r\n        this._detach();\r\n    };\r\n    /** Add a new overlay to the list of attached overlay refs. */\r\n    /**\r\n     * Add a new overlay to the list of attached overlay refs.\r\n     * @param {?} overlayRef\r\n     * @return {?}\r\n     */\r\n    OverlayKeyboardDispatcher.prototype.add = /**\r\n     * Add a new overlay to the list of attached overlay refs.\r\n     * @param {?} overlayRef\r\n     * @return {?}\r\n     */\r\n    function (overlayRef) {\r\n        // Ensure that we don't get the same overlay multiple times.\r\n        this.remove(overlayRef);\r\n        // Lazily start dispatcher once first overlay is added\r\n        if (!this._isAttached) {\r\n            this._document.body.addEventListener('keydown', this._keydownListener);\r\n            this._isAttached = true;\r\n        }\r\n        this._attachedOverlays.push(overlayRef);\r\n    };\r\n    /** Remove an overlay from the list of attached overlay refs. */\r\n    /**\r\n     * Remove an overlay from the list of attached overlay refs.\r\n     * @param {?} overlayRef\r\n     * @return {?}\r\n     */\r\n    OverlayKeyboardDispatcher.prototype.remove = /**\r\n     * Remove an overlay from the list of attached overlay refs.\r\n     * @param {?} overlayRef\r\n     * @return {?}\r\n     */\r\n    function (overlayRef) {\r\n        /** @type {?} */\r\n        var index = this._attachedOverlays.indexOf(overlayRef);\r\n        if (index > -1) {\r\n            this._attachedOverlays.splice(index, 1);\r\n        }\r\n        // Remove the global listener once there are no more overlays.\r\n        if (this._attachedOverlays.length === 0) {\r\n            this._detach();\r\n        }\r\n    };\r\n    /** Detaches the global keyboard event listener. */\r\n    /**\r\n     * Detaches the global keyboard event listener.\r\n     * @private\r\n     * @return {?}\r\n     */\r\n    OverlayKeyboardDispatcher.prototype._detach = /**\r\n     * Detaches the global keyboard event listener.\r\n     * @private\r\n     * @return {?}\r\n     */\r\n    function () {\r\n        if (this._isAttached) {\r\n            this._document.body.removeEventListener('keydown', this._keydownListener);\r\n            this._isAttached = false;\r\n        }\r\n    };\r\n    OverlayKeyboardDispatcher.decorators = [\r\n        { type: Injectable, args: [{ providedIn: 'root' },] },\r\n    ];\r\n    /** @nocollapse */\r\n    OverlayKeyboardDispatcher.ctorParameters = function () { return [\r\n        { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] }\r\n    ]; };\r\n    /** @nocollapse */ OverlayKeyboardDispatcher.ngInjectableDef = ɵɵdefineInjectable({ factory: function OverlayKeyboardDispatcher_Factory() { return new OverlayKeyboardDispatcher(ɵɵinject(DOCUMENT)); }, token: OverlayKeyboardDispatcher, providedIn: \"root\" });\r\n    return OverlayKeyboardDispatcher;\r\n}());\r\n/**\r\n * \\@docs-private \\@deprecated \\@breaking-change 8.0.0\r\n * @param {?} dispatcher\r\n * @param {?} _document\r\n * @return {?}\r\n */\r\nfunction OVERLAY_KEYBOARD_DISPATCHER_PROVIDER_FACTORY(dispatcher, _document) {\r\n    return dispatcher || new OverlayKeyboardDispatcher(_document);\r\n}\r\n/**\r\n * \\@docs-private \\@deprecated \\@breaking-change 8.0.0\r\n * @type {?}\r\n */\r\nvar OVERLAY_KEYBOARD_DISPATCHER_PROVIDER = {\r\n    // If there is already an OverlayKeyboardDispatcher available, use that.\r\n    // Otherwise, provide a new one.\r\n    provide: OverlayKeyboardDispatcher,\r\n    deps: [\r\n        [new Optional(), new SkipSelf(), OverlayKeyboardDispatcher],\r\n        (/** @type {?} */ (\r\n        // Coerce to `InjectionToken` so that the `deps` match the \"shape\"\r\n        // of the type expected by Angular\r\n        DOCUMENT))\r\n    ],\r\n    useFactory: OVERLAY_KEYBOARD_DISPATCHER_PROVIDER_FACTORY\r\n};\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n/**\r\n * Container inside which all overlays will render.\r\n */\r\nvar OverlayContainer = /** @class */ (function () {\r\n    function OverlayContainer(document) {\r\n        this._document = document;\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    OverlayContainer.prototype.ngOnDestroy = /**\r\n     * @return {?}\r\n     */\r\n    function () {\r\n        if (this._containerElement && this._containerElement.parentNode) {\r\n            this._containerElement.parentNode.removeChild(this._containerElement);\r\n        }\r\n    };\r\n    /**\r\n     * This method returns the overlay container element. It will lazily\r\n     * create the element the first time  it is called to facilitate using\r\n     * the container in non-browser environments.\r\n     * @returns the container element\r\n     */\r\n    /**\r\n     * This method returns the overlay container element. It will lazily\r\n     * create the element the first time  it is called to facilitate using\r\n     * the container in non-browser environments.\r\n     * @return {?} the container element\r\n     */\r\n    OverlayContainer.prototype.getContainerElement = /**\r\n     * This method returns the overlay container element. It will lazily\r\n     * create the element the first time  it is called to facilitate using\r\n     * the container in non-browser environments.\r\n     * @return {?} the container element\r\n     */\r\n    function () {\r\n        if (!this._containerElement) {\r\n            this._createContainer();\r\n        }\r\n        return this._containerElement;\r\n    };\r\n    /**\r\n     * Create the overlay container element, which is simply a div\r\n     * with the 'cdk-overlay-container' class on the document body.\r\n     */\r\n    /**\r\n     * Create the overlay container element, which is simply a div\r\n     * with the 'cdk-overlay-container' class on the document body.\r\n     * @protected\r\n     * @return {?}\r\n     */\r\n    OverlayContainer.prototype._createContainer = /**\r\n     * Create the overlay container element, which is simply a div\r\n     * with the 'cdk-overlay-container' class on the document body.\r\n     * @protected\r\n     * @return {?}\r\n     */\r\n    function () {\r\n        /** @type {?} */\r\n        var containerClass = 'cdk-overlay-container';\r\n        /** @type {?} */\r\n        var previousContainers = this._document.getElementsByClassName(containerClass);\r\n        // Remove any old containers. This can happen when transitioning from the server to the client.\r\n        for (var i = 0; i < previousContainers.length; i++) {\r\n            (/** @type {?} */ (previousContainers[i].parentNode)).removeChild(previousContainers[i]);\r\n        }\r\n        /** @type {?} */\r\n        var container = this._document.createElement('div');\r\n        container.classList.add(containerClass);\r\n        this._document.body.appendChild(container);\r\n        this._containerElement = container;\r\n    };\r\n    OverlayContainer.decorators = [\r\n        { type: Injectable, args: [{ providedIn: 'root' },] },\r\n    ];\r\n    /** @nocollapse */\r\n    OverlayContainer.ctorParameters = function () { return [\r\n        { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] }\r\n    ]; };\r\n    /** @nocollapse */ OverlayContainer.ngInjectableDef = ɵɵdefineInjectable({ factory: function OverlayContainer_Factory() { return new OverlayContainer(ɵɵinject(DOCUMENT)); }, token: OverlayContainer, providedIn: \"root\" });\r\n    return OverlayContainer;\r\n}());\r\n/**\r\n * \\@docs-private \\@deprecated \\@breaking-change 8.0.0\r\n * @param {?} parentContainer\r\n * @param {?} _document\r\n * @return {?}\r\n */\r\nfunction OVERLAY_CONTAINER_PROVIDER_FACTORY(parentContainer, _document) {\r\n    return parentContainer || new OverlayContainer(_document);\r\n}\r\n/**\r\n * \\@docs-private \\@deprecated \\@breaking-change 8.0.0\r\n * @type {?}\r\n */\r\nvar OVERLAY_CONTAINER_PROVIDER = {\r\n    // If there is already an OverlayContainer available, use that. Otherwise, provide a new one.\r\n    provide: OverlayContainer,\r\n    deps: [\r\n        [new Optional(), new SkipSelf(), OverlayContainer],\r\n        (/** @type {?} */ (DOCUMENT))\r\n    ],\r\n    useFactory: OVERLAY_CONTAINER_PROVIDER_FACTORY\r\n};\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n/**\r\n * Reference to an overlay that has been created with the Overlay service.\r\n * Used to manipulate or dispose of said overlay.\r\n */\r\nvar  /**\r\n * Reference to an overlay that has been created with the Overlay service.\r\n * Used to manipulate or dispose of said overlay.\r\n */\r\nOverlayRef = /** @class */ (function () {\r\n    function OverlayRef(_portalOutlet, _host, _pane, _config, _ngZone, _keyboardDispatcher, _document, _location) {\r\n        var _this = this;\r\n        this._portalOutlet = _portalOutlet;\r\n        this._host = _host;\r\n        this._pane = _pane;\r\n        this._config = _config;\r\n        this._ngZone = _ngZone;\r\n        this._keyboardDispatcher = _keyboardDispatcher;\r\n        this._document = _document;\r\n        this._location = _location;\r\n        this._backdropElement = null;\r\n        this._backdropClick = new Subject();\r\n        this._attachments = new Subject();\r\n        this._detachments = new Subject();\r\n        this._locationChanges = Subscription.EMPTY;\r\n        this._backdropClickHandler = (/**\r\n         * @param {?} event\r\n         * @return {?}\r\n         */\r\n        function (event) { return _this._backdropClick.next(event); });\r\n        this._keydownEventsObservable = new Observable((/**\r\n         * @param {?} observer\r\n         * @return {?}\r\n         */\r\n        function (observer) {\r\n            /** @type {?} */\r\n            var subscription = _this._keydownEvents.subscribe(observer);\r\n            _this._keydownEventSubscriptions++;\r\n            return (/**\r\n             * @return {?}\r\n             */\r\n            function () {\r\n                subscription.unsubscribe();\r\n                _this._keydownEventSubscriptions--;\r\n            });\r\n        }));\r\n        /**\r\n         * Stream of keydown events dispatched to this overlay.\r\n         */\r\n        this._keydownEvents = new Subject();\r\n        /**\r\n         * Amount of subscriptions to the keydown events.\r\n         */\r\n        this._keydownEventSubscriptions = 0;\r\n        if (_config.scrollStrategy) {\r\n            this._scrollStrategy = _config.scrollStrategy;\r\n            this._scrollStrategy.attach(this);\r\n        }\r\n        this._positionStrategy = _config.positionStrategy;\r\n    }\r\n    Object.defineProperty(OverlayRef.prototype, \"overlayElement\", {\r\n        /** The overlay's HTML element */\r\n        get: /**\r\n         * The overlay's HTML element\r\n         * @return {?}\r\n         */\r\n        function () {\r\n            return this._pane;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(OverlayRef.prototype, \"backdropElement\", {\r\n        /** The overlay's backdrop HTML element. */\r\n        get: /**\r\n         * The overlay's backdrop HTML element.\r\n         * @return {?}\r\n         */\r\n        function () {\r\n            return this._backdropElement;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(OverlayRef.prototype, \"hostElement\", {\r\n        /**\r\n         * Wrapper around the panel element. Can be used for advanced\r\n         * positioning where a wrapper with specific styling is\r\n         * required around the overlay pane.\r\n         */\r\n        get: /**\r\n         * Wrapper around the panel element. Can be used for advanced\r\n         * positioning where a wrapper with specific styling is\r\n         * required around the overlay pane.\r\n         * @return {?}\r\n         */\r\n        function () {\r\n            return this._host;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Attaches content, given via a Portal, to the overlay.\r\n     * If the overlay is configured to have a backdrop, it will be created.\r\n     *\r\n     * @param portal Portal instance to which to attach the overlay.\r\n     * @returns The portal attachment result.\r\n     */\r\n    /**\r\n     * Attaches content, given via a Portal, to the overlay.\r\n     * If the overlay is configured to have a backdrop, it will be created.\r\n     *\r\n     * @param {?} portal Portal instance to which to attach the overlay.\r\n     * @return {?} The portal attachment result.\r\n     */\r\n    OverlayRef.prototype.attach = /**\r\n     * Attaches content, given via a Portal, to the overlay.\r\n     * If the overlay is configured to have a backdrop, it will be created.\r\n     *\r\n     * @param {?} portal Portal instance to which to attach the overlay.\r\n     * @return {?} The portal attachment result.\r\n     */\r\n    function (portal) {\r\n        var _this = this;\r\n        /** @type {?} */\r\n        var attachResult = this._portalOutlet.attach(portal);\r\n        if (this._positionStrategy) {\r\n            this._positionStrategy.attach(this);\r\n        }\r\n        // Update the pane element with the given configuration.\r\n        if (!this._host.parentElement && this._previousHostParent) {\r\n            this._previousHostParent.appendChild(this._host);\r\n        }\r\n        this._updateStackingOrder();\r\n        this._updateElementSize();\r\n        this._updateElementDirection();\r\n        if (this._scrollStrategy) {\r\n            this._scrollStrategy.enable();\r\n        }\r\n        // Update the position once the zone is stable so that the overlay will be fully rendered\r\n        // before attempting to position it, as the position may depend on the size of the rendered\r\n        // content.\r\n        this._ngZone.onStable\r\n            .asObservable()\r\n            .pipe(take(1))\r\n            .subscribe((/**\r\n         * @return {?}\r\n         */\r\n        function () {\r\n            // The overlay could've been detached before the zone has stabilized.\r\n            if (_this.hasAttached()) {\r\n                _this.updatePosition();\r\n            }\r\n        }));\r\n        // Enable pointer events for the overlay pane element.\r\n        this._togglePointerEvents(true);\r\n        if (this._config.hasBackdrop) {\r\n            this._attachBackdrop();\r\n        }\r\n        if (this._config.panelClass) {\r\n            this._toggleClasses(this._pane, this._config.panelClass, true);\r\n        }\r\n        // Only emit the `attachments` event once all other setup is done.\r\n        this._attachments.next();\r\n        // Track this overlay by the keyboard dispatcher\r\n        this._keyboardDispatcher.add(this);\r\n        // @breaking-change 8.0.0 remove the null check for `_location`\r\n        // once the constructor parameter is made required.\r\n        if (this._config.disposeOnNavigation && this._location) {\r\n            this._locationChanges = this._location.subscribe((/**\r\n             * @return {?}\r\n             */\r\n            function () { return _this.dispose(); }));\r\n        }\r\n        return attachResult;\r\n    };\r\n    /**\r\n     * Detaches an overlay from a portal.\r\n     * @returns The portal detachment result.\r\n     */\r\n    /**\r\n     * Detaches an overlay from a portal.\r\n     * @return {?} The portal detachment result.\r\n     */\r\n    OverlayRef.prototype.detach = /**\r\n     * Detaches an overlay from a portal.\r\n     * @return {?} The portal detachment result.\r\n     */\r\n    function () {\r\n        if (!this.hasAttached()) {\r\n            return;\r\n        }\r\n        this.detachBackdrop();\r\n        // When the overlay is detached, the pane element should disable pointer events.\r\n        // This is necessary because otherwise the pane element will cover the page and disable\r\n        // pointer events therefore. Depends on the position strategy and the applied pane boundaries.\r\n        this._togglePointerEvents(false);\r\n        if (this._positionStrategy && this._positionStrategy.detach) {\r\n            this._positionStrategy.detach();\r\n        }\r\n        if (this._scrollStrategy) {\r\n            this._scrollStrategy.disable();\r\n        }\r\n        /** @type {?} */\r\n        var detachmentResult = this._portalOutlet.detach();\r\n        // Only emit after everything is detached.\r\n        this._detachments.next();\r\n        // Remove this overlay from keyboard dispatcher tracking.\r\n        this._keyboardDispatcher.remove(this);\r\n        // Keeping the host element in DOM the can cause scroll jank, because it still gets\r\n        // rendered, even though it's transparent and unclickable which is why we remove it.\r\n        this._detachContentWhenStable();\r\n        // Stop listening for location changes.\r\n        this._locationChanges.unsubscribe();\r\n        return detachmentResult;\r\n    };\r\n    /** Cleans up the overlay from the DOM. */\r\n    /**\r\n     * Cleans up the overlay from the DOM.\r\n     * @return {?}\r\n     */\r\n    OverlayRef.prototype.dispose = /**\r\n     * Cleans up the overlay from the DOM.\r\n     * @return {?}\r\n     */\r\n    function () {\r\n        /** @type {?} */\r\n        var isAttached = this.hasAttached();\r\n        if (this._positionStrategy) {\r\n            this._positionStrategy.dispose();\r\n        }\r\n        this._disposeScrollStrategy();\r\n        this.detachBackdrop();\r\n        this._locationChanges.unsubscribe();\r\n        this._keyboardDispatcher.remove(this);\r\n        this._portalOutlet.dispose();\r\n        this._attachments.complete();\r\n        this._backdropClick.complete();\r\n        this._keydownEvents.complete();\r\n        if (this._host && this._host.parentNode) {\r\n            this._host.parentNode.removeChild(this._host);\r\n            this._host = (/** @type {?} */ (null));\r\n        }\r\n        this._previousHostParent = this._pane = (/** @type {?} */ (null));\r\n        if (isAttached) {\r\n            this._detachments.next();\r\n        }\r\n        this._detachments.complete();\r\n    };\r\n    /** Whether the overlay has attached content. */\r\n    /**\r\n     * Whether the overlay has attached content.\r\n     * @return {?}\r\n     */\r\n    OverlayRef.prototype.hasAttached = /**\r\n     * Whether the overlay has attached content.\r\n     * @return {?}\r\n     */\r\n    function () {\r\n        return this._portalOutlet.hasAttached();\r\n    };\r\n    /** Gets an observable that emits when the backdrop has been clicked. */\r\n    /**\r\n     * Gets an observable that emits when the backdrop has been clicked.\r\n     * @return {?}\r\n     */\r\n    OverlayRef.prototype.backdropClick = /**\r\n     * Gets an observable that emits when the backdrop has been clicked.\r\n     * @return {?}\r\n     */\r\n    function () {\r\n        return this._backdropClick.asObservable();\r\n    };\r\n    /** Gets an observable that emits when the overlay has been attached. */\r\n    /**\r\n     * Gets an observable that emits when the overlay has been attached.\r\n     * @return {?}\r\n     */\r\n    OverlayRef.prototype.attachments = /**\r\n     * Gets an observable that emits when the overlay has been attached.\r\n     * @return {?}\r\n     */\r\n    function () {\r\n        return this._attachments.asObservable();\r\n    };\r\n    /** Gets an observable that emits when the overlay has been detached. */\r\n    /**\r\n     * Gets an observable that emits when the overlay has been detached.\r\n     * @return {?}\r\n     */\r\n    OverlayRef.prototype.detachments = /**\r\n     * Gets an observable that emits when the overlay has been detached.\r\n     * @return {?}\r\n     */\r\n    function () {\r\n        return this._detachments.asObservable();\r\n    };\r\n    /** Gets an observable of keydown events targeted to this overlay. */\r\n    /**\r\n     * Gets an observable of keydown events targeted to this overlay.\r\n     * @return {?}\r\n     */\r\n    OverlayRef.prototype.keydownEvents = /**\r\n     * Gets an observable of keydown events targeted to this overlay.\r\n     * @return {?}\r\n     */\r\n    function () {\r\n        return this._keydownEventsObservable;\r\n    };\r\n    /** Gets the current overlay configuration, which is immutable. */\r\n    /**\r\n     * Gets the current overlay configuration, which is immutable.\r\n     * @return {?}\r\n     */\r\n    OverlayRef.prototype.getConfig = /**\r\n     * Gets the current overlay configuration, which is immutable.\r\n     * @return {?}\r\n     */\r\n    function () {\r\n        return this._config;\r\n    };\r\n    /** Updates the position of the overlay based on the position strategy. */\r\n    /**\r\n     * Updates the position of the overlay based on the position strategy.\r\n     * @return {?}\r\n     */\r\n    OverlayRef.prototype.updatePosition = /**\r\n     * Updates the position of the overlay based on the position strategy.\r\n     * @return {?}\r\n     */\r\n    function () {\r\n        if (this._positionStrategy) {\r\n            this._positionStrategy.apply();\r\n        }\r\n    };\r\n    /** Switches to a new position strategy and updates the overlay position. */\r\n    /**\r\n     * Switches to a new position strategy and updates the overlay position.\r\n     * @param {?} strategy\r\n     * @return {?}\r\n     */\r\n    OverlayRef.prototype.updatePositionStrategy = /**\r\n     * Switches to a new position strategy and updates the overlay position.\r\n     * @param {?} strategy\r\n     * @return {?}\r\n     */\r\n    function (strategy) {\r\n        if (strategy === this._positionStrategy) {\r\n            return;\r\n        }\r\n        if (this._positionStrategy) {\r\n            this._positionStrategy.dispose();\r\n        }\r\n        this._positionStrategy = strategy;\r\n        if (this.hasAttached()) {\r\n            strategy.attach(this);\r\n            this.updatePosition();\r\n        }\r\n    };\r\n    /** Update the size properties of the overlay. */\r\n    /**\r\n     * Update the size properties of the overlay.\r\n     * @param {?} sizeConfig\r\n     * @return {?}\r\n     */\r\n    OverlayRef.prototype.updateSize = /**\r\n     * Update the size properties of the overlay.\r\n     * @param {?} sizeConfig\r\n     * @return {?}\r\n     */\r\n    function (sizeConfig) {\r\n        this._config = __assign({}, this._config, sizeConfig);\r\n        this._updateElementSize();\r\n    };\r\n    /** Sets the LTR/RTL direction for the overlay. */\r\n    /**\r\n     * Sets the LTR/RTL direction for the overlay.\r\n     * @param {?} dir\r\n     * @return {?}\r\n     */\r\n    OverlayRef.prototype.setDirection = /**\r\n     * Sets the LTR/RTL direction for the overlay.\r\n     * @param {?} dir\r\n     * @return {?}\r\n     */\r\n    function (dir) {\r\n        this._config = __assign({}, this._config, { direction: dir });\r\n        this._updateElementDirection();\r\n    };\r\n    /** Add a CSS class or an array of classes to the overlay pane. */\r\n    /**\r\n     * Add a CSS class or an array of classes to the overlay pane.\r\n     * @param {?} classes\r\n     * @return {?}\r\n     */\r\n    OverlayRef.prototype.addPanelClass = /**\r\n     * Add a CSS class or an array of classes to the overlay pane.\r\n     * @param {?} classes\r\n     * @return {?}\r\n     */\r\n    function (classes) {\r\n        if (this._pane) {\r\n            this._toggleClasses(this._pane, classes, true);\r\n        }\r\n    };\r\n    /** Remove a CSS class or an array of classes from the overlay pane. */\r\n    /**\r\n     * Remove a CSS class or an array of classes from the overlay pane.\r\n     * @param {?} classes\r\n     * @return {?}\r\n     */\r\n    OverlayRef.prototype.removePanelClass = /**\r\n     * Remove a CSS class or an array of classes from the overlay pane.\r\n     * @param {?} classes\r\n     * @return {?}\r\n     */\r\n    function (classes) {\r\n        if (this._pane) {\r\n            this._toggleClasses(this._pane, classes, false);\r\n        }\r\n    };\r\n    /**\r\n     * Returns the layout direction of the overlay panel.\r\n     */\r\n    /**\r\n     * Returns the layout direction of the overlay panel.\r\n     * @return {?}\r\n     */\r\n    OverlayRef.prototype.getDirection = /**\r\n     * Returns the layout direction of the overlay panel.\r\n     * @return {?}\r\n     */\r\n    function () {\r\n        /** @type {?} */\r\n        var direction = this._config.direction;\r\n        if (!direction) {\r\n            return 'ltr';\r\n        }\r\n        return typeof direction === 'string' ? direction : direction.value;\r\n    };\r\n    /** Switches to a new scroll strategy. */\r\n    /**\r\n     * Switches to a new scroll strategy.\r\n     * @param {?} strategy\r\n     * @return {?}\r\n     */\r\n    OverlayRef.prototype.updateScrollStrategy = /**\r\n     * Switches to a new scroll strategy.\r\n     * @param {?} strategy\r\n     * @return {?}\r\n     */\r\n    function (strategy) {\r\n        if (strategy === this._scrollStrategy) {\r\n            return;\r\n        }\r\n        this._disposeScrollStrategy();\r\n        this._scrollStrategy = strategy;\r\n        if (this.hasAttached()) {\r\n            strategy.attach(this);\r\n            strategy.enable();\r\n        }\r\n    };\r\n    /** Updates the text direction of the overlay panel. */\r\n    /**\r\n     * Updates the text direction of the overlay panel.\r\n     * @private\r\n     * @return {?}\r\n     */\r\n    OverlayRef.prototype._updateElementDirection = /**\r\n     * Updates the text direction of the overlay panel.\r\n     * @private\r\n     * @return {?}\r\n     */\r\n    function () {\r\n        this._host.setAttribute('dir', this.getDirection());\r\n    };\r\n    /** Updates the size of the overlay element based on the overlay config. */\r\n    /**\r\n     * Updates the size of the overlay element based on the overlay config.\r\n     * @private\r\n     * @return {?}\r\n     */\r\n    OverlayRef.prototype._updateElementSize = /**\r\n     * Updates the size of the overlay element based on the overlay config.\r\n     * @private\r\n     * @return {?}\r\n     */\r\n    function () {\r\n        if (!this._pane) {\r\n            return;\r\n        }\r\n        /** @type {?} */\r\n        var style = this._pane.style;\r\n        style.width = coerceCssPixelValue(this._config.width);\r\n        style.height = coerceCssPixelValue(this._config.height);\r\n        style.minWidth = coerceCssPixelValue(this._config.minWidth);\r\n        style.minHeight = coerceCssPixelValue(this._config.minHeight);\r\n        style.maxWidth = coerceCssPixelValue(this._config.maxWidth);\r\n        style.maxHeight = coerceCssPixelValue(this._config.maxHeight);\r\n    };\r\n    /** Toggles the pointer events for the overlay pane element. */\r\n    /**\r\n     * Toggles the pointer events for the overlay pane element.\r\n     * @private\r\n     * @param {?} enablePointer\r\n     * @return {?}\r\n     */\r\n    OverlayRef.prototype._togglePointerEvents = /**\r\n     * Toggles the pointer events for the overlay pane element.\r\n     * @private\r\n     * @param {?} enablePointer\r\n     * @return {?}\r\n     */\r\n    function (enablePointer) {\r\n        this._pane.style.pointerEvents = enablePointer ? 'auto' : 'none';\r\n    };\r\n    /** Attaches a backdrop for this overlay. */\r\n    /**\r\n     * Attaches a backdrop for this overlay.\r\n     * @private\r\n     * @return {?}\r\n     */\r\n    OverlayRef.prototype._attachBackdrop = /**\r\n     * Attaches a backdrop for this overlay.\r\n     * @private\r\n     * @return {?}\r\n     */\r\n    function () {\r\n        var _this = this;\r\n        /** @type {?} */\r\n        var showingClass = 'cdk-overlay-backdrop-showing';\r\n        this._backdropElement = this._document.createElement('div');\r\n        this._backdropElement.classList.add('cdk-overlay-backdrop');\r\n        if (this._config.backdropClass) {\r\n            this._toggleClasses(this._backdropElement, this._config.backdropClass, true);\r\n        }\r\n        // Insert the backdrop before the pane in the DOM order,\r\n        // in order to handle stacked overlays properly.\r\n        (/** @type {?} */ (this._host.parentElement)).insertBefore(this._backdropElement, this._host);\r\n        // Forward backdrop clicks such that the consumer of the overlay can perform whatever\r\n        // action desired when such a click occurs (usually closing the overlay).\r\n        this._backdropElement.addEventListener('click', this._backdropClickHandler);\r\n        // Add class to fade-in the backdrop after one frame.\r\n        if (typeof requestAnimationFrame !== 'undefined') {\r\n            this._ngZone.runOutsideAngular((/**\r\n             * @return {?}\r\n             */\r\n            function () {\r\n                requestAnimationFrame((/**\r\n                 * @return {?}\r\n                 */\r\n                function () {\r\n                    if (_this._backdropElement) {\r\n                        _this._backdropElement.classList.add(showingClass);\r\n                    }\r\n                }));\r\n            }));\r\n        }\r\n        else {\r\n            this._backdropElement.classList.add(showingClass);\r\n        }\r\n    };\r\n    /**\r\n     * Updates the stacking order of the element, moving it to the top if necessary.\r\n     * This is required in cases where one overlay was detached, while another one,\r\n     * that should be behind it, was destroyed. The next time both of them are opened,\r\n     * the stacking will be wrong, because the detached element's pane will still be\r\n     * in its original DOM position.\r\n     */\r\n    /**\r\n     * Updates the stacking order of the element, moving it to the top if necessary.\r\n     * This is required in cases where one overlay was detached, while another one,\r\n     * that should be behind it, was destroyed. The next time both of them are opened,\r\n     * the stacking will be wrong, because the detached element's pane will still be\r\n     * in its original DOM position.\r\n     * @private\r\n     * @return {?}\r\n     */\r\n    OverlayRef.prototype._updateStackingOrder = /**\r\n     * Updates the stacking order of the element, moving it to the top if necessary.\r\n     * This is required in cases where one overlay was detached, while another one,\r\n     * that should be behind it, was destroyed. The next time both of them are opened,\r\n     * the stacking will be wrong, because the detached element's pane will still be\r\n     * in its original DOM position.\r\n     * @private\r\n     * @return {?}\r\n     */\r\n    function () {\r\n        if (this._host.nextSibling) {\r\n            (/** @type {?} */ (this._host.parentNode)).appendChild(this._host);\r\n        }\r\n    };\r\n    /** Detaches the backdrop (if any) associated with the overlay. */\r\n    /**\r\n     * Detaches the backdrop (if any) associated with the overlay.\r\n     * @return {?}\r\n     */\r\n    OverlayRef.prototype.detachBackdrop = /**\r\n     * Detaches the backdrop (if any) associated with the overlay.\r\n     * @return {?}\r\n     */\r\n    function () {\r\n        var _this = this;\r\n        /** @type {?} */\r\n        var backdropToDetach = this._backdropElement;\r\n        if (!backdropToDetach) {\r\n            return;\r\n        }\r\n        /** @type {?} */\r\n        var timeoutId;\r\n        /** @type {?} */\r\n        var finishDetach = (/**\r\n         * @return {?}\r\n         */\r\n        function () {\r\n            // It may not be attached to anything in certain cases (e.g. unit tests).\r\n            if (backdropToDetach) {\r\n                backdropToDetach.removeEventListener('click', _this._backdropClickHandler);\r\n                backdropToDetach.removeEventListener('transitionend', finishDetach);\r\n                if (backdropToDetach.parentNode) {\r\n                    backdropToDetach.parentNode.removeChild(backdropToDetach);\r\n                }\r\n            }\r\n            // It is possible that a new portal has been attached to this overlay since we started\r\n            // removing the backdrop. If that is the case, only clear the backdrop reference if it\r\n            // is still the same instance that we started to remove.\r\n            if (_this._backdropElement == backdropToDetach) {\r\n                _this._backdropElement = null;\r\n            }\r\n            if (_this._config.backdropClass) {\r\n                _this._toggleClasses((/** @type {?} */ (backdropToDetach)), _this._config.backdropClass, false);\r\n            }\r\n            clearTimeout(timeoutId);\r\n        });\r\n        backdropToDetach.classList.remove('cdk-overlay-backdrop-showing');\r\n        this._ngZone.runOutsideAngular((/**\r\n         * @return {?}\r\n         */\r\n        function () {\r\n            (/** @type {?} */ (backdropToDetach)).addEventListener('transitionend', finishDetach);\r\n        }));\r\n        // If the backdrop doesn't have a transition, the `transitionend` event won't fire.\r\n        // In this case we make it unclickable and we try to remove it after a delay.\r\n        backdropToDetach.style.pointerEvents = 'none';\r\n        // Run this outside the Angular zone because there's nothing that Angular cares about.\r\n        // If it were to run inside the Angular zone, every test that used Overlay would have to be\r\n        // either async or fakeAsync.\r\n        timeoutId = this._ngZone.runOutsideAngular((/**\r\n         * @return {?}\r\n         */\r\n        function () { return setTimeout(finishDetach, 500); }));\r\n    };\r\n    /** Toggles a single CSS class or an array of classes on an element. */\r\n    /**\r\n     * Toggles a single CSS class or an array of classes on an element.\r\n     * @private\r\n     * @param {?} element\r\n     * @param {?} cssClasses\r\n     * @param {?} isAdd\r\n     * @return {?}\r\n     */\r\n    OverlayRef.prototype._toggleClasses = /**\r\n     * Toggles a single CSS class or an array of classes on an element.\r\n     * @private\r\n     * @param {?} element\r\n     * @param {?} cssClasses\r\n     * @param {?} isAdd\r\n     * @return {?}\r\n     */\r\n    function (element, cssClasses, isAdd) {\r\n        /** @type {?} */\r\n        var classList = element.classList;\r\n        coerceArray(cssClasses).forEach((/**\r\n         * @param {?} cssClass\r\n         * @return {?}\r\n         */\r\n        function (cssClass) {\r\n            // We can't do a spread here, because IE doesn't support setting multiple classes.\r\n            // Also trying to add an empty string to a DOMTokenList will throw.\r\n            if (cssClass) {\r\n                isAdd ? classList.add(cssClass) : classList.remove(cssClass);\r\n            }\r\n        }));\r\n    };\r\n    /** Detaches the overlay content next time the zone stabilizes. */\r\n    /**\r\n     * Detaches the overlay content next time the zone stabilizes.\r\n     * @private\r\n     * @return {?}\r\n     */\r\n    OverlayRef.prototype._detachContentWhenStable = /**\r\n     * Detaches the overlay content next time the zone stabilizes.\r\n     * @private\r\n     * @return {?}\r\n     */\r\n    function () {\r\n        var _this = this;\r\n        // Normally we wouldn't have to explicitly run this outside the `NgZone`, however\r\n        // if the consumer is using `zone-patch-rxjs`, the `Subscription.unsubscribe` call will\r\n        // be patched to run inside the zone, which will throw us into an infinite loop.\r\n        this._ngZone.runOutsideAngular((/**\r\n         * @return {?}\r\n         */\r\n        function () {\r\n            // We can't remove the host here immediately, because the overlay pane's content\r\n            // might still be animating. This stream helps us avoid interrupting the animation\r\n            // by waiting for the pane to become empty.\r\n            /** @type {?} */\r\n            var subscription = _this._ngZone.onStable\r\n                .asObservable()\r\n                .pipe(takeUntil(merge(_this._attachments, _this._detachments)))\r\n                .subscribe((/**\r\n             * @return {?}\r\n             */\r\n            function () {\r\n                // Needs a couple of checks for the pane and host, because\r\n                // they may have been removed by the time the zone stabilizes.\r\n                if (!_this._pane || !_this._host || _this._pane.children.length === 0) {\r\n                    if (_this._pane && _this._config.panelClass) {\r\n                        _this._toggleClasses(_this._pane, _this._config.panelClass, false);\r\n                    }\r\n                    if (_this._host && _this._host.parentElement) {\r\n                        _this._previousHostParent = _this._host.parentElement;\r\n                        _this._previousHostParent.removeChild(_this._host);\r\n                    }\r\n                    subscription.unsubscribe();\r\n                }\r\n            }));\r\n        }));\r\n    };\r\n    /** Disposes of a scroll strategy. */\r\n    /**\r\n     * Disposes of a scroll strategy.\r\n     * @private\r\n     * @return {?}\r\n     */\r\n    OverlayRef.prototype._disposeScrollStrategy = /**\r\n     * Disposes of a scroll strategy.\r\n     * @private\r\n     * @return {?}\r\n     */\r\n    function () {\r\n        /** @type {?} */\r\n        var scrollStrategy = this._scrollStrategy;\r\n        if (scrollStrategy) {\r\n            scrollStrategy.disable();\r\n            if (scrollStrategy.detach) {\r\n                scrollStrategy.detach();\r\n            }\r\n        }\r\n    };\r\n    return OverlayRef;\r\n}());\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n// TODO: refactor clipping detection into a separate thing (part of scrolling module)\r\n// TODO: doesn't handle both flexible width and height when it has to scroll along both axis.\r\n/**\r\n * Class to be added to the overlay bounding box.\r\n * @type {?}\r\n */\r\nvar boundingBoxClass = 'cdk-overlay-connected-position-bounding-box';\r\n/**\r\n * A strategy for positioning overlays. Using this strategy, an overlay is given an\r\n * implicit position relative some origin element. The relative position is defined in terms of\r\n * a point on the origin element that is connected to a point on the overlay element. For example,\r\n * a basic dropdown is connecting the bottom-left corner of the origin to the top-left corner\r\n * of the overlay.\r\n */\r\nvar  /**\r\n * A strategy for positioning overlays. Using this strategy, an overlay is given an\r\n * implicit position relative some origin element. The relative position is defined in terms of\r\n * a point on the origin element that is connected to a point on the overlay element. For example,\r\n * a basic dropdown is connecting the bottom-left corner of the origin to the top-left corner\r\n * of the overlay.\r\n */\r\nFlexibleConnectedPositionStrategy = /** @class */ (function () {\r\n    function FlexibleConnectedPositionStrategy(connectedTo, _viewportRuler, _document, _platform, _overlayContainer) {\r\n        this._viewportRuler = _viewportRuler;\r\n        this._document = _document;\r\n        this._platform = _platform;\r\n        this._overlayContainer = _overlayContainer;\r\n        /**\r\n         * Last size used for the bounding box. Used to avoid resizing the overlay after open.\r\n         */\r\n        this._lastBoundingBoxSize = { width: 0, height: 0 };\r\n        /**\r\n         * Whether the overlay was pushed in a previous positioning.\r\n         */\r\n        this._isPushed = false;\r\n        /**\r\n         * Whether the overlay can be pushed on-screen on the initial open.\r\n         */\r\n        this._canPush = true;\r\n        /**\r\n         * Whether the overlay can grow via flexible width/height after the initial open.\r\n         */\r\n        this._growAfterOpen = false;\r\n        /**\r\n         * Whether the overlay's width and height can be constrained to fit within the viewport.\r\n         */\r\n        this._hasFlexibleDimensions = true;\r\n        /**\r\n         * Whether the overlay position is locked.\r\n         */\r\n        this._positionLocked = false;\r\n        /**\r\n         * Amount of space that must be maintained between the overlay and the edge of the viewport.\r\n         */\r\n        this._viewportMargin = 0;\r\n        /**\r\n         * The Scrollable containers used to check scrollable view properties on position change.\r\n         */\r\n        this._scrollables = [];\r\n        /**\r\n         * Ordered list of preferred positions, from most to least desirable.\r\n         */\r\n        this._preferredPositions = [];\r\n        /**\r\n         * Subject that emits whenever the position changes.\r\n         */\r\n        this._positionChanges = new Subject();\r\n        /**\r\n         * Subscription to viewport size changes.\r\n         */\r\n        this._resizeSubscription = Subscription.EMPTY;\r\n        /**\r\n         * Default offset for the overlay along the x axis.\r\n         */\r\n        this._offsetX = 0;\r\n        /**\r\n         * Default offset for the overlay along the y axis.\r\n         */\r\n        this._offsetY = 0;\r\n        /**\r\n         * Keeps track of the CSS classes that the position strategy has applied on the overlay panel.\r\n         */\r\n        this._appliedPanelClasses = [];\r\n        /**\r\n         * Observable sequence of position changes.\r\n         */\r\n        this.positionChanges = this._positionChanges.asObservable();\r\n        this.setOrigin(connectedTo);\r\n    }\r\n    Object.defineProperty(FlexibleConnectedPositionStrategy.prototype, \"positions\", {\r\n        /** Ordered list of preferred positions, from most to least desirable. */\r\n        get: /**\r\n         * Ordered list of preferred positions, from most to least desirable.\r\n         * @return {?}\r\n         */\r\n        function () {\r\n            return this._preferredPositions;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /** Attaches this position strategy to an overlay. */\r\n    /**\r\n     * Attaches this position strategy to an overlay.\r\n     * @param {?} overlayRef\r\n     * @return {?}\r\n     */\r\n    FlexibleConnectedPositionStrategy.prototype.attach = /**\r\n     * Attaches this position strategy to an overlay.\r\n     * @param {?} overlayRef\r\n     * @return {?}\r\n     */\r\n    function (overlayRef) {\r\n        var _this = this;\r\n        if (this._overlayRef && overlayRef !== this._overlayRef) {\r\n            throw Error('This position strategy is already attached to an overlay');\r\n        }\r\n        this._validatePositions();\r\n        overlayRef.hostElement.classList.add(boundingBoxClass);\r\n        this._overlayRef = overlayRef;\r\n        this._boundingBox = overlayRef.hostElement;\r\n        this._pane = overlayRef.overlayElement;\r\n        this._isDisposed = false;\r\n        this._isInitialRender = true;\r\n        this._lastPosition = null;\r\n        this._resizeSubscription.unsubscribe();\r\n        this._resizeSubscription = this._viewportRuler.change().subscribe((/**\r\n         * @return {?}\r\n         */\r\n        function () {\r\n            // When the window is resized, we want to trigger the next reposition as if it\r\n            // was an initial render, in order for the strategy to pick a new optimal position,\r\n            // otherwise position locking will cause it to stay at the old one.\r\n            _this._isInitialRender = true;\r\n            _this.apply();\r\n        }));\r\n    };\r\n    /**\r\n     * Updates the position of the overlay element, using whichever preferred position relative\r\n     * to the origin best fits on-screen.\r\n     *\r\n     * The selection of a position goes as follows:\r\n     *  - If any positions fit completely within the viewport as-is,\r\n     *      choose the first position that does so.\r\n     *  - If flexible dimensions are enabled and at least one satifies the given minimum width/height,\r\n     *      choose the position with the greatest available size modified by the positions' weight.\r\n     *  - If pushing is enabled, take the position that went off-screen the least and push it\r\n     *      on-screen.\r\n     *  - If none of the previous criteria were met, use the position that goes off-screen the least.\r\n     * @docs-private\r\n     */\r\n    /**\r\n     * Updates the position of the overlay element, using whichever preferred position relative\r\n     * to the origin best fits on-screen.\r\n     *\r\n     * The selection of a position goes as follows:\r\n     *  - If any positions fit completely within the viewport as-is,\r\n     *      choose the first position that does so.\r\n     *  - If flexible dimensions are enabled and at least one satifies the given minimum width/height,\r\n     *      choose the position with the greatest available size modified by the positions' weight.\r\n     *  - If pushing is enabled, take the position that went off-screen the least and push it\r\n     *      on-screen.\r\n     *  - If none of the previous criteria were met, use the position that goes off-screen the least.\r\n     * \\@docs-private\r\n     * @return {?}\r\n     */\r\n    FlexibleConnectedPositionStrategy.prototype.apply = /**\r\n     * Updates the position of the overlay element, using whichever preferred position relative\r\n     * to the origin best fits on-screen.\r\n     *\r\n     * The selection of a position goes as follows:\r\n     *  - If any positions fit completely within the viewport as-is,\r\n     *      choose the first position that does so.\r\n     *  - If flexible dimensions are enabled and at least one satifies the given minimum width/height,\r\n     *      choose the position with the greatest available size modified by the positions' weight.\r\n     *  - If pushing is enabled, take the position that went off-screen the least and push it\r\n     *      on-screen.\r\n     *  - If none of the previous criteria were met, use the position that goes off-screen the least.\r\n     * \\@docs-private\r\n     * @return {?}\r\n     */\r\n    function () {\r\n        // We shouldn't do anything if the strategy was disposed or we're on the server.\r\n        if (this._isDisposed || !this._platform.isBrowser) {\r\n            return;\r\n        }\r\n        // If the position has been applied already (e.g. when the overlay was opened) and the\r\n        // consumer opted into locking in the position, re-use the old position, in order to\r\n        // prevent the overlay from jumping around.\r\n        if (!this._isInitialRender && this._positionLocked && this._lastPosition) {\r\n            this.reapplyLastPosition();\r\n            return;\r\n        }\r\n        this._clearPanelClasses();\r\n        this._resetOverlayElementStyles();\r\n        this._resetBoundingBoxStyles();\r\n        // We need the bounding rects for the origin and the overlay to determine how to position\r\n        // the overlay relative to the origin.\r\n        // We use the viewport rect to determine whether a position would go off-screen.\r\n        this._viewportRect = this._getNarrowedViewportRect();\r\n        this._originRect = this._getOriginRect();\r\n        this._overlayRect = this._pane.getBoundingClientRect();\r\n        /** @type {?} */\r\n        var originRect = this._originRect;\r\n        /** @type {?} */\r\n        var overlayRect = this._overlayRect;\r\n        /** @type {?} */\r\n        var viewportRect = this._viewportRect;\r\n        // Positions where the overlay will fit with flexible dimensions.\r\n        /** @type {?} */\r\n        var flexibleFits = [];\r\n        // Fallback if none of the preferred positions fit within the viewport.\r\n        /** @type {?} */\r\n        var fallback;\r\n        // Go through each of the preferred positions looking for a good fit.\r\n        // If a good fit is found, it will be applied immediately.\r\n        for (var _i = 0, _a = this._preferredPositions; _i < _a.length; _i++) {\r\n            var pos = _a[_i];\r\n            // Get the exact (x, y) coordinate for the point-of-origin on the origin element.\r\n            /** @type {?} */\r\n            var originPoint = this._getOriginPoint(originRect, pos);\r\n            // From that point-of-origin, get the exact (x, y) coordinate for the top-left corner of the\r\n            // overlay in this position. We use the top-left corner for calculations and later translate\r\n            // this into an appropriate (top, left, bottom, right) style.\r\n            /** @type {?} */\r\n            var overlayPoint = this._getOverlayPoint(originPoint, overlayRect, pos);\r\n            // Calculate how well the overlay would fit into the viewport with this point.\r\n            /** @type {?} */\r\n            var overlayFit = this._getOverlayFit(overlayPoint, overlayRect, viewportRect, pos);\r\n            // If the overlay, without any further work, fits into the viewport, use this position.\r\n            if (overlayFit.isCompletelyWithinViewport) {\r\n                this._isPushed = false;\r\n                this._applyPosition(pos, originPoint);\r\n                return;\r\n            }\r\n            // If the overlay has flexible dimensions, we can use this position\r\n            // so long as there's enough space for the minimum dimensions.\r\n            if (this._canFitWithFlexibleDimensions(overlayFit, overlayPoint, viewportRect)) {\r\n                // Save positions where the overlay will fit with flexible dimensions. We will use these\r\n                // if none of the positions fit *without* flexible dimensions.\r\n                flexibleFits.push({\r\n                    position: pos,\r\n                    origin: originPoint,\r\n                    overlayRect: overlayRect,\r\n                    boundingBoxRect: this._calculateBoundingBoxRect(originPoint, pos)\r\n                });\r\n                continue;\r\n            }\r\n            // If the current preferred position does not fit on the screen, remember the position\r\n            // if it has more visible area on-screen than we've seen and move onto the next preferred\r\n            // position.\r\n            if (!fallback || fallback.overlayFit.visibleArea < overlayFit.visibleArea) {\r\n                fallback = { overlayFit: overlayFit, overlayPoint: overlayPoint, originPoint: originPoint, position: pos, overlayRect: overlayRect };\r\n            }\r\n        }\r\n        // If there are any positions where the overlay would fit with flexible dimensions, choose the\r\n        // one that has the greatest area available modified by the position's weight\r\n        if (flexibleFits.length) {\r\n            /** @type {?} */\r\n            var bestFit = null;\r\n            /** @type {?} */\r\n            var bestScore = -1;\r\n            for (var _b = 0, flexibleFits_1 = flexibleFits; _b < flexibleFits_1.length; _b++) {\r\n                var fit = flexibleFits_1[_b];\r\n                /** @type {?} */\r\n                var score = fit.boundingBoxRect.width * fit.boundingBoxRect.height * (fit.position.weight || 1);\r\n                if (score > bestScore) {\r\n                    bestScore = score;\r\n                    bestFit = fit;\r\n                }\r\n            }\r\n            this._isPushed = false;\r\n            this._applyPosition((/** @type {?} */ (bestFit)).position, (/** @type {?} */ (bestFit)).origin);\r\n            return;\r\n        }\r\n        // When none of the preferred positions fit within the viewport, take the position\r\n        // that went off-screen the least and attempt to push it on-screen.\r\n        if (this._canPush) {\r\n            // TODO(jelbourn): after pushing, the opening \"direction\" of the overlay might not make sense.\r\n            this._isPushed = true;\r\n            this._applyPosition((/** @type {?} */ (fallback)).position, (/** @type {?} */ (fallback)).originPoint);\r\n            return;\r\n        }\r\n        // All options for getting the overlay within the viewport have been exhausted, so go with the\r\n        // position that went off-screen the least.\r\n        this._applyPosition((/** @type {?} */ (fallback)).position, (/** @type {?} */ (fallback)).originPoint);\r\n    };\r\n    /**\r\n     * @return {?}\r\n     */\r\n    FlexibleConnectedPositionStrategy.prototype.detach = /**\r\n     * @return {?}\r\n     */\r\n    function () {\r\n        this._clearPanelClasses();\r\n        this._lastPosition = null;\r\n        this._previousPushAmount = null;\r\n        this._resizeSubscription.unsubscribe();\r\n    };\r\n    /** Cleanup after the element gets destroyed. */\r\n    /**\r\n     * Cleanup after the element gets destroyed.\r\n     * @return {?}\r\n     */\r\n    FlexibleConnectedPositionStrategy.prototype.dispose = /**\r\n     * Cleanup after the element gets destroyed.\r\n     * @return {?}\r\n     */\r\n    function () {\r\n        if (this._isDisposed) {\r\n            return;\r\n        }\r\n        // We can't use `_resetBoundingBoxStyles` here, because it resets\r\n        // some properties to zero, rather than removing them.\r\n        if (this._boundingBox) {\r\n            extendStyles(this._boundingBox.style, (/** @type {?} */ ({\r\n                top: '',\r\n                left: '',\r\n                right: '',\r\n                bottom: '',\r\n                height: '',\r\n                width: '',\r\n                alignItems: '',\r\n                justifyContent: '',\r\n            })));\r\n        }\r\n        if (this._pane) {\r\n            this._resetOverlayElementStyles();\r\n        }\r\n        if (this._overlayRef) {\r\n            this._overlayRef.hostElement.classList.remove(boundingBoxClass);\r\n        }\r\n        this.detach();\r\n        this._positionChanges.complete();\r\n        this._overlayRef = this._boundingBox = (/** @type {?} */ (null));\r\n        this._isDisposed = true;\r\n    };\r\n    /**\r\n     * This re-aligns the overlay element with the trigger in its last calculated position,\r\n     * even if a position higher in the \"preferred positions\" list would now fit. This\r\n     * allows one to re-align the panel without changing the orientation of the panel.\r\n     */\r\n    /**\r\n     * This re-aligns the overlay element with the trigger in its last calculated position,\r\n     * even if a position higher in the \"preferred positions\" list would now fit. This\r\n     * allows one to re-align the panel without changing the orientation of the panel.\r\n     * @return {?}\r\n     */\r\n    FlexibleConnectedPositionStrategy.prototype.reapplyLastPosition = /**\r\n     * This re-aligns the overlay element with the trigger in its last calculated position,\r\n     * even if a position higher in the \"preferred positions\" list would now fit. This\r\n     * allows one to re-align the panel without changing the orientation of the panel.\r\n     * @return {?}\r\n     */\r\n    function () {\r\n        if (!this._isDisposed && (!this._platform || this._platform.isBrowser)) {\r\n            this._originRect = this._getOriginRect();\r\n            this._overlayRect = this._pane.getBoundingClientRect();\r\n            this._viewportRect = this._getNarrowedViewportRect();\r\n            /** @type {?} */\r\n            var lastPosition = this._lastPosition || this._preferredPositions[0];\r\n            /** @type {?} */\r\n            var originPoint = this._getOriginPoint(this._originRect, lastPosition);\r\n            this._applyPosition(lastPosition, originPoint);\r\n        }\r\n    };\r\n    /**\r\n     * Sets the list of Scrollable containers that host the origin element so that\r\n     * on reposition we can evaluate if it or the overlay has been clipped or outside view. Every\r\n     * Scrollable must be an ancestor element of the strategy's origin element.\r\n     */\r\n    /**\r\n     * Sets the list of Scrollable containers that host the origin element so that\r\n     * on reposition we can evaluate if it or the overlay has been clipped or outside view. Every\r\n     * Scrollable must be an ancestor element of the strategy's origin element.\r\n     * @template THIS\r\n     * @this {THIS}\r\n     * @param {?} scrollables\r\n     * @return {THIS}\r\n     */\r\n    FlexibleConnectedPositionStrategy.prototype.withScrollableContainers = /**\r\n     * Sets the list of Scrollable containers that host the origin element so that\r\n     * on reposition we can evaluate if it or the overlay has been clipped or outside view. Every\r\n     * Scrollable must be an ancestor element of the strategy's origin element.\r\n     * @template THIS\r\n     * @this {THIS}\r\n     * @param {?} scrollables\r\n     * @return {THIS}\r\n     */\r\n    function (scrollables) {\r\n        (/** @type {?} */ (this))._scrollables = scrollables;\r\n        return (/** @type {?} */ (this));\r\n    };\r\n    /**\r\n     * Adds new preferred positions.\r\n     * @param positions List of positions options for this overlay.\r\n     */\r\n    /**\r\n     * Adds new preferred positions.\r\n     * @template THIS\r\n     * @this {THIS}\r\n     * @param {?} positions List of positions options for this overlay.\r\n     * @return {THIS}\r\n     */\r\n    FlexibleConnectedPositionStrategy.prototype.withPositions = /**\r\n     * Adds new preferred positions.\r\n     * @template THIS\r\n     * @this {THIS}\r\n     * @param {?} positions List of positions options for this overlay.\r\n     * @return {THIS}\r\n     */\r\n    function (positions) {\r\n        (/** @type {?} */ (this))._preferredPositions = positions;\r\n        // If the last calculated position object isn't part of the positions anymore, clear\r\n        // it in order to avoid it being picked up if the consumer tries to re-apply.\r\n        if (positions.indexOf((/** @type {?} */ ((/** @type {?} */ (this))._lastPosition))) === -1) {\r\n            (/** @type {?} */ (this))._lastPosition = null;\r\n        }\r\n        (/** @type {?} */ (this))._validatePositions();\r\n        return (/** @type {?} */ (this));\r\n    };\r\n    /**\r\n     * Sets a minimum distance the overlay may be positioned to the edge of the viewport.\r\n     * @param margin Required margin between the overlay and the viewport edge in pixels.\r\n     */\r\n    /**\r\n     * Sets a minimum distance the overlay may be positioned to the edge of the viewport.\r\n     * @template THIS\r\n     * @this {THIS}\r\n     * @param {?} margin Required margin between the overlay and the viewport edge in pixels.\r\n     * @return {THIS}\r\n     */\r\n    FlexibleConnectedPositionStrategy.prototype.withViewportMargin = /**\r\n     * Sets a minimum distance the overlay may be positioned to the edge of the viewport.\r\n     * @template THIS\r\n     * @this {THIS}\r\n     * @param {?} margin Required margin between the overlay and the viewport edge in pixels.\r\n     * @return {THIS}\r\n     */\r\n    function (margin) {\r\n        (/** @type {?} */ (this))._viewportMargin = margin;\r\n        return (/** @type {?} */ (this));\r\n    };\r\n    /** Sets whether the overlay's width and height can be constrained to fit within the viewport. */\r\n    /**\r\n     * Sets whether the overlay's width and height can be constrained to fit within the viewport.\r\n     * @template THIS\r\n     * @this {THIS}\r\n     * @param {?=} flexibleDimensions\r\n     * @return {THIS}\r\n     */\r\n    FlexibleConnectedPositionStrategy.prototype.withFlexibleDimensions = /**\r\n     * Sets whether the overlay's width and height can be constrained to fit within the viewport.\r\n     * @template THIS\r\n     * @this {THIS}\r\n     * @param {?=} flexibleDimensions\r\n     * @return {THIS}\r\n     */\r\n    function (flexibleDimensions) {\r\n        if (flexibleDimensions === void 0) { flexibleDimensions = true; }\r\n        (/** @type {?} */ (this))._hasFlexibleDimensions = flexibleDimensions;\r\n        return (/** @type {?} */ (this));\r\n    };\r\n    /** Sets whether the overlay can grow after the initial open via flexible width/height. */\r\n    /**\r\n     * Sets whether the overlay can grow after the initial open via flexible width/height.\r\n     * @template THIS\r\n     * @this {THIS}\r\n     * @param {?=} growAfterOpen\r\n     * @return {THIS}\r\n     */\r\n    FlexibleConnectedPositionStrategy.prototype.withGrowAfterOpen = /**\r\n     * Sets whether the overlay can grow after the initial open via flexible width/height.\r\n     * @template THIS\r\n     * @this {THIS}\r\n     * @param {?=} growAfterOpen\r\n     * @return {THIS}\r\n     */\r\n    function (growAfterOpen) {\r\n        if (growAfterOpen === void 0) { growAfterOpen = true; }\r\n        (/** @type {?} */ (this))._growAfterOpen = growAfterOpen;\r\n        return (/** @type {?} */ (this));\r\n    };\r\n    /** Sets whether the overlay can be pushed on-screen if none of the provided positions fit. */\r\n    /**\r\n     * Sets whether the overlay can be pushed on-screen if none of the provided positions fit.\r\n     * @template THIS\r\n     * @this {THIS}\r\n     * @param {?=} canPush\r\n     * @return {THIS}\r\n     */\r\n    FlexibleConnectedPositionStrategy.prototype.withPush = /**\r\n     * Sets whether the overlay can be pushed on-screen if none of the provided positions fit.\r\n     * @template THIS\r\n     * @this {THIS}\r\n     * @param {?=} canPush\r\n     * @return {THIS}\r\n     */\r\n    function (canPush) {\r\n        if (canPush === void 0) { canPush = true; }\r\n        (/** @type {?} */ (this))._canPush = canPush;\r\n        return (/** @type {?} */ (this));\r\n    };\r\n    /**\r\n     * Sets whether the overlay's position should be locked in after it is positioned\r\n     * initially. When an overlay is locked in, it won't attempt to reposition itself\r\n     * when the position is re-applied (e.g. when the user scrolls away).\r\n     * @param isLocked Whether the overlay should locked in.\r\n     */\r\n    /**\r\n     * Sets whether the overlay's position should be locked in after it is positioned\r\n     * initially. When an overlay is locked in, it won't attempt to reposition itself\r\n     * when the position is re-applied (e.g. when the user scrolls away).\r\n     * @template THIS\r\n     * @this {THIS}\r\n     * @param {?=} isLocked Whether the overlay should locked in.\r\n     * @return {THIS}\r\n     */\r\n    FlexibleConnectedPositionStrategy.prototype.withLockedPosition = /**\r\n     * Sets whether the overlay's position should be locked in after it is positioned\r\n     * initially. When an overlay is locked in, it won't attempt to reposition itself\r\n     * when the position is re-applied (e.g. when the user scrolls away).\r\n     * @template THIS\r\n     * @this {THIS}\r\n     * @param {?=} isLocked Whether the overlay should locked in.\r\n     * @return {THIS}\r\n     */\r\n    function (isLocked) {\r\n        if (isLocked === void 0) { isLocked = true; }\r\n        (/** @type {?} */ (this))._positionLocked = isLocked;\r\n        return (/** @type {?} */ (this));\r\n    };\r\n    /**\r\n     * Sets the origin, relative to which to position the overlay.\r\n     * Using an element origin is useful for building components that need to be positioned\r\n     * relatively to a trigger (e.g. dropdown menus or tooltips), whereas using a point can be\r\n     * used for cases like contextual menus which open relative to the user's pointer.\r\n     * @param origin Reference to the new origin.\r\n     */\r\n    /**\r\n     * Sets the origin, relative to which to position the overlay.\r\n     * Using an element origin is useful for building components that need to be positioned\r\n     * relatively to a trigger (e.g. dropdown menus or tooltips), whereas using a point can be\r\n     * used for cases like contextual menus which open relative to the user's pointer.\r\n     * @template THIS\r\n     * @this {THIS}\r\n     * @param {?} origin Reference to the new origin.\r\n     * @return {THIS}\r\n     */\r\n    FlexibleConnectedPositionStrategy.prototype.setOrigin = /**\r\n     * Sets the origin, relative to which to position the overlay.\r\n     * Using an element origin is useful for building components that need to be positioned\r\n     * relatively to a trigger (e.g. dropdown menus or tooltips), whereas using a point can be\r\n     * used for cases like contextual menus which open relative to the user's pointer.\r\n     * @template THIS\r\n     * @this {THIS}\r\n     * @param {?} origin Reference to the new origin.\r\n     * @return {THIS}\r\n     */\r\n    function (origin) {\r\n        (/** @type {?} */ (this))._origin = origin;\r\n        return (/** @type {?} */ (this));\r\n    };\r\n    /**\r\n     * Sets the default offset for the overlay's connection point on the x-axis.\r\n     * @param offset New offset in the X axis.\r\n     */\r\n    /**\r\n     * Sets the default offset for the overlay's connection point on the x-axis.\r\n     * @template THIS\r\n     * @this {THIS}\r\n     * @param {?} offset New offset in the X axis.\r\n     * @return {THIS}\r\n     */\r\n    FlexibleConnectedPositionStrategy.prototype.withDefaultOffsetX = /**\r\n     * Sets the default offset for the overlay's connection point on the x-axis.\r\n     * @template THIS\r\n     * @this {THIS}\r\n     * @param {?} offset New offset in the X axis.\r\n     * @return {THIS}\r\n     */\r\n    function (offset) {\r\n        (/** @type {?} */ (this))._offsetX = offset;\r\n        return (/** @type {?} */ (this));\r\n    };\r\n    /**\r\n     * Sets the default offset for the overlay's connection point on the y-axis.\r\n     * @param offset New offset in the Y axis.\r\n     */\r\n    /**\r\n     * Sets the default offset for the overlay's connection point on the y-axis.\r\n     * @template THIS\r\n     * @this {THIS}\r\n     * @param {?} offset New offset in the Y axis.\r\n     * @return {THIS}\r\n     */\r\n    FlexibleConnectedPositionStrategy.prototype.withDefaultOffsetY = /**\r\n     * Sets the default offset for the overlay's connection point on the y-axis.\r\n     * @template THIS\r\n     * @this {THIS}\r\n     * @param {?} offset New offset in the Y axis.\r\n     * @return {THIS}\r\n     */\r\n    function (offset) {\r\n        (/** @type {?} */ (this))._offsetY = offset;\r\n        return (/** @type {?} */ (this));\r\n    };\r\n    /**\r\n     * Configures that the position strategy should set a `transform-origin` on some elements\r\n     * inside the overlay, depending on the current position that is being applied. This is\r\n     * useful for the cases where the origin of an animation can change depending on the\r\n     * alignment of the overlay.\r\n     * @param selector CSS selector that will be used to find the target\r\n     *    elements onto which to set the transform origin.\r\n     */\r\n    /**\r\n     * Configures that the position strategy should set a `transform-origin` on some elements\r\n     * inside the overlay, depending on the current position that is being applied. This is\r\n     * useful for the cases where the origin of an animation can change depending on the\r\n     * alignment of the overlay.\r\n     * @template THIS\r\n     * @this {THIS}\r\n     * @param {?} selector CSS selector that will be used to find the target\r\n     *    elements onto which to set the transform origin.\r\n     * @return {THIS}\r\n     */\r\n    FlexibleConnectedPositionStrategy.prototype.withTransformOriginOn = /**\r\n     * Configures that the position strategy should set a `transform-origin` on some elements\r\n     * inside the overlay, depending on the current position that is being applied. This is\r\n     * useful for the cases where the origin of an animation can change depending on the\r\n     * alignment of the overlay.\r\n     * @template THIS\r\n     * @this {THIS}\r\n     * @param {?} selector CSS selector that will be used to find the target\r\n     *    elements onto which to set the transform origin.\r\n     * @return {THIS}\r\n     */\r\n    function (selector) {\r\n        (/** @type {?} */ (this))._transformOriginSelector = selector;\r\n        return (/** @type {?} */ (this));\r\n    };\r\n    /**\r\n     * Gets the (x, y) coordinate of a connection point on the origin based on a relative position.\r\n     */\r\n    /**\r\n     * Gets the (x, y) coordinate of a connection point on the origin based on a relative position.\r\n     * @private\r\n     * @param {?} originRect\r\n     * @param {?} pos\r\n     * @return {?}\r\n     */\r\n    FlexibleConnectedPositionStrategy.prototype._getOriginPoint = /**\r\n     * Gets the (x, y) coordinate of a connection point on the origin based on a relative position.\r\n     * @private\r\n     * @param {?} originRect\r\n     * @param {?} pos\r\n     * @return {?}\r\n     */\r\n    function (originRect, pos) {\r\n        /** @type {?} */\r\n        var x;\r\n        if (pos.originX == 'center') {\r\n            // Note: when centering we should always use the `left`\r\n            // offset, otherwise the position will be wrong in RTL.\r\n            x = originRect.left + (originRect.width / 2);\r\n        }\r\n        else {\r\n            /** @type {?} */\r\n            var startX = this._isRtl() ? originRect.right : originRect.left;\r\n            /** @type {?} */\r\n            var endX = this._isRtl() ? originRect.left : originRect.right;\r\n            x = pos.originX == 'start' ? startX : endX;\r\n        }\r\n        /** @type {?} */\r\n        var y;\r\n        if (pos.originY == 'center') {\r\n            y = originRect.top + (originRect.height / 2);\r\n        }\r\n        else {\r\n            y = pos.originY == 'top' ? originRect.top : originRect.bottom;\r\n        }\r\n        return { x: x, y: y };\r\n    };\r\n    /**\r\n     * Gets the (x, y) coordinate of the top-left corner of the overlay given a given position and\r\n     * origin point to which the overlay should be connected.\r\n     */\r\n    /**\r\n     * Gets the (x, y) coordinate of the top-left corner of the overlay given a given position and\r\n     * origin point to which the overlay should be connected.\r\n     * @private\r\n     * @param {?} originPoint\r\n     * @param {?} overlayRect\r\n     * @param {?} pos\r\n     * @return {?}\r\n     */\r\n    FlexibleConnectedPositionStrategy.prototype._getOverlayPoint = /**\r\n     * Gets the (x, y) coordinate of the top-left corner of the overlay given a given position and\r\n     * origin point to which the overlay should be connected.\r\n     * @private\r\n     * @param {?} originPoint\r\n     * @param {?} overlayRect\r\n     * @param {?} pos\r\n     * @return {?}\r\n     */\r\n    function (originPoint, overlayRect, pos) {\r\n        // Calculate the (overlayStartX, overlayStartY), the start of the\r\n        // potential overlay position relative to the origin point.\r\n        /** @type {?} */\r\n        var overlayStartX;\r\n        if (pos.overlayX == 'center') {\r\n            overlayStartX = -overlayRect.width / 2;\r\n        }\r\n        else if (pos.overlayX === 'start') {\r\n            overlayStartX = this._isRtl() ? -overlayRect.width : 0;\r\n        }\r\n        else {\r\n            overlayStartX = this._isRtl() ? 0 : -overlayRect.width;\r\n        }\r\n        /** @type {?} */\r\n        var overlayStartY;\r\n        if (pos.overlayY == 'center') {\r\n            overlayStartY = -overlayRect.height / 2;\r\n        }\r\n        else {\r\n            overlayStartY = pos.overlayY == 'top' ? 0 : -overlayRect.height;\r\n        }\r\n        // The (x, y) coordinates of the overlay.\r\n        return {\r\n            x: originPoint.x + overlayStartX,\r\n            y: originPoint.y + overlayStartY,\r\n        };\r\n    };\r\n    /** Gets how well an overlay at the given point will fit within the viewport. */\r\n    /**\r\n     * Gets how well an overlay at the given point will fit within the viewport.\r\n     * @private\r\n     * @param {?} point\r\n     * @param {?} overlay\r\n     * @param {?} viewport\r\n     * @param {?} position\r\n     * @return {?}\r\n     */\r\n    FlexibleConnectedPositionStrategy.prototype._getOverlayFit = /**\r\n     * Gets how well an overlay at the given point will fit within the viewport.\r\n     * @private\r\n     * @param {?} point\r\n     * @param {?} overlay\r\n     * @param {?} viewport\r\n     * @param {?} position\r\n     * @return {?}\r\n     */\r\n    function (point, overlay, viewport, position) {\r\n        var x = point.x, y = point.y;\r\n        /** @type {?} */\r\n        var offsetX = this._getOffset(position, 'x');\r\n        /** @type {?} */\r\n        var offsetY = this._getOffset(position, 'y');\r\n        // Account for the offsets since they could push the overlay out of the viewport.\r\n        if (offsetX) {\r\n            x += offsetX;\r\n        }\r\n        if (offsetY) {\r\n            y += offsetY;\r\n        }\r\n        // How much the overlay would overflow at this position, on each side.\r\n        /** @type {?} */\r\n        var leftOverflow = 0 - x;\r\n        /** @type {?} */\r\n        var rightOverflow = (x + overlay.width) - viewport.width;\r\n        /** @type {?} */\r\n        var topOverflow = 0 - y;\r\n        /** @type {?} */\r\n        var bottomOverflow = (y + overlay.height) - viewport.height;\r\n        // Visible parts of the element on each axis.\r\n        /** @type {?} */\r\n        var visibleWidth = this._subtractOverflows(overlay.width, leftOverflow, rightOverflow);\r\n        /** @type {?} */\r\n        var visibleHeight = this._subtractOverflows(overlay.height, topOverflow, bottomOverflow);\r\n        /** @type {?} */\r\n        var visibleArea = visibleWidth * visibleHeight;\r\n        return {\r\n            visibleArea: visibleArea,\r\n            isCompletelyWithinViewport: (overlay.width * overlay.height) === visibleArea,\r\n            fitsInViewportVertically: visibleHeight === overlay.height,\r\n            fitsInViewportHorizontally: visibleWidth == overlay.width,\r\n        };\r\n    };\r\n    /**\r\n     * Whether the overlay can fit within the viewport when it may resize either its width or height.\r\n     * @param fit How well the overlay fits in the viewport at some position.\r\n     * @param point The (x, y) coordinates of the overlat at some position.\r\n     * @param viewport The geometry of the viewport.\r\n     */\r\n    /**\r\n     * Whether the overlay can fit within the viewport when it may resize either its width or height.\r\n     * @private\r\n     * @param {?} fit How well the overlay fits in the viewport at some position.\r\n     * @param {?} point The (x, y) coordinates of the overlat at some position.\r\n     * @param {?} viewport The geometry of the viewport.\r\n     * @return {?}\r\n     */\r\n    FlexibleConnectedPositionStrategy.prototype._canFitWithFlexibleDimensions = /**\r\n     * Whether the overlay can fit within the viewport when it may resize either its width or height.\r\n     * @private\r\n     * @param {?} fit How well the overlay fits in the viewport at some position.\r\n     * @param {?} point The (x, y) coordinates of the overlat at some position.\r\n     * @param {?} viewport The geometry of the viewport.\r\n     * @return {?}\r\n     */\r\n    function (fit, point, viewport) {\r\n        if (this._hasFlexibleDimensions) {\r\n            /** @type {?} */\r\n            var availableHeight = viewport.bottom - point.y;\r\n            /** @type {?} */\r\n            var availableWidth = viewport.right - point.x;\r\n            /** @type {?} */\r\n            var minHeight = this._overlayRef.getConfig().minHeight;\r\n            /** @type {?} */\r\n            var minWidth = this._overlayRef.getConfig().minWidth;\r\n            /** @type {?} */\r\n            var verticalFit = fit.fitsInViewportVertically ||\r\n                (minHeight != null && minHeight <= availableHeight);\r\n            /** @type {?} */\r\n            var horizontalFit = fit.fitsInViewportHorizontally ||\r\n                (minWidth != null && minWidth <= availableWidth);\r\n            return verticalFit && horizontalFit;\r\n        }\r\n        return false;\r\n    };\r\n    /**\r\n     * Gets the point at which the overlay can be \"pushed\" on-screen. If the overlay is larger than\r\n     * the viewport, the top-left corner will be pushed on-screen (with overflow occuring on the\r\n     * right and bottom).\r\n     *\r\n     * @param start Starting point from which the overlay is pushed.\r\n     * @param overlay Dimensions of the overlay.\r\n     * @param scrollPosition Current viewport scroll position.\r\n     * @returns The point at which to position the overlay after pushing. This is effectively a new\r\n     *     originPoint.\r\n     */\r\n    /**\r\n     * Gets the point at which the overlay can be \"pushed\" on-screen. If the overlay is larger than\r\n     * the viewport, the top-left corner will be pushed on-screen (with overflow occuring on the\r\n     * right and bottom).\r\n     *\r\n     * @private\r\n     * @param {?} start Starting point from which the overlay is pushed.\r\n     * @param {?} overlay Dimensions of the overlay.\r\n     * @param {?} scrollPosition Current viewport scroll position.\r\n     * @return {?} The point at which to position the overlay after pushing. This is effectively a new\r\n     *     originPoint.\r\n     */\r\n    FlexibleConnectedPositionStrategy.prototype._pushOverlayOnScreen = /**\r\n     * Gets the point at which the overlay can be \"pushed\" on-screen. If the overlay is larger than\r\n     * the viewport, the top-left corner will be pushed on-screen (with overflow occuring on the\r\n     * right and bottom).\r\n     *\r\n     * @private\r\n     * @param {?} start Starting point from which the overlay is pushed.\r\n     * @param {?} overlay Dimensions of the overlay.\r\n     * @param {?} scrollPosition Current viewport scroll position.\r\n     * @return {?} The point at which to position the overlay after pushing. This is effectively a new\r\n     *     originPoint.\r\n     */\r\n    function (start, overlay, scrollPosition) {\r\n        // If the position is locked and we've pushed the overlay already, reuse the previous push\r\n        // amount, rather than pushing it again. If we were to continue pushing, the element would\r\n        // remain in the viewport, which goes against the expectations when position locking is enabled.\r\n        if (this._previousPushAmount && this._positionLocked) {\r\n            return {\r\n                x: start.x + this._previousPushAmount.x,\r\n                y: start.y + this._previousPushAmount.y\r\n            };\r\n        }\r\n        /** @type {?} */\r\n        var viewport = this._viewportRect;\r\n        // Determine how much the overlay goes outside the viewport on each\r\n        // side, which we'll use to decide which direction to push it.\r\n        /** @type {?} */\r\n        var overflowRight = Math.max(start.x + overlay.width - viewport.right, 0);\r\n        /** @type {?} */\r\n        var overflowBottom = Math.max(start.y + overlay.height - viewport.bottom, 0);\r\n        /** @type {?} */\r\n        var overflowTop = Math.max(viewport.top - scrollPosition.top - start.y, 0);\r\n        /** @type {?} */\r\n        var overflowLeft = Math.max(viewport.left - scrollPosition.left - start.x, 0);\r\n        // Amount by which to push the overlay in each axis such that it remains on-screen.\r\n        /** @type {?} */\r\n        var pushX = 0;\r\n        /** @type {?} */\r\n        var pushY = 0;\r\n        // If the overlay fits completely within the bounds of the viewport, push it from whichever\r\n        // direction is goes off-screen. Otherwise, push the top-left corner such that its in the\r\n        // viewport and allow for the trailing end of the overlay to go out of bounds.\r\n        if (overlay.width <= viewport.width) {\r\n            pushX = overflowLeft || -overflowRight;\r\n        }\r\n        else {\r\n            pushX = start.x < this._viewportMargin ? (viewport.left - scrollPosition.left) - start.x : 0;\r\n        }\r\n        if (overlay.height <= viewport.height) {\r\n            pushY = overflowTop || -overflowBottom;\r\n        }\r\n        else {\r\n            pushY = start.y < this._viewportMargin ? (viewport.top - scrollPosition.top) - start.y : 0;\r\n        }\r\n        this._previousPushAmount = { x: pushX, y: pushY };\r\n        return {\r\n            x: start.x + pushX,\r\n            y: start.y + pushY,\r\n        };\r\n    };\r\n    /**\r\n     * Applies a computed position to the overlay and emits a position change.\r\n     * @param position The position preference\r\n     * @param originPoint The point on the origin element where the overlay is connected.\r\n     */\r\n    /**\r\n     * Applies a computed position to the overlay and emits a position change.\r\n     * @private\r\n     * @param {?} position The position preference\r\n     * @param {?} originPoint The point on the origin element where the overlay is connected.\r\n     * @return {?}\r\n     */\r\n    FlexibleConnectedPositionStrategy.prototype._applyPosition = /**\r\n     * Applies a computed position to the overlay and emits a position change.\r\n     * @private\r\n     * @param {?} position The position preference\r\n     * @param {?} originPoint The point on the origin element where the overlay is connected.\r\n     * @return {?}\r\n     */\r\n    function (position, originPoint) {\r\n        this._setTransformOrigin(position);\r\n        this._setOverlayElementStyles(originPoint, position);\r\n        this._setBoundingBoxStyles(originPoint, position);\r\n        if (position.panelClass) {\r\n            this._addPanelClasses(position.panelClass);\r\n        }\r\n        // Save the last connected position in case the position needs to be re-calculated.\r\n        this._lastPosition = position;\r\n        // Notify that the position has been changed along with its change properties.\r\n        // We only emit if we've got any subscriptions, because the scroll visibility\r\n        // calculcations can be somewhat expensive.\r\n        if (this._positionChanges.observers.length) {\r\n            /** @type {?} */\r\n            var scrollableViewProperties = this._getScrollVisibility();\r\n            /** @type {?} */\r\n            var changeEvent = new ConnectedOverlayPositionChange(position, scrollableViewProperties);\r\n            this._positionChanges.next(changeEvent);\r\n        }\r\n        this._isInitialRender = false;\r\n    };\r\n    /** Sets the transform origin based on the configured selector and the passed-in position.  */\r\n    /**\r\n     * Sets the transform origin based on the configured selector and the passed-in position.\r\n     * @private\r\n     * @param {?} position\r\n     * @return {?}\r\n     */\r\n    FlexibleConnectedPositionStrategy.prototype._setTransformOrigin = /**\r\n     * Sets the transform origin based on the configured selector and the passed-in position.\r\n     * @private\r\n     * @param {?} position\r\n     * @return {?}\r\n     */\r\n    function (position) {\r\n        if (!this._transformOriginSelector) {\r\n            return;\r\n        }\r\n        /** @type {?} */\r\n        var elements = (/** @type {?} */ (this._boundingBox)).querySelectorAll(this._transformOriginSelector);\r\n        /** @type {?} */\r\n        var xOrigin;\r\n        /** @type {?} */\r\n        var yOrigin = position.overlayY;\r\n        if (position.overlayX === 'center') {\r\n            xOrigin = 'center';\r\n        }\r\n        else if (this._isRtl()) {\r\n            xOrigin = position.overlayX === 'start' ? 'right' : 'left';\r\n        }\r\n        else {\r\n            xOrigin = position.overlayX === 'start' ? 'left' : 'right';\r\n        }\r\n        for (var i = 0; i < elements.length; i++) {\r\n            elements[i].style.transformOrigin = xOrigin + \" \" + yOrigin;\r\n        }\r\n    };\r\n    /**\r\n     * Gets the position and size of the overlay's sizing container.\r\n     *\r\n     * This method does no measuring and applies no styles so that we can cheaply compute the\r\n     * bounds for all positions and choose the best fit based on these results.\r\n     */\r\n    /**\r\n     * Gets the position and size of the overlay's sizing container.\r\n     *\r\n     * This method does no measuring and applies no styles so that we can cheaply compute the\r\n     * bounds for all positions and choose the best fit based on these results.\r\n     * @private\r\n     * @param {?} origin\r\n     * @param {?} position\r\n     * @return {?}\r\n     */\r\n    FlexibleConnectedPositionStrategy.prototype._calculateBoundingBoxRect = /**\r\n     * Gets the position and size of the overlay's sizing container.\r\n     *\r\n     * This method does no measuring and applies no styles so that we can cheaply compute the\r\n     * bounds for all positions and choose the best fit based on these results.\r\n     * @private\r\n     * @param {?} origin\r\n     * @param {?} position\r\n     * @return {?}\r\n     */\r\n    function (origin, position) {\r\n        /** @type {?} */\r\n        var viewport = this._viewportRect;\r\n        /** @type {?} */\r\n        var isRtl = this._isRtl();\r\n        /** @type {?} */\r\n        var height;\r\n        /** @type {?} */\r\n        var top;\r\n        /** @type {?} */\r\n        var bottom;\r\n        if (position.overlayY === 'top') {\r\n            // Overlay is opening \"downward\" and thus is bound by the bottom viewport edge.\r\n            top = origin.y;\r\n            height = viewport.height - top + this._viewportMargin;\r\n        }\r\n        else if (position.overlayY === 'bottom') {\r\n            // Overlay is opening \"upward\" and thus is bound by the top viewport edge. We need to add\r\n            // the viewport margin back in, because the viewport rect is narrowed down to remove the\r\n            // margin, whereas the `origin` position is calculated based on its `ClientRect`.\r\n            bottom = viewport.height - origin.y + this._viewportMargin * 2;\r\n            height = viewport.height - bottom + this._viewportMargin;\r\n        }\r\n        else {\r\n            // If neither top nor bottom, it means that the overlay is vertically centered on the\r\n            // origin point. Note that we want the position relative to the viewport, rather than\r\n            // the page, which is why we don't use something like `viewport.bottom - origin.y` and\r\n            // `origin.y - viewport.top`.\r\n            /** @type {?} */\r\n            var smallestDistanceToViewportEdge = Math.min(viewport.bottom - origin.y + viewport.top, origin.y);\r\n            /** @type {?} */\r\n            var previousHeight = this._lastBoundingBoxSize.height;\r\n            height = smallestDistanceToViewportEdge * 2;\r\n            top = origin.y - smallestDistanceToViewportEdge;\r\n            if (height > previousHeight && !this._isInitialRender && !this._growAfterOpen) {\r\n                top = origin.y - (previousHeight / 2);\r\n            }\r\n        }\r\n        // The overlay is opening 'right-ward' (the content flows to the right).\r\n        /** @type {?} */\r\n        var isBoundedByRightViewportEdge = (position.overlayX === 'start' && !isRtl) ||\r\n            (position.overlayX === 'end' && isRtl);\r\n        // The overlay is opening 'left-ward' (the content flows to the left).\r\n        /** @type {?} */\r\n        var isBoundedByLeftViewportEdge = (position.overlayX === 'end' && !isRtl) ||\r\n            (position.overlayX === 'start' && isRtl);\r\n        /** @type {?} */\r\n        var width;\r\n        /** @type {?} */\r\n        var left;\r\n        /** @type {?} */\r\n        var right;\r\n        if (isBoundedByLeftViewportEdge) {\r\n            right = viewport.width - origin.x + this._viewportMargin;\r\n            width = origin.x - this._viewportMargin;\r\n        }\r\n        else if (isBoundedByRightViewportEdge) {\r\n            left = origin.x;\r\n            width = viewport.right - origin.x;\r\n        }\r\n        else {\r\n            // If neither start nor end, it means that the overlay is horizontally centered on the\r\n            // origin point. Note that we want the position relative to the viewport, rather than\r\n            // the page, which is why we don't use something like `viewport.right - origin.x` and\r\n            // `origin.x - viewport.left`.\r\n            /** @type {?} */\r\n            var smallestDistanceToViewportEdge = Math.min(viewport.right - origin.x + viewport.left, origin.x);\r\n            /** @type {?} */\r\n            var previousWidth = this._lastBoundingBoxSize.width;\r\n            width = smallestDistanceToViewportEdge * 2;\r\n            left = origin.x - smallestDistanceToViewportEdge;\r\n            if (width > previousWidth && !this._isInitialRender && !this._growAfterOpen) {\r\n                left = origin.x - (previousWidth / 2);\r\n            }\r\n        }\r\n        return { top: (/** @type {?} */ (top)), left: (/** @type {?} */ (left)), bottom: (/** @type {?} */ (bottom)), right: (/** @type {?} */ (right)), width: width, height: height };\r\n    };\r\n    /**\r\n     * Sets the position and size of the overlay's sizing wrapper. The wrapper is positioned on the\r\n     * origin's connection point and stetches to the bounds of the viewport.\r\n     *\r\n     * @param origin The point on the origin element where the overlay is connected.\r\n     * @param position The position preference\r\n     */\r\n    /**\r\n     * Sets the position and size of the overlay's sizing wrapper. The wrapper is positioned on the\r\n     * origin's connection point and stetches to the bounds of the viewport.\r\n     *\r\n     * @private\r\n     * @param {?} origin The point on the origin element where the overlay is connected.\r\n     * @param {?} position The position preference\r\n     * @return {?}\r\n     */\r\n    FlexibleConnectedPositionStrategy.prototype._setBoundingBoxStyles = /**\r\n     * Sets the position and size of the overlay's sizing wrapper. The wrapper is positioned on the\r\n     * origin's connection point and stetches to the bounds of the viewport.\r\n     *\r\n     * @private\r\n     * @param {?} origin The point on the origin element where the overlay is connected.\r\n     * @param {?} position The position preference\r\n     * @return {?}\r\n     */\r\n    function (origin, position) {\r\n        /** @type {?} */\r\n        var boundingBoxRect = this._calculateBoundingBoxRect(origin, position);\r\n        // It's weird if the overlay *grows* while scrolling, so we take the last size into account\r\n        // when applying a new size.\r\n        if (!this._isInitialRender && !this._growAfterOpen) {\r\n            boundingBoxRect.height = Math.min(boundingBoxRect.height, this._lastBoundingBoxSize.height);\r\n            boundingBoxRect.width = Math.min(boundingBoxRect.width, this._lastBoundingBoxSize.width);\r\n        }\r\n        /** @type {?} */\r\n        var styles = (/** @type {?} */ ({}));\r\n        if (this._hasExactPosition()) {\r\n            styles.top = styles.left = '0';\r\n            styles.bottom = styles.right = '';\r\n            styles.width = styles.height = '100%';\r\n        }\r\n        else {\r\n            /** @type {?} */\r\n            var maxHeight = this._overlayRef.getConfig().maxHeight;\r\n            /** @type {?} */\r\n            var maxWidth = this._overlayRef.getConfig().maxWidth;\r\n            styles.height = coerceCssPixelValue(boundingBoxRect.height);\r\n            styles.top = coerceCssPixelValue(boundingBoxRect.top);\r\n            styles.bottom = coerceCssPixelValue(boundingBoxRect.bottom);\r\n            styles.width = coerceCssPixelValue(boundingBoxRect.width);\r\n            styles.left = coerceCssPixelValue(boundingBoxRect.left);\r\n            styles.right = coerceCssPixelValue(boundingBoxRect.right);\r\n            // Push the pane content towards the proper direction.\r\n            if (position.overlayX === 'center') {\r\n                styles.alignItems = 'center';\r\n            }\r\n            else {\r\n                styles.alignItems = position.overlayX === 'end' ? 'flex-end' : 'flex-start';\r\n            }\r\n            if (position.overlayY === 'center') {\r\n                styles.justifyContent = 'center';\r\n            }\r\n            else {\r\n                styles.justifyContent = position.overlayY === 'bottom' ? 'flex-end' : 'flex-start';\r\n            }\r\n            if (maxHeight) {\r\n                styles.maxHeight = coerceCssPixelValue(maxHeight);\r\n            }\r\n            if (maxWidth) {\r\n                styles.maxWidth = coerceCssPixelValue(maxWidth);\r\n            }\r\n        }\r\n        this._lastBoundingBoxSize = boundingBoxRect;\r\n        extendStyles((/** @type {?} */ (this._boundingBox)).style, styles);\r\n    };\r\n    /** Resets the styles for the bounding box so that a new positioning can be computed. */\r\n    /**\r\n     * Resets the styles for the bounding box so that a new positioning can be computed.\r\n     * @private\r\n     * @return {?}\r\n     */\r\n    FlexibleConnectedPositionStrategy.prototype._resetBoundingBoxStyles = /**\r\n     * Resets the styles for the bounding box so that a new positioning can be computed.\r\n     * @private\r\n     * @return {?}\r\n     */\r\n    function () {\r\n        extendStyles((/** @type {?} */ (this._boundingBox)).style, (/** @type {?} */ ({\r\n            top: '0',\r\n            left: '0',\r\n            right: '0',\r\n            bottom: '0',\r\n            height: '',\r\n            width: '',\r\n            alignItems: '',\r\n            justifyContent: '',\r\n        })));\r\n    };\r\n    /** Resets the styles for the overlay pane so that a new positioning can be computed. */\r\n    /**\r\n     * Resets the styles for the overlay pane so that a new positioning can be computed.\r\n     * @private\r\n     * @return {?}\r\n     */\r\n    FlexibleConnectedPositionStrategy.prototype._resetOverlayElementStyles = /**\r\n     * Resets the styles for the overlay pane so that a new positioning can be computed.\r\n     * @private\r\n     * @return {?}\r\n     */\r\n    function () {\r\n        extendStyles(this._pane.style, (/** @type {?} */ ({\r\n            top: '',\r\n            left: '',\r\n            bottom: '',\r\n            right: '',\r\n            position: '',\r\n            transform: '',\r\n        })));\r\n    };\r\n    /** Sets positioning styles to the overlay element. */\r\n    /**\r\n     * Sets positioning styles to the overlay element.\r\n     * @private\r\n     * @param {?} originPoint\r\n     * @param {?} position\r\n     * @return {?}\r\n     */\r\n    FlexibleConnectedPositionStrategy.prototype._setOverlayElementStyles = /**\r\n     * Sets positioning styles to the overlay element.\r\n     * @private\r\n     * @param {?} originPoint\r\n     * @param {?} position\r\n     * @return {?}\r\n     */\r\n    function (originPoint, position) {\r\n        /** @type {?} */\r\n        var styles = (/** @type {?} */ ({}));\r\n        if (this._hasExactPosition()) {\r\n            /** @type {?} */\r\n            var scrollPosition = this._viewportRuler.getViewportScrollPosition();\r\n            extendStyles(styles, this._getExactOverlayY(position, originPoint, scrollPosition));\r\n            extendStyles(styles, this._getExactOverlayX(position, originPoint, scrollPosition));\r\n        }\r\n        else {\r\n            styles.position = 'static';\r\n        }\r\n        // Use a transform to apply the offsets. We do this because the `center` positions rely on\r\n        // being in the normal flex flow and setting a `top` / `left` at all will completely throw\r\n        // off the position. We also can't use margins, because they won't have an effect in some\r\n        // cases where the element doesn't have anything to \"push off of\". Finally, this works\r\n        // better both with flexible and non-flexible positioning.\r\n        /** @type {?} */\r\n        var transformString = '';\r\n        /** @type {?} */\r\n        var offsetX = this._getOffset(position, 'x');\r\n        /** @type {?} */\r\n        var offsetY = this._getOffset(position, 'y');\r\n        if (offsetX) {\r\n            transformString += \"translateX(\" + offsetX + \"px) \";\r\n        }\r\n        if (offsetY) {\r\n            transformString += \"translateY(\" + offsetY + \"px)\";\r\n        }\r\n        styles.transform = transformString.trim();\r\n        // If a maxWidth or maxHeight is specified on the overlay, we remove them. We do this because\r\n        // we need these values to both be set to \"100%\" for the automatic flexible sizing to work.\r\n        // The maxHeight and maxWidth are set on the boundingBox in order to enforce the constraint.\r\n        if (this._hasFlexibleDimensions && this._overlayRef.getConfig().maxHeight) {\r\n            styles.maxHeight = '';\r\n        }\r\n        if (this._hasFlexibleDimensions && this._overlayRef.getConfig().maxWidth) {\r\n            styles.maxWidth = '';\r\n        }\r\n        extendStyles(this._pane.style, styles);\r\n    };\r\n    /** Gets the exact top/bottom for the overlay when not using flexible sizing or when pushing. */\r\n    /**\r\n     * Gets the exact top/bottom for the overlay when not using flexible sizing or when pushing.\r\n     * @private\r\n     * @param {?} position\r\n     * @param {?} originPoint\r\n     * @param {?} scrollPosition\r\n     * @return {?}\r\n     */\r\n    FlexibleConnectedPositionStrategy.prototype._getExactOverlayY = /**\r\n     * Gets the exact top/bottom for the overlay when not using flexible sizing or when pushing.\r\n     * @private\r\n     * @param {?} position\r\n     * @param {?} originPoint\r\n     * @param {?} scrollPosition\r\n     * @return {?}\r\n     */\r\n    function (position, originPoint, scrollPosition) {\r\n        // Reset any existing styles. This is necessary in case the\r\n        // preferred position has changed since the last `apply`.\r\n        /** @type {?} */\r\n        var styles = (/** @type {?} */ ({ top: null, bottom: null }));\r\n        /** @type {?} */\r\n        var overlayPoint = this._getOverlayPoint(originPoint, this._overlayRect, position);\r\n        if (this._isPushed) {\r\n            overlayPoint = this._pushOverlayOnScreen(overlayPoint, this._overlayRect, scrollPosition);\r\n        }\r\n        /** @type {?} */\r\n        var virtualKeyboardOffset = this._overlayContainer.getContainerElement().getBoundingClientRect().top;\r\n        // Normally this would be zero, however when the overlay is attached to an input (e.g. in an\r\n        // autocomplete), mobile browsers will shift everything in order to put the input in the middle\r\n        // of the screen and to make space for the virtual keyboard. We need to account for this offset,\r\n        // otherwise our positioning will be thrown off.\r\n        overlayPoint.y -= virtualKeyboardOffset;\r\n        // We want to set either `top` or `bottom` based on whether the overlay wants to appear\r\n        // above or below the origin and the direction in which the element will expand.\r\n        if (position.overlayY === 'bottom') {\r\n            // When using `bottom`, we adjust the y position such that it is the distance\r\n            // from the bottom of the viewport rather than the top.\r\n            /** @type {?} */\r\n            var documentHeight = (/** @type {?} */ (this._document.documentElement)).clientHeight;\r\n            styles.bottom = documentHeight - (overlayPoint.y + this._overlayRect.height) + \"px\";\r\n        }\r\n        else {\r\n            styles.top = coerceCssPixelValue(overlayPoint.y);\r\n        }\r\n        return styles;\r\n    };\r\n    /** Gets the exact left/right for the overlay when not using flexible sizing or when pushing. */\r\n    /**\r\n     * Gets the exact left/right for the overlay when not using flexible sizing or when pushing.\r\n     * @private\r\n     * @param {?} position\r\n     * @param {?} originPoint\r\n     * @param {?} scrollPosition\r\n     * @return {?}\r\n     */\r\n    FlexibleConnectedPositionStrategy.prototype._getExactOverlayX = /**\r\n     * Gets the exact left/right for the overlay when not using flexible sizing or when pushing.\r\n     * @private\r\n     * @param {?} position\r\n     * @param {?} originPoint\r\n     * @param {?} scrollPosition\r\n     * @return {?}\r\n     */\r\n    function (position, originPoint, scrollPosition) {\r\n        // Reset any existing styles. This is necessary in case the preferred position has\r\n        // changed since the last `apply`.\r\n        /** @type {?} */\r\n        var styles = (/** @type {?} */ ({ left: null, right: null }));\r\n        /** @type {?} */\r\n        var overlayPoint = this._getOverlayPoint(originPoint, this._overlayRect, position);\r\n        if (this._isPushed) {\r\n            overlayPoint = this._pushOverlayOnScreen(overlayPoint, this._overlayRect, scrollPosition);\r\n        }\r\n        // We want to set either `left` or `right` based on whether the overlay wants to appear \"before\"\r\n        // or \"after\" the origin, which determines the direction in which the element will expand.\r\n        // For the horizontal axis, the meaning of \"before\" and \"after\" change based on whether the\r\n        // page is in RTL or LTR.\r\n        /** @type {?} */\r\n        var horizontalStyleProperty;\r\n        if (this._isRtl()) {\r\n            horizontalStyleProperty = position.overlayX === 'end' ? 'left' : 'right';\r\n        }\r\n        else {\r\n            horizontalStyleProperty = position.overlayX === 'end' ? 'right' : 'left';\r\n        }\r\n        // When we're setting `right`, we adjust the x position such that it is the distance\r\n        // from the right edge of the viewport rather than the left edge.\r\n        if (horizontalStyleProperty === 'right') {\r\n            /** @type {?} */\r\n            var documentWidth = (/** @type {?} */ (this._document.documentElement)).clientWidth;\r\n            styles.right = documentWidth - (overlayPoint.x + this._overlayRect.width) + \"px\";\r\n        }\r\n        else {\r\n            styles.left = coerceCssPixelValue(overlayPoint.x);\r\n        }\r\n        return styles;\r\n    };\r\n    /**\r\n     * Gets the view properties of the trigger and overlay, including whether they are clipped\r\n     * or completely outside the view of any of the strategy's scrollables.\r\n     */\r\n    /**\r\n     * Gets the view properties of the trigger and overlay, including whether they are clipped\r\n     * or completely outside the view of any of the strategy's scrollables.\r\n     * @private\r\n     * @return {?}\r\n     */\r\n    FlexibleConnectedPositionStrategy.prototype._getScrollVisibility = /**\r\n     * Gets the view properties of the trigger and overlay, including whether they are clipped\r\n     * or completely outside the view of any of the strategy's scrollables.\r\n     * @private\r\n     * @return {?}\r\n     */\r\n    function () {\r\n        // Note: needs fresh rects since the position could've changed.\r\n        /** @type {?} */\r\n        var originBounds = this._getOriginRect();\r\n        /** @type {?} */\r\n        var overlayBounds = this._pane.getBoundingClientRect();\r\n        // TODO(jelbourn): instead of needing all of the client rects for these scrolling containers\r\n        // every time, we should be able to use the scrollTop of the containers if the size of those\r\n        // containers hasn't changed.\r\n        /** @type {?} */\r\n        var scrollContainerBounds = this._scrollables.map((/**\r\n         * @param {?} scrollable\r\n         * @return {?}\r\n         */\r\n        function (scrollable) {\r\n            return scrollable.getElementRef().nativeElement.getBoundingClientRect();\r\n        }));\r\n        return {\r\n            isOriginClipped: isElementClippedByScrolling(originBounds, scrollContainerBounds),\r\n            isOriginOutsideView: isElementScrolledOutsideView(originBounds, scrollContainerBounds),\r\n            isOverlayClipped: isElementClippedByScrolling(overlayBounds, scrollContainerBounds),\r\n            isOverlayOutsideView: isElementScrolledOutsideView(overlayBounds, scrollContainerBounds),\r\n        };\r\n    };\r\n    /** Subtracts the amount that an element is overflowing on an axis from its length. */\r\n    /**\r\n     * Subtracts the amount that an element is overflowing on an axis from its length.\r\n     * @private\r\n     * @param {?} length\r\n     * @param {...?} overflows\r\n     * @return {?}\r\n     */\r\n    FlexibleConnectedPositionStrategy.prototype._subtractOverflows = /**\r\n     * Subtracts the amount that an element is overflowing on an axis from its length.\r\n     * @private\r\n     * @param {?} length\r\n     * @param {...?} overflows\r\n     * @return {?}\r\n     */\r\n    function (length) {\r\n        var overflows = [];\r\n        for (var _i = 1; _i < arguments.length; _i++) {\r\n            overflows[_i - 1] = arguments[_i];\r\n        }\r\n        return overflows.reduce((/**\r\n         * @param {?} currentValue\r\n         * @param {?} currentOverflow\r\n         * @return {?}\r\n         */\r\n        function (currentValue, currentOverflow) {\r\n            return currentValue - Math.max(currentOverflow, 0);\r\n        }), length);\r\n    };\r\n    /** Narrows the given viewport rect by the current _viewportMargin. */\r\n    /**\r\n     * Narrows the given viewport rect by the current _viewportMargin.\r\n     * @private\r\n     * @return {?}\r\n     */\r\n    FlexibleConnectedPositionStrategy.prototype._getNarrowedViewportRect = /**\r\n     * Narrows the given viewport rect by the current _viewportMargin.\r\n     * @private\r\n     * @return {?}\r\n     */\r\n    function () {\r\n        // We recalculate the viewport rect here ourselves, rather than using the ViewportRuler,\r\n        // because we want to use the `clientWidth` and `clientHeight` as the base. The difference\r\n        // being that the client properties don't include the scrollbar, as opposed to `innerWidth`\r\n        // and `innerHeight` that do. This is necessary, because the overlay container uses\r\n        // 100% `width` and `height` which don't include the scrollbar either.\r\n        /** @type {?} */\r\n        var width = (/** @type {?} */ (this._document.documentElement)).clientWidth;\r\n        /** @type {?} */\r\n        var height = (/** @type {?} */ (this._document.documentElement)).clientHeight;\r\n        /** @type {?} */\r\n        var scrollPosition = this._viewportRuler.getViewportScrollPosition();\r\n        return {\r\n            top: scrollPosition.top + this._viewportMargin,\r\n            left: scrollPosition.left + this._viewportMargin,\r\n            right: scrollPosition.left + width - this._viewportMargin,\r\n            bottom: scrollPosition.top + height - this._viewportMargin,\r\n            width: width - (2 * this._viewportMargin),\r\n            height: height - (2 * this._viewportMargin),\r\n        };\r\n    };\r\n    /** Whether the we're dealing with an RTL context */\r\n    /**\r\n     * Whether the we're dealing with an RTL context\r\n     * @private\r\n     * @return {?}\r\n     */\r\n    FlexibleConnectedPositionStrategy.prototype._isRtl = /**\r\n     * Whether the we're dealing with an RTL context\r\n     * @private\r\n     * @return {?}\r\n     */\r\n    function () {\r\n        return this._overlayRef.getDirection() === 'rtl';\r\n    };\r\n    /** Determines whether the overlay uses exact or flexible positioning. */\r\n    /**\r\n     * Determines whether the overlay uses exact or flexible positioning.\r\n     * @private\r\n     * @return {?}\r\n     */\r\n    FlexibleConnectedPositionStrategy.prototype._hasExactPosition = /**\r\n     * Determines whether the overlay uses exact or flexible positioning.\r\n     * @private\r\n     * @return {?}\r\n     */\r\n    function () {\r\n        return !this._hasFlexibleDimensions || this._isPushed;\r\n    };\r\n    /** Retrieves the offset of a position along the x or y axis. */\r\n    /**\r\n     * Retrieves the offset of a position along the x or y axis.\r\n     * @private\r\n     * @param {?} position\r\n     * @param {?} axis\r\n     * @return {?}\r\n     */\r\n    FlexibleConnectedPositionStrategy.prototype._getOffset = /**\r\n     * Retrieves the offset of a position along the x or y axis.\r\n     * @private\r\n     * @param {?} position\r\n     * @param {?} axis\r\n     * @return {?}\r\n     */\r\n    function (position, axis) {\r\n        if (axis === 'x') {\r\n            // We don't do something like `position['offset' + axis]` in\r\n            // order to avoid breking minifiers that rename properties.\r\n            return position.offsetX == null ? this._offsetX : position.offsetX;\r\n        }\r\n        return position.offsetY == null ? this._offsetY : position.offsetY;\r\n    };\r\n    /** Validates that the current position match the expected values. */\r\n    /**\r\n     * Validates that the current position match the expected values.\r\n     * @private\r\n     * @return {?}\r\n     */\r\n    FlexibleConnectedPositionStrategy.prototype._validatePositions = /**\r\n     * Validates that the current position match the expected values.\r\n     * @private\r\n     * @return {?}\r\n     */\r\n    function () {\r\n        if (!this._preferredPositions.length) {\r\n            throw Error('FlexibleConnectedPositionStrategy: At least one position is required.');\r\n        }\r\n        // TODO(crisbeto): remove these once Angular's template type\r\n        // checking is advanced enough to catch these cases.\r\n        this._preferredPositions.forEach((/**\r\n         * @param {?} pair\r\n         * @return {?}\r\n         */\r\n        function (pair) {\r\n            validateHorizontalPosition('originX', pair.originX);\r\n            validateVerticalPosition('originY', pair.originY);\r\n            validateHorizontalPosition('overlayX', pair.overlayX);\r\n            validateVerticalPosition('overlayY', pair.overlayY);\r\n        }));\r\n    };\r\n    /** Adds a single CSS class or an array of classes on the overlay panel. */\r\n    /**\r\n     * Adds a single CSS class or an array of classes on the overlay panel.\r\n     * @private\r\n     * @param {?} cssClasses\r\n     * @return {?}\r\n     */\r\n    FlexibleConnectedPositionStrategy.prototype._addPanelClasses = /**\r\n     * Adds a single CSS class or an array of classes on the overlay panel.\r\n     * @private\r\n     * @param {?} cssClasses\r\n     * @return {?}\r\n     */\r\n    function (cssClasses) {\r\n        var _this = this;\r\n        if (this._pane) {\r\n            coerceArray(cssClasses).forEach((/**\r\n             * @param {?} cssClass\r\n             * @return {?}\r\n             */\r\n            function (cssClass) {\r\n                if (cssClass !== '' && _this._appliedPanelClasses.indexOf(cssClass) === -1) {\r\n                    _this._appliedPanelClasses.push(cssClass);\r\n                    _this._pane.classList.add(cssClass);\r\n                }\r\n            }));\r\n        }\r\n    };\r\n    /** Clears the classes that the position strategy has applied from the overlay panel. */\r\n    /**\r\n     * Clears the classes that the position strategy has applied from the overlay panel.\r\n     * @private\r\n     * @return {?}\r\n     */\r\n    FlexibleConnectedPositionStrategy.prototype._clearPanelClasses = /**\r\n     * Clears the classes that the position strategy has applied from the overlay panel.\r\n     * @private\r\n     * @return {?}\r\n     */\r\n    function () {\r\n        var _this = this;\r\n        if (this._pane) {\r\n            this._appliedPanelClasses.forEach((/**\r\n             * @param {?} cssClass\r\n             * @return {?}\r\n             */\r\n            function (cssClass) {\r\n                _this._pane.classList.remove(cssClass);\r\n            }));\r\n            this._appliedPanelClasses = [];\r\n        }\r\n    };\r\n    /** Returns the ClientRect of the current origin. */\r\n    /**\r\n     * Returns the ClientRect of the current origin.\r\n     * @private\r\n     * @return {?}\r\n     */\r\n    FlexibleConnectedPositionStrategy.prototype._getOriginRect = /**\r\n     * Returns the ClientRect of the current origin.\r\n     * @private\r\n     * @return {?}\r\n     */\r\n    function () {\r\n        /** @type {?} */\r\n        var origin = this._origin;\r\n        if (origin instanceof ElementRef) {\r\n            return origin.nativeElement.getBoundingClientRect();\r\n        }\r\n        if (origin instanceof HTMLElement) {\r\n            return origin.getBoundingClientRect();\r\n        }\r\n        /** @type {?} */\r\n        var width = origin.width || 0;\r\n        /** @type {?} */\r\n        var height = origin.height || 0;\r\n        // If the origin is a point, return a client rect as if it was a 0x0 element at the point.\r\n        return {\r\n            top: origin.y,\r\n            bottom: origin.y + height,\r\n            left: origin.x,\r\n            right: origin.x + width,\r\n            height: height,\r\n            width: width\r\n        };\r\n    };\r\n    return FlexibleConnectedPositionStrategy;\r\n}());\r\n/**\r\n * Shallow-extends a stylesheet object with another stylesheet object.\r\n * @param {?} dest\r\n * @param {?} source\r\n * @return {?}\r\n */\r\nfunction extendStyles(dest, source) {\r\n    for (var key in source) {\r\n        if (source.hasOwnProperty(key)) {\r\n            dest[key] = source[key];\r\n        }\r\n    }\r\n    return dest;\r\n}\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n/**\r\n * A strategy for positioning overlays. Using this strategy, an overlay is given an\r\n * implicit position relative to some origin element. The relative position is defined in terms of\r\n * a point on the origin element that is connected to a point on the overlay element. For example,\r\n * a basic dropdown is connecting the bottom-left corner of the origin to the top-left corner\r\n * of the overlay.\r\n * @deprecated Use `FlexibleConnectedPositionStrategy` instead.\r\n * \\@breaking-change 8.0.0\r\n */\r\nvar  /**\r\n * A strategy for positioning overlays. Using this strategy, an overlay is given an\r\n * implicit position relative to some origin element. The relative position is defined in terms of\r\n * a point on the origin element that is connected to a point on the overlay element. For example,\r\n * a basic dropdown is connecting the bottom-left corner of the origin to the top-left corner\r\n * of the overlay.\r\n * @deprecated Use `FlexibleConnectedPositionStrategy` instead.\r\n * \\@breaking-change 8.0.0\r\n */\r\nConnectedPositionStrategy = /** @class */ (function () {\r\n    function ConnectedPositionStrategy(originPos, overlayPos, connectedTo, viewportRuler, document, platform, overlayContainer) {\r\n        /**\r\n         * Ordered list of preferred positions, from most to least desirable.\r\n         */\r\n        this._preferredPositions = [];\r\n        // Since the `ConnectedPositionStrategy` is deprecated and we don't want to maintain\r\n        // the extra logic, we create an instance of the positioning strategy that has some\r\n        // defaults that make it behave as the old position strategy and to which we'll\r\n        // proxy all of the API calls.\r\n        this._positionStrategy = new FlexibleConnectedPositionStrategy(connectedTo, viewportRuler, document, platform, overlayContainer)\r\n            .withFlexibleDimensions(false)\r\n            .withPush(false)\r\n            .withViewportMargin(0);\r\n        this.withFallbackPosition(originPos, overlayPos);\r\n    }\r\n    Object.defineProperty(ConnectedPositionStrategy.prototype, \"_isRtl\", {\r\n        /** Whether the we're dealing with an RTL context */\r\n        get: /**\r\n         * Whether the we're dealing with an RTL context\r\n         * @return {?}\r\n         */\r\n        function () {\r\n            return this._overlayRef.getDirection() === 'rtl';\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(ConnectedPositionStrategy.prototype, \"onPositionChange\", {\r\n        /** Emits an event when the connection point changes. */\r\n        get: /**\r\n         * Emits an event when the connection point changes.\r\n         * @return {?}\r\n         */\r\n        function () {\r\n            return this._positionStrategy.positionChanges;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(ConnectedPositionStrategy.prototype, \"positions\", {\r\n        /** Ordered list of preferred positions, from most to least desirable. */\r\n        get: /**\r\n         * Ordered list of preferred positions, from most to least desirable.\r\n         * @return {?}\r\n         */\r\n        function () {\r\n            return this._preferredPositions;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /** Attach this position strategy to an overlay. */\r\n    /**\r\n     * Attach this position strategy to an overlay.\r\n     * @param {?} overlayRef\r\n     * @return {?}\r\n     */\r\n    ConnectedPositionStrategy.prototype.attach = /**\r\n     * Attach this position strategy to an overlay.\r\n     * @param {?} overlayRef\r\n     * @return {?}\r\n     */\r\n    function (overlayRef) {\r\n        this._overlayRef = overlayRef;\r\n        this._positionStrategy.attach(overlayRef);\r\n        if (this._direction) {\r\n            overlayRef.setDirection(this._direction);\r\n            this._direction = null;\r\n        }\r\n    };\r\n    /** Disposes all resources used by the position strategy. */\r\n    /**\r\n     * Disposes all resources used by the position strategy.\r\n     * @return {?}\r\n     */\r\n    ConnectedPositionStrategy.prototype.dispose = /**\r\n     * Disposes all resources used by the position strategy.\r\n     * @return {?}\r\n     */\r\n    function () {\r\n        this._positionStrategy.dispose();\r\n    };\r\n    /** @docs-private */\r\n    /**\r\n     * \\@docs-private\r\n     * @return {?}\r\n     */\r\n    ConnectedPositionStrategy.prototype.detach = /**\r\n     * \\@docs-private\r\n     * @return {?}\r\n     */\r\n    function () {\r\n        this._positionStrategy.detach();\r\n    };\r\n    /**\r\n     * Updates the position of the overlay element, using whichever preferred position relative\r\n     * to the origin fits on-screen.\r\n     * @docs-private\r\n     */\r\n    /**\r\n     * Updates the position of the overlay element, using whichever preferred position relative\r\n     * to the origin fits on-screen.\r\n     * \\@docs-private\r\n     * @return {?}\r\n     */\r\n    ConnectedPositionStrategy.prototype.apply = /**\r\n     * Updates the position of the overlay element, using whichever preferred position relative\r\n     * to the origin fits on-screen.\r\n     * \\@docs-private\r\n     * @return {?}\r\n     */\r\n    function () {\r\n        this._positionStrategy.apply();\r\n    };\r\n    /**\r\n     * Re-positions the overlay element with the trigger in its last calculated position,\r\n     * even if a position higher in the \"preferred positions\" list would now fit. This\r\n     * allows one to re-align the panel without changing the orientation of the panel.\r\n     */\r\n    /**\r\n     * Re-positions the overlay element with the trigger in its last calculated position,\r\n     * even if a position higher in the \"preferred positions\" list would now fit. This\r\n     * allows one to re-align the panel without changing the orientation of the panel.\r\n     * @return {?}\r\n     */\r\n    ConnectedPositionStrategy.prototype.recalculateLastPosition = /**\r\n     * Re-positions the overlay element with the trigger in its last calculated position,\r\n     * even if a position higher in the \"preferred positions\" list would now fit. This\r\n     * allows one to re-align the panel without changing the orientation of the panel.\r\n     * @return {?}\r\n     */\r\n    function () {\r\n        this._positionStrategy.reapplyLastPosition();\r\n    };\r\n    /**\r\n     * Sets the list of Scrollable containers that host the origin element so that\r\n     * on reposition we can evaluate if it or the overlay has been clipped or outside view. Every\r\n     * Scrollable must be an ancestor element of the strategy's origin element.\r\n     */\r\n    /**\r\n     * Sets the list of Scrollable containers that host the origin element so that\r\n     * on reposition we can evaluate if it or the overlay has been clipped or outside view. Every\r\n     * Scrollable must be an ancestor element of the strategy's origin element.\r\n     * @param {?} scrollables\r\n     * @return {?}\r\n     */\r\n    ConnectedPositionStrategy.prototype.withScrollableContainers = /**\r\n     * Sets the list of Scrollable containers that host the origin element so that\r\n     * on reposition we can evaluate if it or the overlay has been clipped or outside view. Every\r\n     * Scrollable must be an ancestor element of the strategy's origin element.\r\n     * @param {?} scrollables\r\n     * @return {?}\r\n     */\r\n    function (scrollables) {\r\n        this._positionStrategy.withScrollableContainers(scrollables);\r\n    };\r\n    /**\r\n     * Adds a new preferred fallback position.\r\n     * @param originPos\r\n     * @param overlayPos\r\n     */\r\n    /**\r\n     * Adds a new preferred fallback position.\r\n     * @template THIS\r\n     * @this {THIS}\r\n     * @param {?} originPos\r\n     * @param {?} overlayPos\r\n     * @param {?=} offsetX\r\n     * @param {?=} offsetY\r\n     * @return {THIS}\r\n     */\r\n    ConnectedPositionStrategy.prototype.withFallbackPosition = /**\r\n     * Adds a new preferred fallback position.\r\n     * @template THIS\r\n     * @this {THIS}\r\n     * @param {?} originPos\r\n     * @param {?} overlayPos\r\n     * @param {?=} offsetX\r\n     * @param {?=} offsetY\r\n     * @return {THIS}\r\n     */\r\n    function (originPos, overlayPos, offsetX, offsetY) {\r\n        /** @type {?} */\r\n        var position = new ConnectionPositionPair(originPos, overlayPos, offsetX, offsetY);\r\n        (/** @type {?} */ (this))._preferredPositions.push(position);\r\n        (/** @type {?} */ (this))._positionStrategy.withPositions((/** @type {?} */ (this))._preferredPositions);\r\n        return (/** @type {?} */ (this));\r\n    };\r\n    /**\r\n     * Sets the layout direction so the overlay's position can be adjusted to match.\r\n     * @param dir New layout direction.\r\n     */\r\n    /**\r\n     * Sets the layout direction so the overlay's position can be adjusted to match.\r\n     * @template THIS\r\n     * @this {THIS}\r\n     * @param {?} dir New layout direction.\r\n     * @return {THIS}\r\n     */\r\n    ConnectedPositionStrategy.prototype.withDirection = /**\r\n     * Sets the layout direction so the overlay's position can be adjusted to match.\r\n     * @template THIS\r\n     * @this {THIS}\r\n     * @param {?} dir New layout direction.\r\n     * @return {THIS}\r\n     */\r\n    function (dir) {\r\n        // Since the direction might be declared before the strategy is attached,\r\n        // we save the value in a temporary property and we'll transfer it to the\r\n        // overlay ref on attachment.\r\n        if ((/** @type {?} */ (this))._overlayRef) {\r\n            (/** @type {?} */ (this))._overlayRef.setDirection(dir);\r\n        }\r\n        else {\r\n            (/** @type {?} */ (this))._direction = dir;\r\n        }\r\n        return (/** @type {?} */ (this));\r\n    };\r\n    /**\r\n     * Sets an offset for the overlay's connection point on the x-axis\r\n     * @param offset New offset in the X axis.\r\n     */\r\n    /**\r\n     * Sets an offset for the overlay's connection point on the x-axis\r\n     * @template THIS\r\n     * @this {THIS}\r\n     * @param {?} offset New offset in the X axis.\r\n     * @return {THIS}\r\n     */\r\n    ConnectedPositionStrategy.prototype.withOffsetX = /**\r\n     * Sets an offset for the overlay's connection point on the x-axis\r\n     * @template THIS\r\n     * @this {THIS}\r\n     * @param {?} offset New offset in the X axis.\r\n     * @return {THIS}\r\n     */\r\n    function (offset) {\r\n        (/** @type {?} */ (this))._positionStrategy.withDefaultOffsetX(offset);\r\n        return (/** @type {?} */ (this));\r\n    };\r\n    /**\r\n     * Sets an offset for the overlay's connection point on the y-axis\r\n     * @param  offset New offset in the Y axis.\r\n     */\r\n    /**\r\n     * Sets an offset for the overlay's connection point on the y-axis\r\n     * @template THIS\r\n     * @this {THIS}\r\n     * @param {?} offset New offset in the Y axis.\r\n     * @return {THIS}\r\n     */\r\n    ConnectedPositionStrategy.prototype.withOffsetY = /**\r\n     * Sets an offset for the overlay's connection point on the y-axis\r\n     * @template THIS\r\n     * @this {THIS}\r\n     * @param {?} offset New offset in the Y axis.\r\n     * @return {THIS}\r\n     */\r\n    function (offset) {\r\n        (/** @type {?} */ (this))._positionStrategy.withDefaultOffsetY(offset);\r\n        return (/** @type {?} */ (this));\r\n    };\r\n    /**\r\n     * Sets whether the overlay's position should be locked in after it is positioned\r\n     * initially. When an overlay is locked in, it won't attempt to reposition itself\r\n     * when the position is re-applied (e.g. when the user scrolls away).\r\n     * @param isLocked Whether the overlay should locked in.\r\n     */\r\n    /**\r\n     * Sets whether the overlay's position should be locked in after it is positioned\r\n     * initially. When an overlay is locked in, it won't attempt to reposition itself\r\n     * when the position is re-applied (e.g. when the user scrolls away).\r\n     * @template THIS\r\n     * @this {THIS}\r\n     * @param {?} isLocked Whether the overlay should locked in.\r\n     * @return {THIS}\r\n     */\r\n    ConnectedPositionStrategy.prototype.withLockedPosition = /**\r\n     * Sets whether the overlay's position should be locked in after it is positioned\r\n     * initially. When an overlay is locked in, it won't attempt to reposition itself\r\n     * when the position is re-applied (e.g. when the user scrolls away).\r\n     * @template THIS\r\n     * @this {THIS}\r\n     * @param {?} isLocked Whether the overlay should locked in.\r\n     * @return {THIS}\r\n     */\r\n    function (isLocked) {\r\n        (/** @type {?} */ (this))._positionStrategy.withLockedPosition(isLocked);\r\n        return (/** @type {?} */ (this));\r\n    };\r\n    /**\r\n     * Overwrites the current set of positions with an array of new ones.\r\n     * @param positions Position pairs to be set on the strategy.\r\n     */\r\n    /**\r\n     * Overwrites the current set of positions with an array of new ones.\r\n     * @template THIS\r\n     * @this {THIS}\r\n     * @param {?} positions Position pairs to be set on the strategy.\r\n     * @return {THIS}\r\n     */\r\n    ConnectedPositionStrategy.prototype.withPositions = /**\r\n     * Overwrites the current set of positions with an array of new ones.\r\n     * @template THIS\r\n     * @this {THIS}\r\n     * @param {?} positions Position pairs to be set on the strategy.\r\n     * @return {THIS}\r\n     */\r\n    function (positions) {\r\n        (/** @type {?} */ (this))._preferredPositions = positions.slice();\r\n        (/** @type {?} */ (this))._positionStrategy.withPositions((/** @type {?} */ (this))._preferredPositions);\r\n        return (/** @type {?} */ (this));\r\n    };\r\n    /**\r\n     * Sets the origin element, relative to which to position the overlay.\r\n     * @param origin Reference to the new origin element.\r\n     */\r\n    /**\r\n     * Sets the origin element, relative to which to position the overlay.\r\n     * @template THIS\r\n     * @this {THIS}\r\n     * @param {?} origin Reference to the new origin element.\r\n     * @return {THIS}\r\n     */\r\n    ConnectedPositionStrategy.prototype.setOrigin = /**\r\n     * Sets the origin element, relative to which to position the overlay.\r\n     * @template THIS\r\n     * @this {THIS}\r\n     * @param {?} origin Reference to the new origin element.\r\n     * @return {THIS}\r\n     */\r\n    function (origin) {\r\n        (/** @type {?} */ (this))._positionStrategy.setOrigin(origin);\r\n        return (/** @type {?} */ (this));\r\n    };\r\n    return ConnectedPositionStrategy;\r\n}());\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n\r\n/**\r\n * Class to be added to the overlay pane wrapper.\r\n * @type {?}\r\n */\r\nvar wrapperClass = 'cdk-global-overlay-wrapper';\r\n/**\r\n * A strategy for positioning overlays. Using this strategy, an overlay is given an\r\n * explicit position relative to the browser's viewport. We use flexbox, instead of\r\n * transforms, in order to avoid issues with subpixel rendering which can cause the\r\n * element to become blurry.\r\n */\r\nvar  /**\r\n * A strategy for positioning overlays. Using this strategy, an overlay is given an\r\n * explicit position relative to the browser's viewport. We use flexbox, instead of\r\n * transforms, in order to avoid issues with subpixel rendering which can cause the\r\n * element to become blurry.\r\n */\r\nGlobalPositionStrategy = /** @class */ (function () {\r\n    function GlobalPositionStrategy() {\r\n        this._cssPosition = 'static';\r\n        this._topOffset = '';\r\n        this._bottomOffset = '';\r\n        this._leftOffset = '';\r\n        this._rightOffset = '';\r\n        this._alignItems = '';\r\n        this._justifyContent = '';\r\n        this._width = '';\r\n        this._height = '';\r\n    }\r\n    /**\r\n     * @param {?} overlayRef\r\n     * @return {?}\r\n     */\r\n    GlobalPositionStrategy.prototype.attach = /**\r\n     * @param {?} overlayRef\r\n     * @return {?}\r\n     */\r\n    function (overlayRef) {\r\n        /** @type {?} */\r\n        var config = overlayRef.getConfig();\r\n        this._overlayRef = overlayRef;\r\n        if (this._width && !config.width) {\r\n            overlayRef.updateSize({ width: this._width });\r\n        }\r\n        if (this._height && !config.height) {\r\n            overlayRef.updateSize({ height: this._height });\r\n        }\r\n        overlayRef.hostElement.classList.add(wrapperClass);\r\n        this._isDisposed = false;\r\n    };\r\n    /**\r\n     * Sets the top position of the overlay. Clears any previously set vertical position.\r\n     * @param value New top offset.\r\n     */\r\n    /**\r\n     * Sets the top position of the overlay. Clears any previously set vertical position.\r\n     * @template THIS\r\n     * @this {THIS}\r\n     * @param {?=} value New top offset.\r\n     * @return {THIS}\r\n     */\r\n    GlobalPositionStrategy.prototype.top = /**\r\n     * Sets the top position of the overlay. Clears any previously set vertical position.\r\n     * @template THIS\r\n     * @this {THIS}\r\n     * @param {?=} value New top offset.\r\n     * @return {THIS}\r\n     */\r\n    function (value) {\r\n        if (value === void 0) { value = ''; }\r\n        (/** @type {?} */ (this))._bottomOffset = '';\r\n        (/** @type {?} */ (this))._topOffset = value;\r\n        (/** @type {?} */ (this))._alignItems = 'flex-start';\r\n        return (/** @type {?} */ (this));\r\n    };\r\n    /**\r\n     * Sets the left position of the overlay. Clears any previously set horizontal position.\r\n     * @param value New left offset.\r\n     */\r\n    /**\r\n     * Sets the left position of the overlay. Clears any previously set horizontal position.\r\n     * @template THIS\r\n     * @this {THIS}\r\n     * @param {?=} value New left offset.\r\n     * @return {THIS}\r\n     */\r\n    GlobalPositionStrategy.prototype.left = /**\r\n     * Sets the left position of the overlay. Clears any previously set horizontal position.\r\n     * @template THIS\r\n     * @this {THIS}\r\n     * @param {?=} value New left offset.\r\n     * @return {THIS}\r\n     */\r\n    function (value) {\r\n        if (value === void 0) { value = ''; }\r\n        (/** @type {?} */ (this))._rightOffset = '';\r\n        (/** @type {?} */ (this))._leftOffset = value;\r\n        (/** @type {?} */ (this))._justifyContent = 'flex-start';\r\n        return (/** @type {?} */ (this));\r\n    };\r\n    /**\r\n     * Sets the bottom position of the overlay. Clears any previously set vertical position.\r\n     * @param value New bottom offset.\r\n     */\r\n    /**\r\n     * Sets the bottom position of the overlay. Clears any previously set vertical position.\r\n     * @template THIS\r\n     * @this {THIS}\r\n     * @param {?=} value New bottom offset.\r\n     * @return {THIS}\r\n     */\r\n    GlobalPositionStrategy.prototype.bottom = /**\r\n     * Sets the bottom position of the overlay. Clears any previously set vertical position.\r\n     * @template THIS\r\n     * @this {THIS}\r\n     * @param {?=} value New bottom offset.\r\n     * @return {THIS}\r\n     */\r\n    function (value) {\r\n        if (value === void 0) { value = ''; }\r\n        (/** @type {?} */ (this))._topOffset = '';\r\n        (/** @type {?} */ (this))._bottomOffset = value;\r\n        (/** @type {?} */ (this))._alignItems = 'flex-end';\r\n        return (/** @type {?} */ (this));\r\n    };\r\n    /**\r\n     * Sets the right position of the overlay. Clears any previously set horizontal position.\r\n     * @param value New right offset.\r\n     */\r\n    /**\r\n     * Sets the right position of the overlay. Clears any previously set horizontal position.\r\n     * @template THIS\r\n     * @this {THIS}\r\n     * @param {?=} value New right offset.\r\n     * @return {THIS}\r\n     */\r\n    GlobalPositionStrategy.prototype.right = /**\r\n     * Sets the right position of the overlay. Clears any previously set horizontal position.\r\n     * @template THIS\r\n     * @this {THIS}\r\n     * @param {?=} value New right offset.\r\n     * @return {THIS}\r\n     */\r\n    function (value) {\r\n        if (value === void 0) { value = ''; }\r\n        (/** @type {?} */ (this))._leftOffset = '';\r\n        (/** @type {?} */ (this))._rightOffset = value;\r\n        (/** @type {?} */ (this))._justifyContent = 'flex-end';\r\n        return (/** @type {?} */ (this));\r\n    };\r\n    /**\r\n     * Sets the overlay width and clears any previously set width.\r\n     * @param value New width for the overlay\r\n     * @deprecated Pass the `width` through the `OverlayConfig`.\r\n     * @breaking-change 8.0.0\r\n     */\r\n    /**\r\n     * Sets the overlay width and clears any previously set width.\r\n     * @deprecated Pass the `width` through the `OverlayConfig`.\r\n     * \\@breaking-change 8.0.0\r\n     * @template THIS\r\n     * @this {THIS}\r\n     * @param {?=} value New width for the overlay\r\n     * @return {THIS}\r\n     */\r\n    GlobalPositionStrategy.prototype.width = /**\r\n     * Sets the overlay width and clears any previously set width.\r\n     * @deprecated Pass the `width` through the `OverlayConfig`.\r\n     * \\@breaking-change 8.0.0\r\n     * @template THIS\r\n     * @this {THIS}\r\n     * @param {?=} value New width for the overlay\r\n     * @return {THIS}\r\n     */\r\n    function (value) {\r\n        if (value === void 0) { value = ''; }\r\n        if ((/** @type {?} */ (this))._overlayRef) {\r\n            (/** @type {?} */ (this))._overlayRef.updateSize({ width: value });\r\n        }\r\n        else {\r\n            (/** @type {?} */ (this))._width = value;\r\n        }\r\n        return (/** @type {?} */ (this));\r\n    };\r\n    /**\r\n     * Sets the overlay height and clears any previously set height.\r\n     * @param value New height for the overlay\r\n     * @deprecated Pass the `height` through the `OverlayConfig`.\r\n     * @breaking-change 8.0.0\r\n     */\r\n    /**\r\n     * Sets the overlay height and clears any previously set height.\r\n     * @deprecated Pass the `height` through the `OverlayConfig`.\r\n     * \\@breaking-change 8.0.0\r\n     * @template THIS\r\n     * @this {THIS}\r\n     * @param {?=} value New height for the overlay\r\n     * @return {THIS}\r\n     */\r\n    GlobalPositionStrategy.prototype.height = /**\r\n     * Sets the overlay height and clears any previously set height.\r\n     * @deprecated Pass the `height` through the `OverlayConfig`.\r\n     * \\@breaking-change 8.0.0\r\n     * @template THIS\r\n     * @this {THIS}\r\n     * @param {?=} value New height for the overlay\r\n     * @return {THIS}\r\n     */\r\n    function (value) {\r\n        if (value === void 0) { value = ''; }\r\n        if ((/** @type {?} */ (this))._overlayRef) {\r\n            (/** @type {?} */ (this))._overlayRef.updateSize({ height: value });\r\n        }\r\n        else {\r\n            (/** @type {?} */ (this))._height = value;\r\n        }\r\n        return (/** @type {?} */ (this));\r\n    };\r\n    /**\r\n     * Centers the overlay horizontally with an optional offset.\r\n     * Clears any previously set horizontal position.\r\n     *\r\n     * @param offset Overlay offset from the horizontal center.\r\n     */\r\n    /**\r\n     * Centers the overlay horizontally with an optional offset.\r\n     * Clears any previously set horizontal position.\r\n     *\r\n     * @template THIS\r\n     * @this {THIS}\r\n     * @param {?=} offset Overlay offset from the horizontal center.\r\n     * @return {THIS}\r\n     */\r\n    GlobalPositionStrategy.prototype.centerHorizontally = /**\r\n     * Centers the overlay horizontally with an optional offset.\r\n     * Clears any previously set horizontal position.\r\n     *\r\n     * @template THIS\r\n     * @this {THIS}\r\n     * @param {?=} offset Overlay offset from the horizontal center.\r\n     * @return {THIS}\r\n     */\r\n    function (offset) {\r\n        if (offset === void 0) { offset = ''; }\r\n        (/** @type {?} */ (this)).left(offset);\r\n        (/** @type {?} */ (this))._justifyContent = 'center';\r\n        return (/** @type {?} */ (this));\r\n    };\r\n    /**\r\n     * Centers the overlay vertically with an optional offset.\r\n     * Clears any previously set vertical position.\r\n     *\r\n     * @param offset Overlay offset from the vertical center.\r\n     */\r\n    /**\r\n     * Centers the overlay vertically with an optional offset.\r\n     * Clears any previously set vertical position.\r\n     *\r\n     * @template THIS\r\n     * @this {THIS}\r\n     * @param {?=} offset Overlay offset from the vertical center.\r\n     * @return {THIS}\r\n     */\r\n    GlobalPositionStrategy.prototype.centerVertically = /**\r\n     * Centers the overlay vertically with an optional offset.\r\n     * Clears any previously set vertical position.\r\n     *\r\n     * @template THIS\r\n     * @this {THIS}\r\n     * @param {?=} offset Overlay offset from the vertical center.\r\n     * @return {THIS}\r\n     */\r\n    function (offset) {\r\n        if (offset === void 0) { offset = ''; }\r\n        (/** @type {?} */ (this)).top(offset);\r\n        (/** @type {?} */ (this))._alignItems = 'center';\r\n        return (/** @type {?} */ (this));\r\n    };\r\n    /**\r\n     * Apply the position to the element.\r\n     * @docs-private\r\n     */\r\n    /**\r\n     * Apply the position to the element.\r\n     * \\@docs-private\r\n     * @return {?}\r\n     */\r\n    GlobalPositionStrategy.prototype.apply = /**\r\n     * Apply the position to the element.\r\n     * \\@docs-private\r\n     * @return {?}\r\n     */\r\n    function () {\r\n        // Since the overlay ref applies the strategy asynchronously, it could\r\n        // have been disposed before it ends up being applied. If that is the\r\n        // case, we shouldn't do anything.\r\n        if (!this._overlayRef || !this._overlayRef.hasAttached()) {\r\n            return;\r\n        }\r\n        /** @type {?} */\r\n        var styles = this._overlayRef.overlayElement.style;\r\n        /** @type {?} */\r\n        var parentStyles = this._overlayRef.hostElement.style;\r\n        /** @type {?} */\r\n        var config = this._overlayRef.getConfig();\r\n        styles.position = this._cssPosition;\r\n        styles.marginLeft = config.width === '100%' ? '0' : this._leftOffset;\r\n        styles.marginTop = config.height === '100%' ? '0' : this._topOffset;\r\n        styles.marginBottom = this._bottomOffset;\r\n        styles.marginRight = this._rightOffset;\r\n        if (config.width === '100%') {\r\n            parentStyles.justifyContent = 'flex-start';\r\n        }\r\n        else if (this._justifyContent === 'center') {\r\n            parentStyles.justifyContent = 'center';\r\n        }\r\n        else if (this._overlayRef.getConfig().direction === 'rtl') {\r\n            // In RTL the browser will invert `flex-start` and `flex-end` automatically, but we\r\n            // don't want that because our positioning is explicitly `left` and `right`, hence\r\n            // why we do another inversion to ensure that the overlay stays in the same position.\r\n            // TODO: reconsider this if we add `start` and `end` methods.\r\n            if (this._justifyContent === 'flex-start') {\r\n                parentStyles.justifyContent = 'flex-end';\r\n            }\r\n            else if (this._justifyContent === 'flex-end') {\r\n                parentStyles.justifyContent = 'flex-start';\r\n            }\r\n        }\r\n        else {\r\n            parentStyles.justifyContent = this._justifyContent;\r\n        }\r\n        parentStyles.alignItems = config.height === '100%' ? 'flex-start' : this._alignItems;\r\n    };\r\n    /**\r\n     * Cleans up the DOM changes from the position strategy.\r\n     * @docs-private\r\n     */\r\n    /**\r\n     * Cleans up the DOM changes from the position strategy.\r\n     * \\@docs-private\r\n     * @return {?}\r\n     */\r\n    GlobalPositionStrategy.prototype.dispose = /**\r\n     * Cleans up the DOM changes from the position strategy.\r\n     * \\@docs-private\r\n     * @return {?}\r\n     */\r\n    function () {\r\n        if (this._isDisposed || !this._overlayRef) {\r\n            return;\r\n        }\r\n        /** @type {?} */\r\n        var styles = this._overlayRef.overlayElement.style;\r\n        /** @type {?} */\r\n        var parent = this._overlayRef.hostElement;\r\n        /** @type {?} */\r\n        var parentStyles = parent.style;\r\n        parent.classList.remove(wrapperClass);\r\n        parentStyles.justifyContent = parentStyles.alignItems = styles.marginTop =\r\n            styles.marginBottom = styles.marginLeft = styles.marginRight = styles.position = '';\r\n        this._overlayRef = (/** @type {?} */ (null));\r\n        this._isDisposed = true;\r\n    };\r\n    return GlobalPositionStrategy;\r\n}());\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n/**\r\n * Builder for overlay position strategy.\r\n */\r\nvar OverlayPositionBuilder = /** @class */ (function () {\r\n    function OverlayPositionBuilder(_viewportRuler, _document, _platform, _overlayContainer) {\r\n        this._viewportRuler = _viewportRuler;\r\n        this._document = _document;\r\n        this._platform = _platform;\r\n        this._overlayContainer = _overlayContainer;\r\n    }\r\n    /**\r\n     * Creates a global position strategy.\r\n     */\r\n    /**\r\n     * Creates a global position strategy.\r\n     * @return {?}\r\n     */\r\n    OverlayPositionBuilder.prototype.global = /**\r\n     * Creates a global position strategy.\r\n     * @return {?}\r\n     */\r\n    function () {\r\n        return new GlobalPositionStrategy();\r\n    };\r\n    /**\r\n     * Creates a relative position strategy.\r\n     * @param elementRef\r\n     * @param originPos\r\n     * @param overlayPos\r\n     * @deprecated Use `flexibleConnectedTo` instead.\r\n     * @breaking-change 8.0.0\r\n     */\r\n    /**\r\n     * Creates a relative position strategy.\r\n     * @deprecated Use `flexibleConnectedTo` instead.\r\n     * \\@breaking-change 8.0.0\r\n     * @param {?} elementRef\r\n     * @param {?} originPos\r\n     * @param {?} overlayPos\r\n     * @return {?}\r\n     */\r\n    OverlayPositionBuilder.prototype.connectedTo = /**\r\n     * Creates a relative position strategy.\r\n     * @deprecated Use `flexibleConnectedTo` instead.\r\n     * \\@breaking-change 8.0.0\r\n     * @param {?} elementRef\r\n     * @param {?} originPos\r\n     * @param {?} overlayPos\r\n     * @return {?}\r\n     */\r\n    function (elementRef, originPos, overlayPos) {\r\n        return new ConnectedPositionStrategy(originPos, overlayPos, elementRef, this._viewportRuler, this._document, this._platform, this._overlayContainer);\r\n    };\r\n    /**\r\n     * Creates a flexible position strategy.\r\n     * @param origin Origin relative to which to position the overlay.\r\n     */\r\n    /**\r\n     * Creates a flexible position strategy.\r\n     * @param {?} origin Origin relative to which to position the overlay.\r\n     * @return {?}\r\n     */\r\n    OverlayPositionBuilder.prototype.flexibleConnectedTo = /**\r\n     * Creates a flexible position strategy.\r\n     * @param {?} origin Origin relative to which to position the overlay.\r\n     * @return {?}\r\n     */\r\n    function (origin) {\r\n        return new FlexibleConnectedPositionStrategy(origin, this._viewportRuler, this._document, this._platform, this._overlayContainer);\r\n    };\r\n    OverlayPositionBuilder.decorators = [\r\n        { type: Injectable, args: [{ providedIn: 'root' },] },\r\n    ];\r\n    /** @nocollapse */\r\n    OverlayPositionBuilder.ctorParameters = function () { return [\r\n        { type: ViewportRuler },\r\n        { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },\r\n        { type: Platform },\r\n        { type: OverlayContainer }\r\n    ]; };\r\n    /** @nocollapse */ OverlayPositionBuilder.ngInjectableDef = ɵɵdefineInjectable({ factory: function OverlayPositionBuilder_Factory() { return new OverlayPositionBuilder(ɵɵinject(ViewportRuler), ɵɵinject(DOCUMENT), ɵɵinject(Platform), ɵɵinject(OverlayContainer)); }, token: OverlayPositionBuilder, providedIn: \"root\" });\r\n    return OverlayPositionBuilder;\r\n}());\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n/**\r\n * Next overlay unique ID.\r\n * @type {?}\r\n */\r\nvar nextUniqueId = 0;\r\n// Note that Overlay is *not* scoped to the app root because the ComponentFactoryResolver\r\n// it needs is different based on where OverlayModule is imported.\r\n/**\r\n * Service to create Overlays. Overlays are dynamically added pieces of floating UI, meant to be\r\n * used as a low-level building block for other components. Dialogs, tooltips, menus,\r\n * selects, etc. can all be built using overlays. The service should primarily be used by authors\r\n * of re-usable components rather than developers building end-user applications.\r\n *\r\n * An overlay *is* a PortalOutlet, so any kind of Portal can be loaded into one.\r\n */\r\nvar Overlay = /** @class */ (function () {\r\n    function Overlay(scrollStrategies, _overlayContainer, _componentFactoryResolver, _positionBuilder, _keyboardDispatcher, _injector, _ngZone, _document, _directionality, _location) {\r\n        this.scrollStrategies = scrollStrategies;\r\n        this._overlayContainer = _overlayContainer;\r\n        this._componentFactoryResolver = _componentFactoryResolver;\r\n        this._positionBuilder = _positionBuilder;\r\n        this._keyboardDispatcher = _keyboardDispatcher;\r\n        this._injector = _injector;\r\n        this._ngZone = _ngZone;\r\n        this._document = _document;\r\n        this._directionality = _directionality;\r\n        this._location = _location;\r\n    }\r\n    /**\r\n     * Creates an overlay.\r\n     * @param config Configuration applied to the overlay.\r\n     * @returns Reference to the created overlay.\r\n     */\r\n    /**\r\n     * Creates an overlay.\r\n     * @param {?=} config Configuration applied to the overlay.\r\n     * @return {?} Reference to the created overlay.\r\n     */\r\n    Overlay.prototype.create = /**\r\n     * Creates an overlay.\r\n     * @param {?=} config Configuration applied to the overlay.\r\n     * @return {?} Reference to the created overlay.\r\n     */\r\n    function (config) {\r\n        /** @type {?} */\r\n        var host = this._createHostElement();\r\n        /** @type {?} */\r\n        var pane = this._createPaneElement(host);\r\n        /** @type {?} */\r\n        var portalOutlet = this._createPortalOutlet(pane);\r\n        /** @type {?} */\r\n        var overlayConfig = new OverlayConfig(config);\r\n        overlayConfig.direction = overlayConfig.direction || this._directionality.value;\r\n        return new OverlayRef(portalOutlet, host, pane, overlayConfig, this._ngZone, this._keyboardDispatcher, this._document, this._location);\r\n    };\r\n    /**\r\n     * Gets a position builder that can be used, via fluent API,\r\n     * to construct and configure a position strategy.\r\n     * @returns An overlay position builder.\r\n     */\r\n    /**\r\n     * Gets a position builder that can be used, via fluent API,\r\n     * to construct and configure a position strategy.\r\n     * @return {?} An overlay position builder.\r\n     */\r\n    Overlay.prototype.position = /**\r\n     * Gets a position builder that can be used, via fluent API,\r\n     * to construct and configure a position strategy.\r\n     * @return {?} An overlay position builder.\r\n     */\r\n    function () {\r\n        return this._positionBuilder;\r\n    };\r\n    /**\r\n     * Creates the DOM element for an overlay and appends it to the overlay container.\r\n     * @returns Newly-created pane element\r\n     */\r\n    /**\r\n     * Creates the DOM element for an overlay and appends it to the overlay container.\r\n     * @private\r\n     * @param {?} host\r\n     * @return {?} Newly-created pane element\r\n     */\r\n    Overlay.prototype._createPaneElement = /**\r\n     * Creates the DOM element for an overlay and appends it to the overlay container.\r\n     * @private\r\n     * @param {?} host\r\n     * @return {?} Newly-created pane element\r\n     */\r\n    function (host) {\r\n        /** @type {?} */\r\n        var pane = this._document.createElement('div');\r\n        pane.id = \"cdk-overlay-\" + nextUniqueId++;\r\n        pane.classList.add('cdk-overlay-pane');\r\n        host.appendChild(pane);\r\n        return pane;\r\n    };\r\n    /**\r\n     * Creates the host element that wraps around an overlay\r\n     * and can be used for advanced positioning.\r\n     * @returns Newly-create host element.\r\n     */\r\n    /**\r\n     * Creates the host element that wraps around an overlay\r\n     * and can be used for advanced positioning.\r\n     * @private\r\n     * @return {?} Newly-create host element.\r\n     */\r\n    Overlay.prototype._createHostElement = /**\r\n     * Creates the host element that wraps around an overlay\r\n     * and can be used for advanced positioning.\r\n     * @private\r\n     * @return {?} Newly-create host element.\r\n     */\r\n    function () {\r\n        /** @type {?} */\r\n        var host = this._document.createElement('div');\r\n        this._overlayContainer.getContainerElement().appendChild(host);\r\n        return host;\r\n    };\r\n    /**\r\n     * Create a DomPortalOutlet into which the overlay content can be loaded.\r\n     * @param pane The DOM element to turn into a portal outlet.\r\n     * @returns A portal outlet for the given DOM element.\r\n     */\r\n    /**\r\n     * Create a DomPortalOutlet into which the overlay content can be loaded.\r\n     * @private\r\n     * @param {?} pane The DOM element to turn into a portal outlet.\r\n     * @return {?} A portal outlet for the given DOM element.\r\n     */\r\n    Overlay.prototype._createPortalOutlet = /**\r\n     * Create a DomPortalOutlet into which the overlay content can be loaded.\r\n     * @private\r\n     * @param {?} pane The DOM element to turn into a portal outlet.\r\n     * @return {?} A portal outlet for the given DOM element.\r\n     */\r\n    function (pane) {\r\n        // We have to resolve the ApplicationRef later in order to allow people\r\n        // to use overlay-based providers during app initialization.\r\n        if (!this._appRef) {\r\n            this._appRef = this._injector.get(ApplicationRef);\r\n        }\r\n        return new DomPortalOutlet(pane, this._componentFactoryResolver, this._appRef, this._injector);\r\n    };\r\n    Overlay.decorators = [\r\n        { type: Injectable },\r\n    ];\r\n    /** @nocollapse */\r\n    Overlay.ctorParameters = function () { return [\r\n        { type: ScrollStrategyOptions },\r\n        { type: OverlayContainer },\r\n        { type: ComponentFactoryResolver },\r\n        { type: OverlayPositionBuilder },\r\n        { type: OverlayKeyboardDispatcher },\r\n        { type: Injector },\r\n        { type: NgZone },\r\n        { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },\r\n        { type: Directionality },\r\n        { type: Location, decorators: [{ type: Optional }] }\r\n    ]; };\r\n    return Overlay;\r\n}());\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n/**\r\n * Default set of positions for the overlay. Follows the behavior of a dropdown.\r\n * @type {?}\r\n */\r\nvar defaultPositionList = [\r\n    {\r\n        originX: 'start',\r\n        originY: 'bottom',\r\n        overlayX: 'start',\r\n        overlayY: 'top'\r\n    },\r\n    {\r\n        originX: 'start',\r\n        originY: 'top',\r\n        overlayX: 'start',\r\n        overlayY: 'bottom'\r\n    },\r\n    {\r\n        originX: 'end',\r\n        originY: 'top',\r\n        overlayX: 'end',\r\n        overlayY: 'bottom'\r\n    },\r\n    {\r\n        originX: 'end',\r\n        originY: 'bottom',\r\n        overlayX: 'end',\r\n        overlayY: 'top'\r\n    }\r\n];\r\n/**\r\n * Injection token that determines the scroll handling while the connected overlay is open.\r\n * @type {?}\r\n */\r\nvar CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY = new InjectionToken('cdk-connected-overlay-scroll-strategy');\r\n/**\r\n * Directive applied to an element to make it usable as an origin for an Overlay using a\r\n * ConnectedPositionStrategy.\r\n */\r\nvar CdkOverlayOrigin = /** @class */ (function () {\r\n    function CdkOverlayOrigin(elementRef) {\r\n        this.elementRef = elementRef;\r\n    }\r\n    CdkOverlayOrigin.decorators = [\r\n        { type: Directive, args: [{\r\n                    selector: '[cdk-overlay-origin], [overlay-origin], [cdkOverlayOrigin]',\r\n                    exportAs: 'cdkOverlayOrigin',\r\n                },] },\r\n    ];\r\n    /** @nocollapse */\r\n    CdkOverlayOrigin.ctorParameters = function () { return [\r\n        { type: ElementRef }\r\n    ]; };\r\n    return CdkOverlayOrigin;\r\n}());\r\n/**\r\n * Directive to facilitate declarative creation of an\r\n * Overlay using a FlexibleConnectedPositionStrategy.\r\n */\r\nvar CdkConnectedOverlay = /** @class */ (function () {\r\n    // TODO(jelbourn): inputs for size, scroll behavior, animation, etc.\r\n    function CdkConnectedOverlay(_overlay, templateRef, viewContainerRef, scrollStrategyFactory, _dir) {\r\n        this._overlay = _overlay;\r\n        this._dir = _dir;\r\n        this._hasBackdrop = false;\r\n        this._lockPosition = false;\r\n        this._growAfterOpen = false;\r\n        this._flexibleDimensions = false;\r\n        this._push = false;\r\n        this._backdropSubscription = Subscription.EMPTY;\r\n        /**\r\n         * Margin between the overlay and the viewport edges.\r\n         */\r\n        this.viewportMargin = 0;\r\n        /**\r\n         * Whether the overlay is open.\r\n         */\r\n        this.open = false;\r\n        /**\r\n         * Event emitted when the backdrop is clicked.\r\n         */\r\n        this.backdropClick = new EventEmitter();\r\n        /**\r\n         * Event emitted when the position has changed.\r\n         */\r\n        this.positionChange = new EventEmitter();\r\n        /**\r\n         * Event emitted when the overlay has been attached.\r\n         */\r\n        this.attach = new EventEmitter();\r\n        /**\r\n         * Event emitted when the overlay has been detached.\r\n         */\r\n        this.detach = new EventEmitter();\r\n        /**\r\n         * Emits when there are keyboard events that are targeted at the overlay.\r\n         */\r\n        this.overlayKeydown = new EventEmitter();\r\n        this._templatePortal = new TemplatePortal(templateRef, viewContainerRef);\r\n        this._scrollStrategyFactory = scrollStrategyFactory;\r\n        this.scrollStrategy = this._scrollStrategyFactory();\r\n    }\r\n    Object.defineProperty(CdkConnectedOverlay.prototype, \"offsetX\", {\r\n        /** The offset in pixels for the overlay connection point on the x-axis */\r\n        get: /**\r\n         * The offset in pixels for the overlay connection point on the x-axis\r\n         * @return {?}\r\n         */\r\n        function () { return this._offsetX; },\r\n        set: /**\r\n         * @param {?} offsetX\r\n         * @return {?}\r\n         */\r\n        function (offsetX) {\r\n            this._offsetX = offsetX;\r\n            if (this._position) {\r\n                this._updatePositionStrategy(this._position);\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(CdkConnectedOverlay.prototype, \"offsetY\", {\r\n        /** The offset in pixels for the overlay connection point on the y-axis */\r\n        get: /**\r\n         * The offset in pixels for the overlay connection point on the y-axis\r\n         * @return {?}\r\n         */\r\n        function () { return this._offsetY; },\r\n        set: /**\r\n         * @param {?} offsetY\r\n         * @return {?}\r\n         */\r\n        function (offsetY) {\r\n            this._offsetY = offsetY;\r\n            if (this._position) {\r\n                this._updatePositionStrategy(this._position);\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(CdkConnectedOverlay.prototype, \"hasBackdrop\", {\r\n        /** Whether or not the overlay should attach a backdrop. */\r\n        get: /**\r\n         * Whether or not the overlay should attach a backdrop.\r\n         * @return {?}\r\n         */\r\n        function () { return this._hasBackdrop; },\r\n        set: /**\r\n         * @param {?} value\r\n         * @return {?}\r\n         */\r\n        function (value) { this._hasBackdrop = coerceBooleanProperty(value); },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(CdkConnectedOverlay.prototype, \"lockPosition\", {\r\n        /** Whether or not the overlay should be locked when scrolling. */\r\n        get: /**\r\n         * Whether or not the overlay should be locked when scrolling.\r\n         * @return {?}\r\n         */\r\n        function () { return this._lockPosition; },\r\n        set: /**\r\n         * @param {?} value\r\n         * @return {?}\r\n         */\r\n        function (value) { this._lockPosition = coerceBooleanProperty(value); },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(CdkConnectedOverlay.prototype, \"flexibleDimensions\", {\r\n        /** Whether the overlay's width and height can be constrained to fit within the viewport. */\r\n        get: /**\r\n         * Whether the overlay's width and height can be constrained to fit within the viewport.\r\n         * @return {?}\r\n         */\r\n        function () { return this._flexibleDimensions; },\r\n        set: /**\r\n         * @param {?} value\r\n         * @return {?}\r\n         */\r\n        function (value) {\r\n            this._flexibleDimensions = coerceBooleanProperty(value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(CdkConnectedOverlay.prototype, \"growAfterOpen\", {\r\n        /** Whether the overlay can grow after the initial open when flexible positioning is turned on. */\r\n        get: /**\r\n         * Whether the overlay can grow after the initial open when flexible positioning is turned on.\r\n         * @return {?}\r\n         */\r\n        function () { return this._growAfterOpen; },\r\n        set: /**\r\n         * @param {?} value\r\n         * @return {?}\r\n         */\r\n        function (value) { this._growAfterOpen = coerceBooleanProperty(value); },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(CdkConnectedOverlay.prototype, \"push\", {\r\n        /** Whether the overlay can be pushed on-screen if none of the provided positions fit. */\r\n        get: /**\r\n         * Whether the overlay can be pushed on-screen if none of the provided positions fit.\r\n         * @return {?}\r\n         */\r\n        function () { return this._push; },\r\n        set: /**\r\n         * @param {?} value\r\n         * @return {?}\r\n         */\r\n        function (value) { this._push = coerceBooleanProperty(value); },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(CdkConnectedOverlay.prototype, \"overlayRef\", {\r\n        /** The associated overlay reference. */\r\n        get: /**\r\n         * The associated overlay reference.\r\n         * @return {?}\r\n         */\r\n        function () {\r\n            return this._overlayRef;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(CdkConnectedOverlay.prototype, \"dir\", {\r\n        /** The element's layout direction. */\r\n        get: /**\r\n         * The element's layout direction.\r\n         * @return {?}\r\n         */\r\n        function () {\r\n            return this._dir ? this._dir.value : 'ltr';\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * @return {?}\r\n     */\r\n    CdkConnectedOverlay.prototype.ngOnDestroy = /**\r\n     * @return {?}\r\n     */\r\n    function () {\r\n        if (this._overlayRef) {\r\n            this._overlayRef.dispose();\r\n        }\r\n        this._backdropSubscription.unsubscribe();\r\n    };\r\n    /**\r\n     * @param {?} changes\r\n     * @return {?}\r\n     */\r\n    CdkConnectedOverlay.prototype.ngOnChanges = /**\r\n     * @param {?} changes\r\n     * @return {?}\r\n     */\r\n    function (changes) {\r\n        if (this._position) {\r\n            this._updatePositionStrategy(this._position);\r\n            this._overlayRef.updateSize({\r\n                width: this.width,\r\n                minWidth: this.minWidth,\r\n                height: this.height,\r\n                minHeight: this.minHeight,\r\n            });\r\n            if (changes['origin'] && this.open) {\r\n                this._position.apply();\r\n            }\r\n        }\r\n        if (changes['open']) {\r\n            this.open ? this._attachOverlay() : this._detachOverlay();\r\n        }\r\n    };\r\n    /** Creates an overlay */\r\n    /**\r\n     * Creates an overlay\r\n     * @private\r\n     * @return {?}\r\n     */\r\n    CdkConnectedOverlay.prototype._createOverlay = /**\r\n     * Creates an overlay\r\n     * @private\r\n     * @return {?}\r\n     */\r\n    function () {\r\n        var _this = this;\r\n        if (!this.positions || !this.positions.length) {\r\n            this.positions = defaultPositionList;\r\n        }\r\n        this._overlayRef = this._overlay.create(this._buildConfig());\r\n        this._overlayRef.keydownEvents().subscribe((/**\r\n         * @param {?} event\r\n         * @return {?}\r\n         */\r\n        function (event) {\r\n            _this.overlayKeydown.next(event);\r\n            if (event.keyCode === ESCAPE && !hasModifierKey(event)) {\r\n                event.preventDefault();\r\n                _this._detachOverlay();\r\n            }\r\n        }));\r\n    };\r\n    /** Builds the overlay config based on the directive's inputs */\r\n    /**\r\n     * Builds the overlay config based on the directive's inputs\r\n     * @private\r\n     * @return {?}\r\n     */\r\n    CdkConnectedOverlay.prototype._buildConfig = /**\r\n     * Builds the overlay config based on the directive's inputs\r\n     * @private\r\n     * @return {?}\r\n     */\r\n    function () {\r\n        /** @type {?} */\r\n        var positionStrategy = this._position = this._createPositionStrategy();\r\n        /** @type {?} */\r\n        var overlayConfig = new OverlayConfig({\r\n            direction: this._dir,\r\n            positionStrategy: positionStrategy,\r\n            scrollStrategy: this.scrollStrategy,\r\n            hasBackdrop: this.hasBackdrop\r\n        });\r\n        if (this.width || this.width === 0) {\r\n            overlayConfig.width = this.width;\r\n        }\r\n        if (this.height || this.height === 0) {\r\n            overlayConfig.height = this.height;\r\n        }\r\n        if (this.minWidth || this.minWidth === 0) {\r\n            overlayConfig.minWidth = this.minWidth;\r\n        }\r\n        if (this.minHeight || this.minHeight === 0) {\r\n            overlayConfig.minHeight = this.minHeight;\r\n        }\r\n        if (this.backdropClass) {\r\n            overlayConfig.backdropClass = this.backdropClass;\r\n        }\r\n        if (this.panelClass) {\r\n            overlayConfig.panelClass = this.panelClass;\r\n        }\r\n        return overlayConfig;\r\n    };\r\n    /** Updates the state of a position strategy, based on the values of the directive inputs. */\r\n    /**\r\n     * Updates the state of a position strategy, based on the values of the directive inputs.\r\n     * @private\r\n     * @param {?} positionStrategy\r\n     * @return {?}\r\n     */\r\n    CdkConnectedOverlay.prototype._updatePositionStrategy = /**\r\n     * Updates the state of a position strategy, based on the values of the directive inputs.\r\n     * @private\r\n     * @param {?} positionStrategy\r\n     * @return {?}\r\n     */\r\n    function (positionStrategy) {\r\n        var _this = this;\r\n        /** @type {?} */\r\n        var positions = this.positions.map((/**\r\n         * @param {?} currentPosition\r\n         * @return {?}\r\n         */\r\n        function (currentPosition) { return ({\r\n            originX: currentPosition.originX,\r\n            originY: currentPosition.originY,\r\n            overlayX: currentPosition.overlayX,\r\n            overlayY: currentPosition.overlayY,\r\n            offsetX: currentPosition.offsetX || _this.offsetX,\r\n            offsetY: currentPosition.offsetY || _this.offsetY,\r\n            panelClass: currentPosition.panelClass || undefined,\r\n        }); }));\r\n        return positionStrategy\r\n            .setOrigin(this.origin.elementRef)\r\n            .withPositions(positions)\r\n            .withFlexibleDimensions(this.flexibleDimensions)\r\n            .withPush(this.push)\r\n            .withGrowAfterOpen(this.growAfterOpen)\r\n            .withViewportMargin(this.viewportMargin)\r\n            .withLockedPosition(this.lockPosition);\r\n    };\r\n    /** Returns the position strategy of the overlay to be set on the overlay config */\r\n    /**\r\n     * Returns the position strategy of the overlay to be set on the overlay config\r\n     * @private\r\n     * @return {?}\r\n     */\r\n    CdkConnectedOverlay.prototype._createPositionStrategy = /**\r\n     * Returns the position strategy of the overlay to be set on the overlay config\r\n     * @private\r\n     * @return {?}\r\n     */\r\n    function () {\r\n        var _this = this;\r\n        /** @type {?} */\r\n        var strategy = this._overlay.position().flexibleConnectedTo(this.origin.elementRef);\r\n        this._updatePositionStrategy(strategy);\r\n        strategy.positionChanges.subscribe((/**\r\n         * @param {?} p\r\n         * @return {?}\r\n         */\r\n        function (p) { return _this.positionChange.emit(p); }));\r\n        return strategy;\r\n    };\r\n    /** Attaches the overlay and subscribes to backdrop clicks if backdrop exists */\r\n    /**\r\n     * Attaches the overlay and subscribes to backdrop clicks if backdrop exists\r\n     * @private\r\n     * @return {?}\r\n     */\r\n    CdkConnectedOverlay.prototype._attachOverlay = /**\r\n     * Attaches the overlay and subscribes to backdrop clicks if backdrop exists\r\n     * @private\r\n     * @return {?}\r\n     */\r\n    function () {\r\n        var _this = this;\r\n        if (!this._overlayRef) {\r\n            this._createOverlay();\r\n        }\r\n        else {\r\n            // Update the overlay size, in case the directive's inputs have changed\r\n            this._overlayRef.getConfig().hasBackdrop = this.hasBackdrop;\r\n        }\r\n        if (!this._overlayRef.hasAttached()) {\r\n            this._overlayRef.attach(this._templatePortal);\r\n            this.attach.emit();\r\n        }\r\n        if (this.hasBackdrop) {\r\n            this._backdropSubscription = this._overlayRef.backdropClick().subscribe((/**\r\n             * @param {?} event\r\n             * @return {?}\r\n             */\r\n            function (event) {\r\n                _this.backdropClick.emit(event);\r\n            }));\r\n        }\r\n        else {\r\n            this._backdropSubscription.unsubscribe();\r\n        }\r\n    };\r\n    /** Detaches the overlay and unsubscribes to backdrop clicks if backdrop exists */\r\n    /**\r\n     * Detaches the overlay and unsubscribes to backdrop clicks if backdrop exists\r\n     * @private\r\n     * @return {?}\r\n     */\r\n    CdkConnectedOverlay.prototype._detachOverlay = /**\r\n     * Detaches the overlay and unsubscribes to backdrop clicks if backdrop exists\r\n     * @private\r\n     * @return {?}\r\n     */\r\n    function () {\r\n        if (this._overlayRef) {\r\n            this._overlayRef.detach();\r\n            this.detach.emit();\r\n        }\r\n        this._backdropSubscription.unsubscribe();\r\n    };\r\n    CdkConnectedOverlay.decorators = [\r\n        { type: Directive, args: [{\r\n                    selector: '[cdk-connected-overlay], [connected-overlay], [cdkConnectedOverlay]',\r\n                    exportAs: 'cdkConnectedOverlay'\r\n                },] },\r\n    ];\r\n    /** @nocollapse */\r\n    CdkConnectedOverlay.ctorParameters = function () { return [\r\n        { type: Overlay },\r\n        { type: TemplateRef },\r\n        { type: ViewContainerRef },\r\n        { type: undefined, decorators: [{ type: Inject, args: [CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY,] }] },\r\n        { type: Directionality, decorators: [{ type: Optional }] }\r\n    ]; };\r\n    CdkConnectedOverlay.propDecorators = {\r\n        origin: [{ type: Input, args: ['cdkConnectedOverlayOrigin',] }],\r\n        positions: [{ type: Input, args: ['cdkConnectedOverlayPositions',] }],\r\n        offsetX: [{ type: Input, args: ['cdkConnectedOverlayOffsetX',] }],\r\n        offsetY: [{ type: Input, args: ['cdkConnectedOverlayOffsetY',] }],\r\n        width: [{ type: Input, args: ['cdkConnectedOverlayWidth',] }],\r\n        height: [{ type: Input, args: ['cdkConnectedOverlayHeight',] }],\r\n        minWidth: [{ type: Input, args: ['cdkConnectedOverlayMinWidth',] }],\r\n        minHeight: [{ type: Input, args: ['cdkConnectedOverlayMinHeight',] }],\r\n        backdropClass: [{ type: Input, args: ['cdkConnectedOverlayBackdropClass',] }],\r\n        panelClass: [{ type: Input, args: ['cdkConnectedOverlayPanelClass',] }],\r\n        viewportMargin: [{ type: Input, args: ['cdkConnectedOverlayViewportMargin',] }],\r\n        scrollStrategy: [{ type: Input, args: ['cdkConnectedOverlayScrollStrategy',] }],\r\n        open: [{ type: Input, args: ['cdkConnectedOverlayOpen',] }],\r\n        hasBackdrop: [{ type: Input, args: ['cdkConnectedOverlayHasBackdrop',] }],\r\n        lockPosition: [{ type: Input, args: ['cdkConnectedOverlayLockPosition',] }],\r\n        flexibleDimensions: [{ type: Input, args: ['cdkConnectedOverlayFlexibleDimensions',] }],\r\n        growAfterOpen: [{ type: Input, args: ['cdkConnectedOverlayGrowAfterOpen',] }],\r\n        push: [{ type: Input, args: ['cdkConnectedOverlayPush',] }],\r\n        backdropClick: [{ type: Output }],\r\n        positionChange: [{ type: Output }],\r\n        attach: [{ type: Output }],\r\n        detach: [{ type: Output }],\r\n        overlayKeydown: [{ type: Output }]\r\n    };\r\n    return CdkConnectedOverlay;\r\n}());\r\n/**\r\n * \\@docs-private\r\n * @param {?} overlay\r\n * @return {?}\r\n */\r\nfunction CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay) {\r\n    return (/**\r\n     * @return {?}\r\n     */\r\n    function () { return overlay.scrollStrategies.reposition(); });\r\n}\r\n/**\r\n * \\@docs-private\r\n * @type {?}\r\n */\r\nvar CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER = {\r\n    provide: CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY,\r\n    deps: [Overlay],\r\n    useFactory: CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER_FACTORY,\r\n};\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\nvar OverlayModule = /** @class */ (function () {\r\n    function OverlayModule() {\r\n    }\r\n    OverlayModule.decorators = [\r\n        { type: NgModule, args: [{\r\n                    imports: [BidiModule, PortalModule, ScrollingModule],\r\n                    exports: [CdkConnectedOverlay, CdkOverlayOrigin, ScrollingModule],\r\n                    declarations: [CdkConnectedOverlay, CdkOverlayOrigin],\r\n                    providers: [\r\n                        Overlay,\r\n                        CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER,\r\n                    ],\r\n                },] },\r\n    ];\r\n    return OverlayModule;\r\n}());\r\n/**\r\n * @deprecated Use `OverlayModule` instead.\r\n * \\@breaking-change 8.0.0\r\n * \\@docs-private\r\n * @type {?}\r\n */\r\nvar OVERLAY_PROVIDERS = [\r\n    Overlay,\r\n    OverlayPositionBuilder,\r\n    OVERLAY_KEYBOARD_DISPATCHER_PROVIDER,\r\n    VIEWPORT_RULER_PROVIDER,\r\n    OVERLAY_CONTAINER_PROVIDER,\r\n    CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER,\r\n];\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n/**\r\n * Alternative to OverlayContainer that supports correct displaying of overlay elements in\r\n * Fullscreen mode\r\n * https://developer.mozilla.org/en-US/docs/Web/API/Element/requestFullScreen\r\n *\r\n * Should be provided in the root component.\r\n */\r\nvar FullscreenOverlayContainer = /** @class */ (function (_super) {\r\n    __extends(FullscreenOverlayContainer, _super);\r\n    function FullscreenOverlayContainer(_document) {\r\n        return _super.call(this, _document) || this;\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    FullscreenOverlayContainer.prototype.ngOnDestroy = /**\r\n     * @return {?}\r\n     */\r\n    function () {\r\n        _super.prototype.ngOnDestroy.call(this);\r\n        if (this._fullScreenEventName && this._fullScreenListener) {\r\n            this._document.removeEventListener(this._fullScreenEventName, this._fullScreenListener);\r\n        }\r\n    };\r\n    /**\r\n     * @protected\r\n     * @return {?}\r\n     */\r\n    FullscreenOverlayContainer.prototype._createContainer = /**\r\n     * @protected\r\n     * @return {?}\r\n     */\r\n    function () {\r\n        var _this = this;\r\n        _super.prototype._createContainer.call(this);\r\n        this._adjustParentForFullscreenChange();\r\n        this._addFullscreenChangeListener((/**\r\n         * @return {?}\r\n         */\r\n        function () { return _this._adjustParentForFullscreenChange(); }));\r\n    };\r\n    /**\r\n     * @private\r\n     * @return {?}\r\n     */\r\n    FullscreenOverlayContainer.prototype._adjustParentForFullscreenChange = /**\r\n     * @private\r\n     * @return {?}\r\n     */\r\n    function () {\r\n        if (!this._containerElement) {\r\n            return;\r\n        }\r\n        /** @type {?} */\r\n        var fullscreenElement = this.getFullscreenElement();\r\n        /** @type {?} */\r\n        var parent = fullscreenElement || this._document.body;\r\n        parent.appendChild(this._containerElement);\r\n    };\r\n    /**\r\n     * @private\r\n     * @param {?} fn\r\n     * @return {?}\r\n     */\r\n    FullscreenOverlayContainer.prototype._addFullscreenChangeListener = /**\r\n     * @private\r\n     * @param {?} fn\r\n     * @return {?}\r\n     */\r\n    function (fn) {\r\n        /** @type {?} */\r\n        var eventName = this._getEventName();\r\n        if (eventName) {\r\n            if (this._fullScreenListener) {\r\n                this._document.removeEventListener(eventName, this._fullScreenListener);\r\n            }\r\n            this._document.addEventListener(eventName, fn);\r\n            this._fullScreenListener = fn;\r\n        }\r\n    };\r\n    /**\r\n     * @private\r\n     * @return {?}\r\n     */\r\n    FullscreenOverlayContainer.prototype._getEventName = /**\r\n     * @private\r\n     * @return {?}\r\n     */\r\n    function () {\r\n        if (!this._fullScreenEventName) {\r\n            /** @type {?} */\r\n            var _document = (/** @type {?} */ (this._document));\r\n            if (_document.fullscreenEnabled) {\r\n                this._fullScreenEventName = 'fullscreenchange';\r\n            }\r\n            else if (_document.webkitFullscreenEnabled) {\r\n                this._fullScreenEventName = 'webkitfullscreenchange';\r\n            }\r\n            else if (_document.mozFullScreenEnabled) {\r\n                this._fullScreenEventName = 'mozfullscreenchange';\r\n            }\r\n            else if (_document.msFullscreenEnabled) {\r\n                this._fullScreenEventName = 'MSFullscreenChange';\r\n            }\r\n        }\r\n        return this._fullScreenEventName;\r\n    };\r\n    /**\r\n     * When the page is put into fullscreen mode, a specific element is specified.\r\n     * Only that element and its children are visible when in fullscreen mode.\r\n     */\r\n    /**\r\n     * When the page is put into fullscreen mode, a specific element is specified.\r\n     * Only that element and its children are visible when in fullscreen mode.\r\n     * @return {?}\r\n     */\r\n    FullscreenOverlayContainer.prototype.getFullscreenElement = /**\r\n     * When the page is put into fullscreen mode, a specific element is specified.\r\n     * Only that element and its children are visible when in fullscreen mode.\r\n     * @return {?}\r\n     */\r\n    function () {\r\n        /** @type {?} */\r\n        var _document = (/** @type {?} */ (this._document));\r\n        return _document.fullscreenElement ||\r\n            _document.webkitFullscreenElement ||\r\n            _document.mozFullScreenElement ||\r\n            _document.msFullscreenElement ||\r\n            null;\r\n    };\r\n    FullscreenOverlayContainer.decorators = [\r\n        { type: Injectable, args: [{ providedIn: 'root' },] },\r\n    ];\r\n    /** @nocollapse */\r\n    FullscreenOverlayContainer.ctorParameters = function () { return [\r\n        { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] }\r\n    ]; };\r\n    /** @nocollapse */ FullscreenOverlayContainer.ngInjectableDef = ɵɵdefineInjectable({ factory: function FullscreenOverlayContainer_Factory() { return new FullscreenOverlayContainer(ɵɵinject(DOCUMENT)); }, token: FullscreenOverlayContainer, providedIn: \"root\" });\r\n    return FullscreenOverlayContainer;\r\n}(OverlayContainer));\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n\r\nexport { Overlay, OverlayContainer, CdkOverlayOrigin, CdkConnectedOverlay, FullscreenOverlayContainer, OverlayRef, OverlayKeyboardDispatcher, OverlayPositionBuilder, GlobalPositionStrategy, ConnectedPositionStrategy, FlexibleConnectedPositionStrategy, OverlayConfig, validateVerticalPosition, validateHorizontalPosition, ConnectionPositionPair, ScrollingVisibility, ConnectedOverlayPositionChange, ScrollStrategyOptions, RepositionScrollStrategy, CloseScrollStrategy, NoopScrollStrategy, BlockScrollStrategy, OverlayModule, OVERLAY_PROVIDERS, OVERLAY_KEYBOARD_DISPATCHER_PROVIDER as ɵg, OVERLAY_KEYBOARD_DISPATCHER_PROVIDER_FACTORY as ɵf, OVERLAY_CONTAINER_PROVIDER as ɵb, OVERLAY_CONTAINER_PROVIDER_FACTORY as ɵa, CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY as ɵc, CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER as ɵe, CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER_FACTORY as ɵd };\r\n\r\n"]}