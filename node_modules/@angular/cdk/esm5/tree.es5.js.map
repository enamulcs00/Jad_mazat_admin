{"version":3,"sources":["v:/jad-admin-go/mazat_admin_panel/node_modules/@angular/cdk/esm5/tree.es5.js"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA0BA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;KA4WK,AAKC;;;;;;;;;;;;;;;;;wDAKG;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;KA+BJ,AAQC;;;;;;;;;;;;;;2EAIG;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;MAqXH,AAgBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;cAYA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;0CAgJoC,AAYpC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;yIAQA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;MAsJA,AAeA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;cAaA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;MA2JA,AAKA;;;;;;;;;;;;;;;;;;;;;;;;;;;qGAYA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;MA8DA,AAGA;;;;;;;;;;;;;;;;;;;;;;cASA;;;;;;;;;;;;;;;;;;;;KAoBD;;;;;;;;;;;;;;;;;;;;;;;;mNAQC","file":"tree.es5.js","sourcesContent":["/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nimport { SelectionModel, isDataSource } from '@angular/cdk/collections';\r\nimport { __extends } from 'tslib';\r\nimport { Observable, BehaviorSubject, of, Subject } from 'rxjs';\r\nimport { take, filter, takeUntil } from 'rxjs/operators';\r\nimport { Directive, Inject, InjectionToken, Optional, ViewContainerRef, TemplateRef, ChangeDetectionStrategy, ChangeDetectorRef, Component, ContentChildren, ElementRef, Input, IterableDiffers, ViewChild, ViewEncapsulation, Renderer2, HostListener, NgModule } from '@angular/core';\r\nimport { Directionality } from '@angular/cdk/bidi';\r\nimport { coerceNumberProperty, coerceBooleanProperty } from '@angular/cdk/coercion';\r\nimport { FocusMonitor } from '@angular/cdk/a11y';\r\nimport { CommonModule } from '@angular/common';\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n/**\r\n * Base tree control. It has basic toggle/expand/collapse operations on a single data node.\r\n * @abstract\r\n * @template T\r\n */\r\nvar  /**\r\n * Base tree control. It has basic toggle/expand/collapse operations on a single data node.\r\n * @abstract\r\n * @template T\r\n */\r\nBaseTreeControl = /** @class */ (function () {\r\n    function BaseTreeControl() {\r\n        /**\r\n         * A selection model with multi-selection to track expansion status.\r\n         */\r\n        this.expansionModel = new SelectionModel(true);\r\n    }\r\n    /** Toggles one single data node's expanded/collapsed state. */\r\n    /**\r\n     * Toggles one single data node's expanded/collapsed state.\r\n     * @param {?} dataNode\r\n     * @return {?}\r\n     */\r\n    BaseTreeControl.prototype.toggle = /**\r\n     * Toggles one single data node's expanded/collapsed state.\r\n     * @param {?} dataNode\r\n     * @return {?}\r\n     */\r\n    function (dataNode) {\r\n        this.expansionModel.toggle(dataNode);\r\n    };\r\n    /** Expands one single data node. */\r\n    /**\r\n     * Expands one single data node.\r\n     * @param {?} dataNode\r\n     * @return {?}\r\n     */\r\n    BaseTreeControl.prototype.expand = /**\r\n     * Expands one single data node.\r\n     * @param {?} dataNode\r\n     * @return {?}\r\n     */\r\n    function (dataNode) {\r\n        this.expansionModel.select(dataNode);\r\n    };\r\n    /** Collapses one single data node. */\r\n    /**\r\n     * Collapses one single data node.\r\n     * @param {?} dataNode\r\n     * @return {?}\r\n     */\r\n    BaseTreeControl.prototype.collapse = /**\r\n     * Collapses one single data node.\r\n     * @param {?} dataNode\r\n     * @return {?}\r\n     */\r\n    function (dataNode) {\r\n        this.expansionModel.deselect(dataNode);\r\n    };\r\n    /** Whether a given data node is expanded or not. Returns true if the data node is expanded. */\r\n    /**\r\n     * Whether a given data node is expanded or not. Returns true if the data node is expanded.\r\n     * @param {?} dataNode\r\n     * @return {?}\r\n     */\r\n    BaseTreeControl.prototype.isExpanded = /**\r\n     * Whether a given data node is expanded or not. Returns true if the data node is expanded.\r\n     * @param {?} dataNode\r\n     * @return {?}\r\n     */\r\n    function (dataNode) {\r\n        return this.expansionModel.isSelected(dataNode);\r\n    };\r\n    /** Toggles a subtree rooted at `node` recursively. */\r\n    /**\r\n     * Toggles a subtree rooted at `node` recursively.\r\n     * @param {?} dataNode\r\n     * @return {?}\r\n     */\r\n    BaseTreeControl.prototype.toggleDescendants = /**\r\n     * Toggles a subtree rooted at `node` recursively.\r\n     * @param {?} dataNode\r\n     * @return {?}\r\n     */\r\n    function (dataNode) {\r\n        this.expansionModel.isSelected(dataNode)\r\n            ? this.collapseDescendants(dataNode)\r\n            : this.expandDescendants(dataNode);\r\n    };\r\n    /** Collapse all dataNodes in the tree. */\r\n    /**\r\n     * Collapse all dataNodes in the tree.\r\n     * @return {?}\r\n     */\r\n    BaseTreeControl.prototype.collapseAll = /**\r\n     * Collapse all dataNodes in the tree.\r\n     * @return {?}\r\n     */\r\n    function () {\r\n        this.expansionModel.clear();\r\n    };\r\n    /** Expands a subtree rooted at given data node recursively. */\r\n    /**\r\n     * Expands a subtree rooted at given data node recursively.\r\n     * @param {?} dataNode\r\n     * @return {?}\r\n     */\r\n    BaseTreeControl.prototype.expandDescendants = /**\r\n     * Expands a subtree rooted at given data node recursively.\r\n     * @param {?} dataNode\r\n     * @return {?}\r\n     */\r\n    function (dataNode) {\r\n        var _a;\r\n        /** @type {?} */\r\n        var toBeProcessed = [dataNode];\r\n        toBeProcessed.push.apply(toBeProcessed, this.getDescendants(dataNode));\r\n        (_a = this.expansionModel).select.apply(_a, toBeProcessed);\r\n    };\r\n    /** Collapses a subtree rooted at given data node recursively. */\r\n    /**\r\n     * Collapses a subtree rooted at given data node recursively.\r\n     * @param {?} dataNode\r\n     * @return {?}\r\n     */\r\n    BaseTreeControl.prototype.collapseDescendants = /**\r\n     * Collapses a subtree rooted at given data node recursively.\r\n     * @param {?} dataNode\r\n     * @return {?}\r\n     */\r\n    function (dataNode) {\r\n        var _a;\r\n        /** @type {?} */\r\n        var toBeProcessed = [dataNode];\r\n        toBeProcessed.push.apply(toBeProcessed, this.getDescendants(dataNode));\r\n        (_a = this.expansionModel).deselect.apply(_a, toBeProcessed);\r\n    };\r\n    return BaseTreeControl;\r\n}());\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n/**\r\n * Flat tree control. Able to expand/collapse a subtree recursively for flattened tree.\r\n * @template T\r\n */\r\nvar  /**\r\n * Flat tree control. Able to expand/collapse a subtree recursively for flattened tree.\r\n * @template T\r\n */\r\nFlatTreeControl = /** @class */ (function (_super) {\r\n    __extends(FlatTreeControl, _super);\r\n    /** Construct with flat tree data node functions getLevel and isExpandable. */\r\n    function FlatTreeControl(getLevel, isExpandable) {\r\n        var _this = _super.call(this) || this;\r\n        _this.getLevel = getLevel;\r\n        _this.isExpandable = isExpandable;\r\n        return _this;\r\n    }\r\n    /**\r\n     * Gets a list of the data node's subtree of descendent data nodes.\r\n     *\r\n     * To make this working, the `dataNodes` of the TreeControl must be flattened tree nodes\r\n     * with correct levels.\r\n     */\r\n    /**\r\n     * Gets a list of the data node's subtree of descendent data nodes.\r\n     *\r\n     * To make this working, the `dataNodes` of the TreeControl must be flattened tree nodes\r\n     * with correct levels.\r\n     * @param {?} dataNode\r\n     * @return {?}\r\n     */\r\n    FlatTreeControl.prototype.getDescendants = /**\r\n     * Gets a list of the data node's subtree of descendent data nodes.\r\n     *\r\n     * To make this working, the `dataNodes` of the TreeControl must be flattened tree nodes\r\n     * with correct levels.\r\n     * @param {?} dataNode\r\n     * @return {?}\r\n     */\r\n    function (dataNode) {\r\n        /** @type {?} */\r\n        var startIndex = this.dataNodes.indexOf(dataNode);\r\n        /** @type {?} */\r\n        var results = [];\r\n        // Goes through flattened tree nodes in the `dataNodes` array, and get all descendants.\r\n        // The level of descendants of a tree node must be greater than the level of the given\r\n        // tree node.\r\n        // If we reach a node whose level is equal to the level of the tree node, we hit a sibling.\r\n        // If we reach a node whose level is greater than the level of the tree node, we hit a\r\n        // sibling of an ancestor.\r\n        for (var i = startIndex + 1; i < this.dataNodes.length && this.getLevel(dataNode) < this.getLevel(this.dataNodes[i]); i++) {\r\n            results.push(this.dataNodes[i]);\r\n        }\r\n        return results;\r\n    };\r\n    /**\r\n     * Expands all data nodes in the tree.\r\n     *\r\n     * To make this working, the `dataNodes` variable of the TreeControl must be set to all flattened\r\n     * data nodes of the tree.\r\n     */\r\n    /**\r\n     * Expands all data nodes in the tree.\r\n     *\r\n     * To make this working, the `dataNodes` variable of the TreeControl must be set to all flattened\r\n     * data nodes of the tree.\r\n     * @return {?}\r\n     */\r\n    FlatTreeControl.prototype.expandAll = /**\r\n     * Expands all data nodes in the tree.\r\n     *\r\n     * To make this working, the `dataNodes` variable of the TreeControl must be set to all flattened\r\n     * data nodes of the tree.\r\n     * @return {?}\r\n     */\r\n    function () {\r\n        var _a;\r\n        (_a = this.expansionModel).select.apply(_a, this.dataNodes);\r\n    };\r\n    return FlatTreeControl;\r\n}(BaseTreeControl));\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n/**\r\n * Nested tree control. Able to expand/collapse a subtree recursively for NestedNode type.\r\n * @template T\r\n */\r\nvar  /**\r\n * Nested tree control. Able to expand/collapse a subtree recursively for NestedNode type.\r\n * @template T\r\n */\r\nNestedTreeControl = /** @class */ (function (_super) {\r\n    __extends(NestedTreeControl, _super);\r\n    /** Construct with nested tree function getChildren. */\r\n    function NestedTreeControl(getChildren) {\r\n        var _this = _super.call(this) || this;\r\n        _this.getChildren = getChildren;\r\n        return _this;\r\n    }\r\n    /**\r\n     * Expands all dataNodes in the tree.\r\n     *\r\n     * To make this working, the `dataNodes` variable of the TreeControl must be set to all root level\r\n     * data nodes of the tree.\r\n     */\r\n    /**\r\n     * Expands all dataNodes in the tree.\r\n     *\r\n     * To make this working, the `dataNodes` variable of the TreeControl must be set to all root level\r\n     * data nodes of the tree.\r\n     * @return {?}\r\n     */\r\n    NestedTreeControl.prototype.expandAll = /**\r\n     * Expands all dataNodes in the tree.\r\n     *\r\n     * To make this working, the `dataNodes` variable of the TreeControl must be set to all root level\r\n     * data nodes of the tree.\r\n     * @return {?}\r\n     */\r\n    function () {\r\n        var _a;\r\n        var _this = this;\r\n        this.expansionModel.clear();\r\n        /** @type {?} */\r\n        var allNodes = this.dataNodes.reduce((/**\r\n         * @param {?} accumulator\r\n         * @param {?} dataNode\r\n         * @return {?}\r\n         */\r\n        function (accumulator, dataNode) {\r\n            return accumulator.concat(_this.getDescendants(dataNode), [dataNode]);\r\n        }), []);\r\n        (_a = this.expansionModel).select.apply(_a, allNodes);\r\n    };\r\n    /** Gets a list of descendant dataNodes of a subtree rooted at given data node recursively. */\r\n    /**\r\n     * Gets a list of descendant dataNodes of a subtree rooted at given data node recursively.\r\n     * @param {?} dataNode\r\n     * @return {?}\r\n     */\r\n    NestedTreeControl.prototype.getDescendants = /**\r\n     * Gets a list of descendant dataNodes of a subtree rooted at given data node recursively.\r\n     * @param {?} dataNode\r\n     * @return {?}\r\n     */\r\n    function (dataNode) {\r\n        /** @type {?} */\r\n        var descendants = [];\r\n        this._getDescendants(descendants, dataNode);\r\n        // Remove the node itself\r\n        return descendants.splice(1);\r\n    };\r\n    /** A helper function to get descendants recursively. */\r\n    /**\r\n     * A helper function to get descendants recursively.\r\n     * @protected\r\n     * @param {?} descendants\r\n     * @param {?} dataNode\r\n     * @return {?}\r\n     */\r\n    NestedTreeControl.prototype._getDescendants = /**\r\n     * A helper function to get descendants recursively.\r\n     * @protected\r\n     * @param {?} descendants\r\n     * @param {?} dataNode\r\n     * @return {?}\r\n     */\r\n    function (descendants, dataNode) {\r\n        var _this = this;\r\n        descendants.push(dataNode);\r\n        /** @type {?} */\r\n        var childrenNodes = this.getChildren(dataNode);\r\n        if (Array.isArray(childrenNodes)) {\r\n            childrenNodes.forEach((/**\r\n             * @param {?} child\r\n             * @return {?}\r\n             */\r\n            function (child) { return _this._getDescendants(descendants, child); }));\r\n        }\r\n        else if (childrenNodes instanceof Observable) {\r\n            // TypeScript as of version 3.5 doesn't seem to treat `Boolean` like a function that\r\n            // returns a `boolean` specifically in the context of `filter`, so we manually clarify that.\r\n            childrenNodes.pipe(take(1), filter((/** @type {?} */ (Boolean))))\r\n                .subscribe((/**\r\n             * @param {?} children\r\n             * @return {?}\r\n             */\r\n            function (children) {\r\n                for (var _i = 0, children_1 = children; _i < children_1.length; _i++) {\r\n                    var child = children_1[_i];\r\n                    _this._getDescendants(descendants, child);\r\n                }\r\n            }));\r\n        }\r\n    };\r\n    return NestedTreeControl;\r\n}(BaseTreeControl));\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n/**\r\n * Injection token used to provide a `CdkTreeNode` to its outlet.\r\n * Used primarily to avoid circular imports.\r\n * \\@docs-private\r\n * @type {?}\r\n */\r\nvar CDK_TREE_NODE_OUTLET_NODE = new InjectionToken('CDK_TREE_NODE_OUTLET_NODE');\r\n/**\r\n * Outlet for nested CdkNode. Put `[cdkTreeNodeOutlet]` on a tag to place children dataNodes\r\n * inside the outlet.\r\n */\r\nvar CdkTreeNodeOutlet = /** @class */ (function () {\r\n    function CdkTreeNodeOutlet(viewContainer, _node) {\r\n        this.viewContainer = viewContainer;\r\n        this._node = _node;\r\n    }\r\n    CdkTreeNodeOutlet.decorators = [\r\n        { type: Directive, args: [{\r\n                    selector: '[cdkTreeNodeOutlet]'\r\n                },] },\r\n    ];\r\n    /** @nocollapse */\r\n    CdkTreeNodeOutlet.ctorParameters = function () { return [\r\n        { type: ViewContainerRef },\r\n        { type: undefined, decorators: [{ type: Inject, args: [CDK_TREE_NODE_OUTLET_NODE,] }, { type: Optional }] }\r\n    ]; };\r\n    return CdkTreeNodeOutlet;\r\n}());\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n/**\r\n * Context provided to the tree node component.\r\n * @template T\r\n */\r\nvar  /**\r\n * Context provided to the tree node component.\r\n * @template T\r\n */\r\nCdkTreeNodeOutletContext = /** @class */ (function () {\r\n    function CdkTreeNodeOutletContext(data) {\r\n        this.$implicit = data;\r\n    }\r\n    return CdkTreeNodeOutletContext;\r\n}());\r\n/**\r\n * Data node definition for the CdkTree.\r\n * Captures the node's template and a when predicate that describes when this node should be used.\r\n * @template T\r\n */\r\nvar CdkTreeNodeDef = /** @class */ (function () {\r\n    /** @docs-private */\r\n    function CdkTreeNodeDef(template) {\r\n        this.template = template;\r\n    }\r\n    CdkTreeNodeDef.decorators = [\r\n        { type: Directive, args: [{\r\n                    selector: '[cdkTreeNodeDef]',\r\n                    inputs: [\r\n                        'when: cdkTreeNodeDefWhen'\r\n                    ],\r\n                },] },\r\n    ];\r\n    /** @nocollapse */\r\n    CdkTreeNodeDef.ctorParameters = function () { return [\r\n        { type: TemplateRef }\r\n    ]; };\r\n    return CdkTreeNodeDef;\r\n}());\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n\r\n/**\r\n * Returns an error to be thrown when there is no usable data.\r\n * \\@docs-private\r\n * @return {?}\r\n */\r\nfunction getTreeNoValidDataSourceError() {\r\n    return Error(\"A valid data source must be provided.\");\r\n}\r\n/**\r\n * Returns an error to be thrown when there are multiple nodes that are missing a when function.\r\n * \\@docs-private\r\n * @return {?}\r\n */\r\nfunction getTreeMultipleDefaultNodeDefsError() {\r\n    return Error(\"There can only be one default row without a when predicate function.\");\r\n}\r\n/**\r\n * Returns an error to be thrown when there are no matching node defs for a particular set of data.\r\n * \\@docs-private\r\n * @return {?}\r\n */\r\nfunction getTreeMissingMatchingNodeDefError() {\r\n    return Error(\"Could not find a matching node definition for the provided node data.\");\r\n}\r\n/**\r\n * Returns an error to be thrown when there are tree control.\r\n * \\@docs-private\r\n * @return {?}\r\n */\r\nfunction getTreeControlMissingError() {\r\n    return Error(\"Could not find a tree control for the tree.\");\r\n}\r\n/**\r\n * Returns an error to be thrown when tree control did not implement functions for flat/nested node.\r\n * \\@docs-private\r\n * @return {?}\r\n */\r\nfunction getTreeControlFunctionsMissingError() {\r\n    return Error(\"Could not find functions for nested/flat tree in tree control.\");\r\n}\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n/**\r\n * CDK tree component that connects with a data source to retrieve data of type `T` and renders\r\n * dataNodes with hierarchy. Updates the dataNodes when new data is provided by the data source.\r\n * @template T\r\n */\r\nvar CdkTree = /** @class */ (function () {\r\n    function CdkTree(_differs, _changeDetectorRef) {\r\n        this._differs = _differs;\r\n        this._changeDetectorRef = _changeDetectorRef;\r\n        /**\r\n         * Subject that emits when the component has been destroyed.\r\n         */\r\n        this._onDestroy = new Subject();\r\n        /**\r\n         * Level of nodes\r\n         */\r\n        this._levels = new Map();\r\n        // TODO(tinayuangao): Setup a listener for scrolling, emit the calculated view to viewChange.\r\n        //     Remove the MAX_VALUE in viewChange\r\n        /**\r\n         * Stream containing the latest information on what rows are being displayed on screen.\r\n         * Can be used by the data source to as a heuristic of what data should be provided.\r\n         */\r\n        this.viewChange = new BehaviorSubject({ start: 0, end: Number.MAX_VALUE });\r\n    }\r\n    Object.defineProperty(CdkTree.prototype, \"dataSource\", {\r\n        /**\r\n         * Provides a stream containing the latest data array to render. Influenced by the tree's\r\n         * stream of view window (what dataNodes are currently on screen).\r\n         * Data source can be an observable of data array, or a data array to render.\r\n         */\r\n        get: /**\r\n         * Provides a stream containing the latest data array to render. Influenced by the tree's\r\n         * stream of view window (what dataNodes are currently on screen).\r\n         * Data source can be an observable of data array, or a data array to render.\r\n         * @return {?}\r\n         */\r\n        function () { return this._dataSource; },\r\n        set: /**\r\n         * @param {?} dataSource\r\n         * @return {?}\r\n         */\r\n        function (dataSource) {\r\n            if (this._dataSource !== dataSource) {\r\n                this._switchDataSource(dataSource);\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * @return {?}\r\n     */\r\n    CdkTree.prototype.ngOnInit = /**\r\n     * @return {?}\r\n     */\r\n    function () {\r\n        this._dataDiffer = this._differs.find([]).create(this.trackBy);\r\n        if (!this.treeControl) {\r\n            throw getTreeControlMissingError();\r\n        }\r\n    };\r\n    /**\r\n     * @return {?}\r\n     */\r\n    CdkTree.prototype.ngOnDestroy = /**\r\n     * @return {?}\r\n     */\r\n    function () {\r\n        this._nodeOutlet.viewContainer.clear();\r\n        this._onDestroy.next();\r\n        this._onDestroy.complete();\r\n        if (this._dataSource && typeof ((/** @type {?} */ (this._dataSource))).disconnect === 'function') {\r\n            ((/** @type {?} */ (this.dataSource))).disconnect(this);\r\n        }\r\n        if (this._dataSubscription) {\r\n            this._dataSubscription.unsubscribe();\r\n            this._dataSubscription = null;\r\n        }\r\n    };\r\n    /**\r\n     * @return {?}\r\n     */\r\n    CdkTree.prototype.ngAfterContentChecked = /**\r\n     * @return {?}\r\n     */\r\n    function () {\r\n        /** @type {?} */\r\n        var defaultNodeDefs = this._nodeDefs.filter((/**\r\n         * @param {?} def\r\n         * @return {?}\r\n         */\r\n        function (def) { return !def.when; }));\r\n        if (defaultNodeDefs.length > 1) {\r\n            throw getTreeMultipleDefaultNodeDefsError();\r\n        }\r\n        this._defaultNodeDef = defaultNodeDefs[0];\r\n        if (this.dataSource && this._nodeDefs && !this._dataSubscription) {\r\n            this._observeRenderChanges();\r\n        }\r\n    };\r\n    // TODO(tinayuangao): Work on keyboard traversal and actions, make sure it's working for RTL\r\n    //     and nested trees.\r\n    /**\r\n     * Switch to the provided data source by resetting the data and unsubscribing from the current\r\n     * render change subscription if one exists. If the data source is null, interpret this by\r\n     * clearing the node outlet. Otherwise start listening for new data.\r\n     */\r\n    // TODO(tinayuangao): Work on keyboard traversal and actions, make sure it's working for RTL\r\n    //     and nested trees.\r\n    /**\r\n     * Switch to the provided data source by resetting the data and unsubscribing from the current\r\n     * render change subscription if one exists. If the data source is null, interpret this by\r\n     * clearing the node outlet. Otherwise start listening for new data.\r\n     * @private\r\n     * @param {?} dataSource\r\n     * @return {?}\r\n     */\r\n    CdkTree.prototype._switchDataSource = \r\n    // TODO(tinayuangao): Work on keyboard traversal and actions, make sure it's working for RTL\r\n    //     and nested trees.\r\n    /**\r\n     * Switch to the provided data source by resetting the data and unsubscribing from the current\r\n     * render change subscription if one exists. If the data source is null, interpret this by\r\n     * clearing the node outlet. Otherwise start listening for new data.\r\n     * @private\r\n     * @param {?} dataSource\r\n     * @return {?}\r\n     */\r\n    function (dataSource) {\r\n        if (this._dataSource && typeof ((/** @type {?} */ (this._dataSource))).disconnect === 'function') {\r\n            ((/** @type {?} */ (this.dataSource))).disconnect(this);\r\n        }\r\n        if (this._dataSubscription) {\r\n            this._dataSubscription.unsubscribe();\r\n            this._dataSubscription = null;\r\n        }\r\n        // Remove the all dataNodes if there is now no data source\r\n        if (!dataSource) {\r\n            this._nodeOutlet.viewContainer.clear();\r\n        }\r\n        this._dataSource = dataSource;\r\n        if (this._nodeDefs) {\r\n            this._observeRenderChanges();\r\n        }\r\n    };\r\n    /** Set up a subscription for the data provided by the data source. */\r\n    /**\r\n     * Set up a subscription for the data provided by the data source.\r\n     * @private\r\n     * @return {?}\r\n     */\r\n    CdkTree.prototype._observeRenderChanges = /**\r\n     * Set up a subscription for the data provided by the data source.\r\n     * @private\r\n     * @return {?}\r\n     */\r\n    function () {\r\n        var _this = this;\r\n        /** @type {?} */\r\n        var dataStream;\r\n        if (isDataSource(this._dataSource)) {\r\n            dataStream = this._dataSource.connect(this);\r\n        }\r\n        else if (this._dataSource instanceof Observable) {\r\n            dataStream = this._dataSource;\r\n        }\r\n        else if (Array.isArray(this._dataSource)) {\r\n            dataStream = of(this._dataSource);\r\n        }\r\n        if (dataStream) {\r\n            this._dataSubscription = dataStream.pipe(takeUntil(this._onDestroy))\r\n                .subscribe((/**\r\n             * @param {?} data\r\n             * @return {?}\r\n             */\r\n            function (data) { return _this.renderNodeChanges(data); }));\r\n        }\r\n        else {\r\n            throw getTreeNoValidDataSourceError();\r\n        }\r\n    };\r\n    /** Check for changes made in the data and render each change (node added/removed/moved). */\r\n    /**\r\n     * Check for changes made in the data and render each change (node added/removed/moved).\r\n     * @param {?} data\r\n     * @param {?=} dataDiffer\r\n     * @param {?=} viewContainer\r\n     * @param {?=} parentData\r\n     * @return {?}\r\n     */\r\n    CdkTree.prototype.renderNodeChanges = /**\r\n     * Check for changes made in the data and render each change (node added/removed/moved).\r\n     * @param {?} data\r\n     * @param {?=} dataDiffer\r\n     * @param {?=} viewContainer\r\n     * @param {?=} parentData\r\n     * @return {?}\r\n     */\r\n    function (data, dataDiffer, viewContainer, parentData) {\r\n        var _this = this;\r\n        if (dataDiffer === void 0) { dataDiffer = this._dataDiffer; }\r\n        if (viewContainer === void 0) { viewContainer = this._nodeOutlet.viewContainer; }\r\n        /** @type {?} */\r\n        var changes = dataDiffer.diff(data);\r\n        if (!changes) {\r\n            return;\r\n        }\r\n        changes.forEachOperation((/**\r\n         * @param {?} item\r\n         * @param {?} adjustedPreviousIndex\r\n         * @param {?} currentIndex\r\n         * @return {?}\r\n         */\r\n        function (item, adjustedPreviousIndex, currentIndex) {\r\n            if (item.previousIndex == null) {\r\n                _this.insertNode(data[(/** @type {?} */ (currentIndex))], (/** @type {?} */ (currentIndex)), viewContainer, parentData);\r\n            }\r\n            else if (currentIndex == null) {\r\n                viewContainer.remove((/** @type {?} */ (adjustedPreviousIndex)));\r\n                _this._levels.delete(item.item);\r\n            }\r\n            else {\r\n                /** @type {?} */\r\n                var view = viewContainer.get((/** @type {?} */ (adjustedPreviousIndex)));\r\n                viewContainer.move((/** @type {?} */ (view)), currentIndex);\r\n            }\r\n        }));\r\n        this._changeDetectorRef.detectChanges();\r\n    };\r\n    /**\r\n     * Finds the matching node definition that should be used for this node data. If there is only\r\n     * one node definition, it is returned. Otherwise, find the node definition that has a when\r\n     * predicate that returns true with the data. If none return true, return the default node\r\n     * definition.\r\n     */\r\n    /**\r\n     * Finds the matching node definition that should be used for this node data. If there is only\r\n     * one node definition, it is returned. Otherwise, find the node definition that has a when\r\n     * predicate that returns true with the data. If none return true, return the default node\r\n     * definition.\r\n     * @param {?} data\r\n     * @param {?} i\r\n     * @return {?}\r\n     */\r\n    CdkTree.prototype._getNodeDef = /**\r\n     * Finds the matching node definition that should be used for this node data. If there is only\r\n     * one node definition, it is returned. Otherwise, find the node definition that has a when\r\n     * predicate that returns true with the data. If none return true, return the default node\r\n     * definition.\r\n     * @param {?} data\r\n     * @param {?} i\r\n     * @return {?}\r\n     */\r\n    function (data, i) {\r\n        if (this._nodeDefs.length === 1) {\r\n            return this._nodeDefs.first;\r\n        }\r\n        /** @type {?} */\r\n        var nodeDef = this._nodeDefs.find((/**\r\n         * @param {?} def\r\n         * @return {?}\r\n         */\r\n        function (def) { return def.when && def.when(i, data); })) || this._defaultNodeDef;\r\n        if (!nodeDef) {\r\n            throw getTreeMissingMatchingNodeDefError();\r\n        }\r\n        return nodeDef;\r\n    };\r\n    /**\r\n     * Create the embedded view for the data node template and place it in the correct index location\r\n     * within the data node view container.\r\n     */\r\n    /**\r\n     * Create the embedded view for the data node template and place it in the correct index location\r\n     * within the data node view container.\r\n     * @param {?} nodeData\r\n     * @param {?} index\r\n     * @param {?=} viewContainer\r\n     * @param {?=} parentData\r\n     * @return {?}\r\n     */\r\n    CdkTree.prototype.insertNode = /**\r\n     * Create the embedded view for the data node template and place it in the correct index location\r\n     * within the data node view container.\r\n     * @param {?} nodeData\r\n     * @param {?} index\r\n     * @param {?=} viewContainer\r\n     * @param {?=} parentData\r\n     * @return {?}\r\n     */\r\n    function (nodeData, index, viewContainer, parentData) {\r\n        /** @type {?} */\r\n        var node = this._getNodeDef(nodeData, index);\r\n        // Node context that will be provided to created embedded view\r\n        /** @type {?} */\r\n        var context = new CdkTreeNodeOutletContext(nodeData);\r\n        // If the tree is flat tree, then use the `getLevel` function in flat tree control\r\n        // Otherwise, use the level of parent node.\r\n        if (this.treeControl.getLevel) {\r\n            context.level = this.treeControl.getLevel(nodeData);\r\n        }\r\n        else if (typeof parentData !== 'undefined' && this._levels.has(parentData)) {\r\n            context.level = (/** @type {?} */ (this._levels.get(parentData))) + 1;\r\n        }\r\n        else {\r\n            context.level = 0;\r\n        }\r\n        this._levels.set(nodeData, context.level);\r\n        // Use default tree nodeOutlet, or nested node's nodeOutlet\r\n        /** @type {?} */\r\n        var container = viewContainer ? viewContainer : this._nodeOutlet.viewContainer;\r\n        container.createEmbeddedView(node.template, context, index);\r\n        // Set the data to just created `CdkTreeNode`.\r\n        // The `CdkTreeNode` created from `createEmbeddedView` will be saved in static variable\r\n        //     `mostRecentTreeNode`. We get it from static variable and pass the node data to it.\r\n        if (CdkTreeNode.mostRecentTreeNode) {\r\n            CdkTreeNode.mostRecentTreeNode.data = nodeData;\r\n        }\r\n    };\r\n    CdkTree.decorators = [\r\n        { type: Component, args: [{selector: 'cdk-tree',\r\n                    exportAs: 'cdkTree',\r\n                    template: \"<ng-container cdkTreeNodeOutlet></ng-container>\",\r\n                    host: {\r\n                        'class': 'cdk-tree',\r\n                        'role': 'tree',\r\n                    },\r\n                    encapsulation: ViewEncapsulation.None,\r\n                    // The \"OnPush\" status for the `CdkTree` component is effectively a noop, so we are removing it.\r\n                    // The view for `CdkTree` consists entirely of templates declared in other views. As they are\r\n                    // declared elsewhere, they are checked when their declaration points are checked.\r\n                    // tslint:disable-next-line:validate-decorators\r\n                    changeDetection: ChangeDetectionStrategy.Default\r\n                },] },\r\n    ];\r\n    /** @nocollapse */\r\n    CdkTree.ctorParameters = function () { return [\r\n        { type: IterableDiffers },\r\n        { type: ChangeDetectorRef }\r\n    ]; };\r\n    CdkTree.propDecorators = {\r\n        dataSource: [{ type: Input }],\r\n        treeControl: [{ type: Input }],\r\n        trackBy: [{ type: Input }],\r\n        _nodeOutlet: [{ type: ViewChild, args: [CdkTreeNodeOutlet, { static: true },] }],\r\n        _nodeDefs: [{ type: ContentChildren, args: [CdkTreeNodeDef,] }]\r\n    };\r\n    return CdkTree;\r\n}());\r\n/**\r\n * Tree node for CdkTree. It contains the data in the tree node.\r\n * @template T\r\n */\r\nvar CdkTreeNode = /** @class */ (function () {\r\n    function CdkTreeNode(_elementRef, _tree) {\r\n        this._elementRef = _elementRef;\r\n        this._tree = _tree;\r\n        /**\r\n         * Subject that emits when the component has been destroyed.\r\n         */\r\n        this._destroyed = new Subject();\r\n        /**\r\n         * Emits when the node's data has changed.\r\n         */\r\n        this._dataChanges = new Subject();\r\n        /**\r\n         * The role of the node should be 'group' if it's an internal node,\r\n         * and 'treeitem' if it's a leaf node.\r\n         */\r\n        this.role = 'treeitem';\r\n        CdkTreeNode.mostRecentTreeNode = (/** @type {?} */ (this));\r\n    }\r\n    Object.defineProperty(CdkTreeNode.prototype, \"data\", {\r\n        /** The tree node's data. */\r\n        get: /**\r\n         * The tree node's data.\r\n         * @return {?}\r\n         */\r\n        function () { return this._data; },\r\n        set: /**\r\n         * @param {?} value\r\n         * @return {?}\r\n         */\r\n        function (value) {\r\n            if (value !== this._data) {\r\n                this._data = value;\r\n                this._setRoleFromData();\r\n                this._dataChanges.next();\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(CdkTreeNode.prototype, \"isExpanded\", {\r\n        get: /**\r\n         * @return {?}\r\n         */\r\n        function () {\r\n            return this._tree.treeControl.isExpanded(this._data);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(CdkTreeNode.prototype, \"level\", {\r\n        get: /**\r\n         * @return {?}\r\n         */\r\n        function () {\r\n            return this._tree.treeControl.getLevel ? this._tree.treeControl.getLevel(this._data) : 0;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * @return {?}\r\n     */\r\n    CdkTreeNode.prototype.ngOnDestroy = /**\r\n     * @return {?}\r\n     */\r\n    function () {\r\n        // If this is the last tree node being destroyed,\r\n        // clear out the reference to avoid leaking memory.\r\n        if (CdkTreeNode.mostRecentTreeNode === this) {\r\n            CdkTreeNode.mostRecentTreeNode = null;\r\n        }\r\n        this._dataChanges.complete();\r\n        this._destroyed.next();\r\n        this._destroyed.complete();\r\n    };\r\n    /** Focuses the menu item. Implements for FocusableOption. */\r\n    /**\r\n     * Focuses the menu item. Implements for FocusableOption.\r\n     * @return {?}\r\n     */\r\n    CdkTreeNode.prototype.focus = /**\r\n     * Focuses the menu item. Implements for FocusableOption.\r\n     * @return {?}\r\n     */\r\n    function () {\r\n        this._elementRef.nativeElement.focus();\r\n    };\r\n    /**\r\n     * @protected\r\n     * @return {?}\r\n     */\r\n    CdkTreeNode.prototype._setRoleFromData = /**\r\n     * @protected\r\n     * @return {?}\r\n     */\r\n    function () {\r\n        var _this = this;\r\n        if (this._tree.treeControl.isExpandable) {\r\n            this.role = this._tree.treeControl.isExpandable(this._data) ? 'group' : 'treeitem';\r\n        }\r\n        else {\r\n            if (!this._tree.treeControl.getChildren) {\r\n                throw getTreeControlFunctionsMissingError();\r\n            }\r\n            /** @type {?} */\r\n            var childrenNodes = this._tree.treeControl.getChildren(this._data);\r\n            if (Array.isArray(childrenNodes)) {\r\n                this._setRoleFromChildren((/** @type {?} */ (childrenNodes)));\r\n            }\r\n            else if (childrenNodes instanceof Observable) {\r\n                childrenNodes.pipe(takeUntil(this._destroyed))\r\n                    .subscribe((/**\r\n                 * @param {?} children\r\n                 * @return {?}\r\n                 */\r\n                function (children) { return _this._setRoleFromChildren(children); }));\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * @protected\r\n     * @param {?} children\r\n     * @return {?}\r\n     */\r\n    CdkTreeNode.prototype._setRoleFromChildren = /**\r\n     * @protected\r\n     * @param {?} children\r\n     * @return {?}\r\n     */\r\n    function (children) {\r\n        this.role = children && children.length ? 'group' : 'treeitem';\r\n    };\r\n    /**\r\n     * The most recently created `CdkTreeNode`. We save it in static variable so we can retrieve it\r\n     * in `CdkTree` and set the data to it.\r\n     */\r\n    CdkTreeNode.mostRecentTreeNode = null;\r\n    CdkTreeNode.decorators = [\r\n        { type: Directive, args: [{\r\n                    selector: 'cdk-tree-node',\r\n                    exportAs: 'cdkTreeNode',\r\n                    host: {\r\n                        '[attr.aria-expanded]': 'isExpanded',\r\n                        '[attr.aria-level]': 'role === \"treeitem\" ? level : null',\r\n                        '[attr.role]': 'role',\r\n                        'class': 'cdk-tree-node',\r\n                    },\r\n                },] },\r\n    ];\r\n    /** @nocollapse */\r\n    CdkTreeNode.ctorParameters = function () { return [\r\n        { type: ElementRef },\r\n        { type: CdkTree }\r\n    ]; };\r\n    CdkTreeNode.propDecorators = {\r\n        role: [{ type: Input }]\r\n    };\r\n    return CdkTreeNode;\r\n}());\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n/**\r\n * Nested node is a child of `<cdk-tree>`. It works with nested tree.\r\n * By using `cdk-nested-tree-node` component in tree node template, children of the parent node will\r\n * be added in the `cdkTreeNodeOutlet` in tree node template.\r\n * For example:\r\n *   ```html\r\n *   <cdk-nested-tree-node>\r\n *     {{node.name}}\r\n *     <ng-template cdkTreeNodeOutlet></ng-template>\r\n *   </cdk-nested-tree-node>\r\n *   ```\r\n * The children of node will be automatically added to `cdkTreeNodeOutlet`, the result dom will be\r\n * like this:\r\n *   ```html\r\n *   <cdk-nested-tree-node>\r\n *     {{node.name}}\r\n *      <cdk-nested-tree-node>{{child1.name}}</cdk-nested-tree-node>\r\n *      <cdk-nested-tree-node>{{child2.name}}</cdk-nested-tree-node>\r\n *   </cdk-nested-tree-node>\r\n *   ```\r\n * @template T\r\n */\r\nvar CdkNestedTreeNode = /** @class */ (function (_super) {\r\n    __extends(CdkNestedTreeNode, _super);\r\n    function CdkNestedTreeNode(_elementRef, _tree, _differs) {\r\n        var _this = _super.call(this, _elementRef, _tree) || this;\r\n        _this._elementRef = _elementRef;\r\n        _this._tree = _tree;\r\n        _this._differs = _differs;\r\n        return _this;\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    CdkNestedTreeNode.prototype.ngAfterContentInit = /**\r\n     * @return {?}\r\n     */\r\n    function () {\r\n        var _this = this;\r\n        this._dataDiffer = this._differs.find([]).create(this._tree.trackBy);\r\n        if (!this._tree.treeControl.getChildren) {\r\n            throw getTreeControlFunctionsMissingError();\r\n        }\r\n        /** @type {?} */\r\n        var childrenNodes = this._tree.treeControl.getChildren(this.data);\r\n        if (Array.isArray(childrenNodes)) {\r\n            this.updateChildrenNodes((/** @type {?} */ (childrenNodes)));\r\n        }\r\n        else if (childrenNodes instanceof Observable) {\r\n            childrenNodes.pipe(takeUntil(this._destroyed))\r\n                .subscribe((/**\r\n             * @param {?} result\r\n             * @return {?}\r\n             */\r\n            function (result) { return _this.updateChildrenNodes(result); }));\r\n        }\r\n        this.nodeOutlet.changes.pipe(takeUntil(this._destroyed))\r\n            .subscribe((/**\r\n         * @return {?}\r\n         */\r\n        function () { return _this.updateChildrenNodes(); }));\r\n    };\r\n    /**\r\n     * @return {?}\r\n     */\r\n    CdkNestedTreeNode.prototype.ngOnDestroy = /**\r\n     * @return {?}\r\n     */\r\n    function () {\r\n        this._clear();\r\n        _super.prototype.ngOnDestroy.call(this);\r\n    };\r\n    /** Add children dataNodes to the NodeOutlet */\r\n    /**\r\n     * Add children dataNodes to the NodeOutlet\r\n     * @protected\r\n     * @param {?=} children\r\n     * @return {?}\r\n     */\r\n    CdkNestedTreeNode.prototype.updateChildrenNodes = /**\r\n     * Add children dataNodes to the NodeOutlet\r\n     * @protected\r\n     * @param {?=} children\r\n     * @return {?}\r\n     */\r\n    function (children) {\r\n        /** @type {?} */\r\n        var outlet = this._getNodeOutlet();\r\n        if (children) {\r\n            this._children = children;\r\n        }\r\n        if (outlet && this._children) {\r\n            /** @type {?} */\r\n            var viewContainer = outlet.viewContainer;\r\n            this._tree.renderNodeChanges(this._children, this._dataDiffer, viewContainer, this._data);\r\n        }\r\n        else {\r\n            // Reset the data differ if there's no children nodes displayed\r\n            this._dataDiffer.diff([]);\r\n        }\r\n    };\r\n    /** Clear the children dataNodes. */\r\n    /**\r\n     * Clear the children dataNodes.\r\n     * @protected\r\n     * @return {?}\r\n     */\r\n    CdkNestedTreeNode.prototype._clear = /**\r\n     * Clear the children dataNodes.\r\n     * @protected\r\n     * @return {?}\r\n     */\r\n    function () {\r\n        /** @type {?} */\r\n        var outlet = this._getNodeOutlet();\r\n        if (outlet) {\r\n            outlet.viewContainer.clear();\r\n            this._dataDiffer.diff([]);\r\n        }\r\n    };\r\n    /** Gets the outlet for the current node. */\r\n    /**\r\n     * Gets the outlet for the current node.\r\n     * @private\r\n     * @return {?}\r\n     */\r\n    CdkNestedTreeNode.prototype._getNodeOutlet = /**\r\n     * Gets the outlet for the current node.\r\n     * @private\r\n     * @return {?}\r\n     */\r\n    function () {\r\n        var _this = this;\r\n        /** @type {?} */\r\n        var outlets = this.nodeOutlet;\r\n        // Note that since we use `descendants: true` on the query, we have to ensure\r\n        // that we don't pick up the outlet of a child node by accident.\r\n        return outlets && outlets.find((/**\r\n         * @param {?} outlet\r\n         * @return {?}\r\n         */\r\n        function (outlet) { return !outlet._node || outlet._node === _this; }));\r\n    };\r\n    CdkNestedTreeNode.decorators = [\r\n        { type: Directive, args: [{\r\n                    selector: 'cdk-nested-tree-node',\r\n                    exportAs: 'cdkNestedTreeNode',\r\n                    host: {\r\n                        '[attr.aria-expanded]': 'isExpanded',\r\n                        '[attr.role]': 'role',\r\n                        'class': 'cdk-tree-node cdk-nested-tree-node',\r\n                    },\r\n                    providers: [\r\n                        { provide: CdkTreeNode, useExisting: CdkNestedTreeNode },\r\n                        { provide: CDK_TREE_NODE_OUTLET_NODE, useExisting: CdkNestedTreeNode }\r\n                    ]\r\n                },] },\r\n    ];\r\n    /** @nocollapse */\r\n    CdkNestedTreeNode.ctorParameters = function () { return [\r\n        { type: ElementRef },\r\n        { type: CdkTree },\r\n        { type: IterableDiffers }\r\n    ]; };\r\n    CdkNestedTreeNode.propDecorators = {\r\n        nodeOutlet: [{ type: ContentChildren, args: [CdkTreeNodeOutlet, {\r\n                        // We need to use `descendants: true`, because Ivy will no longer match\r\n                        // indirect descendants if it's left as false.\r\n                        descendants: true\r\n                    },] }]\r\n    };\r\n    return CdkNestedTreeNode;\r\n}(CdkTreeNode));\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n/**\r\n * Regex used to split a string on its CSS units.\r\n * @type {?}\r\n */\r\nvar cssUnitPattern = /([A-Za-z%]+)$/;\r\n/**\r\n * Indent for the children tree dataNodes.\r\n * This directive will add left-padding to the node to show hierarchy.\r\n * @template T\r\n */\r\nvar CdkTreeNodePadding = /** @class */ (function () {\r\n    function CdkTreeNodePadding(_treeNode, _tree, _renderer, _element, _dir) {\r\n        var _this = this;\r\n        this._treeNode = _treeNode;\r\n        this._tree = _tree;\r\n        this._renderer = _renderer;\r\n        this._element = _element;\r\n        this._dir = _dir;\r\n        /**\r\n         * Subject that emits when the component has been destroyed.\r\n         */\r\n        this._destroyed = new Subject();\r\n        /**\r\n         * CSS units used for the indentation value.\r\n         */\r\n        this.indentUnits = 'px';\r\n        this._indent = 40;\r\n        this._setPadding();\r\n        if (_dir) {\r\n            _dir.change.pipe(takeUntil(this._destroyed)).subscribe((/**\r\n             * @return {?}\r\n             */\r\n            function () { return _this._setPadding(true); }));\r\n        }\r\n        // In Ivy the indentation binding might be set before the tree node's data has been added,\r\n        // which means that we'll miss the first render. We have to subscribe to changes in the\r\n        // data to ensure that everything is up to date.\r\n        _treeNode._dataChanges.subscribe((/**\r\n         * @return {?}\r\n         */\r\n        function () { return _this._setPadding(); }));\r\n    }\r\n    Object.defineProperty(CdkTreeNodePadding.prototype, \"level\", {\r\n        /** The level of depth of the tree node. The padding will be `level * indent` pixels. */\r\n        get: /**\r\n         * The level of depth of the tree node. The padding will be `level * indent` pixels.\r\n         * @return {?}\r\n         */\r\n        function () { return this._level; },\r\n        set: /**\r\n         * @param {?} value\r\n         * @return {?}\r\n         */\r\n        function (value) {\r\n            // Set to null as the fallback value so that _setPadding can fall back to the node level if the\r\n            // consumer set the directive as `cdkTreeNodePadding=\"\"`. We still want to take this value if\r\n            // they set 0 explicitly.\r\n            this._level = (/** @type {?} */ (coerceNumberProperty(value, null)));\r\n            this._setPadding();\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(CdkTreeNodePadding.prototype, \"indent\", {\r\n        /**\r\n         * The indent for each level. Can be a number or a CSS string.\r\n         * Default number 40px from material design menu sub-menu spec.\r\n         */\r\n        get: /**\r\n         * The indent for each level. Can be a number or a CSS string.\r\n         * Default number 40px from material design menu sub-menu spec.\r\n         * @return {?}\r\n         */\r\n        function () { return this._indent; },\r\n        set: /**\r\n         * @param {?} indent\r\n         * @return {?}\r\n         */\r\n        function (indent) {\r\n            /** @type {?} */\r\n            var value = indent;\r\n            /** @type {?} */\r\n            var units = 'px';\r\n            if (typeof indent === 'string') {\r\n                /** @type {?} */\r\n                var parts = indent.split(cssUnitPattern);\r\n                value = parts[0];\r\n                units = parts[1] || units;\r\n            }\r\n            this.indentUnits = units;\r\n            this._indent = coerceNumberProperty(value);\r\n            this._setPadding();\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * @return {?}\r\n     */\r\n    CdkTreeNodePadding.prototype.ngOnDestroy = /**\r\n     * @return {?}\r\n     */\r\n    function () {\r\n        this._destroyed.next();\r\n        this._destroyed.complete();\r\n    };\r\n    /** The padding indent value for the tree node. Returns a string with px numbers if not null. */\r\n    /**\r\n     * The padding indent value for the tree node. Returns a string with px numbers if not null.\r\n     * @return {?}\r\n     */\r\n    CdkTreeNodePadding.prototype._paddingIndent = /**\r\n     * The padding indent value for the tree node. Returns a string with px numbers if not null.\r\n     * @return {?}\r\n     */\r\n    function () {\r\n        /** @type {?} */\r\n        var nodeLevel = (this._treeNode.data && this._tree.treeControl.getLevel)\r\n            ? this._tree.treeControl.getLevel(this._treeNode.data)\r\n            : null;\r\n        /** @type {?} */\r\n        var level = this._level == null ? nodeLevel : this._level;\r\n        return typeof level === 'number' ? \"\" + level * this._indent + this.indentUnits : null;\r\n    };\r\n    /**\r\n     * @param {?=} forceChange\r\n     * @return {?}\r\n     */\r\n    CdkTreeNodePadding.prototype._setPadding = /**\r\n     * @param {?=} forceChange\r\n     * @return {?}\r\n     */\r\n    function (forceChange) {\r\n        if (forceChange === void 0) { forceChange = false; }\r\n        /** @type {?} */\r\n        var padding = this._paddingIndent();\r\n        if (padding !== this._currentPadding || forceChange) {\r\n            /** @type {?} */\r\n            var element = this._element.nativeElement;\r\n            /** @type {?} */\r\n            var paddingProp = this._dir && this._dir.value === 'rtl' ? 'paddingRight' : 'paddingLeft';\r\n            /** @type {?} */\r\n            var resetProp = paddingProp === 'paddingLeft' ? 'paddingRight' : 'paddingLeft';\r\n            this._renderer.setStyle(element, paddingProp, padding);\r\n            this._renderer.setStyle(element, resetProp, null);\r\n            this._currentPadding = padding;\r\n        }\r\n    };\r\n    CdkTreeNodePadding.decorators = [\r\n        { type: Directive, args: [{\r\n                    selector: '[cdkTreeNodePadding]',\r\n                },] },\r\n    ];\r\n    /** @nocollapse */\r\n    CdkTreeNodePadding.ctorParameters = function () { return [\r\n        { type: CdkTreeNode },\r\n        { type: CdkTree },\r\n        { type: Renderer2 },\r\n        { type: ElementRef },\r\n        { type: Directionality, decorators: [{ type: Optional }] }\r\n    ]; };\r\n    CdkTreeNodePadding.propDecorators = {\r\n        level: [{ type: Input, args: ['cdkTreeNodePadding',] }],\r\n        indent: [{ type: Input, args: ['cdkTreeNodePaddingIndent',] }]\r\n    };\r\n    return CdkTreeNodePadding;\r\n}());\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n/**\r\n * Node toggle to expand/collapse the node.\r\n * @template T\r\n */\r\nvar CdkTreeNodeToggle = /** @class */ (function () {\r\n    function CdkTreeNodeToggle(_tree, _treeNode) {\r\n        this._tree = _tree;\r\n        this._treeNode = _treeNode;\r\n        this._recursive = false;\r\n    }\r\n    Object.defineProperty(CdkTreeNodeToggle.prototype, \"recursive\", {\r\n        /** Whether expand/collapse the node recursively. */\r\n        get: /**\r\n         * Whether expand/collapse the node recursively.\r\n         * @return {?}\r\n         */\r\n        function () { return this._recursive; },\r\n        set: /**\r\n         * @param {?} value\r\n         * @return {?}\r\n         */\r\n        function (value) { this._recursive = coerceBooleanProperty(value); },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    // We have to use a `HostListener` here in order to support both Ivy and ViewEngine.\r\n    // In Ivy the `host` bindings will be merged when this class is extended, whereas in\r\n    // ViewEngine they're overwritten.\r\n    // TODO(crisbeto): we move this back into `host` once Ivy is turned on by default.\r\n    // tslint:disable-next-line:no-host-decorator-in-concrete\r\n    // We have to use a `HostListener` here in order to support both Ivy and ViewEngine.\r\n    // In Ivy the `host` bindings will be merged when this class is extended, whereas in\r\n    // ViewEngine they're overwritten.\r\n    // TODO(crisbeto): we move this back into `host` once Ivy is turned on by default.\r\n    // tslint:disable-next-line:no-host-decorator-in-concrete\r\n    /**\r\n     * @param {?} event\r\n     * @return {?}\r\n     */\r\n    CdkTreeNodeToggle.prototype._toggle = \r\n    // We have to use a `HostListener` here in order to support both Ivy and ViewEngine.\r\n    // In Ivy the `host` bindings will be merged when this class is extended, whereas in\r\n    // ViewEngine they're overwritten.\r\n    // TODO(crisbeto): we move this back into `host` once Ivy is turned on by default.\r\n    // tslint:disable-next-line:no-host-decorator-in-concrete\r\n    /**\r\n     * @param {?} event\r\n     * @return {?}\r\n     */\r\n    function (event) {\r\n        this.recursive\r\n            ? this._tree.treeControl.toggleDescendants(this._treeNode.data)\r\n            : this._tree.treeControl.toggle(this._treeNode.data);\r\n        event.stopPropagation();\r\n    };\r\n    CdkTreeNodeToggle.decorators = [\r\n        { type: Directive, args: [{ selector: '[cdkTreeNodeToggle]' },] },\r\n    ];\r\n    /** @nocollapse */\r\n    CdkTreeNodeToggle.ctorParameters = function () { return [\r\n        { type: CdkTree },\r\n        { type: CdkTreeNode }\r\n    ]; };\r\n    CdkTreeNodeToggle.propDecorators = {\r\n        recursive: [{ type: Input, args: ['cdkTreeNodeToggleRecursive',] }],\r\n        _toggle: [{ type: HostListener, args: ['click', ['$event'],] }]\r\n    };\r\n    return CdkTreeNodeToggle;\r\n}());\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n/** @type {?} */\r\nvar EXPORTED_DECLARATIONS = [\r\n    CdkNestedTreeNode,\r\n    CdkTreeNodeDef,\r\n    CdkTreeNodePadding,\r\n    CdkTreeNodeToggle,\r\n    CdkTree,\r\n    CdkTreeNode,\r\n    CdkTreeNodeOutlet,\r\n];\r\nvar CdkTreeModule = /** @class */ (function () {\r\n    function CdkTreeModule() {\r\n    }\r\n    CdkTreeModule.decorators = [\r\n        { type: NgModule, args: [{\r\n                    imports: [CommonModule],\r\n                    exports: EXPORTED_DECLARATIONS,\r\n                    declarations: EXPORTED_DECLARATIONS,\r\n                    providers: [FocusMonitor, CdkTreeNodeDef]\r\n                },] },\r\n    ];\r\n    return CdkTreeModule;\r\n}());\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n\r\nexport { BaseTreeControl, FlatTreeControl, NestedTreeControl, CdkNestedTreeNode, CdkTreeNodeOutletContext, CdkTreeNodeDef, CdkTreeNodePadding, CDK_TREE_NODE_OUTLET_NODE, CdkTreeNodeOutlet, CdkTree, CdkTreeNode, getTreeNoValidDataSourceError, getTreeMultipleDefaultNodeDefsError, getTreeMissingMatchingNodeDefError, getTreeControlMissingError, getTreeControlFunctionsMissingError, CdkTreeModule, CdkTreeNodeToggle };\r\n\r\n"]}