{"version":3,"sources":["v:/jad-admin-go/mazat_admin_panel/node_modules/@angular/cdk/bundles/cdk-accordion.umd.js"],"names":[],"mappings":"AAAA;;;;;;;;0NAQiM;uLAC1B;qMACe;gEAC7H;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;MAuGnD,AAMA;;;;;;;;;;;;;yGAGA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;MAgNA,AAWA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;mHAcA;;;;;;;;;;KAUD;;;;;;;;;;;;4JAMC","file":"cdk-accordion.umd.js","sourcesContent":["/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n(function (global, factory) {\r\n\ttypeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/cdk/coercion'), require('@angular/core'), require('rxjs'), require('@angular/cdk/collections')) :\r\n\ttypeof define === 'function' && define.amd ? define('@angular/cdk/accordion', ['exports', '@angular/cdk/coercion', '@angular/core', 'rxjs', '@angular/cdk/collections'], factory) :\r\n\t(factory((global.ng = global.ng || {}, global.ng.cdk = global.ng.cdk || {}, global.ng.cdk.accordion = {}),global.ng.cdk.coercion,global.ng.core,global.rxjs,global.ng.cdk.collections));\r\n}(this, (function (exports,coercion,core,rxjs,collections) { 'use strict';\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n/**\r\n * Used to generate unique ID for each accordion.\r\n * @type {?}\r\n */\r\nvar nextId = 0;\r\n/**\r\n * Directive whose purpose is to manage the expanded state of CdkAccordionItem children.\r\n */\r\nvar CdkAccordion = /** @class */ (function () {\r\n    function CdkAccordion() {\r\n        /**\r\n         * Emits when the state of the accordion changes\r\n         */\r\n        this._stateChanges = new rxjs.Subject();\r\n        /**\r\n         * Stream that emits true/false when openAll/closeAll is triggered.\r\n         */\r\n        this._openCloseAllActions = new rxjs.Subject();\r\n        /**\r\n         * A readonly id value to use for unique selection coordination.\r\n         */\r\n        this.id = \"cdk-accordion-\" + nextId++;\r\n        this._multi = false;\r\n    }\r\n    Object.defineProperty(CdkAccordion.prototype, \"multi\", {\r\n        /** Whether the accordion should allow multiple expanded accordion items simultaneously. */\r\n        get: /**\r\n         * Whether the accordion should allow multiple expanded accordion items simultaneously.\r\n         * @return {?}\r\n         */\r\n        function () { return this._multi; },\r\n        set: /**\r\n         * @param {?} multi\r\n         * @return {?}\r\n         */\r\n        function (multi) { this._multi = coercion.coerceBooleanProperty(multi); },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /** Opens all enabled accordion items in an accordion where multi is enabled. */\r\n    /**\r\n     * Opens all enabled accordion items in an accordion where multi is enabled.\r\n     * @return {?}\r\n     */\r\n    CdkAccordion.prototype.openAll = /**\r\n     * Opens all enabled accordion items in an accordion where multi is enabled.\r\n     * @return {?}\r\n     */\r\n    function () {\r\n        this._openCloseAll(true);\r\n    };\r\n    /** Closes all enabled accordion items in an accordion where multi is enabled. */\r\n    /**\r\n     * Closes all enabled accordion items in an accordion where multi is enabled.\r\n     * @return {?}\r\n     */\r\n    CdkAccordion.prototype.closeAll = /**\r\n     * Closes all enabled accordion items in an accordion where multi is enabled.\r\n     * @return {?}\r\n     */\r\n    function () {\r\n        this._openCloseAll(false);\r\n    };\r\n    /**\r\n     * @param {?} changes\r\n     * @return {?}\r\n     */\r\n    CdkAccordion.prototype.ngOnChanges = /**\r\n     * @param {?} changes\r\n     * @return {?}\r\n     */\r\n    function (changes) {\r\n        this._stateChanges.next(changes);\r\n    };\r\n    /**\r\n     * @return {?}\r\n     */\r\n    CdkAccordion.prototype.ngOnDestroy = /**\r\n     * @return {?}\r\n     */\r\n    function () {\r\n        this._stateChanges.complete();\r\n    };\r\n    /**\r\n     * @private\r\n     * @param {?} expanded\r\n     * @return {?}\r\n     */\r\n    CdkAccordion.prototype._openCloseAll = /**\r\n     * @private\r\n     * @param {?} expanded\r\n     * @return {?}\r\n     */\r\n    function (expanded) {\r\n        if (this.multi) {\r\n            this._openCloseAllActions.next(expanded);\r\n        }\r\n    };\r\n    CdkAccordion.decorators = [\r\n        { type: core.Directive, args: [{\r\n                    selector: 'cdk-accordion, [cdkAccordion]',\r\n                    exportAs: 'cdkAccordion',\r\n                },] },\r\n    ];\r\n    CdkAccordion.propDecorators = {\r\n        multi: [{ type: core.Input }]\r\n    };\r\n    return CdkAccordion;\r\n}());\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n/**\r\n * Used to generate unique ID for each accordion item.\r\n * @type {?}\r\n */\r\nvar nextId$1 = 0;\r\nvar Éµ0 = undefined;\r\n/**\r\n * An basic directive expected to be extended and decorated as a component.  Sets up all\r\n * events and attributes needed to be managed by a CdkAccordion parent.\r\n */\r\nvar CdkAccordionItem = /** @class */ (function () {\r\n    function CdkAccordionItem(accordion, _changeDetectorRef, _expansionDispatcher) {\r\n        var _this = this;\r\n        this.accordion = accordion;\r\n        this._changeDetectorRef = _changeDetectorRef;\r\n        this._expansionDispatcher = _expansionDispatcher;\r\n        /**\r\n         * Subscription to openAll/closeAll events.\r\n         */\r\n        this._openCloseAllSubscription = rxjs.Subscription.EMPTY;\r\n        /**\r\n         * Event emitted every time the AccordionItem is closed.\r\n         */\r\n        this.closed = new core.EventEmitter();\r\n        /**\r\n         * Event emitted every time the AccordionItem is opened.\r\n         */\r\n        this.opened = new core.EventEmitter();\r\n        /**\r\n         * Event emitted when the AccordionItem is destroyed.\r\n         */\r\n        this.destroyed = new core.EventEmitter();\r\n        /**\r\n         * Emits whenever the expanded state of the accordion changes.\r\n         * Primarily used to facilitate two-way binding.\r\n         * \\@docs-private\r\n         */\r\n        this.expandedChange = new core.EventEmitter();\r\n        /**\r\n         * The unique AccordionItem id.\r\n         */\r\n        this.id = \"cdk-accordion-child-\" + nextId$1++;\r\n        this._expanded = false;\r\n        this._disabled = false;\r\n        /**\r\n         * Unregister function for _expansionDispatcher.\r\n         */\r\n        this._removeUniqueSelectionListener = (/**\r\n         * @return {?}\r\n         */\r\n        function () { });\r\n        this._removeUniqueSelectionListener =\r\n            _expansionDispatcher.listen((/**\r\n             * @param {?} id\r\n             * @param {?} accordionId\r\n             * @return {?}\r\n             */\r\n            function (id, accordionId) {\r\n                if (_this.accordion && !_this.accordion.multi &&\r\n                    _this.accordion.id === accordionId && _this.id !== id) {\r\n                    _this.expanded = false;\r\n                }\r\n            }));\r\n        // When an accordion item is hosted in an accordion, subscribe to open/close events.\r\n        if (this.accordion) {\r\n            this._openCloseAllSubscription = this._subscribeToOpenCloseAllActions();\r\n        }\r\n    }\r\n    Object.defineProperty(CdkAccordionItem.prototype, \"expanded\", {\r\n        /** Whether the AccordionItem is expanded. */\r\n        get: /**\r\n         * Whether the AccordionItem is expanded.\r\n         * @return {?}\r\n         */\r\n        function () { return this._expanded; },\r\n        set: /**\r\n         * @param {?} expanded\r\n         * @return {?}\r\n         */\r\n        function (expanded) {\r\n            expanded = coercion.coerceBooleanProperty(expanded);\r\n            // Only emit events and update the internal value if the value changes.\r\n            if (this._expanded !== expanded) {\r\n                this._expanded = expanded;\r\n                this.expandedChange.emit(expanded);\r\n                if (expanded) {\r\n                    this.opened.emit();\r\n                    /**\r\n                     * In the unique selection dispatcher, the id parameter is the id of the CdkAccordionItem,\r\n                     * the name value is the id of the accordion.\r\n                     * @type {?}\r\n                     */\r\n                    var accordionId = this.accordion ? this.accordion.id : this.id;\r\n                    this._expansionDispatcher.notify(this.id, accordionId);\r\n                }\r\n                else {\r\n                    this.closed.emit();\r\n                }\r\n                // Ensures that the animation will run when the value is set outside of an `@Input`.\r\n                // This includes cases like the open, close and toggle methods.\r\n                this._changeDetectorRef.markForCheck();\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(CdkAccordionItem.prototype, \"disabled\", {\r\n        /** Whether the AccordionItem is disabled. */\r\n        get: /**\r\n         * Whether the AccordionItem is disabled.\r\n         * @return {?}\r\n         */\r\n        function () { return this._disabled; },\r\n        set: /**\r\n         * @param {?} disabled\r\n         * @return {?}\r\n         */\r\n        function (disabled) { this._disabled = coercion.coerceBooleanProperty(disabled); },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /** Emits an event for the accordion item being destroyed. */\r\n    /**\r\n     * Emits an event for the accordion item being destroyed.\r\n     * @return {?}\r\n     */\r\n    CdkAccordionItem.prototype.ngOnDestroy = /**\r\n     * Emits an event for the accordion item being destroyed.\r\n     * @return {?}\r\n     */\r\n    function () {\r\n        this.opened.complete();\r\n        this.closed.complete();\r\n        this.destroyed.emit();\r\n        this.destroyed.complete();\r\n        this._removeUniqueSelectionListener();\r\n        this._openCloseAllSubscription.unsubscribe();\r\n    };\r\n    /** Toggles the expanded state of the accordion item. */\r\n    /**\r\n     * Toggles the expanded state of the accordion item.\r\n     * @return {?}\r\n     */\r\n    CdkAccordionItem.prototype.toggle = /**\r\n     * Toggles the expanded state of the accordion item.\r\n     * @return {?}\r\n     */\r\n    function () {\r\n        if (!this.disabled) {\r\n            this.expanded = !this.expanded;\r\n        }\r\n    };\r\n    /** Sets the expanded state of the accordion item to false. */\r\n    /**\r\n     * Sets the expanded state of the accordion item to false.\r\n     * @return {?}\r\n     */\r\n    CdkAccordionItem.prototype.close = /**\r\n     * Sets the expanded state of the accordion item to false.\r\n     * @return {?}\r\n     */\r\n    function () {\r\n        if (!this.disabled) {\r\n            this.expanded = false;\r\n        }\r\n    };\r\n    /** Sets the expanded state of the accordion item to true. */\r\n    /**\r\n     * Sets the expanded state of the accordion item to true.\r\n     * @return {?}\r\n     */\r\n    CdkAccordionItem.prototype.open = /**\r\n     * Sets the expanded state of the accordion item to true.\r\n     * @return {?}\r\n     */\r\n    function () {\r\n        if (!this.disabled) {\r\n            this.expanded = true;\r\n        }\r\n    };\r\n    /**\r\n     * @private\r\n     * @return {?}\r\n     */\r\n    CdkAccordionItem.prototype._subscribeToOpenCloseAllActions = /**\r\n     * @private\r\n     * @return {?}\r\n     */\r\n    function () {\r\n        var _this = this;\r\n        return this.accordion._openCloseAllActions.subscribe((/**\r\n         * @param {?} expanded\r\n         * @return {?}\r\n         */\r\n        function (expanded) {\r\n            // Only change expanded state if item is enabled\r\n            if (!_this.disabled) {\r\n                _this.expanded = expanded;\r\n            }\r\n        }));\r\n    };\r\n    CdkAccordionItem.decorators = [\r\n        { type: core.Directive, args: [{\r\n                    selector: 'cdk-accordion-item, [cdkAccordionItem]',\r\n                    exportAs: 'cdkAccordionItem',\r\n                    providers: [\r\n                        // Provide CdkAccordion as undefined to prevent nested accordion items from registering\r\n                        // to the same accordion.\r\n                        { provide: CdkAccordion, useValue: Éµ0 },\r\n                    ],\r\n                },] },\r\n    ];\r\n    /** @nocollapse */\r\n    CdkAccordionItem.ctorParameters = function () { return [\r\n        { type: CdkAccordion, decorators: [{ type: core.Optional }, { type: core.SkipSelf }] },\r\n        { type: core.ChangeDetectorRef },\r\n        { type: collections.UniqueSelectionDispatcher }\r\n    ]; };\r\n    CdkAccordionItem.propDecorators = {\r\n        closed: [{ type: core.Output }],\r\n        opened: [{ type: core.Output }],\r\n        destroyed: [{ type: core.Output }],\r\n        expandedChange: [{ type: core.Output }],\r\n        expanded: [{ type: core.Input }],\r\n        disabled: [{ type: core.Input }]\r\n    };\r\n    return CdkAccordionItem;\r\n}());\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\nvar CdkAccordionModule = /** @class */ (function () {\r\n    function CdkAccordionModule() {\r\n    }\r\n    CdkAccordionModule.decorators = [\r\n        { type: core.NgModule, args: [{\r\n                    exports: [CdkAccordion, CdkAccordionItem],\r\n                    declarations: [CdkAccordion, CdkAccordionItem],\r\n                },] },\r\n    ];\r\n    return CdkAccordionModule;\r\n}());\r\n\r\nexports.CdkAccordionItem = CdkAccordionItem;\r\nexports.CdkAccordion = CdkAccordion;\r\nexports.CdkAccordionModule = CdkAccordionModule;\r\n\r\nObject.defineProperty(exports, '__esModule', { value: true });\r\n\r\n})));\r\n\r\n"]}