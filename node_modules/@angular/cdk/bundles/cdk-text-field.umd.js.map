{"version":3,"sources":["v:/jad-admin-go/mazat_admin_panel/node_modules/@angular/cdk/bundles/cdk-text-field.umd.js"],"names":[],"mappings":"AAAA;;;;;;;;mRAQyN;+NAClC;+OACkB;8EACzI;;AAAI;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;MA6H9D,AAGA;;;;;;;;;;;gMAMsQ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;MAuCtQ,AAKA;;;;;;;;;;;;;;;;;6CAQA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;MAmWA,AAaA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ySAWA;;;;;;;;;;KAUD;;;;;;;;;;;;;yLAOC","file":"cdk-text-field.umd.js","sourcesContent":["/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n(function (global, factory) {\r\n\ttypeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/cdk/platform'), require('@angular/core'), require('@angular/cdk/coercion'), require('rxjs'), require('rxjs/operators')) :\r\n\ttypeof define === 'function' && define.amd ? define('@angular/cdk/text-field', ['exports', '@angular/cdk/platform', '@angular/core', '@angular/cdk/coercion', 'rxjs', 'rxjs/operators'], factory) :\r\n\t(factory((global.ng = global.ng || {}, global.ng.cdk = global.ng.cdk || {}, global.ng.cdk.textField = {}),global.ng.cdk.platform,global.ng.core,global.ng.cdk.coercion,global.rxjs,global.rxjs.operators));\r\n}(this, (function (exports,platform,core,coercion,rxjs,operators) { 'use strict';\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n/**\r\n * Options to pass to the animationstart listener.\r\n * @type {?}\r\n */\r\nvar listenerOptions = platform.normalizePassiveListenerOptions({ passive: true });\r\n/**\r\n * An injectable service that can be used to monitor the autofill state of an input.\r\n * Based on the following blog post:\r\n * https://medium.com/\\@brunn/detecting-autofilled-fields-in-javascript-aed598d25da7\r\n */\r\nvar AutofillMonitor = /** @class */ (function () {\r\n    function AutofillMonitor(_platform, _ngZone) {\r\n        this._platform = _platform;\r\n        this._ngZone = _ngZone;\r\n        this._monitoredElements = new Map();\r\n    }\r\n    /**\r\n     * @param {?} elementOrRef\r\n     * @return {?}\r\n     */\r\n    AutofillMonitor.prototype.monitor = /**\r\n     * @param {?} elementOrRef\r\n     * @return {?}\r\n     */\r\n    function (elementOrRef) {\r\n        var _this = this;\r\n        if (!this._platform.isBrowser) {\r\n            return rxjs.EMPTY;\r\n        }\r\n        /** @type {?} */\r\n        var element = coercion.coerceElement(elementOrRef);\r\n        /** @type {?} */\r\n        var info = this._monitoredElements.get(element);\r\n        if (info) {\r\n            return info.subject.asObservable();\r\n        }\r\n        /** @type {?} */\r\n        var result = new rxjs.Subject();\r\n        /** @type {?} */\r\n        var cssClass = 'cdk-text-field-autofilled';\r\n        /** @type {?} */\r\n        var listener = (/** @type {?} */ (((/**\r\n         * @param {?} event\r\n         * @return {?}\r\n         */\r\n        function (event) {\r\n            // Animation events fire on initial element render, we check for the presence of the autofill\r\n            // CSS class to make sure this is a real change in state, not just the initial render before\r\n            // we fire off events.\r\n            if (event.animationName === 'cdk-text-field-autofill-start' &&\r\n                !element.classList.contains(cssClass)) {\r\n                element.classList.add(cssClass);\r\n                _this._ngZone.run((/**\r\n                 * @return {?}\r\n                 */\r\n                function () { return result.next({ target: (/** @type {?} */ (event.target)), isAutofilled: true }); }));\r\n            }\r\n            else if (event.animationName === 'cdk-text-field-autofill-end' &&\r\n                element.classList.contains(cssClass)) {\r\n                element.classList.remove(cssClass);\r\n                _this._ngZone.run((/**\r\n                 * @return {?}\r\n                 */\r\n                function () { return result.next({ target: (/** @type {?} */ (event.target)), isAutofilled: false }); }));\r\n            }\r\n        }))));\r\n        this._ngZone.runOutsideAngular((/**\r\n         * @return {?}\r\n         */\r\n        function () {\r\n            element.addEventListener('animationstart', listener, listenerOptions);\r\n            element.classList.add('cdk-text-field-autofill-monitored');\r\n        }));\r\n        this._monitoredElements.set(element, {\r\n            subject: result,\r\n            unlisten: (/**\r\n             * @return {?}\r\n             */\r\n            function () {\r\n                element.removeEventListener('animationstart', listener, listenerOptions);\r\n            })\r\n        });\r\n        return result.asObservable();\r\n    };\r\n    /**\r\n     * @param {?} elementOrRef\r\n     * @return {?}\r\n     */\r\n    AutofillMonitor.prototype.stopMonitoring = /**\r\n     * @param {?} elementOrRef\r\n     * @return {?}\r\n     */\r\n    function (elementOrRef) {\r\n        /** @type {?} */\r\n        var element = coercion.coerceElement(elementOrRef);\r\n        /** @type {?} */\r\n        var info = this._monitoredElements.get(element);\r\n        if (info) {\r\n            info.unlisten();\r\n            info.subject.complete();\r\n            element.classList.remove('cdk-text-field-autofill-monitored');\r\n            element.classList.remove('cdk-text-field-autofilled');\r\n            this._monitoredElements.delete(element);\r\n        }\r\n    };\r\n    /**\r\n     * @return {?}\r\n     */\r\n    AutofillMonitor.prototype.ngOnDestroy = /**\r\n     * @return {?}\r\n     */\r\n    function () {\r\n        var _this = this;\r\n        this._monitoredElements.forEach((/**\r\n         * @param {?} _info\r\n         * @param {?} element\r\n         * @return {?}\r\n         */\r\n        function (_info, element) { return _this.stopMonitoring(element); }));\r\n    };\r\n    AutofillMonitor.decorators = [\r\n        { type: core.Injectable, args: [{ providedIn: 'root' },] },\r\n    ];\r\n    /** @nocollapse */\r\n    AutofillMonitor.ctorParameters = function () { return [\r\n        { type: platform.Platform },\r\n        { type: core.NgZone }\r\n    ]; };\r\n    /** @nocollapse */ AutofillMonitor.ngInjectableDef = core.ɵɵdefineInjectable({ factory: function AutofillMonitor_Factory() { return new AutofillMonitor(core.ɵɵinject(platform.Platform), core.ɵɵinject(core.NgZone)); }, token: AutofillMonitor, providedIn: \"root\" });\r\n    return AutofillMonitor;\r\n}());\r\n/**\r\n * A directive that can be used to monitor the autofill state of an input.\r\n */\r\nvar CdkAutofill = /** @class */ (function () {\r\n    function CdkAutofill(_elementRef, _autofillMonitor) {\r\n        this._elementRef = _elementRef;\r\n        this._autofillMonitor = _autofillMonitor;\r\n        /**\r\n         * Emits when the autofill state of the element changes.\r\n         */\r\n        this.cdkAutofill = new core.EventEmitter();\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    CdkAutofill.prototype.ngOnInit = /**\r\n     * @return {?}\r\n     */\r\n    function () {\r\n        var _this = this;\r\n        this._autofillMonitor\r\n            .monitor(this._elementRef)\r\n            .subscribe((/**\r\n         * @param {?} event\r\n         * @return {?}\r\n         */\r\n        function (event) { return _this.cdkAutofill.emit(event); }));\r\n    };\r\n    /**\r\n     * @return {?}\r\n     */\r\n    CdkAutofill.prototype.ngOnDestroy = /**\r\n     * @return {?}\r\n     */\r\n    function () {\r\n        this._autofillMonitor.stopMonitoring(this._elementRef);\r\n    };\r\n    CdkAutofill.decorators = [\r\n        { type: core.Directive, args: [{\r\n                    selector: '[cdkAutofill]',\r\n                },] },\r\n    ];\r\n    /** @nocollapse */\r\n    CdkAutofill.ctorParameters = function () { return [\r\n        { type: core.ElementRef },\r\n        { type: AutofillMonitor }\r\n    ]; };\r\n    CdkAutofill.propDecorators = {\r\n        cdkAutofill: [{ type: core.Output }]\r\n    };\r\n    return CdkAutofill;\r\n}());\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n/**\r\n * Directive to automatically resize a textarea to fit its content.\r\n */\r\nvar CdkTextareaAutosize = /** @class */ (function () {\r\n    function CdkTextareaAutosize(_elementRef, _platform, _ngZone) {\r\n        this._elementRef = _elementRef;\r\n        this._platform = _platform;\r\n        this._ngZone = _ngZone;\r\n        this._destroyed = new rxjs.Subject();\r\n        this._enabled = true;\r\n        /**\r\n         * Value of minRows as of last resize. If the minRows has decreased, the\r\n         * height of the textarea needs to be recomputed to reflect the new minimum. The maxHeight\r\n         * does not have the same problem because it does not affect the textarea's scrollHeight.\r\n         */\r\n        this._previousMinRows = -1;\r\n        this._textareaElement = (/** @type {?} */ (this._elementRef.nativeElement));\r\n    }\r\n    Object.defineProperty(CdkTextareaAutosize.prototype, \"minRows\", {\r\n        /** Minimum amount of rows in the textarea. */\r\n        get: /**\r\n         * Minimum amount of rows in the textarea.\r\n         * @return {?}\r\n         */\r\n        function () { return this._minRows; },\r\n        set: /**\r\n         * @param {?} value\r\n         * @return {?}\r\n         */\r\n        function (value) {\r\n            this._minRows = value;\r\n            this._setMinHeight();\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(CdkTextareaAutosize.prototype, \"maxRows\", {\r\n        /** Maximum amount of rows in the textarea. */\r\n        get: /**\r\n         * Maximum amount of rows in the textarea.\r\n         * @return {?}\r\n         */\r\n        function () { return this._maxRows; },\r\n        set: /**\r\n         * @param {?} value\r\n         * @return {?}\r\n         */\r\n        function (value) {\r\n            this._maxRows = value;\r\n            this._setMaxHeight();\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(CdkTextareaAutosize.prototype, \"enabled\", {\r\n        /** Whether autosizing is enabled or not */\r\n        get: /**\r\n         * Whether autosizing is enabled or not\r\n         * @return {?}\r\n         */\r\n        function () { return this._enabled; },\r\n        set: /**\r\n         * @param {?} value\r\n         * @return {?}\r\n         */\r\n        function (value) {\r\n            value = coercion.coerceBooleanProperty(value);\r\n            // Only act if the actual value changed. This specifically helps to not run\r\n            // resizeToFitContent too early (i.e. before ngAfterViewInit)\r\n            if (this._enabled !== value) {\r\n                (this._enabled = value) ? this.resizeToFitContent(true) : this.reset();\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /** Sets the minimum height of the textarea as determined by minRows. */\r\n    /**\r\n     * Sets the minimum height of the textarea as determined by minRows.\r\n     * @return {?}\r\n     */\r\n    CdkTextareaAutosize.prototype._setMinHeight = /**\r\n     * Sets the minimum height of the textarea as determined by minRows.\r\n     * @return {?}\r\n     */\r\n    function () {\r\n        /** @type {?} */\r\n        var minHeight = this.minRows && this._cachedLineHeight ?\r\n            this.minRows * this._cachedLineHeight + \"px\" : null;\r\n        if (minHeight) {\r\n            this._textareaElement.style.minHeight = minHeight;\r\n        }\r\n    };\r\n    /** Sets the maximum height of the textarea as determined by maxRows. */\r\n    /**\r\n     * Sets the maximum height of the textarea as determined by maxRows.\r\n     * @return {?}\r\n     */\r\n    CdkTextareaAutosize.prototype._setMaxHeight = /**\r\n     * Sets the maximum height of the textarea as determined by maxRows.\r\n     * @return {?}\r\n     */\r\n    function () {\r\n        /** @type {?} */\r\n        var maxHeight = this.maxRows && this._cachedLineHeight ?\r\n            this.maxRows * this._cachedLineHeight + \"px\" : null;\r\n        if (maxHeight) {\r\n            this._textareaElement.style.maxHeight = maxHeight;\r\n        }\r\n    };\r\n    /**\r\n     * @return {?}\r\n     */\r\n    CdkTextareaAutosize.prototype.ngAfterViewInit = /**\r\n     * @return {?}\r\n     */\r\n    function () {\r\n        var _this = this;\r\n        if (this._platform.isBrowser) {\r\n            // Remember the height which we started with in case autosizing is disabled\r\n            this._initialHeight = this._textareaElement.style.height;\r\n            this.resizeToFitContent();\r\n            this._ngZone.runOutsideAngular((/**\r\n             * @return {?}\r\n             */\r\n            function () {\r\n                rxjs.fromEvent(window, 'resize')\r\n                    .pipe(operators.auditTime(16), operators.takeUntil(_this._destroyed))\r\n                    .subscribe((/**\r\n                 * @return {?}\r\n                 */\r\n                function () { return _this.resizeToFitContent(true); }));\r\n            }));\r\n        }\r\n    };\r\n    /**\r\n     * @return {?}\r\n     */\r\n    CdkTextareaAutosize.prototype.ngOnDestroy = /**\r\n     * @return {?}\r\n     */\r\n    function () {\r\n        this._destroyed.next();\r\n        this._destroyed.complete();\r\n    };\r\n    /**\r\n     * Cache the height of a single-row textarea if it has not already been cached.\r\n     *\r\n     * We need to know how large a single \"row\" of a textarea is in order to apply minRows and\r\n     * maxRows. For the initial version, we will assume that the height of a single line in the\r\n     * textarea does not ever change.\r\n     */\r\n    /**\r\n     * Cache the height of a single-row textarea if it has not already been cached.\r\n     *\r\n     * We need to know how large a single \"row\" of a textarea is in order to apply minRows and\r\n     * maxRows. For the initial version, we will assume that the height of a single line in the\r\n     * textarea does not ever change.\r\n     * @private\r\n     * @return {?}\r\n     */\r\n    CdkTextareaAutosize.prototype._cacheTextareaLineHeight = /**\r\n     * Cache the height of a single-row textarea if it has not already been cached.\r\n     *\r\n     * We need to know how large a single \"row\" of a textarea is in order to apply minRows and\r\n     * maxRows. For the initial version, we will assume that the height of a single line in the\r\n     * textarea does not ever change.\r\n     * @private\r\n     * @return {?}\r\n     */\r\n    function () {\r\n        if (this._cachedLineHeight) {\r\n            return;\r\n        }\r\n        // Use a clone element because we have to override some styles.\r\n        /** @type {?} */\r\n        var textareaClone = (/** @type {?} */ (this._textareaElement.cloneNode(false)));\r\n        textareaClone.rows = 1;\r\n        // Use `position: absolute` so that this doesn't cause a browser layout and use\r\n        // `visibility: hidden` so that nothing is rendered. Clear any other styles that\r\n        // would affect the height.\r\n        textareaClone.style.position = 'absolute';\r\n        textareaClone.style.visibility = 'hidden';\r\n        textareaClone.style.border = 'none';\r\n        textareaClone.style.padding = '0';\r\n        textareaClone.style.height = '';\r\n        textareaClone.style.minHeight = '';\r\n        textareaClone.style.maxHeight = '';\r\n        // In Firefox it happens that textarea elements are always bigger than the specified amount\r\n        // of rows. This is because Firefox tries to add extra space for the horizontal scrollbar.\r\n        // As a workaround that removes the extra space for the scrollbar, we can just set overflow\r\n        // to hidden. This ensures that there is no invalid calculation of the line height.\r\n        // See Firefox bug report: https://bugzilla.mozilla.org/show_bug.cgi?id=33654\r\n        textareaClone.style.overflow = 'hidden';\r\n        (/** @type {?} */ (this._textareaElement.parentNode)).appendChild(textareaClone);\r\n        this._cachedLineHeight = textareaClone.clientHeight;\r\n        (/** @type {?} */ (this._textareaElement.parentNode)).removeChild(textareaClone);\r\n        // Min and max heights have to be re-calculated if the cached line height changes\r\n        this._setMinHeight();\r\n        this._setMaxHeight();\r\n    };\r\n    /**\r\n     * @return {?}\r\n     */\r\n    CdkTextareaAutosize.prototype.ngDoCheck = /**\r\n     * @return {?}\r\n     */\r\n    function () {\r\n        if (this._platform.isBrowser) {\r\n            this.resizeToFitContent();\r\n        }\r\n    };\r\n    /**\r\n     * Resize the textarea to fit its content.\r\n     * @param force Whether to force a height recalculation. By default the height will be\r\n     *    recalculated only if the value changed since the last call.\r\n     */\r\n    /**\r\n     * Resize the textarea to fit its content.\r\n     * @param {?=} force Whether to force a height recalculation. By default the height will be\r\n     *    recalculated only if the value changed since the last call.\r\n     * @return {?}\r\n     */\r\n    CdkTextareaAutosize.prototype.resizeToFitContent = /**\r\n     * Resize the textarea to fit its content.\r\n     * @param {?=} force Whether to force a height recalculation. By default the height will be\r\n     *    recalculated only if the value changed since the last call.\r\n     * @return {?}\r\n     */\r\n    function (force) {\r\n        var _this = this;\r\n        if (force === void 0) { force = false; }\r\n        // If autosizing is disabled, just skip everything else\r\n        if (!this._enabled) {\r\n            return;\r\n        }\r\n        this._cacheTextareaLineHeight();\r\n        // If we haven't determined the line-height yet, we know we're still hidden and there's no point\r\n        // in checking the height of the textarea.\r\n        if (!this._cachedLineHeight) {\r\n            return;\r\n        }\r\n        /** @type {?} */\r\n        var textarea = (/** @type {?} */ (this._elementRef.nativeElement));\r\n        /** @type {?} */\r\n        var value = textarea.value;\r\n        // Only resize if the value or minRows have changed since these calculations can be expensive.\r\n        if (!force && this._minRows === this._previousMinRows && value === this._previousValue) {\r\n            return;\r\n        }\r\n        /** @type {?} */\r\n        var placeholderText = textarea.placeholder;\r\n        // Reset the textarea height to auto in order to shrink back to its default size.\r\n        // Also temporarily force overflow:hidden, so scroll bars do not interfere with calculations.\r\n        // Long placeholders that are wider than the textarea width may lead to a bigger scrollHeight\r\n        // value. To ensure that the scrollHeight is not bigger than the content, the placeholders\r\n        // need to be removed temporarily.\r\n        textarea.classList.add('cdk-textarea-autosize-measuring');\r\n        textarea.placeholder = '';\r\n        // The cdk-textarea-autosize-measuring class includes a 2px padding to workaround an issue with\r\n        // Chrome, so we account for that extra space here by subtracting 4 (2px top + 2px bottom).\r\n        /** @type {?} */\r\n        var height = textarea.scrollHeight - 4;\r\n        // Use the scrollHeight to know how large the textarea *would* be if fit its entire value.\r\n        textarea.style.height = height + \"px\";\r\n        textarea.classList.remove('cdk-textarea-autosize-measuring');\r\n        textarea.placeholder = placeholderText;\r\n        this._ngZone.runOutsideAngular((/**\r\n         * @return {?}\r\n         */\r\n        function () {\r\n            if (typeof requestAnimationFrame !== 'undefined') {\r\n                requestAnimationFrame((/**\r\n                 * @return {?}\r\n                 */\r\n                function () { return _this._scrollToCaretPosition(textarea); }));\r\n            }\r\n            else {\r\n                setTimeout((/**\r\n                 * @return {?}\r\n                 */\r\n                function () { return _this._scrollToCaretPosition(textarea); }));\r\n            }\r\n        }));\r\n        this._previousValue = value;\r\n        this._previousMinRows = this._minRows;\r\n    };\r\n    /**\r\n     * Resets the textarea to its original size\r\n     */\r\n    /**\r\n     * Resets the textarea to its original size\r\n     * @return {?}\r\n     */\r\n    CdkTextareaAutosize.prototype.reset = /**\r\n     * Resets the textarea to its original size\r\n     * @return {?}\r\n     */\r\n    function () {\r\n        // Do not try to change the textarea, if the initialHeight has not been determined yet\r\n        // This might potentially remove styles when reset() is called before ngAfterViewInit\r\n        if (this._initialHeight === undefined) {\r\n            return;\r\n        }\r\n        this._textareaElement.style.height = this._initialHeight;\r\n    };\r\n    /**\r\n     * @return {?}\r\n     */\r\n    CdkTextareaAutosize.prototype._noopInputHandler = /**\r\n     * @return {?}\r\n     */\r\n    function () {\r\n        // no-op handler that ensures we're running change detection on input events.\r\n    };\r\n    /**\r\n     * Scrolls a textarea to the caret position. On Firefox resizing the textarea will\r\n     * prevent it from scrolling to the caret position. We need to re-set the selection\r\n     * in order for it to scroll to the proper position.\r\n     */\r\n    /**\r\n     * Scrolls a textarea to the caret position. On Firefox resizing the textarea will\r\n     * prevent it from scrolling to the caret position. We need to re-set the selection\r\n     * in order for it to scroll to the proper position.\r\n     * @private\r\n     * @param {?} textarea\r\n     * @return {?}\r\n     */\r\n    CdkTextareaAutosize.prototype._scrollToCaretPosition = /**\r\n     * Scrolls a textarea to the caret position. On Firefox resizing the textarea will\r\n     * prevent it from scrolling to the caret position. We need to re-set the selection\r\n     * in order for it to scroll to the proper position.\r\n     * @private\r\n     * @param {?} textarea\r\n     * @return {?}\r\n     */\r\n    function (textarea) {\r\n        var selectionStart = textarea.selectionStart, selectionEnd = textarea.selectionEnd;\r\n        // IE will throw an \"Unspecified error\" if we try to set the selection range after the\r\n        // element has been removed from the DOM. Assert that the directive hasn't been destroyed\r\n        // between the time we requested the animation frame and when it was executed.\r\n        // Also note that we have to assert that the textarea is focused before we set the\r\n        // selection range. Setting the selection range on a non-focused textarea will cause\r\n        // it to receive focus on IE and Edge.\r\n        if (!this._destroyed.isStopped && document.activeElement === textarea) {\r\n            textarea.setSelectionRange(selectionStart, selectionEnd);\r\n        }\r\n    };\r\n    CdkTextareaAutosize.decorators = [\r\n        { type: core.Directive, args: [{\r\n                    selector: 'textarea[cdkTextareaAutosize]',\r\n                    exportAs: 'cdkTextareaAutosize',\r\n                    host: {\r\n                        'class': 'cdk-textarea-autosize',\r\n                        // Textarea elements that have the directive applied should have a single row by default.\r\n                        // Browsers normally show two rows by default and therefore this limits the minRows binding.\r\n                        'rows': '1',\r\n                        '(input)': '_noopInputHandler()',\r\n                    },\r\n                },] },\r\n    ];\r\n    /** @nocollapse */\r\n    CdkTextareaAutosize.ctorParameters = function () { return [\r\n        { type: core.ElementRef },\r\n        { type: platform.Platform },\r\n        { type: core.NgZone }\r\n    ]; };\r\n    CdkTextareaAutosize.propDecorators = {\r\n        minRows: [{ type: core.Input, args: ['cdkAutosizeMinRows',] }],\r\n        maxRows: [{ type: core.Input, args: ['cdkAutosizeMaxRows',] }],\r\n        enabled: [{ type: core.Input, args: ['cdkTextareaAutosize',] }]\r\n    };\r\n    return CdkTextareaAutosize;\r\n}());\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\nvar TextFieldModule = /** @class */ (function () {\r\n    function TextFieldModule() {\r\n    }\r\n    TextFieldModule.decorators = [\r\n        { type: core.NgModule, args: [{\r\n                    declarations: [CdkAutofill, CdkTextareaAutosize],\r\n                    imports: [platform.PlatformModule],\r\n                    exports: [CdkAutofill, CdkTextareaAutosize],\r\n                },] },\r\n    ];\r\n    return TextFieldModule;\r\n}());\r\n\r\nexports.AutofillMonitor = AutofillMonitor;\r\nexports.CdkAutofill = CdkAutofill;\r\nexports.CdkTextareaAutosize = CdkTextareaAutosize;\r\nexports.TextFieldModule = TextFieldModule;\r\n\r\nObject.defineProperty(exports, '__esModule', { value: true });\r\n\r\n})));\r\n\r\n"]}