{"version":3,"sources":["v:/jad-admin-go/mazat_admin_panel/node_modules/@angular/cdk/bundles/cdk-bidi.umd.js"],"names":[],"mappings":"AAAA;;;;;;;;8JAQqI;wIACb;oJACa;6CAC/F;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;MA0EhC,AAGA;;;;;;;;;;;;;;;kEAKoO;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;MAoFpO,AAQA;;;;;;;;;;;;;;;;;;;;;;;2EAIA;;;;;;;;;;KAUD;;;;;;;;;;oIAMC","file":"cdk-bidi.umd.js","sourcesContent":["/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n(function (global, factory) {\r\n\ttypeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/common'), require('@angular/core')) :\r\n\ttypeof define === 'function' && define.amd ? define('@angular/cdk/bidi', ['exports', '@angular/common', '@angular/core'], factory) :\r\n\t(factory((global.ng = global.ng || {}, global.ng.cdk = global.ng.cdk || {}, global.ng.cdk.bidi = {}),global.ng.common,global.ng.core));\r\n}(this, (function (exports,common,core) { 'use strict';\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n/**\r\n * Injection token used to inject the document into Directionality.\r\n * This is used so that the value can be faked in tests.\r\n *\r\n * We can't use the real document in tests because changing the real `dir` causes geometry-based\r\n * tests in Safari to fail.\r\n *\r\n * We also can't re-provide the DOCUMENT token from platform-brower because the unit tests\r\n * themselves use things like `querySelector` in test code.\r\n *\r\n * This token is defined in a separate file from Directionality as a workaround for\r\n * https://github.com/angular/angular/issues/22559\r\n *\r\n * \\@docs-private\r\n * @type {?}\r\n */\r\nvar DIR_DOCUMENT = new core.InjectionToken('cdk-dir-doc', {\r\n    providedIn: 'root',\r\n    factory: DIR_DOCUMENT_FACTORY,\r\n});\r\n/**\r\n * \\@docs-private\r\n * @return {?}\r\n */\r\nfunction DIR_DOCUMENT_FACTORY() {\r\n    return core.inject(common.DOCUMENT);\r\n}\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n/**\r\n * The directionality (LTR / RTL) context for the application (or a subtree of it).\r\n * Exposes the current direction and a stream of direction changes.\r\n */\r\nvar Directionality = /** @class */ (function () {\r\n    function Directionality(_document) {\r\n        /**\r\n         * The current 'ltr' or 'rtl' value.\r\n         */\r\n        this.value = 'ltr';\r\n        /**\r\n         * Stream that emits whenever the 'ltr' / 'rtl' state changes.\r\n         */\r\n        this.change = new core.EventEmitter();\r\n        if (_document) {\r\n            // TODO: handle 'auto' value -\r\n            // We still need to account for dir=\"auto\".\r\n            // It looks like HTMLElemenet.dir is also \"auto\" when that's set to the attribute,\r\n            // but getComputedStyle return either \"ltr\" or \"rtl\". avoiding getComputedStyle for now\r\n            /** @type {?} */\r\n            var bodyDir = _document.body ? _document.body.dir : null;\r\n            /** @type {?} */\r\n            var htmlDir = _document.documentElement ? _document.documentElement.dir : null;\r\n            /** @type {?} */\r\n            var value = bodyDir || htmlDir;\r\n            this.value = (value === 'ltr' || value === 'rtl') ? value : 'ltr';\r\n        }\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    Directionality.prototype.ngOnDestroy = /**\r\n     * @return {?}\r\n     */\r\n    function () {\r\n        this.change.complete();\r\n    };\r\n    Directionality.decorators = [\r\n        { type: core.Injectable, args: [{ providedIn: 'root' },] },\r\n    ];\r\n    /** @nocollapse */\r\n    Directionality.ctorParameters = function () { return [\r\n        { type: undefined, decorators: [{ type: core.Optional }, { type: core.Inject, args: [DIR_DOCUMENT,] }] }\r\n    ]; };\r\n    /** @nocollapse */ Directionality.ngInjectableDef = core.ɵɵdefineInjectable({ factory: function Directionality_Factory() { return new Directionality(core.ɵɵinject(DIR_DOCUMENT, 8)); }, token: Directionality, providedIn: \"root\" });\r\n    return Directionality;\r\n}());\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n/**\r\n * Directive to listen for changes of direction of part of the DOM.\r\n *\r\n * Provides itself as Directionality such that descendant directives only need to ever inject\r\n * Directionality to get the closest direction.\r\n */\r\nvar Dir = /** @class */ (function () {\r\n    function Dir() {\r\n        /**\r\n         * Normalized direction that accounts for invalid/unsupported values.\r\n         */\r\n        this._dir = 'ltr';\r\n        /**\r\n         * Whether the `value` has been set to its initial value.\r\n         */\r\n        this._isInitialized = false;\r\n        /**\r\n         * Event emitted when the direction changes.\r\n         */\r\n        this.change = new core.EventEmitter();\r\n    }\r\n    Object.defineProperty(Dir.prototype, \"dir\", {\r\n        /** @docs-private */\r\n        get: /**\r\n         * \\@docs-private\r\n         * @return {?}\r\n         */\r\n        function () { return this._dir; },\r\n        set: /**\r\n         * @param {?} value\r\n         * @return {?}\r\n         */\r\n        function (value) {\r\n            /** @type {?} */\r\n            var old = this._dir;\r\n            /** @type {?} */\r\n            var normalizedValue = value ? value.toLowerCase() : value;\r\n            this._rawDir = value;\r\n            this._dir = (normalizedValue === 'ltr' || normalizedValue === 'rtl') ? normalizedValue : 'ltr';\r\n            if (old !== this._dir && this._isInitialized) {\r\n                this.change.emit(this._dir);\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Dir.prototype, \"value\", {\r\n        /** Current layout direction of the element. */\r\n        get: /**\r\n         * Current layout direction of the element.\r\n         * @return {?}\r\n         */\r\n        function () { return this.dir; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /** Initialize once default value has been set. */\r\n    /**\r\n     * Initialize once default value has been set.\r\n     * @return {?}\r\n     */\r\n    Dir.prototype.ngAfterContentInit = /**\r\n     * Initialize once default value has been set.\r\n     * @return {?}\r\n     */\r\n    function () {\r\n        this._isInitialized = true;\r\n    };\r\n    /**\r\n     * @return {?}\r\n     */\r\n    Dir.prototype.ngOnDestroy = /**\r\n     * @return {?}\r\n     */\r\n    function () {\r\n        this.change.complete();\r\n    };\r\n    Dir.decorators = [\r\n        { type: core.Directive, args: [{\r\n                    selector: '[dir]',\r\n                    providers: [{ provide: Directionality, useExisting: Dir }],\r\n                    host: { '[attr.dir]': '_rawDir' },\r\n                    exportAs: 'dir',\r\n                },] },\r\n    ];\r\n    Dir.propDecorators = {\r\n        change: [{ type: core.Output, args: ['dirChange',] }],\r\n        dir: [{ type: core.Input }]\r\n    };\r\n    return Dir;\r\n}());\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\nvar BidiModule = /** @class */ (function () {\r\n    function BidiModule() {\r\n    }\r\n    BidiModule.decorators = [\r\n        { type: core.NgModule, args: [{\r\n                    exports: [Dir],\r\n                    declarations: [Dir],\r\n                },] },\r\n    ];\r\n    return BidiModule;\r\n}());\r\n\r\nexports.Directionality = Directionality;\r\nexports.DIR_DOCUMENT = DIR_DOCUMENT;\r\nexports.Dir = Dir;\r\nexports.BidiModule = BidiModule;\r\nexports.ɵa = DIR_DOCUMENT_FACTORY;\r\n\r\nObject.defineProperty(exports, '__esModule', { value: true });\r\n\r\n})));\r\n\r\n"]}