{"version":3,"file":"drop-list.d.ts","sources":["v:/jad-admin-go/mazat_admin_panel/node_modules/@angular/cdk/drag-drop/typings/directives/drop-list.d.ts"],"sourcesContent":["/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nimport { ElementRef, EventEmitter, OnDestroy, QueryList, ChangeDetectorRef, AfterContentInit } from '@angular/core';\r\nimport { Directionality } from '@angular/cdk/bidi';\r\nimport { CdkDrag } from './drag';\r\nimport { CdkDragDrop, CdkDragEnter, CdkDragExit, CdkDragSortEvent } from '../drag-events';\r\nimport { CdkDropListContainer } from '../drop-list-container';\r\nimport { CdkDropListGroup } from './drop-list-group';\r\nimport { DropListRef } from '../drop-list-ref';\r\nimport { DragDrop } from '../drag-drop';\r\n/**\r\n * Internal compile-time-only representation of a `CdkDropList`.\r\n * Used to avoid circular import issues between the `CdkDropList` and the `CdkDrag`.\r\n * @docs-private\r\n */\r\nexport interface CdkDropListInternal extends CdkDropList {\r\n}\r\n/** Container that wraps a set of draggable items. */\r\nexport declare class CdkDropList<T = any> implements CdkDropListContainer, AfterContentInit, OnDestroy {\r\n    /** Element that the drop list is attached to. */\r\n    element: ElementRef<HTMLElement>;\r\n    private _changeDetectorRef;\r\n    private _dir?;\r\n    private _group?;\r\n    /** Emits when the list has been destroyed. */\r\n    private _destroyed;\r\n    /** Keeps track of the drop lists that are currently on the page. */\r\n    private static _dropLists;\r\n    /** Reference to the underlying drop list instance. */\r\n    _dropListRef: DropListRef<CdkDropList<T>>;\r\n    /** Draggable items in the container. */\r\n    _draggables: QueryList<CdkDrag>;\r\n    /**\r\n     * Other draggable containers that this container is connected to and into which the\r\n     * container's items can be transferred. Can either be references to other drop containers,\r\n     * or their unique IDs.\r\n     */\r\n    connectedTo: (CdkDropList | string)[] | CdkDropList | string;\r\n    /** Arbitrary data to attach to this container. */\r\n    data: T;\r\n    /** Direction in which the list is oriented. */\r\n    orientation: 'horizontal' | 'vertical';\r\n    /**\r\n     * Unique ID for the drop zone. Can be used as a reference\r\n     * in the `connectedTo` of another `CdkDropList`.\r\n     */\r\n    id: string;\r\n    /** Locks the position of the draggable elements inside the container along the specified axis. */\r\n    lockAxis: 'x' | 'y';\r\n    /** Whether starting a dragging sequence from this container is disabled. */\r\n    disabled: boolean;\r\n    private _disabled;\r\n    /** Whether sorting within this drop list is disabled. */\r\n    sortingDisabled: boolean;\r\n    private _sortingDisabled;\r\n    /**\r\n     * Function that is used to determine whether an item\r\n     * is allowed to be moved into a drop container.\r\n     */\r\n    enterPredicate: (drag: CdkDrag, drop: CdkDropList) => boolean;\r\n    /** Whether to auto-scroll the view when the user moves their pointer close to the edges. */\r\n    autoScrollDisabled: boolean;\r\n    /** Emits when the user drops an item inside the container. */\r\n    dropped: EventEmitter<CdkDragDrop<T, any>>;\r\n    /**\r\n     * Emits when the user has moved a new drag item into this container.\r\n     */\r\n    entered: EventEmitter<CdkDragEnter<T>>;\r\n    /**\r\n     * Emits when the user removes an item from the container\r\n     * by dragging it into another container.\r\n     */\r\n    exited: EventEmitter<CdkDragExit<T>>;\r\n    /** Emits as the user is swapping items while actively dragging. */\r\n    sorted: EventEmitter<CdkDragSortEvent<T>>;\r\n    constructor(\r\n    /** Element that the drop list is attached to. */\r\n    element: ElementRef<HTMLElement>, dragDrop: DragDrop, _changeDetectorRef: ChangeDetectorRef, _dir?: Directionality | undefined, _group?: CdkDropListGroup<CdkDropList<any>> | undefined);\r\n    ngAfterContentInit(): void;\r\n    ngOnDestroy(): void;\r\n    /** Starts dragging an item. */\r\n    start(): void;\r\n    /**\r\n     * Drops an item into this container.\r\n     * @param item Item being dropped into the container.\r\n     * @param currentIndex Index at which the item should be inserted.\r\n     * @param previousContainer Container from which the item got dragged in.\r\n     * @param isPointerOverContainer Whether the user's pointer was over the\r\n     *    container when the item was dropped.\r\n     */\r\n    drop(item: CdkDrag, currentIndex: number, previousContainer: Partial<CdkDropListContainer>, isPointerOverContainer: boolean): void;\r\n    /**\r\n     * Emits an event to indicate that the user moved an item into the container.\r\n     * @param item Item that was moved into the container.\r\n     * @param pointerX Position of the item along the X axis.\r\n     * @param pointerY Position of the item along the Y axis.\r\n     */\r\n    enter(item: CdkDrag, pointerX: number, pointerY: number): void;\r\n    /**\r\n     * Removes an item from the container after it was dragged into another container by the user.\r\n     * @param item Item that was dragged out.\r\n     */\r\n    exit(item: CdkDrag): void;\r\n    /**\r\n     * Figures out the index of an item in the container.\r\n     * @param item Item whose index should be determined.\r\n     */\r\n    getItemIndex(item: CdkDrag): number;\r\n    /**\r\n     * Sorts an item inside the container based on its position.\r\n     * @param item Item to be sorted.\r\n     * @param pointerX Position of the item along the X axis.\r\n     * @param pointerY Position of the item along the Y axis.\r\n     * @param pointerDelta Direction in which the pointer is moving along each axis.\r\n     */\r\n    _sortItem(item: CdkDrag, pointerX: number, pointerY: number, pointerDelta: {\r\n        x: number;\r\n        y: number;\r\n    }): void;\r\n    /**\r\n     * Figures out whether an item should be moved into a sibling\r\n     * drop container, based on its current position.\r\n     * @param item Drag item that is being moved.\r\n     * @param x Position of the item along the X axis.\r\n     * @param y Position of the item along the Y axis.\r\n     */\r\n    _getSiblingContainerFromPosition(item: CdkDrag, x: number, y: number): CdkDropListContainer | null;\r\n    /**\r\n     * Checks whether the user's pointer is positioned over the container.\r\n     * @param x Pointer position along the X axis.\r\n     * @param y Pointer position along the Y axis.\r\n     */\r\n    _isOverContainer(x: number, y: number): boolean;\r\n    /** Syncs the inputs of the CdkDropList with the options of the underlying DropListRef. */\r\n    private _syncInputs;\r\n    /** Handles events from the underlying DropListRef. */\r\n    private _handleEvents;\r\n}\r\n"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;AAoBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA0HA;"}