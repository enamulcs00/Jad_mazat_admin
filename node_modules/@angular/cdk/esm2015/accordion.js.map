{"version":3,"sources":["v:/jad-admin-go/mazat_admin_panel/node_modules/@angular/cdk/esm2015/accordion.js"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;AAoBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CAmEC,wGAMC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CAmLD,kHAWC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CAqBD,2JAMC","file":"accordion.js","sourcesContent":["/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\r\nimport { Directive, Input, Output, EventEmitter, Optional, ChangeDetectorRef, SkipSelf, NgModule } from '@angular/core';\r\nimport { Subject, Subscription } from 'rxjs';\r\nimport { UniqueSelectionDispatcher } from '@angular/cdk/collections';\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n/**\r\n * Used to generate unique ID for each accordion.\r\n * @type {?}\r\n */\r\nlet nextId = 0;\r\n/**\r\n * Directive whose purpose is to manage the expanded state of CdkAccordionItem children.\r\n */\r\nclass CdkAccordion {\r\n    constructor() {\r\n        /**\r\n         * Emits when the state of the accordion changes\r\n         */\r\n        this._stateChanges = new Subject();\r\n        /**\r\n         * Stream that emits true/false when openAll/closeAll is triggered.\r\n         */\r\n        this._openCloseAllActions = new Subject();\r\n        /**\r\n         * A readonly id value to use for unique selection coordination.\r\n         */\r\n        this.id = `cdk-accordion-${nextId++}`;\r\n        this._multi = false;\r\n    }\r\n    /**\r\n     * Whether the accordion should allow multiple expanded accordion items simultaneously.\r\n     * @return {?}\r\n     */\r\n    get multi() { return this._multi; }\r\n    /**\r\n     * @param {?} multi\r\n     * @return {?}\r\n     */\r\n    set multi(multi) { this._multi = coerceBooleanProperty(multi); }\r\n    /**\r\n     * Opens all enabled accordion items in an accordion where multi is enabled.\r\n     * @return {?}\r\n     */\r\n    openAll() {\r\n        this._openCloseAll(true);\r\n    }\r\n    /**\r\n     * Closes all enabled accordion items in an accordion where multi is enabled.\r\n     * @return {?}\r\n     */\r\n    closeAll() {\r\n        this._openCloseAll(false);\r\n    }\r\n    /**\r\n     * @param {?} changes\r\n     * @return {?}\r\n     */\r\n    ngOnChanges(changes) {\r\n        this._stateChanges.next(changes);\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    ngOnDestroy() {\r\n        this._stateChanges.complete();\r\n    }\r\n    /**\r\n     * @private\r\n     * @param {?} expanded\r\n     * @return {?}\r\n     */\r\n    _openCloseAll(expanded) {\r\n        if (this.multi) {\r\n            this._openCloseAllActions.next(expanded);\r\n        }\r\n    }\r\n}\r\nCdkAccordion.decorators = [\r\n    { type: Directive, args: [{\r\n                selector: 'cdk-accordion, [cdkAccordion]',\r\n                exportAs: 'cdkAccordion',\r\n            },] },\r\n];\r\nCdkAccordion.propDecorators = {\r\n    multi: [{ type: Input }]\r\n};\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n/**\r\n * Used to generate unique ID for each accordion item.\r\n * @type {?}\r\n */\r\nlet nextId$1 = 0;\r\nconst ɵ0 = undefined;\r\n/**\r\n * An basic directive expected to be extended and decorated as a component.  Sets up all\r\n * events and attributes needed to be managed by a CdkAccordion parent.\r\n */\r\nclass CdkAccordionItem {\r\n    /**\r\n     * @param {?} accordion\r\n     * @param {?} _changeDetectorRef\r\n     * @param {?} _expansionDispatcher\r\n     */\r\n    constructor(accordion, _changeDetectorRef, _expansionDispatcher) {\r\n        this.accordion = accordion;\r\n        this._changeDetectorRef = _changeDetectorRef;\r\n        this._expansionDispatcher = _expansionDispatcher;\r\n        /**\r\n         * Subscription to openAll/closeAll events.\r\n         */\r\n        this._openCloseAllSubscription = Subscription.EMPTY;\r\n        /**\r\n         * Event emitted every time the AccordionItem is closed.\r\n         */\r\n        this.closed = new EventEmitter();\r\n        /**\r\n         * Event emitted every time the AccordionItem is opened.\r\n         */\r\n        this.opened = new EventEmitter();\r\n        /**\r\n         * Event emitted when the AccordionItem is destroyed.\r\n         */\r\n        this.destroyed = new EventEmitter();\r\n        /**\r\n         * Emits whenever the expanded state of the accordion changes.\r\n         * Primarily used to facilitate two-way binding.\r\n         * \\@docs-private\r\n         */\r\n        this.expandedChange = new EventEmitter();\r\n        /**\r\n         * The unique AccordionItem id.\r\n         */\r\n        this.id = `cdk-accordion-child-${nextId$1++}`;\r\n        this._expanded = false;\r\n        this._disabled = false;\r\n        /**\r\n         * Unregister function for _expansionDispatcher.\r\n         */\r\n        this._removeUniqueSelectionListener = (/**\r\n         * @return {?}\r\n         */\r\n        () => { });\r\n        this._removeUniqueSelectionListener =\r\n            _expansionDispatcher.listen((/**\r\n             * @param {?} id\r\n             * @param {?} accordionId\r\n             * @return {?}\r\n             */\r\n            (id, accordionId) => {\r\n                if (this.accordion && !this.accordion.multi &&\r\n                    this.accordion.id === accordionId && this.id !== id) {\r\n                    this.expanded = false;\r\n                }\r\n            }));\r\n        // When an accordion item is hosted in an accordion, subscribe to open/close events.\r\n        if (this.accordion) {\r\n            this._openCloseAllSubscription = this._subscribeToOpenCloseAllActions();\r\n        }\r\n    }\r\n    /**\r\n     * Whether the AccordionItem is expanded.\r\n     * @return {?}\r\n     */\r\n    get expanded() { return this._expanded; }\r\n    /**\r\n     * @param {?} expanded\r\n     * @return {?}\r\n     */\r\n    set expanded(expanded) {\r\n        expanded = coerceBooleanProperty(expanded);\r\n        // Only emit events and update the internal value if the value changes.\r\n        if (this._expanded !== expanded) {\r\n            this._expanded = expanded;\r\n            this.expandedChange.emit(expanded);\r\n            if (expanded) {\r\n                this.opened.emit();\r\n                /**\r\n                 * In the unique selection dispatcher, the id parameter is the id of the CdkAccordionItem,\r\n                 * the name value is the id of the accordion.\r\n                 * @type {?}\r\n                 */\r\n                const accordionId = this.accordion ? this.accordion.id : this.id;\r\n                this._expansionDispatcher.notify(this.id, accordionId);\r\n            }\r\n            else {\r\n                this.closed.emit();\r\n            }\r\n            // Ensures that the animation will run when the value is set outside of an `@Input`.\r\n            // This includes cases like the open, close and toggle methods.\r\n            this._changeDetectorRef.markForCheck();\r\n        }\r\n    }\r\n    /**\r\n     * Whether the AccordionItem is disabled.\r\n     * @return {?}\r\n     */\r\n    get disabled() { return this._disabled; }\r\n    /**\r\n     * @param {?} disabled\r\n     * @return {?}\r\n     */\r\n    set disabled(disabled) { this._disabled = coerceBooleanProperty(disabled); }\r\n    /**\r\n     * Emits an event for the accordion item being destroyed.\r\n     * @return {?}\r\n     */\r\n    ngOnDestroy() {\r\n        this.opened.complete();\r\n        this.closed.complete();\r\n        this.destroyed.emit();\r\n        this.destroyed.complete();\r\n        this._removeUniqueSelectionListener();\r\n        this._openCloseAllSubscription.unsubscribe();\r\n    }\r\n    /**\r\n     * Toggles the expanded state of the accordion item.\r\n     * @return {?}\r\n     */\r\n    toggle() {\r\n        if (!this.disabled) {\r\n            this.expanded = !this.expanded;\r\n        }\r\n    }\r\n    /**\r\n     * Sets the expanded state of the accordion item to false.\r\n     * @return {?}\r\n     */\r\n    close() {\r\n        if (!this.disabled) {\r\n            this.expanded = false;\r\n        }\r\n    }\r\n    /**\r\n     * Sets the expanded state of the accordion item to true.\r\n     * @return {?}\r\n     */\r\n    open() {\r\n        if (!this.disabled) {\r\n            this.expanded = true;\r\n        }\r\n    }\r\n    /**\r\n     * @private\r\n     * @return {?}\r\n     */\r\n    _subscribeToOpenCloseAllActions() {\r\n        return this.accordion._openCloseAllActions.subscribe((/**\r\n         * @param {?} expanded\r\n         * @return {?}\r\n         */\r\n        expanded => {\r\n            // Only change expanded state if item is enabled\r\n            if (!this.disabled) {\r\n                this.expanded = expanded;\r\n            }\r\n        }));\r\n    }\r\n}\r\nCdkAccordionItem.decorators = [\r\n    { type: Directive, args: [{\r\n                selector: 'cdk-accordion-item, [cdkAccordionItem]',\r\n                exportAs: 'cdkAccordionItem',\r\n                providers: [\r\n                    // Provide CdkAccordion as undefined to prevent nested accordion items from registering\r\n                    // to the same accordion.\r\n                    { provide: CdkAccordion, useValue: ɵ0 },\r\n                ],\r\n            },] },\r\n];\r\n/** @nocollapse */\r\nCdkAccordionItem.ctorParameters = () => [\r\n    { type: CdkAccordion, decorators: [{ type: Optional }, { type: SkipSelf }] },\r\n    { type: ChangeDetectorRef },\r\n    { type: UniqueSelectionDispatcher }\r\n];\r\nCdkAccordionItem.propDecorators = {\r\n    closed: [{ type: Output }],\r\n    opened: [{ type: Output }],\r\n    destroyed: [{ type: Output }],\r\n    expandedChange: [{ type: Output }],\r\n    expanded: [{ type: Input }],\r\n    disabled: [{ type: Input }]\r\n};\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\nclass CdkAccordionModule {\r\n}\r\nCdkAccordionModule.decorators = [\r\n    { type: NgModule, args: [{\r\n                exports: [CdkAccordion, CdkAccordionItem],\r\n                declarations: [CdkAccordion, CdkAccordionItem],\r\n            },] },\r\n];\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n\r\nexport { CdkAccordionItem, CdkAccordion, CdkAccordionModule };\r\n\r\n"]}