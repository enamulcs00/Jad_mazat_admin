{"version":3,"sources":["v:/jad-admin-go/mazat_admin_panel/node_modules/@angular/material/bundles/material-divider.umd.js"],"names":[],"mappings":"AAAA;;;;;;;;gSAQ0M;8OACvB;8PACmB;2EAChJ;;AAAI;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;OAwCnD,AAgBD;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;yBAIA;;;;;;;;;;KAUD;;;;;;;;;;;wOAOC","file":"material-divider.umd.js","sourcesContent":["/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n(function (global, factory) {\r\n\ttypeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/cdk/coercion'), require('@angular/common'), require('@angular/material/core')) :\r\n\ttypeof define === 'function' && define.amd ? define('@angular/material/divider', ['exports', '@angular/core', '@angular/cdk/coercion', '@angular/common', '@angular/material/core'], factory) :\r\n\t(factory((global.ng = global.ng || {}, global.ng.material = global.ng.material || {}, global.ng.material.divider = {}),global.ng.core,global.ng.cdk.coercion,global.ng.common,global.ng.material.core));\r\n}(this, (function (exports,core,coercion,common,core$1) { 'use strict';\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\nvar MatDivider = /** @class */ (function () {\r\n    function MatDivider() {\r\n        this._vertical = false;\r\n        this._inset = false;\r\n    }\r\n    Object.defineProperty(MatDivider.prototype, \"vertical\", {\r\n        /** Whether the divider is vertically aligned. */\r\n        get: /**\r\n         * Whether the divider is vertically aligned.\r\n         * @return {?}\r\n         */\r\n        function () { return this._vertical; },\r\n        set: /**\r\n         * @param {?} value\r\n         * @return {?}\r\n         */\r\n        function (value) { this._vertical = coercion.coerceBooleanProperty(value); },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(MatDivider.prototype, \"inset\", {\r\n        /** Whether the divider is an inset divider. */\r\n        get: /**\r\n         * Whether the divider is an inset divider.\r\n         * @return {?}\r\n         */\r\n        function () { return this._inset; },\r\n        set: /**\r\n         * @param {?} value\r\n         * @return {?}\r\n         */\r\n        function (value) { this._inset = coercion.coerceBooleanProperty(value); },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    MatDivider.decorators = [\r\n        { type: core.Component, args: [{selector: 'mat-divider',\r\n                    host: {\r\n                        'role': 'separator',\r\n                        '[attr.aria-orientation]': 'vertical ? \"vertical\" : \"horizontal\"',\r\n                        '[class.mat-divider-vertical]': 'vertical',\r\n                        '[class.mat-divider-horizontal]': '!vertical',\r\n                        '[class.mat-divider-inset]': 'inset',\r\n                        'class': 'mat-divider'\r\n                    },\r\n                    template: '',\r\n                    styles: [\".mat-divider{display:block;margin:0;border-top-width:1px;border-top-style:solid}.mat-divider.mat-divider-vertical{border-top:0;border-right-width:1px;border-right-style:solid}.mat-divider.mat-divider-inset{margin-left:80px}[dir=rtl] .mat-divider.mat-divider-inset{margin-left:auto;margin-right:80px}\"],\r\n                    encapsulation: core.ViewEncapsulation.None,\r\n                    changeDetection: core.ChangeDetectionStrategy.OnPush,\r\n                },] },\r\n    ];\r\n    MatDivider.propDecorators = {\r\n        vertical: [{ type: core.Input }],\r\n        inset: [{ type: core.Input }]\r\n    };\r\n    return MatDivider;\r\n}());\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\nvar MatDividerModule = /** @class */ (function () {\r\n    function MatDividerModule() {\r\n    }\r\n    MatDividerModule.decorators = [\r\n        { type: core.NgModule, args: [{\r\n                    imports: [core$1.MatCommonModule, common.CommonModule],\r\n                    exports: [MatDivider, core$1.MatCommonModule],\r\n                    declarations: [MatDivider],\r\n                },] },\r\n    ];\r\n    return MatDividerModule;\r\n}());\r\n\r\nexports.MatDivider = MatDivider;\r\nexports.MatDividerModule = MatDividerModule;\r\n\r\nObject.defineProperty(exports, '__esModule', { value: true });\r\n\r\n})));\r\n\r\n"]}