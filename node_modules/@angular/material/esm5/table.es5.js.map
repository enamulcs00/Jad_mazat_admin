{"version":3,"sources":["v:/jad-admin-go/mazat_admin_panel/node_modules/@angular/material/esm5/table.es5.js"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAwBA;;;;;;;;;KASK;;;;;;;;;;;;;;;;;;;;;;;;;;oBAeC;;;;;;;;;;;;;;;;KAgBD;;;;;;;;;oBAMC;;;;;;;;;;;KAWD;;;;;;;;;oBAMC;;;;;;;;;;;KAWD;;;;;;;;;oBAMC;;;;;;;;;;;KAWD,AASC;;;;;;;;;;;;;;;;;;;;;;;;;;;cAKA;;;;;;;;;;;;KAYD,AASC;;;;;;;;;;;;;;;;;;sFAKG;;;;;;;;;;;;KAYJ,AASC;;;;;;;;;;;;;;;;;;sFAKG;;;;;;;;;;;;KAYJ,AASC;;;;;;;;;;;;;;;;;;sFAKG;;;;;;;;;;;;;;;;KAgBJ;;;;;;;;;;oBAOC;;;;;;;;;;;KAWD;;;;;;;;;;oBAOC;;;;;;;;;;;;;KAaD;;;;;;;;;;oBAOC;;;;;;;;;;KAUD;;;;;;;;;;;;;;;;;;;;;;oBAeC;;;;;;;;;;KAUD;;;;;;;;;;;;;;;;;;;;;;oBAeC;;;;;;;;;;KAUD;;;;;;;;;;;;;;;;;;;;;;oBAeC;;;;;;;;;;;;;;;;;;;;;;KAsBD;;;;;;;;;;;;;;;;;;;;;;;;;oBAaC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;KAgCD;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;cAWC","file":"table.es5.js","sourcesContent":["/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nimport { __extends } from 'tslib';\r\nimport { CDK_TABLE_TEMPLATE, CdkTable, CdkCell, CdkCellDef, CdkColumnDef, CdkFooterCell, CdkFooterCellDef, CdkHeaderCell, CdkHeaderCellDef, CDK_ROW_TEMPLATE, CdkFooterRow, CdkFooterRowDef, CdkHeaderRow, CdkHeaderRowDef, CdkRow, CdkRowDef, CdkTextColumn, CdkTableModule, DataSource } from '@angular/cdk/table';\r\nimport { ChangeDetectionStrategy, Component, ViewEncapsulation, Directive, ElementRef, Input, NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { MatCommonModule } from '@angular/material/core';\r\nimport { _isNumberValue } from '@angular/cdk/coercion';\r\nimport { BehaviorSubject, combineLatest, merge, of, Subscription, Subject } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n/**\r\n * Wrapper for the CdkTable with Material design styles.\r\n * @template T\r\n */\r\nvar MatTable = /** @class */ (function (_super) {\r\n    __extends(MatTable, _super);\r\n    function MatTable() {\r\n        var _this = _super !== null && _super.apply(this, arguments) || this;\r\n        /**\r\n         * Overrides the sticky CSS class set by the `CdkTable`.\r\n         */\r\n        _this.stickyCssClass = 'mat-table-sticky';\r\n        return _this;\r\n    }\r\n    MatTable.decorators = [\r\n        { type: Component, args: [{selector: 'mat-table, table[mat-table]',\r\n                    exportAs: 'matTable',\r\n                    template: CDK_TABLE_TEMPLATE,\r\n                    styles: [\"mat-table{display:block}mat-header-row{min-height:56px}mat-footer-row,mat-row{min-height:48px}mat-footer-row,mat-header-row,mat-row{display:flex;border-width:0;border-bottom-width:1px;border-style:solid;align-items:center;box-sizing:border-box}mat-footer-row::after,mat-header-row::after,mat-row::after{display:inline-block;min-height:inherit;content:''}mat-cell:first-of-type,mat-footer-cell:first-of-type,mat-header-cell:first-of-type{padding-left:24px}[dir=rtl] mat-cell:first-of-type,[dir=rtl] mat-footer-cell:first-of-type,[dir=rtl] mat-header-cell:first-of-type{padding-left:0;padding-right:24px}mat-cell:last-of-type,mat-footer-cell:last-of-type,mat-header-cell:last-of-type{padding-right:24px}[dir=rtl] mat-cell:last-of-type,[dir=rtl] mat-footer-cell:last-of-type,[dir=rtl] mat-header-cell:last-of-type{padding-right:0;padding-left:24px}mat-cell,mat-footer-cell,mat-header-cell{flex:1;display:flex;align-items:center;overflow:hidden;word-wrap:break-word;min-height:inherit}table.mat-table{border-spacing:0}tr.mat-header-row{height:56px}tr.mat-footer-row,tr.mat-row{height:48px}th.mat-header-cell{text-align:left}[dir=rtl] th.mat-header-cell{text-align:right}td.mat-cell,td.mat-footer-cell,th.mat-header-cell{padding:0;border-bottom-width:1px;border-bottom-style:solid}td.mat-cell:first-of-type,td.mat-footer-cell:first-of-type,th.mat-header-cell:first-of-type{padding-left:24px}[dir=rtl] td.mat-cell:first-of-type,[dir=rtl] td.mat-footer-cell:first-of-type,[dir=rtl] th.mat-header-cell:first-of-type{padding-left:0;padding-right:24px}td.mat-cell:last-of-type,td.mat-footer-cell:last-of-type,th.mat-header-cell:last-of-type{padding-right:24px}[dir=rtl] td.mat-cell:last-of-type,[dir=rtl] td.mat-footer-cell:last-of-type,[dir=rtl] th.mat-header-cell:last-of-type{padding-right:0;padding-left:24px}\"],\r\n                    host: {\r\n                        'class': 'mat-table',\r\n                    },\r\n                    providers: [{ provide: CdkTable, useExisting: MatTable }],\r\n                    encapsulation: ViewEncapsulation.None,\r\n                    // See note on CdkTable for explanation on why this uses the default change detection strategy.\r\n                    // tslint:disable-next-line:validate-decorators\r\n                    changeDetection: ChangeDetectionStrategy.Default,\r\n                },] },\r\n    ];\r\n    return MatTable;\r\n}(CdkTable));\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n/**\r\n * Cell definition for the mat-table.\r\n * Captures the template of a column's data row cell as well as cell-specific properties.\r\n */\r\nvar MatCellDef = /** @class */ (function (_super) {\r\n    __extends(MatCellDef, _super);\r\n    function MatCellDef() {\r\n        return _super !== null && _super.apply(this, arguments) || this;\r\n    }\r\n    MatCellDef.decorators = [\r\n        { type: Directive, args: [{\r\n                    selector: '[matCellDef]',\r\n                    providers: [{ provide: CdkCellDef, useExisting: MatCellDef }]\r\n                },] },\r\n    ];\r\n    return MatCellDef;\r\n}(CdkCellDef));\r\n/**\r\n * Header cell definition for the mat-table.\r\n * Captures the template of a column's header cell and as well as cell-specific properties.\r\n */\r\nvar MatHeaderCellDef = /** @class */ (function (_super) {\r\n    __extends(MatHeaderCellDef, _super);\r\n    function MatHeaderCellDef() {\r\n        return _super !== null && _super.apply(this, arguments) || this;\r\n    }\r\n    MatHeaderCellDef.decorators = [\r\n        { type: Directive, args: [{\r\n                    selector: '[matHeaderCellDef]',\r\n                    providers: [{ provide: CdkHeaderCellDef, useExisting: MatHeaderCellDef }]\r\n                },] },\r\n    ];\r\n    return MatHeaderCellDef;\r\n}(CdkHeaderCellDef));\r\n/**\r\n * Footer cell definition for the mat-table.\r\n * Captures the template of a column's footer cell and as well as cell-specific properties.\r\n */\r\nvar MatFooterCellDef = /** @class */ (function (_super) {\r\n    __extends(MatFooterCellDef, _super);\r\n    function MatFooterCellDef() {\r\n        return _super !== null && _super.apply(this, arguments) || this;\r\n    }\r\n    MatFooterCellDef.decorators = [\r\n        { type: Directive, args: [{\r\n                    selector: '[matFooterCellDef]',\r\n                    providers: [{ provide: CdkFooterCellDef, useExisting: MatFooterCellDef }]\r\n                },] },\r\n    ];\r\n    return MatFooterCellDef;\r\n}(CdkFooterCellDef));\r\n/**\r\n * Column definition for the mat-table.\r\n * Defines a set of cells available for a table column.\r\n */\r\nvar MatColumnDef = /** @class */ (function (_super) {\r\n    __extends(MatColumnDef, _super);\r\n    function MatColumnDef() {\r\n        return _super !== null && _super.apply(this, arguments) || this;\r\n    }\r\n    MatColumnDef.decorators = [\r\n        { type: Directive, args: [{\r\n                    selector: '[matColumnDef]',\r\n                    providers: [\r\n                        { provide: CdkColumnDef, useExisting: MatColumnDef },\r\n                        { provide: 'MAT_SORT_HEADER_COLUMN_DEF', useExisting: MatColumnDef }\r\n                    ],\r\n                },] },\r\n    ];\r\n    MatColumnDef.propDecorators = {\r\n        name: [{ type: Input, args: ['matColumnDef',] }],\r\n        sticky: [{ type: Input }],\r\n        stickyEnd: [{ type: Input }]\r\n    };\r\n    return MatColumnDef;\r\n}(CdkColumnDef));\r\n/**\r\n * Header cell template container that adds the right classes and role.\r\n */\r\nvar MatHeaderCell = /** @class */ (function (_super) {\r\n    __extends(MatHeaderCell, _super);\r\n    function MatHeaderCell(columnDef, elementRef) {\r\n        var _this = _super.call(this, columnDef, elementRef) || this;\r\n        elementRef.nativeElement.classList.add(\"mat-column-\" + columnDef.cssClassFriendlyName);\r\n        return _this;\r\n    }\r\n    MatHeaderCell.decorators = [\r\n        { type: Directive, args: [{\r\n                    selector: 'mat-header-cell, th[mat-header-cell]',\r\n                    host: {\r\n                        'class': 'mat-header-cell',\r\n                        'role': 'columnheader',\r\n                    },\r\n                },] },\r\n    ];\r\n    /** @nocollapse */\r\n    MatHeaderCell.ctorParameters = function () { return [\r\n        { type: CdkColumnDef },\r\n        { type: ElementRef }\r\n    ]; };\r\n    return MatHeaderCell;\r\n}(CdkHeaderCell));\r\n/**\r\n * Footer cell template container that adds the right classes and role.\r\n */\r\nvar MatFooterCell = /** @class */ (function (_super) {\r\n    __extends(MatFooterCell, _super);\r\n    function MatFooterCell(columnDef, elementRef) {\r\n        var _this = _super.call(this, columnDef, elementRef) || this;\r\n        elementRef.nativeElement.classList.add(\"mat-column-\" + columnDef.cssClassFriendlyName);\r\n        return _this;\r\n    }\r\n    MatFooterCell.decorators = [\r\n        { type: Directive, args: [{\r\n                    selector: 'mat-footer-cell, td[mat-footer-cell]',\r\n                    host: {\r\n                        'class': 'mat-footer-cell',\r\n                        'role': 'gridcell',\r\n                    },\r\n                },] },\r\n    ];\r\n    /** @nocollapse */\r\n    MatFooterCell.ctorParameters = function () { return [\r\n        { type: CdkColumnDef },\r\n        { type: ElementRef }\r\n    ]; };\r\n    return MatFooterCell;\r\n}(CdkFooterCell));\r\n/**\r\n * Cell template container that adds the right classes and role.\r\n */\r\nvar MatCell = /** @class */ (function (_super) {\r\n    __extends(MatCell, _super);\r\n    function MatCell(columnDef, elementRef) {\r\n        var _this = _super.call(this, columnDef, elementRef) || this;\r\n        elementRef.nativeElement.classList.add(\"mat-column-\" + columnDef.cssClassFriendlyName);\r\n        return _this;\r\n    }\r\n    MatCell.decorators = [\r\n        { type: Directive, args: [{\r\n                    selector: 'mat-cell, td[mat-cell]',\r\n                    host: {\r\n                        'class': 'mat-cell',\r\n                        'role': 'gridcell',\r\n                    },\r\n                },] },\r\n    ];\r\n    /** @nocollapse */\r\n    MatCell.ctorParameters = function () { return [\r\n        { type: CdkColumnDef },\r\n        { type: ElementRef }\r\n    ]; };\r\n    return MatCell;\r\n}(CdkCell));\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n/**\r\n * Header row definition for the mat-table.\r\n * Captures the header row's template and other header properties such as the columns to display.\r\n */\r\nvar MatHeaderRowDef = /** @class */ (function (_super) {\r\n    __extends(MatHeaderRowDef, _super);\r\n    function MatHeaderRowDef() {\r\n        return _super !== null && _super.apply(this, arguments) || this;\r\n    }\r\n    MatHeaderRowDef.decorators = [\r\n        { type: Directive, args: [{\r\n                    selector: '[matHeaderRowDef]',\r\n                    providers: [{ provide: CdkHeaderRowDef, useExisting: MatHeaderRowDef }],\r\n                    inputs: ['columns: matHeaderRowDef', 'sticky: matHeaderRowDefSticky'],\r\n                },] },\r\n    ];\r\n    return MatHeaderRowDef;\r\n}(CdkHeaderRowDef));\r\n/**\r\n * Footer row definition for the mat-table.\r\n * Captures the footer row's template and other footer properties such as the columns to display.\r\n */\r\nvar MatFooterRowDef = /** @class */ (function (_super) {\r\n    __extends(MatFooterRowDef, _super);\r\n    function MatFooterRowDef() {\r\n        return _super !== null && _super.apply(this, arguments) || this;\r\n    }\r\n    MatFooterRowDef.decorators = [\r\n        { type: Directive, args: [{\r\n                    selector: '[matFooterRowDef]',\r\n                    providers: [{ provide: CdkFooterRowDef, useExisting: MatFooterRowDef }],\r\n                    inputs: ['columns: matFooterRowDef', 'sticky: matFooterRowDefSticky'],\r\n                },] },\r\n    ];\r\n    return MatFooterRowDef;\r\n}(CdkFooterRowDef));\r\n/**\r\n * Data row definition for the mat-table.\r\n * Captures the data row's template and other properties such as the columns to display and\r\n * a when predicate that describes when this row should be used.\r\n * @template T\r\n */\r\nvar MatRowDef = /** @class */ (function (_super) {\r\n    __extends(MatRowDef, _super);\r\n    function MatRowDef() {\r\n        return _super !== null && _super.apply(this, arguments) || this;\r\n    }\r\n    MatRowDef.decorators = [\r\n        { type: Directive, args: [{\r\n                    selector: '[matRowDef]',\r\n                    providers: [{ provide: CdkRowDef, useExisting: MatRowDef }],\r\n                    inputs: ['columns: matRowDefColumns', 'when: matRowDefWhen'],\r\n                },] },\r\n    ];\r\n    return MatRowDef;\r\n}(CdkRowDef));\r\n/**\r\n * Footer template container that contains the cell outlet. Adds the right class and role.\r\n */\r\nvar MatHeaderRow = /** @class */ (function (_super) {\r\n    __extends(MatHeaderRow, _super);\r\n    function MatHeaderRow() {\r\n        return _super !== null && _super.apply(this, arguments) || this;\r\n    }\r\n    MatHeaderRow.decorators = [\r\n        { type: Component, args: [{selector: 'mat-header-row, tr[mat-header-row]',\r\n                    template: CDK_ROW_TEMPLATE,\r\n                    host: {\r\n                        'class': 'mat-header-row',\r\n                        'role': 'row',\r\n                    },\r\n                    // See note on CdkTable for explanation on why this uses the default change detection strategy.\r\n                    // tslint:disable-next-line:validate-decorators\r\n                    changeDetection: ChangeDetectionStrategy.Default,\r\n                    encapsulation: ViewEncapsulation.None,\r\n                    exportAs: 'matHeaderRow',\r\n                    providers: [{ provide: CdkHeaderRow, useExisting: MatHeaderRow }],\r\n                },] },\r\n    ];\r\n    return MatHeaderRow;\r\n}(CdkHeaderRow));\r\n/**\r\n * Footer template container that contains the cell outlet. Adds the right class and role.\r\n */\r\nvar MatFooterRow = /** @class */ (function (_super) {\r\n    __extends(MatFooterRow, _super);\r\n    function MatFooterRow() {\r\n        return _super !== null && _super.apply(this, arguments) || this;\r\n    }\r\n    MatFooterRow.decorators = [\r\n        { type: Component, args: [{selector: 'mat-footer-row, tr[mat-footer-row]',\r\n                    template: CDK_ROW_TEMPLATE,\r\n                    host: {\r\n                        'class': 'mat-footer-row',\r\n                        'role': 'row',\r\n                    },\r\n                    // See note on CdkTable for explanation on why this uses the default change detection strategy.\r\n                    // tslint:disable-next-line:validate-decorators\r\n                    changeDetection: ChangeDetectionStrategy.Default,\r\n                    encapsulation: ViewEncapsulation.None,\r\n                    exportAs: 'matFooterRow',\r\n                    providers: [{ provide: CdkFooterRow, useExisting: MatFooterRow }],\r\n                },] },\r\n    ];\r\n    return MatFooterRow;\r\n}(CdkFooterRow));\r\n/**\r\n * Data row template container that contains the cell outlet. Adds the right class and role.\r\n */\r\nvar MatRow = /** @class */ (function (_super) {\r\n    __extends(MatRow, _super);\r\n    function MatRow() {\r\n        return _super !== null && _super.apply(this, arguments) || this;\r\n    }\r\n    MatRow.decorators = [\r\n        { type: Component, args: [{selector: 'mat-row, tr[mat-row]',\r\n                    template: CDK_ROW_TEMPLATE,\r\n                    host: {\r\n                        'class': 'mat-row',\r\n                        'role': 'row',\r\n                    },\r\n                    // See note on CdkTable for explanation on why this uses the default change detection strategy.\r\n                    // tslint:disable-next-line:validate-decorators\r\n                    changeDetection: ChangeDetectionStrategy.Default,\r\n                    encapsulation: ViewEncapsulation.None,\r\n                    exportAs: 'matRow',\r\n                    providers: [{ provide: CdkRow, useExisting: MatRow }],\r\n                },] },\r\n    ];\r\n    return MatRow;\r\n}(CdkRow));\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n/**\r\n * Column that simply shows text content for the header and row cells. Assumes that the table\r\n * is using the native table implementation (`<table>`).\r\n *\r\n * By default, the name of this column will be the header text and data property accessor.\r\n * The header text can be overridden with the `headerText` input. Cell values can be overridden with\r\n * the `dataAccessor` input. Change the text justification to the start or end using the `justify`\r\n * input.\r\n * @template T\r\n */\r\nvar MatTextColumn = /** @class */ (function (_super) {\r\n    __extends(MatTextColumn, _super);\r\n    function MatTextColumn() {\r\n        return _super !== null && _super.apply(this, arguments) || this;\r\n    }\r\n    MatTextColumn.decorators = [\r\n        { type: Component, args: [{selector: 'mat-text-column',\r\n                    template: \"\\n    <ng-container matColumnDef>\\n      <th mat-header-cell *matHeaderCellDef [style.text-align]=\\\"justify\\\">\\n        {{headerText}}\\n      </th>\\n      <td mat-cell *matCellDef=\\\"let data\\\" [style.text-align]=\\\"justify\\\">\\n        {{dataAccessor(data, name)}}\\n      </td>\\n    </ng-container>\\n  \",\r\n                    encapsulation: ViewEncapsulation.None,\r\n                    // Change detection is intentionally not set to OnPush. This component's template will be provided\r\n                    // to the table to be inserted into its view. This is problematic when change detection runs since\r\n                    // the bindings in this template will be evaluated _after_ the table's view is evaluated, which\r\n                    // mean's the template in the table's view will not have the updated value (and in fact will cause\r\n                    // an ExpressionChangedAfterItHasBeenCheckedError).\r\n                    // tslint:disable-next-line:validate-decorators\r\n                    changeDetection: ChangeDetectionStrategy.Default,\r\n                },] },\r\n    ];\r\n    return MatTextColumn;\r\n}(CdkTextColumn));\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n/** @type {?} */\r\nvar EXPORTED_DECLARATIONS = [\r\n    // Table\r\n    MatTable,\r\n    // Template defs\r\n    MatHeaderCellDef,\r\n    MatHeaderRowDef,\r\n    MatColumnDef,\r\n    MatCellDef,\r\n    MatRowDef,\r\n    MatFooterCellDef,\r\n    MatFooterRowDef,\r\n    // Cell directives\r\n    MatHeaderCell,\r\n    MatCell,\r\n    MatFooterCell,\r\n    // Row directives\r\n    MatHeaderRow,\r\n    MatRow,\r\n    MatFooterRow,\r\n    MatTextColumn,\r\n];\r\nvar MatTableModule = /** @class */ (function () {\r\n    function MatTableModule() {\r\n    }\r\n    MatTableModule.decorators = [\r\n        { type: NgModule, args: [{\r\n                    imports: [\r\n                        CdkTableModule,\r\n                        CommonModule,\r\n                        MatCommonModule,\r\n                    ],\r\n                    exports: EXPORTED_DECLARATIONS,\r\n                    declarations: EXPORTED_DECLARATIONS,\r\n                },] },\r\n    ];\r\n    return MatTableModule;\r\n}());\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n/**\r\n * Corresponds to `Number.MAX_SAFE_INTEGER`. Moved out into a variable here due to\r\n * flaky browser support and the value not being defined in Closure's typings.\r\n * @type {?}\r\n */\r\nvar MAX_SAFE_INTEGER = 9007199254740991;\r\n/**\r\n * Data source that accepts a client-side data array and includes native support of filtering,\r\n * sorting (using MatSort), and pagination (using MatPaginator).\r\n *\r\n * Allows for sort customization by overriding sortingDataAccessor, which defines how data\r\n * properties are accessed. Also allows for filter customization by overriding filterTermAccessor,\r\n * which defines how row data is converted to a string for filter matching.\r\n *\r\n * **Note:** This class is meant to be a simple data source to help you get started. As such\r\n * it isn't equipped to handle some more advanced cases like robust i18n support or server-side\r\n * interactions. If your app needs to support more advanced use cases, consider implementing your\r\n * own `DataSource`.\r\n * @template T\r\n */\r\nvar  /**\r\n * Data source that accepts a client-side data array and includes native support of filtering,\r\n * sorting (using MatSort), and pagination (using MatPaginator).\r\n *\r\n * Allows for sort customization by overriding sortingDataAccessor, which defines how data\r\n * properties are accessed. Also allows for filter customization by overriding filterTermAccessor,\r\n * which defines how row data is converted to a string for filter matching.\r\n *\r\n * **Note:** This class is meant to be a simple data source to help you get started. As such\r\n * it isn't equipped to handle some more advanced cases like robust i18n support or server-side\r\n * interactions. If your app needs to support more advanced use cases, consider implementing your\r\n * own `DataSource`.\r\n * @template T\r\n */\r\nMatTableDataSource = /** @class */ (function (_super) {\r\n    __extends(MatTableDataSource, _super);\r\n    function MatTableDataSource(initialData) {\r\n        if (initialData === void 0) { initialData = []; }\r\n        var _this = _super.call(this) || this;\r\n        /**\r\n         * Stream emitting render data to the table (depends on ordered data changes).\r\n         */\r\n        _this._renderData = new BehaviorSubject([]);\r\n        /**\r\n         * Stream that emits when a new filter string is set on the data source.\r\n         */\r\n        _this._filter = new BehaviorSubject('');\r\n        /**\r\n         * Used to react to internal changes of the paginator that are made by the data source itself.\r\n         */\r\n        _this._internalPageChanges = new Subject();\r\n        /**\r\n         * Subscription to the changes that should trigger an update to the table's rendered rows, such\r\n         * as filtering, sorting, pagination, or base data changes.\r\n         */\r\n        _this._renderChangesSubscription = Subscription.EMPTY;\r\n        /**\r\n         * Data accessor function that is used for accessing data properties for sorting through\r\n         * the default sortData function.\r\n         * This default function assumes that the sort header IDs (which defaults to the column name)\r\n         * matches the data's properties (e.g. column Xyz represents data['Xyz']).\r\n         * May be set to a custom function for different behavior.\r\n         * @param data Data object that is being accessed.\r\n         * @param sortHeaderId The name of the column that represents the data.\r\n         */\r\n        _this.sortingDataAccessor = (/**\r\n         * @param {?} data\r\n         * @param {?} sortHeaderId\r\n         * @return {?}\r\n         */\r\n        function (data, sortHeaderId) {\r\n            /** @type {?} */\r\n            var value = ((/** @type {?} */ (data)))[sortHeaderId];\r\n            if (_isNumberValue(value)) {\r\n                /** @type {?} */\r\n                var numberValue = Number(value);\r\n                // Numbers beyond `MAX_SAFE_INTEGER` can't be compared reliably so we\r\n                // leave them as strings. For more info: https://goo.gl/y5vbSg\r\n                return numberValue < MAX_SAFE_INTEGER ? numberValue : value;\r\n            }\r\n            return value;\r\n        });\r\n        /**\r\n         * Gets a sorted copy of the data array based on the state of the MatSort. Called\r\n         * after changes are made to the filtered data or when sort changes are emitted from MatSort.\r\n         * By default, the function retrieves the active sort and its direction and compares data\r\n         * by retrieving data using the sortingDataAccessor. May be overridden for a custom implementation\r\n         * of data ordering.\r\n         * @param data The array of data that should be sorted.\r\n         * @param sort The connected MatSort that holds the current sort state.\r\n         */\r\n        _this.sortData = (/**\r\n         * @param {?} data\r\n         * @param {?} sort\r\n         * @return {?}\r\n         */\r\n        function (data, sort) {\r\n            /** @type {?} */\r\n            var active = sort.active;\r\n            /** @type {?} */\r\n            var direction = sort.direction;\r\n            if (!active || direction == '') {\r\n                return data;\r\n            }\r\n            return data.sort((/**\r\n             * @param {?} a\r\n             * @param {?} b\r\n             * @return {?}\r\n             */\r\n            function (a, b) {\r\n                /** @type {?} */\r\n                var valueA = _this.sortingDataAccessor(a, active);\r\n                /** @type {?} */\r\n                var valueB = _this.sortingDataAccessor(b, active);\r\n                // If both valueA and valueB exist (truthy), then compare the two. Otherwise, check if\r\n                // one value exists while the other doesn't. In this case, existing value should come last.\r\n                // This avoids inconsistent results when comparing values to undefined/null.\r\n                // If neither value exists, return 0 (equal).\r\n                /** @type {?} */\r\n                var comparatorResult = 0;\r\n                if (valueA != null && valueB != null) {\r\n                    // Check if one value is greater than the other; if equal, comparatorResult should remain 0.\r\n                    if (valueA > valueB) {\r\n                        comparatorResult = 1;\r\n                    }\r\n                    else if (valueA < valueB) {\r\n                        comparatorResult = -1;\r\n                    }\r\n                }\r\n                else if (valueA != null) {\r\n                    comparatorResult = 1;\r\n                }\r\n                else if (valueB != null) {\r\n                    comparatorResult = -1;\r\n                }\r\n                return comparatorResult * (direction == 'asc' ? 1 : -1);\r\n            }));\r\n        });\r\n        /**\r\n         * Checks if a data object matches the data source's filter string. By default, each data object\r\n         * is converted to a string of its properties and returns true if the filter has\r\n         * at least one occurrence in that string. By default, the filter string has its whitespace\r\n         * trimmed and the match is case-insensitive. May be overridden for a custom implementation of\r\n         * filter matching.\r\n         * @param data Data object used to check against the filter.\r\n         * @param filter Filter string that has been set on the data source.\r\n         * @return Whether the filter matches against the data\r\n         */\r\n        _this.filterPredicate = (/**\r\n         * @param {?} data\r\n         * @param {?} filter\r\n         * @return {?}\r\n         */\r\n        function (data, filter) {\r\n            // Transform the data into a lowercase string of all property values.\r\n            /** @type {?} */\r\n            var dataStr = Object.keys(data).reduce((/**\r\n             * @param {?} currentTerm\r\n             * @param {?} key\r\n             * @return {?}\r\n             */\r\n            function (currentTerm, key) {\r\n                // Use an obscure Unicode character to delimit the words in the concatenated string.\r\n                // This avoids matches where the values of two columns combined will match the user's query\r\n                // (e.g. `Flute` and `Stop` will match `Test`). The character is intended to be something\r\n                // that has a very low chance of being typed in by somebody in a text field. This one in\r\n                // particular is \"White up-pointing triangle with dot\" from\r\n                // https://en.wikipedia.org/wiki/List_of_Unicode_characters\r\n                return currentTerm + ((/** @type {?} */ (data)))[key] + '◬';\r\n            }), '').toLowerCase();\r\n            // Transform the filter by converting it to lowercase and removing whitespace.\r\n            /** @type {?} */\r\n            var transformedFilter = filter.trim().toLowerCase();\r\n            return dataStr.indexOf(transformedFilter) != -1;\r\n        });\r\n        _this._data = new BehaviorSubject(initialData);\r\n        _this._updateChangeSubscription();\r\n        return _this;\r\n    }\r\n    Object.defineProperty(MatTableDataSource.prototype, \"data\", {\r\n        /** Array of data that should be rendered by the table, where each object represents one row. */\r\n        get: /**\r\n         * Array of data that should be rendered by the table, where each object represents one row.\r\n         * @return {?}\r\n         */\r\n        function () { return this._data.value; },\r\n        set: /**\r\n         * @param {?} data\r\n         * @return {?}\r\n         */\r\n        function (data) { this._data.next(data); },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(MatTableDataSource.prototype, \"filter\", {\r\n        /**\r\n         * Filter term that should be used to filter out objects from the data array. To override how\r\n         * data objects match to this filter string, provide a custom function for filterPredicate.\r\n         */\r\n        get: /**\r\n         * Filter term that should be used to filter out objects from the data array. To override how\r\n         * data objects match to this filter string, provide a custom function for filterPredicate.\r\n         * @return {?}\r\n         */\r\n        function () { return this._filter.value; },\r\n        set: /**\r\n         * @param {?} filter\r\n         * @return {?}\r\n         */\r\n        function (filter) { this._filter.next(filter); },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(MatTableDataSource.prototype, \"sort\", {\r\n        /**\r\n         * Instance of the MatSort directive used by the table to control its sorting. Sort changes\r\n         * emitted by the MatSort will trigger an update to the table's rendered data.\r\n         */\r\n        get: /**\r\n         * Instance of the MatSort directive used by the table to control its sorting. Sort changes\r\n         * emitted by the MatSort will trigger an update to the table's rendered data.\r\n         * @return {?}\r\n         */\r\n        function () { return this._sort; },\r\n        set: /**\r\n         * @param {?} sort\r\n         * @return {?}\r\n         */\r\n        function (sort) {\r\n            this._sort = sort;\r\n            this._updateChangeSubscription();\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(MatTableDataSource.prototype, \"paginator\", {\r\n        /**\r\n         * Instance of the MatPaginator component used by the table to control what page of the data is\r\n         * displayed. Page changes emitted by the MatPaginator will trigger an update to the\r\n         * table's rendered data.\r\n         *\r\n         * Note that the data source uses the paginator's properties to calculate which page of data\r\n         * should be displayed. If the paginator receives its properties as template inputs,\r\n         * e.g. `[pageLength]=100` or `[pageIndex]=1`, then be sure that the paginator's view has been\r\n         * initialized before assigning it to this data source.\r\n         */\r\n        get: /**\r\n         * Instance of the MatPaginator component used by the table to control what page of the data is\r\n         * displayed. Page changes emitted by the MatPaginator will trigger an update to the\r\n         * table's rendered data.\r\n         *\r\n         * Note that the data source uses the paginator's properties to calculate which page of data\r\n         * should be displayed. If the paginator receives its properties as template inputs,\r\n         * e.g. `[pageLength]=100` or `[pageIndex]=1`, then be sure that the paginator's view has been\r\n         * initialized before assigning it to this data source.\r\n         * @return {?}\r\n         */\r\n        function () { return this._paginator; },\r\n        set: /**\r\n         * @param {?} paginator\r\n         * @return {?}\r\n         */\r\n        function (paginator) {\r\n            this._paginator = paginator;\r\n            this._updateChangeSubscription();\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Subscribe to changes that should trigger an update to the table's rendered rows. When the\r\n     * changes occur, process the current state of the filter, sort, and pagination along with\r\n     * the provided base data and send it to the table for rendering.\r\n     */\r\n    /**\r\n     * Subscribe to changes that should trigger an update to the table's rendered rows. When the\r\n     * changes occur, process the current state of the filter, sort, and pagination along with\r\n     * the provided base data and send it to the table for rendering.\r\n     * @return {?}\r\n     */\r\n    MatTableDataSource.prototype._updateChangeSubscription = /**\r\n     * Subscribe to changes that should trigger an update to the table's rendered rows. When the\r\n     * changes occur, process the current state of the filter, sort, and pagination along with\r\n     * the provided base data and send it to the table for rendering.\r\n     * @return {?}\r\n     */\r\n    function () {\r\n        var _this = this;\r\n        // Sorting and/or pagination should be watched if MatSort and/or MatPaginator are provided.\r\n        // The events should emit whenever the component emits a change or initializes, or if no\r\n        // component is provided, a stream with just a null event should be provided.\r\n        // The `sortChange` and `pageChange` acts as a signal to the combineLatests below so that the\r\n        // pipeline can progress to the next step. Note that the value from these streams are not used,\r\n        // they purely act as a signal to progress in the pipeline.\r\n        /** @type {?} */\r\n        var sortChange = this._sort ?\r\n            (/** @type {?} */ (merge(this._sort.sortChange, this._sort.initialized))) :\r\n            of(null);\r\n        /** @type {?} */\r\n        var pageChange = this._paginator ?\r\n            (/** @type {?} */ (merge(this._paginator.page, this._internalPageChanges, this._paginator.initialized))) :\r\n            of(null);\r\n        /** @type {?} */\r\n        var dataStream = this._data;\r\n        // Watch for base data or filter changes to provide a filtered set of data.\r\n        /** @type {?} */\r\n        var filteredData = combineLatest([dataStream, this._filter])\r\n            .pipe(map((/**\r\n         * @param {?} __0\r\n         * @return {?}\r\n         */\r\n        function (_a) {\r\n            var data = _a[0];\r\n            return _this._filterData(data);\r\n        })));\r\n        // Watch for filtered data or sort changes to provide an ordered set of data.\r\n        /** @type {?} */\r\n        var orderedData = combineLatest([filteredData, sortChange])\r\n            .pipe(map((/**\r\n         * @param {?} __0\r\n         * @return {?}\r\n         */\r\n        function (_a) {\r\n            var data = _a[0];\r\n            return _this._orderData(data);\r\n        })));\r\n        // Watch for ordered data or page changes to provide a paged set of data.\r\n        /** @type {?} */\r\n        var paginatedData = combineLatest([orderedData, pageChange])\r\n            .pipe(map((/**\r\n         * @param {?} __0\r\n         * @return {?}\r\n         */\r\n        function (_a) {\r\n            var data = _a[0];\r\n            return _this._pageData(data);\r\n        })));\r\n        // Watched for paged data changes and send the result to the table to render.\r\n        this._renderChangesSubscription.unsubscribe();\r\n        this._renderChangesSubscription = paginatedData.subscribe((/**\r\n         * @param {?} data\r\n         * @return {?}\r\n         */\r\n        function (data) { return _this._renderData.next(data); }));\r\n    };\r\n    /**\r\n     * Returns a filtered data array where each filter object contains the filter string within\r\n     * the result of the filterTermAccessor function. If no filter is set, returns the data array\r\n     * as provided.\r\n     */\r\n    /**\r\n     * Returns a filtered data array where each filter object contains the filter string within\r\n     * the result of the filterTermAccessor function. If no filter is set, returns the data array\r\n     * as provided.\r\n     * @param {?} data\r\n     * @return {?}\r\n     */\r\n    MatTableDataSource.prototype._filterData = /**\r\n     * Returns a filtered data array where each filter object contains the filter string within\r\n     * the result of the filterTermAccessor function. If no filter is set, returns the data array\r\n     * as provided.\r\n     * @param {?} data\r\n     * @return {?}\r\n     */\r\n    function (data) {\r\n        var _this = this;\r\n        // If there is a filter string, filter out data that does not contain it.\r\n        // Each data object is converted to a string using the function defined by filterTermAccessor.\r\n        // May be overridden for customization.\r\n        this.filteredData =\r\n            !this.filter ? data : data.filter((/**\r\n             * @param {?} obj\r\n             * @return {?}\r\n             */\r\n            function (obj) { return _this.filterPredicate(obj, _this.filter); }));\r\n        if (this.paginator) {\r\n            this._updatePaginator(this.filteredData.length);\r\n        }\r\n        return this.filteredData;\r\n    };\r\n    /**\r\n     * Returns a sorted copy of the data if MatSort has a sort applied, otherwise just returns the\r\n     * data array as provided. Uses the default data accessor for data lookup, unless a\r\n     * sortDataAccessor function is defined.\r\n     */\r\n    /**\r\n     * Returns a sorted copy of the data if MatSort has a sort applied, otherwise just returns the\r\n     * data array as provided. Uses the default data accessor for data lookup, unless a\r\n     * sortDataAccessor function is defined.\r\n     * @param {?} data\r\n     * @return {?}\r\n     */\r\n    MatTableDataSource.prototype._orderData = /**\r\n     * Returns a sorted copy of the data if MatSort has a sort applied, otherwise just returns the\r\n     * data array as provided. Uses the default data accessor for data lookup, unless a\r\n     * sortDataAccessor function is defined.\r\n     * @param {?} data\r\n     * @return {?}\r\n     */\r\n    function (data) {\r\n        // If there is no active sort or direction, return the data without trying to sort.\r\n        if (!this.sort) {\r\n            return data;\r\n        }\r\n        return this.sortData(data.slice(), this.sort);\r\n    };\r\n    /**\r\n     * Returns a paged slice of the provided data array according to the provided MatPaginator's page\r\n     * index and length. If there is no paginator provided, returns the data array as provided.\r\n     */\r\n    /**\r\n     * Returns a paged slice of the provided data array according to the provided MatPaginator's page\r\n     * index and length. If there is no paginator provided, returns the data array as provided.\r\n     * @param {?} data\r\n     * @return {?}\r\n     */\r\n    MatTableDataSource.prototype._pageData = /**\r\n     * Returns a paged slice of the provided data array according to the provided MatPaginator's page\r\n     * index and length. If there is no paginator provided, returns the data array as provided.\r\n     * @param {?} data\r\n     * @return {?}\r\n     */\r\n    function (data) {\r\n        if (!this.paginator) {\r\n            return data;\r\n        }\r\n        /** @type {?} */\r\n        var startIndex = this.paginator.pageIndex * this.paginator.pageSize;\r\n        return data.slice(startIndex, startIndex + this.paginator.pageSize);\r\n    };\r\n    /**\r\n     * Updates the paginator to reflect the length of the filtered data, and makes sure that the page\r\n     * index does not exceed the paginator's last page. Values are changed in a resolved promise to\r\n     * guard against making property changes within a round of change detection.\r\n     */\r\n    /**\r\n     * Updates the paginator to reflect the length of the filtered data, and makes sure that the page\r\n     * index does not exceed the paginator's last page. Values are changed in a resolved promise to\r\n     * guard against making property changes within a round of change detection.\r\n     * @param {?} filteredDataLength\r\n     * @return {?}\r\n     */\r\n    MatTableDataSource.prototype._updatePaginator = /**\r\n     * Updates the paginator to reflect the length of the filtered data, and makes sure that the page\r\n     * index does not exceed the paginator's last page. Values are changed in a resolved promise to\r\n     * guard against making property changes within a round of change detection.\r\n     * @param {?} filteredDataLength\r\n     * @return {?}\r\n     */\r\n    function (filteredDataLength) {\r\n        var _this = this;\r\n        Promise.resolve().then((/**\r\n         * @return {?}\r\n         */\r\n        function () {\r\n            /** @type {?} */\r\n            var paginator = _this.paginator;\r\n            if (!paginator) {\r\n                return;\r\n            }\r\n            paginator.length = filteredDataLength;\r\n            // If the page index is set beyond the page, reduce it to the last page.\r\n            if (paginator.pageIndex > 0) {\r\n                /** @type {?} */\r\n                var lastPageIndex = Math.ceil(paginator.length / paginator.pageSize) - 1 || 0;\r\n                /** @type {?} */\r\n                var newPageIndex = Math.min(paginator.pageIndex, lastPageIndex);\r\n                if (newPageIndex !== paginator.pageIndex) {\r\n                    paginator.pageIndex = newPageIndex;\r\n                    // Since the paginator only emits after user-generated changes,\r\n                    // we need our own stream so we know to should re-render the data.\r\n                    _this._internalPageChanges.next();\r\n                }\r\n            }\r\n        }));\r\n    };\r\n    /**\r\n     * Used by the MatTable. Called when it connects to the data source.\r\n     * @docs-private\r\n     */\r\n    /**\r\n     * Used by the MatTable. Called when it connects to the data source.\r\n     * \\@docs-private\r\n     * @return {?}\r\n     */\r\n    MatTableDataSource.prototype.connect = /**\r\n     * Used by the MatTable. Called when it connects to the data source.\r\n     * \\@docs-private\r\n     * @return {?}\r\n     */\r\n    function () { return this._renderData; };\r\n    /**\r\n     * Used by the MatTable. Called when it is destroyed. No-op.\r\n     * @docs-private\r\n     */\r\n    /**\r\n     * Used by the MatTable. Called when it is destroyed. No-op.\r\n     * \\@docs-private\r\n     * @return {?}\r\n     */\r\n    MatTableDataSource.prototype.disconnect = /**\r\n     * Used by the MatTable. Called when it is destroyed. No-op.\r\n     * \\@docs-private\r\n     * @return {?}\r\n     */\r\n    function () { };\r\n    return MatTableDataSource;\r\n}(DataSource));\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n\r\nexport { MatTableModule, MatCellDef, MatHeaderCellDef, MatFooterCellDef, MatColumnDef, MatHeaderCell, MatFooterCell, MatCell, MatTable, MatHeaderRowDef, MatFooterRowDef, MatRowDef, MatHeaderRow, MatFooterRow, MatRow, MatTableDataSource, MatTextColumn };\r\n\r\n"]}