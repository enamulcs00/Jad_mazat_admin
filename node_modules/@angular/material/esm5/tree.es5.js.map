{"version":3,"sources":["v:/jad-admin-go/mazat_admin_panel/node_modules/@angular/material/esm5/tree.es5.js"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAsBA;;;;;;;;;;;;;;KAcK,AAcC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;cASA;;;;;;;;;;;KAWD,AASC;;;;;;;;;;;;;;;;;;cAGA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;MA8EA,AAgBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;cAYA;;;;;;;;;;;;;;;;KAgBD,AAMC;;;;;;;;;;;;;;;;;;;cAIA;;;;;;;;;;;;;;;;KAgBD,AASC;;;;;;;;;;;;;;;;;;;;;;;;wDAKG;;;;;;;;;;;;;;;;KAgBJ,AAgBC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;cAGA;;;;;;;;;;;;;;;;;;KAkBD,AAMC;;;;;;;;;;;;;;;cAGA;;;;;;;;;;;;;;;;;;;;KAoBD;;;;;;;;;;;;;;;;;;;;;;;wMAOC","file":"tree.es5.js","sourcesContent":["/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nimport { __extends } from 'tslib';\r\nimport { CDK_TREE_NODE_OUTLET_NODE, CdkNestedTreeNode, CdkTree, CdkTreeNode, CdkTreeNodeDef, CdkTreeNodePadding, CdkTreeNodeOutlet, CdkTreeNodeToggle, CdkTreeModule } from '@angular/cdk/tree';\r\nimport { Attribute, Directive, ElementRef, Input, IterableDiffers, Inject, Optional, ViewContainerRef, ChangeDetectionStrategy, Component, ViewChild, ViewEncapsulation, NgModule } from '@angular/core';\r\nimport { mixinDisabled, mixinTabIndex, MatCommonModule } from '@angular/material/core';\r\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\r\nimport { CommonModule } from '@angular/common';\r\nimport { DataSource } from '@angular/cdk/collections';\r\nimport { BehaviorSubject, merge } from 'rxjs';\r\nimport { map, take } from 'rxjs/operators';\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n/** @type {?} */\r\nvar _MatTreeNodeMixinBase = mixinTabIndex(mixinDisabled(CdkTreeNode));\r\n/**\r\n * Wrapper for the CdkTree node with Material design styles.\r\n * @template T\r\n */\r\nvar MatTreeNode = /** @class */ (function (_super) {\r\n    __extends(MatTreeNode, _super);\r\n    function MatTreeNode(_elementRef, _tree, tabIndex) {\r\n        var _this = _super.call(this, _elementRef, _tree) || this;\r\n        _this._elementRef = _elementRef;\r\n        _this._tree = _tree;\r\n        _this.role = 'treeitem';\r\n        _this.tabIndex = Number(tabIndex) || 0;\r\n        return _this;\r\n    }\r\n    MatTreeNode.decorators = [\r\n        { type: Directive, args: [{\r\n                    selector: 'mat-tree-node',\r\n                    exportAs: 'matTreeNode',\r\n                    inputs: ['disabled', 'tabIndex'],\r\n                    host: {\r\n                        '[attr.aria-expanded]': 'isExpanded',\r\n                        '[attr.aria-level]': 'role === \"treeitem\" ? level : null',\r\n                        '[attr.role]': 'role',\r\n                        'class': 'mat-tree-node'\r\n                    },\r\n                    providers: [{ provide: CdkTreeNode, useExisting: MatTreeNode }]\r\n                },] },\r\n    ];\r\n    /** @nocollapse */\r\n    MatTreeNode.ctorParameters = function () { return [\r\n        { type: ElementRef },\r\n        { type: CdkTree },\r\n        { type: String, decorators: [{ type: Attribute, args: ['tabindex',] }] }\r\n    ]; };\r\n    MatTreeNode.propDecorators = {\r\n        role: [{ type: Input }]\r\n    };\r\n    return MatTreeNode;\r\n}(_MatTreeNodeMixinBase));\r\n/**\r\n * Wrapper for the CdkTree node definition with Material design styles.\r\n * @template T\r\n */\r\nvar MatTreeNodeDef = /** @class */ (function (_super) {\r\n    __extends(MatTreeNodeDef, _super);\r\n    function MatTreeNodeDef() {\r\n        return _super !== null && _super.apply(this, arguments) || this;\r\n    }\r\n    MatTreeNodeDef.decorators = [\r\n        { type: Directive, args: [{\r\n                    selector: '[matTreeNodeDef]',\r\n                    inputs: [\r\n                        'when: matTreeNodeDefWhen'\r\n                    ],\r\n                    providers: [{ provide: CdkTreeNodeDef, useExisting: MatTreeNodeDef }]\r\n                },] },\r\n    ];\r\n    MatTreeNodeDef.propDecorators = {\r\n        data: [{ type: Input, args: ['matTreeNode',] }]\r\n    };\r\n    return MatTreeNodeDef;\r\n}(CdkTreeNodeDef));\r\n/**\r\n * Wrapper for the CdkTree nested node with Material design styles.\r\n * @template T\r\n */\r\nvar MatNestedTreeNode = /** @class */ (function (_super) {\r\n    __extends(MatNestedTreeNode, _super);\r\n    function MatNestedTreeNode(_elementRef, _tree, _differs, tabIndex) {\r\n        var _this = _super.call(this, _elementRef, _tree, _differs) || this;\r\n        _this._elementRef = _elementRef;\r\n        _this._tree = _tree;\r\n        _this._differs = _differs;\r\n        _this._disabled = false;\r\n        _this.tabIndex = Number(tabIndex) || 0;\r\n        return _this;\r\n    }\r\n    Object.defineProperty(MatNestedTreeNode.prototype, \"disabled\", {\r\n        /** Whether the node is disabled. */\r\n        get: /**\r\n         * Whether the node is disabled.\r\n         * @return {?}\r\n         */\r\n        function () { return this._disabled; },\r\n        set: /**\r\n         * @param {?} value\r\n         * @return {?}\r\n         */\r\n        function (value) { this._disabled = coerceBooleanProperty(value); },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(MatNestedTreeNode.prototype, \"tabIndex\", {\r\n        /** Tabindex for the node. */\r\n        get: /**\r\n         * Tabindex for the node.\r\n         * @return {?}\r\n         */\r\n        function () { return this.disabled ? -1 : this._tabIndex; },\r\n        set: /**\r\n         * @param {?} value\r\n         * @return {?}\r\n         */\r\n        function (value) {\r\n            // If the specified tabIndex value is null or undefined, fall back to the default value.\r\n            this._tabIndex = value != null ? value : 0;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    // This is a workaround for https://github.com/angular/angular/issues/23091\r\n    // In aot mode, the lifecycle hooks from parent class are not called.\r\n    // TODO(tinayuangao): Remove when the angular issue #23091 is fixed\r\n    // This is a workaround for https://github.com/angular/angular/issues/23091\r\n    // In aot mode, the lifecycle hooks from parent class are not called.\r\n    // TODO(tinayuangao): Remove when the angular issue #23091 is fixed\r\n    /**\r\n     * @return {?}\r\n     */\r\n    MatNestedTreeNode.prototype.ngAfterContentInit = \r\n    // This is a workaround for https://github.com/angular/angular/issues/23091\r\n    // In aot mode, the lifecycle hooks from parent class are not called.\r\n    // TODO(tinayuangao): Remove when the angular issue #23091 is fixed\r\n    /**\r\n     * @return {?}\r\n     */\r\n    function () {\r\n        _super.prototype.ngAfterContentInit.call(this);\r\n    };\r\n    /**\r\n     * @return {?}\r\n     */\r\n    MatNestedTreeNode.prototype.ngOnDestroy = /**\r\n     * @return {?}\r\n     */\r\n    function () {\r\n        _super.prototype.ngOnDestroy.call(this);\r\n    };\r\n    MatNestedTreeNode.decorators = [\r\n        { type: Directive, args: [{\r\n                    selector: 'mat-nested-tree-node',\r\n                    exportAs: 'matNestedTreeNode',\r\n                    host: {\r\n                        '[attr.aria-expanded]': 'isExpanded',\r\n                        '[attr.role]': 'role',\r\n                        'class': 'mat-nested-tree-node',\r\n                    },\r\n                    providers: [\r\n                        { provide: CdkNestedTreeNode, useExisting: MatNestedTreeNode },\r\n                        { provide: CdkTreeNode, useExisting: MatNestedTreeNode },\r\n                        { provide: CDK_TREE_NODE_OUTLET_NODE, useExisting: MatNestedTreeNode }\r\n                    ]\r\n                },] },\r\n    ];\r\n    /** @nocollapse */\r\n    MatNestedTreeNode.ctorParameters = function () { return [\r\n        { type: ElementRef },\r\n        { type: CdkTree },\r\n        { type: IterableDiffers },\r\n        { type: String, decorators: [{ type: Attribute, args: ['tabindex',] }] }\r\n    ]; };\r\n    MatNestedTreeNode.propDecorators = {\r\n        node: [{ type: Input, args: ['matNestedTreeNode',] }],\r\n        disabled: [{ type: Input }],\r\n        tabIndex: [{ type: Input }]\r\n    };\r\n    return MatNestedTreeNode;\r\n}(CdkNestedTreeNode));\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n/**\r\n * Wrapper for the CdkTree padding with Material design styles.\r\n * @template T\r\n */\r\nvar MatTreeNodePadding = /** @class */ (function (_super) {\r\n    __extends(MatTreeNodePadding, _super);\r\n    function MatTreeNodePadding() {\r\n        return _super !== null && _super.apply(this, arguments) || this;\r\n    }\r\n    MatTreeNodePadding.decorators = [\r\n        { type: Directive, args: [{\r\n                    selector: '[matTreeNodePadding]',\r\n                    providers: [{ provide: CdkTreeNodePadding, useExisting: MatTreeNodePadding }]\r\n                },] },\r\n    ];\r\n    MatTreeNodePadding.propDecorators = {\r\n        level: [{ type: Input, args: ['matTreeNodePadding',] }],\r\n        indent: [{ type: Input, args: ['matTreeNodePaddingIndent',] }]\r\n    };\r\n    return MatTreeNodePadding;\r\n}(CdkTreeNodePadding));\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n/**\r\n * Outlet for nested CdkNode. Put `[matTreeNodeOutlet]` on a tag to place children dataNodes\r\n * inside the outlet.\r\n */\r\nvar MatTreeNodeOutlet = /** @class */ (function () {\r\n    function MatTreeNodeOutlet(viewContainer, _node) {\r\n        this.viewContainer = viewContainer;\r\n        this._node = _node;\r\n    }\r\n    MatTreeNodeOutlet.decorators = [\r\n        { type: Directive, args: [{\r\n                    selector: '[matTreeNodeOutlet]',\r\n                    providers: [{\r\n                            provide: CdkTreeNodeOutlet,\r\n                            useExisting: MatTreeNodeOutlet\r\n                        }]\r\n                },] },\r\n    ];\r\n    /** @nocollapse */\r\n    MatTreeNodeOutlet.ctorParameters = function () { return [\r\n        { type: ViewContainerRef },\r\n        { type: undefined, decorators: [{ type: Inject, args: [CDK_TREE_NODE_OUTLET_NODE,] }, { type: Optional }] }\r\n    ]; };\r\n    return MatTreeNodeOutlet;\r\n}());\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n/**\r\n * Wrapper for the CdkTable with Material design styles.\r\n * @template T\r\n */\r\nvar MatTree = /** @class */ (function (_super) {\r\n    __extends(MatTree, _super);\r\n    function MatTree() {\r\n        return _super !== null && _super.apply(this, arguments) || this;\r\n    }\r\n    MatTree.decorators = [\r\n        { type: Component, args: [{selector: 'mat-tree',\r\n                    exportAs: 'matTree',\r\n                    template: \"<ng-container matTreeNodeOutlet></ng-container>\",\r\n                    host: {\r\n                        'class': 'mat-tree',\r\n                        'role': 'tree',\r\n                    },\r\n                    styles: [\".mat-tree{display:block}.mat-tree-node{display:flex;align-items:center;min-height:48px;flex:1;overflow:hidden;word-wrap:break-word}.mat-nested-tree-ndoe{border-bottom-width:0}\"],\r\n                    encapsulation: ViewEncapsulation.None,\r\n                    // See note on CdkTree for explanation on why this uses the default change detection strategy.\r\n                    // tslint:disable-next-line:validate-decorators\r\n                    changeDetection: ChangeDetectionStrategy.Default,\r\n                    providers: [{ provide: CdkTree, useExisting: MatTree }]\r\n                },] },\r\n    ];\r\n    MatTree.propDecorators = {\r\n        _nodeOutlet: [{ type: ViewChild, args: [MatTreeNodeOutlet, { static: true },] }]\r\n    };\r\n    return MatTree;\r\n}(CdkTree));\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n/**\r\n * Wrapper for the CdkTree's toggle with Material design styles.\r\n * @template T\r\n */\r\nvar MatTreeNodeToggle = /** @class */ (function (_super) {\r\n    __extends(MatTreeNodeToggle, _super);\r\n    function MatTreeNodeToggle() {\r\n        var _this = _super !== null && _super.apply(this, arguments) || this;\r\n        _this.recursive = false;\r\n        return _this;\r\n    }\r\n    MatTreeNodeToggle.decorators = [\r\n        { type: Directive, args: [{\r\n                    selector: '[matTreeNodeToggle]',\r\n                    providers: [{ provide: CdkTreeNodeToggle, useExisting: MatTreeNodeToggle }]\r\n                },] },\r\n    ];\r\n    MatTreeNodeToggle.propDecorators = {\r\n        recursive: [{ type: Input, args: ['matTreeNodeToggleRecursive',] }]\r\n    };\r\n    return MatTreeNodeToggle;\r\n}(CdkTreeNodeToggle));\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n/** @type {?} */\r\nvar MAT_TREE_DIRECTIVES = [\r\n    MatNestedTreeNode,\r\n    MatTreeNodeDef,\r\n    MatTreeNodePadding,\r\n    MatTreeNodeToggle,\r\n    MatTree,\r\n    MatTreeNode,\r\n    MatTreeNodeOutlet\r\n];\r\nvar MatTreeModule = /** @class */ (function () {\r\n    function MatTreeModule() {\r\n    }\r\n    MatTreeModule.decorators = [\r\n        { type: NgModule, args: [{\r\n                    imports: [CdkTreeModule, CommonModule, MatCommonModule],\r\n                    exports: MAT_TREE_DIRECTIVES,\r\n                    declarations: MAT_TREE_DIRECTIVES,\r\n                },] },\r\n    ];\r\n    return MatTreeModule;\r\n}());\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n/**\r\n * Tree flattener to convert a normal type of node to node with children & level information.\r\n * Transform nested nodes of type `T` to flattened nodes of type `F`.\r\n *\r\n * For example, the input data of type `T` is nested, and contains its children data:\r\n *   SomeNode: {\r\n *     key: 'Fruits',\r\n *     children: [\r\n *       NodeOne: {\r\n *         key: 'Apple',\r\n *       },\r\n *       NodeTwo: {\r\n *        key: 'Pear',\r\n *      }\r\n *    ]\r\n *  }\r\n *  After flattener flatten the tree, the structure will become\r\n *  SomeNode: {\r\n *    key: 'Fruits',\r\n *    expandable: true,\r\n *    level: 1\r\n *  },\r\n *  NodeOne: {\r\n *    key: 'Apple',\r\n *    expandable: false,\r\n *    level: 2\r\n *  },\r\n *  NodeTwo: {\r\n *   key: 'Pear',\r\n *   expandable: false,\r\n *   level: 2\r\n * }\r\n * and the output flattened type is `F` with additional information.\r\n * @template T, F\r\n */\r\nvar  /**\r\n * Tree flattener to convert a normal type of node to node with children & level information.\r\n * Transform nested nodes of type `T` to flattened nodes of type `F`.\r\n *\r\n * For example, the input data of type `T` is nested, and contains its children data:\r\n *   SomeNode: {\r\n *     key: 'Fruits',\r\n *     children: [\r\n *       NodeOne: {\r\n *         key: 'Apple',\r\n *       },\r\n *       NodeTwo: {\r\n *        key: 'Pear',\r\n *      }\r\n *    ]\r\n *  }\r\n *  After flattener flatten the tree, the structure will become\r\n *  SomeNode: {\r\n *    key: 'Fruits',\r\n *    expandable: true,\r\n *    level: 1\r\n *  },\r\n *  NodeOne: {\r\n *    key: 'Apple',\r\n *    expandable: false,\r\n *    level: 2\r\n *  },\r\n *  NodeTwo: {\r\n *   key: 'Pear',\r\n *   expandable: false,\r\n *   level: 2\r\n * }\r\n * and the output flattened type is `F` with additional information.\r\n * @template T, F\r\n */\r\nMatTreeFlattener = /** @class */ (function () {\r\n    function MatTreeFlattener(transformFunction, getLevel, isExpandable, getChildren) {\r\n        this.transformFunction = transformFunction;\r\n        this.getLevel = getLevel;\r\n        this.isExpandable = isExpandable;\r\n        this.getChildren = getChildren;\r\n    }\r\n    /**\r\n     * @param {?} node\r\n     * @param {?} level\r\n     * @param {?} resultNodes\r\n     * @param {?} parentMap\r\n     * @return {?}\r\n     */\r\n    MatTreeFlattener.prototype._flattenNode = /**\r\n     * @param {?} node\r\n     * @param {?} level\r\n     * @param {?} resultNodes\r\n     * @param {?} parentMap\r\n     * @return {?}\r\n     */\r\n    function (node, level, resultNodes, parentMap) {\r\n        var _this = this;\r\n        /** @type {?} */\r\n        var flatNode = this.transformFunction(node, level);\r\n        resultNodes.push(flatNode);\r\n        if (this.isExpandable(flatNode)) {\r\n            /** @type {?} */\r\n            var childrenNodes = this.getChildren(node);\r\n            if (childrenNodes) {\r\n                if (Array.isArray(childrenNodes)) {\r\n                    this._flattenChildren(childrenNodes, level, resultNodes, parentMap);\r\n                }\r\n                else {\r\n                    childrenNodes.pipe(take(1)).subscribe((/**\r\n                     * @param {?} children\r\n                     * @return {?}\r\n                     */\r\n                    function (children) {\r\n                        _this._flattenChildren(children, level, resultNodes, parentMap);\r\n                    }));\r\n                }\r\n            }\r\n        }\r\n        return resultNodes;\r\n    };\r\n    /**\r\n     * @param {?} children\r\n     * @param {?} level\r\n     * @param {?} resultNodes\r\n     * @param {?} parentMap\r\n     * @return {?}\r\n     */\r\n    MatTreeFlattener.prototype._flattenChildren = /**\r\n     * @param {?} children\r\n     * @param {?} level\r\n     * @param {?} resultNodes\r\n     * @param {?} parentMap\r\n     * @return {?}\r\n     */\r\n    function (children, level, resultNodes, parentMap) {\r\n        var _this = this;\r\n        children.forEach((/**\r\n         * @param {?} child\r\n         * @param {?} index\r\n         * @return {?}\r\n         */\r\n        function (child, index) {\r\n            /** @type {?} */\r\n            var childParentMap = parentMap.slice();\r\n            childParentMap.push(index != children.length - 1);\r\n            _this._flattenNode(child, level + 1, resultNodes, childParentMap);\r\n        }));\r\n    };\r\n    /**\r\n     * Flatten a list of node type T to flattened version of node F.\r\n     * Please note that type T may be nested, and the length of `structuredData` may be different\r\n     * from that of returned list `F[]`.\r\n     */\r\n    /**\r\n     * Flatten a list of node type T to flattened version of node F.\r\n     * Please note that type T may be nested, and the length of `structuredData` may be different\r\n     * from that of returned list `F[]`.\r\n     * @param {?} structuredData\r\n     * @return {?}\r\n     */\r\n    MatTreeFlattener.prototype.flattenNodes = /**\r\n     * Flatten a list of node type T to flattened version of node F.\r\n     * Please note that type T may be nested, and the length of `structuredData` may be different\r\n     * from that of returned list `F[]`.\r\n     * @param {?} structuredData\r\n     * @return {?}\r\n     */\r\n    function (structuredData) {\r\n        var _this = this;\r\n        /** @type {?} */\r\n        var resultNodes = [];\r\n        structuredData.forEach((/**\r\n         * @param {?} node\r\n         * @return {?}\r\n         */\r\n        function (node) { return _this._flattenNode(node, 0, resultNodes, []); }));\r\n        return resultNodes;\r\n    };\r\n    /**\r\n     * Expand flattened node with current expansion status.\r\n     * The returned list may have different length.\r\n     */\r\n    /**\r\n     * Expand flattened node with current expansion status.\r\n     * The returned list may have different length.\r\n     * @param {?} nodes\r\n     * @param {?} treeControl\r\n     * @return {?}\r\n     */\r\n    MatTreeFlattener.prototype.expandFlattenedNodes = /**\r\n     * Expand flattened node with current expansion status.\r\n     * The returned list may have different length.\r\n     * @param {?} nodes\r\n     * @param {?} treeControl\r\n     * @return {?}\r\n     */\r\n    function (nodes, treeControl) {\r\n        var _this = this;\r\n        /** @type {?} */\r\n        var results = [];\r\n        /** @type {?} */\r\n        var currentExpand = [];\r\n        currentExpand[0] = true;\r\n        nodes.forEach((/**\r\n         * @param {?} node\r\n         * @return {?}\r\n         */\r\n        function (node) {\r\n            /** @type {?} */\r\n            var expand = true;\r\n            for (var i = 0; i <= _this.getLevel(node); i++) {\r\n                expand = expand && currentExpand[i];\r\n            }\r\n            if (expand) {\r\n                results.push(node);\r\n            }\r\n            if (_this.isExpandable(node)) {\r\n                currentExpand[_this.getLevel(node) + 1] = treeControl.isExpanded(node);\r\n            }\r\n        }));\r\n        return results;\r\n    };\r\n    return MatTreeFlattener;\r\n}());\r\n/**\r\n * Data source for flat tree.\r\n * The data source need to handle expansion/collapsion of the tree node and change the data feed\r\n * to `MatTree`.\r\n * The nested tree nodes of type `T` are flattened through `MatTreeFlattener`, and converted\r\n * to type `F` for `MatTree` to consume.\r\n * @template T, F\r\n */\r\nvar  /**\r\n * Data source for flat tree.\r\n * The data source need to handle expansion/collapsion of the tree node and change the data feed\r\n * to `MatTree`.\r\n * The nested tree nodes of type `T` are flattened through `MatTreeFlattener`, and converted\r\n * to type `F` for `MatTree` to consume.\r\n * @template T, F\r\n */\r\nMatTreeFlatDataSource = /** @class */ (function (_super) {\r\n    __extends(MatTreeFlatDataSource, _super);\r\n    function MatTreeFlatDataSource(_treeControl, _treeFlattener, initialData) {\r\n        if (initialData === void 0) { initialData = []; }\r\n        var _this = _super.call(this) || this;\r\n        _this._treeControl = _treeControl;\r\n        _this._treeFlattener = _treeFlattener;\r\n        _this._flattenedData = new BehaviorSubject([]);\r\n        _this._expandedData = new BehaviorSubject([]);\r\n        _this._data = new BehaviorSubject(initialData);\r\n        return _this;\r\n    }\r\n    Object.defineProperty(MatTreeFlatDataSource.prototype, \"data\", {\r\n        get: /**\r\n         * @return {?}\r\n         */\r\n        function () { return this._data.value; },\r\n        set: /**\r\n         * @param {?} value\r\n         * @return {?}\r\n         */\r\n        function (value) {\r\n            this._data.next(value);\r\n            this._flattenedData.next(this._treeFlattener.flattenNodes(this.data));\r\n            this._treeControl.dataNodes = this._flattenedData.value;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * @param {?} collectionViewer\r\n     * @return {?}\r\n     */\r\n    MatTreeFlatDataSource.prototype.connect = /**\r\n     * @param {?} collectionViewer\r\n     * @return {?}\r\n     */\r\n    function (collectionViewer) {\r\n        var _this = this;\r\n        /** @type {?} */\r\n        var changes = [\r\n            collectionViewer.viewChange,\r\n            this._treeControl.expansionModel.onChange,\r\n            this._flattenedData\r\n        ];\r\n        return merge.apply(void 0, changes).pipe(map((/**\r\n         * @return {?}\r\n         */\r\n        function () {\r\n            _this._expandedData.next(_this._treeFlattener.expandFlattenedNodes(_this._flattenedData.value, _this._treeControl));\r\n            return _this._expandedData.value;\r\n        })));\r\n    };\r\n    /**\r\n     * @return {?}\r\n     */\r\n    MatTreeFlatDataSource.prototype.disconnect = /**\r\n     * @return {?}\r\n     */\r\n    function () {\r\n        // no op\r\n    };\r\n    return MatTreeFlatDataSource;\r\n}(DataSource));\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n/**\r\n * Data source for nested tree.\r\n *\r\n * The data source for nested tree doesn't have to consider node flattener, or the way to expand\r\n * or collapse. The expansion/collapsion will be handled by TreeControl and each non-leaf node.\r\n * @template T\r\n */\r\nvar  /**\r\n * Data source for nested tree.\r\n *\r\n * The data source for nested tree doesn't have to consider node flattener, or the way to expand\r\n * or collapse. The expansion/collapsion will be handled by TreeControl and each non-leaf node.\r\n * @template T\r\n */\r\nMatTreeNestedDataSource = /** @class */ (function (_super) {\r\n    __extends(MatTreeNestedDataSource, _super);\r\n    function MatTreeNestedDataSource() {\r\n        var _this = _super !== null && _super.apply(this, arguments) || this;\r\n        _this._data = new BehaviorSubject([]);\r\n        return _this;\r\n    }\r\n    Object.defineProperty(MatTreeNestedDataSource.prototype, \"data\", {\r\n        /**\r\n         * Data for the nested tree\r\n         */\r\n        get: /**\r\n         * Data for the nested tree\r\n         * @return {?}\r\n         */\r\n        function () { return this._data.value; },\r\n        set: /**\r\n         * @param {?} value\r\n         * @return {?}\r\n         */\r\n        function (value) { this._data.next(value); },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * @param {?} collectionViewer\r\n     * @return {?}\r\n     */\r\n    MatTreeNestedDataSource.prototype.connect = /**\r\n     * @param {?} collectionViewer\r\n     * @return {?}\r\n     */\r\n    function (collectionViewer) {\r\n        var _this = this;\r\n        return merge.apply(void 0, [collectionViewer.viewChange, this._data]).pipe(map((/**\r\n         * @return {?}\r\n         */\r\n        function () {\r\n            return _this.data;\r\n        })));\r\n    };\r\n    /**\r\n     * @return {?}\r\n     */\r\n    MatTreeNestedDataSource.prototype.disconnect = /**\r\n     * @return {?}\r\n     */\r\n    function () {\r\n        // no op\r\n    };\r\n    return MatTreeNestedDataSource;\r\n}(DataSource));\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n\r\nexport { MatTreeNode, MatTreeNodeDef, MatNestedTreeNode, MatTreeNodePadding, MatTree, MatTreeModule, MatTreeNodeToggle, MatTreeNodeOutlet, MatTreeFlattener, MatTreeFlatDataSource, MatTreeNestedDataSource };\r\n\r\n"]}