{"version":3,"sources":["v:/jad-admin-go/mazat_admin_panel/node_modules/@angular/material/esm5/tabs.es5.js"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAgCA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;MAkHM,AASA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2JAOG;;;;;;;;;;;;;;KAcJ,AAGC;;;;;;;;;2EAIG;;;;;;;;;;;;;;;KAeJ;;;;;;;;oBAKC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;MAmGA,AASA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;cAYA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;MAwGA,AAKA;;;;;;;;;;;;;;;;;;;;;;;6FASG;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;MAmNH,AAMA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;cAgBA;;;;;;;;;;;KAWD,AAYC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;cASA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;MAkfA,AAMA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;cAkBA;;;;;;;;;;;;KAYD,AAeC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;cAYA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;MAgEA,AAUA;;;;;;;;;;;;;;;;;;;;;;;8GAIG;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;MA+wBH,AAMA;;;;;;;;;;;;;;;;;;;;;;;;;oiCAUG;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;MAiDH,AAMA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oDAaA;;;;;;;;;;;;;;;;KAgBD,AAeC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;cAkBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;MA+HA,AAMA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;cAeA;;;;;;;;;;;;;;;KAeD,AAkBC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;cAqBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;MAyFA,AAMA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;0EAYA;;;;;;;;;;;;;;;;;;;;;;;MAuBA,AAeA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2CAWG;;;;;;;;;;KAUJ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4BA2CC","file":"tabs.es5.js","sourcesContent":["/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nimport { Directive, ElementRef, Inject, InjectionToken, NgZone, Optional, TemplateRef, ChangeDetectionStrategy, Component, ContentChild, Input, ViewChild, ViewContainerRef, ViewEncapsulation, ChangeDetectorRef, Output, EventEmitter, ComponentFactoryResolver, forwardRef, ContentChildren, Attribute, NgModule } from '@angular/core';\r\nimport { ANIMATION_MODULE_TYPE } from '@angular/platform-browser/animations';\r\nimport { __extends } from 'tslib';\r\nimport { CdkPortal, TemplatePortal, CdkPortalOutlet, PortalHostDirective, PortalModule } from '@angular/cdk/portal';\r\nimport { mixinDisabled, mixinColor, mixinDisableRipple, MAT_RIPPLE_GLOBAL_OPTIONS, mixinTabIndex, RippleRenderer, MatCommonModule, MatRippleModule } from '@angular/material/core';\r\nimport { Subject, Subscription, merge, of, timer, fromEvent } from 'rxjs';\r\nimport { animate, state, style, transition, trigger } from '@angular/animations';\r\nimport { Directionality } from '@angular/cdk/bidi';\r\nimport { startWith, distinctUntilChanged, takeUntil } from 'rxjs/operators';\r\nimport { coerceBooleanProperty, coerceNumberProperty } from '@angular/cdk/coercion';\r\nimport { ViewportRuler } from '@angular/cdk/scrolling';\r\nimport { FocusKeyManager, FocusMonitor, A11yModule } from '@angular/cdk/a11y';\r\nimport { END, ENTER, HOME, SPACE, hasModifierKey } from '@angular/cdk/keycodes';\r\nimport { Platform, normalizePassiveListenerOptions } from '@angular/cdk/platform';\r\nimport { ObserversModule } from '@angular/cdk/observers';\r\nimport { CommonModule } from '@angular/common';\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n/**\r\n * Injection token for the MatInkBar's Positioner.\r\n * @type {?}\r\n */\r\nvar _MAT_INK_BAR_POSITIONER = new InjectionToken('MatInkBarPositioner', {\r\n    providedIn: 'root',\r\n    factory: _MAT_INK_BAR_POSITIONER_FACTORY\r\n});\r\n/**\r\n * The default positioner function for the MatInkBar.\r\n * \\@docs-private\r\n * @return {?}\r\n */\r\nfunction _MAT_INK_BAR_POSITIONER_FACTORY() {\r\n    /** @type {?} */\r\n    var method = (/**\r\n     * @param {?} element\r\n     * @return {?}\r\n     */\r\n    function (element) { return ({\r\n        left: element ? (element.offsetLeft || 0) + 'px' : '0',\r\n        width: element ? (element.offsetWidth || 0) + 'px' : '0',\r\n    }); });\r\n    return method;\r\n}\r\n/**\r\n * The ink-bar is used to display and animate the line underneath the current active tab label.\r\n * \\@docs-private\r\n */\r\nvar MatInkBar = /** @class */ (function () {\r\n    function MatInkBar(_elementRef, _ngZone, _inkBarPositioner, _animationMode) {\r\n        this._elementRef = _elementRef;\r\n        this._ngZone = _ngZone;\r\n        this._inkBarPositioner = _inkBarPositioner;\r\n        this._animationMode = _animationMode;\r\n    }\r\n    /**\r\n     * Calculates the styles from the provided element in order to align the ink-bar to that element.\r\n     * Shows the ink bar if previously set as hidden.\r\n     * @param element\r\n     */\r\n    /**\r\n     * Calculates the styles from the provided element in order to align the ink-bar to that element.\r\n     * Shows the ink bar if previously set as hidden.\r\n     * @param {?} element\r\n     * @return {?}\r\n     */\r\n    MatInkBar.prototype.alignToElement = /**\r\n     * Calculates the styles from the provided element in order to align the ink-bar to that element.\r\n     * Shows the ink bar if previously set as hidden.\r\n     * @param {?} element\r\n     * @return {?}\r\n     */\r\n    function (element) {\r\n        var _this = this;\r\n        this.show();\r\n        if (typeof requestAnimationFrame !== 'undefined') {\r\n            this._ngZone.runOutsideAngular((/**\r\n             * @return {?}\r\n             */\r\n            function () {\r\n                requestAnimationFrame((/**\r\n                 * @return {?}\r\n                 */\r\n                function () { return _this._setStyles(element); }));\r\n            }));\r\n        }\r\n        else {\r\n            this._setStyles(element);\r\n        }\r\n    };\r\n    /** Shows the ink bar. */\r\n    /**\r\n     * Shows the ink bar.\r\n     * @return {?}\r\n     */\r\n    MatInkBar.prototype.show = /**\r\n     * Shows the ink bar.\r\n     * @return {?}\r\n     */\r\n    function () {\r\n        this._elementRef.nativeElement.style.visibility = 'visible';\r\n    };\r\n    /** Hides the ink bar. */\r\n    /**\r\n     * Hides the ink bar.\r\n     * @return {?}\r\n     */\r\n    MatInkBar.prototype.hide = /**\r\n     * Hides the ink bar.\r\n     * @return {?}\r\n     */\r\n    function () {\r\n        this._elementRef.nativeElement.style.visibility = 'hidden';\r\n    };\r\n    /**\r\n     * Sets the proper styles to the ink bar element.\r\n     * @param element\r\n     */\r\n    /**\r\n     * Sets the proper styles to the ink bar element.\r\n     * @private\r\n     * @param {?} element\r\n     * @return {?}\r\n     */\r\n    MatInkBar.prototype._setStyles = /**\r\n     * Sets the proper styles to the ink bar element.\r\n     * @private\r\n     * @param {?} element\r\n     * @return {?}\r\n     */\r\n    function (element) {\r\n        /** @type {?} */\r\n        var positions = this._inkBarPositioner(element);\r\n        /** @type {?} */\r\n        var inkBar = this._elementRef.nativeElement;\r\n        inkBar.style.left = positions.left;\r\n        inkBar.style.width = positions.width;\r\n    };\r\n    MatInkBar.decorators = [\r\n        { type: Directive, args: [{\r\n                    selector: 'mat-ink-bar',\r\n                    host: {\r\n                        'class': 'mat-ink-bar',\r\n                        '[class._mat-animation-noopable]': \"_animationMode === 'NoopAnimations'\",\r\n                    },\r\n                },] },\r\n    ];\r\n    /** @nocollapse */\r\n    MatInkBar.ctorParameters = function () { return [\r\n        { type: ElementRef },\r\n        { type: NgZone },\r\n        { type: undefined, decorators: [{ type: Inject, args: [_MAT_INK_BAR_POSITIONER,] }] },\r\n        { type: String, decorators: [{ type: Optional }, { type: Inject, args: [ANIMATION_MODULE_TYPE,] }] }\r\n    ]; };\r\n    return MatInkBar;\r\n}());\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n/**\r\n * Decorates the `ng-template` tags and reads out the template from it.\r\n */\r\nvar MatTabContent = /** @class */ (function () {\r\n    function MatTabContent(template) {\r\n        this.template = template;\r\n    }\r\n    MatTabContent.decorators = [\r\n        { type: Directive, args: [{ selector: '[matTabContent]' },] },\r\n    ];\r\n    /** @nocollapse */\r\n    MatTabContent.ctorParameters = function () { return [\r\n        { type: TemplateRef }\r\n    ]; };\r\n    return MatTabContent;\r\n}());\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n/**\r\n * Used to flag tab labels for use with the portal directive\r\n */\r\nvar MatTabLabel = /** @class */ (function (_super) {\r\n    __extends(MatTabLabel, _super);\r\n    function MatTabLabel() {\r\n        return _super !== null && _super.apply(this, arguments) || this;\r\n    }\r\n    MatTabLabel.decorators = [\r\n        { type: Directive, args: [{\r\n                    selector: '[mat-tab-label], [matTabLabel]',\r\n                },] },\r\n    ];\r\n    return MatTabLabel;\r\n}(CdkPortal));\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n// Boilerplate for applying mixins to MatTab.\r\n/**\r\n * \\@docs-private\r\n */\r\nvar \r\n// Boilerplate for applying mixins to MatTab.\r\n/**\r\n * \\@docs-private\r\n */\r\nMatTabBase = /** @class */ (function () {\r\n    function MatTabBase() {\r\n    }\r\n    return MatTabBase;\r\n}());\r\n/** @type {?} */\r\nvar _MatTabMixinBase = mixinDisabled(MatTabBase);\r\nvar MatTab = /** @class */ (function (_super) {\r\n    __extends(MatTab, _super);\r\n    function MatTab(_viewContainerRef) {\r\n        var _this = _super.call(this) || this;\r\n        _this._viewContainerRef = _viewContainerRef;\r\n        /**\r\n         * Plain text label for the tab, used when there is no template label.\r\n         */\r\n        _this.textLabel = '';\r\n        /**\r\n         * Portal that will be the hosted content of the tab\r\n         */\r\n        _this._contentPortal = null;\r\n        /**\r\n         * Emits whenever the internal state of the tab changes.\r\n         */\r\n        _this._stateChanges = new Subject();\r\n        /**\r\n         * The relatively indexed position where 0 represents the center, negative is left, and positive\r\n         * represents the right.\r\n         */\r\n        _this.position = null;\r\n        /**\r\n         * The initial relatively index origin of the tab if it was created and selected after there\r\n         * was already a selected tab. Provides context of what position the tab should originate from.\r\n         */\r\n        _this.origin = null;\r\n        /**\r\n         * Whether the tab is currently active.\r\n         */\r\n        _this.isActive = false;\r\n        return _this;\r\n    }\r\n    Object.defineProperty(MatTab.prototype, \"content\", {\r\n        /** @docs-private */\r\n        get: /**\r\n         * \\@docs-private\r\n         * @return {?}\r\n         */\r\n        function () {\r\n            return this._contentPortal;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * @param {?} changes\r\n     * @return {?}\r\n     */\r\n    MatTab.prototype.ngOnChanges = /**\r\n     * @param {?} changes\r\n     * @return {?}\r\n     */\r\n    function (changes) {\r\n        if (changes.hasOwnProperty('textLabel') || changes.hasOwnProperty('disabled')) {\r\n            this._stateChanges.next();\r\n        }\r\n    };\r\n    /**\r\n     * @return {?}\r\n     */\r\n    MatTab.prototype.ngOnDestroy = /**\r\n     * @return {?}\r\n     */\r\n    function () {\r\n        this._stateChanges.complete();\r\n    };\r\n    /**\r\n     * @return {?}\r\n     */\r\n    MatTab.prototype.ngOnInit = /**\r\n     * @return {?}\r\n     */\r\n    function () {\r\n        this._contentPortal = new TemplatePortal(this._explicitContent || this._implicitContent, this._viewContainerRef);\r\n    };\r\n    MatTab.decorators = [\r\n        { type: Component, args: [{selector: 'mat-tab',\r\n                    template: \"<ng-template><ng-content></ng-content></ng-template>\",\r\n                    inputs: ['disabled'],\r\n                    changeDetection: ChangeDetectionStrategy.OnPush,\r\n                    encapsulation: ViewEncapsulation.None,\r\n                    exportAs: 'matTab',\r\n                },] },\r\n    ];\r\n    /** @nocollapse */\r\n    MatTab.ctorParameters = function () { return [\r\n        { type: ViewContainerRef }\r\n    ]; };\r\n    MatTab.propDecorators = {\r\n        templateLabel: [{ type: ContentChild, args: [MatTabLabel, { static: false },] }],\r\n        _explicitContent: [{ type: ContentChild, args: [MatTabContent, { read: TemplateRef, static: true },] }],\r\n        _implicitContent: [{ type: ViewChild, args: [TemplateRef, { static: true },] }],\r\n        textLabel: [{ type: Input, args: ['label',] }],\r\n        ariaLabel: [{ type: Input, args: ['aria-label',] }],\r\n        ariaLabelledby: [{ type: Input, args: ['aria-labelledby',] }]\r\n    };\r\n    return MatTab;\r\n}(_MatTabMixinBase));\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n/**\r\n * Animations used by the Material tabs.\r\n * \\@docs-private\r\n * @type {?}\r\n */\r\nvar matTabsAnimations = {\r\n    /**\r\n     * Animation translates a tab along the X axis.\r\n     */\r\n    translateTab: trigger('translateTab', [\r\n        // Note: transitions to `none` instead of 0, because some browsers might blur the content.\r\n        state('center, void, left-origin-center, right-origin-center', style({ transform: 'none' })),\r\n        // If the tab is either on the left or right, we additionally add a `min-height` of 1px\r\n        // in order to ensure that the element has a height before its state changes. This is\r\n        // necessary because Chrome does seem to skip the transition in RTL mode if the element does\r\n        // not have a static height and is not rendered. See related issue: #9465\r\n        state('left', style({ transform: 'translate3d(-100%, 0, 0)', minHeight: '1px' })),\r\n        state('right', style({ transform: 'translate3d(100%, 0, 0)', minHeight: '1px' })),\r\n        transition('* => left, * => right, left => center, right => center', animate('{{animationDuration}} cubic-bezier(0.35, 0, 0.25, 1)')),\r\n        transition('void => left-origin-center', [\r\n            style({ transform: 'translate3d(-100%, 0, 0)' }),\r\n            animate('{{animationDuration}} cubic-bezier(0.35, 0, 0.25, 1)')\r\n        ]),\r\n        transition('void => right-origin-center', [\r\n            style({ transform: 'translate3d(100%, 0, 0)' }),\r\n            animate('{{animationDuration}} cubic-bezier(0.35, 0, 0.25, 1)')\r\n        ])\r\n    ])\r\n};\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n/**\r\n * The portal host directive for the contents of the tab.\r\n * \\@docs-private\r\n */\r\nvar MatTabBodyPortal = /** @class */ (function (_super) {\r\n    __extends(MatTabBodyPortal, _super);\r\n    function MatTabBodyPortal(componentFactoryResolver, viewContainerRef, _host) {\r\n        var _this = _super.call(this, componentFactoryResolver, viewContainerRef) || this;\r\n        _this._host = _host;\r\n        /**\r\n         * Subscription to events for when the tab body begins centering.\r\n         */\r\n        _this._centeringSub = Subscription.EMPTY;\r\n        /**\r\n         * Subscription to events for when the tab body finishes leaving from center position.\r\n         */\r\n        _this._leavingSub = Subscription.EMPTY;\r\n        return _this;\r\n    }\r\n    /** Set initial visibility or set up subscription for changing visibility. */\r\n    /**\r\n     * Set initial visibility or set up subscription for changing visibility.\r\n     * @return {?}\r\n     */\r\n    MatTabBodyPortal.prototype.ngOnInit = /**\r\n     * Set initial visibility or set up subscription for changing visibility.\r\n     * @return {?}\r\n     */\r\n    function () {\r\n        var _this = this;\r\n        _super.prototype.ngOnInit.call(this);\r\n        this._centeringSub = this._host._beforeCentering\r\n            .pipe(startWith(this._host._isCenterPosition(this._host._position)))\r\n            .subscribe((/**\r\n         * @param {?} isCentering\r\n         * @return {?}\r\n         */\r\n        function (isCentering) {\r\n            if (isCentering && !_this.hasAttached()) {\r\n                _this.attach(_this._host._content);\r\n            }\r\n        }));\r\n        this._leavingSub = this._host._afterLeavingCenter.subscribe((/**\r\n         * @return {?}\r\n         */\r\n        function () {\r\n            _this.detach();\r\n        }));\r\n    };\r\n    /** Clean up centering subscription. */\r\n    /**\r\n     * Clean up centering subscription.\r\n     * @return {?}\r\n     */\r\n    MatTabBodyPortal.prototype.ngOnDestroy = /**\r\n     * Clean up centering subscription.\r\n     * @return {?}\r\n     */\r\n    function () {\r\n        _super.prototype.ngOnDestroy.call(this);\r\n        this._centeringSub.unsubscribe();\r\n        this._leavingSub.unsubscribe();\r\n    };\r\n    MatTabBodyPortal.decorators = [\r\n        { type: Directive, args: [{\r\n                    selector: '[matTabBodyHost]'\r\n                },] },\r\n    ];\r\n    /** @nocollapse */\r\n    MatTabBodyPortal.ctorParameters = function () { return [\r\n        { type: ComponentFactoryResolver },\r\n        { type: ViewContainerRef },\r\n        { type: MatTabBody, decorators: [{ type: Inject, args: [forwardRef((/**\r\n                         * @return {?}\r\n                         */\r\n                        function () { return MatTabBody; })),] }] }\r\n    ]; };\r\n    return MatTabBodyPortal;\r\n}(CdkPortalOutlet));\r\n/**\r\n * Base class with all of the `MatTabBody` functionality.\r\n * \\@docs-private\r\n * @abstract\r\n */\r\nvar _MatTabBodyBase = /** @class */ (function () {\r\n    function _MatTabBodyBase(_elementRef, _dir, changeDetectorRef) {\r\n        var _this = this;\r\n        this._elementRef = _elementRef;\r\n        this._dir = _dir;\r\n        /**\r\n         * Subscription to the directionality change observable.\r\n         */\r\n        this._dirChangeSubscription = Subscription.EMPTY;\r\n        /**\r\n         * Emits when an animation on the tab is complete.\r\n         */\r\n        this._translateTabComplete = new Subject();\r\n        /**\r\n         * Event emitted when the tab begins to animate towards the center as the active tab.\r\n         */\r\n        this._onCentering = new EventEmitter();\r\n        /**\r\n         * Event emitted before the centering of the tab begins.\r\n         */\r\n        this._beforeCentering = new EventEmitter();\r\n        /**\r\n         * Event emitted before the centering of the tab begins.\r\n         */\r\n        this._afterLeavingCenter = new EventEmitter();\r\n        /**\r\n         * Event emitted when the tab completes its animation towards the center.\r\n         */\r\n        this._onCentered = new EventEmitter(true);\r\n        // Note that the default value will always be overwritten by `MatTabBody`, but we need one\r\n        // anyway to prevent the animations module from throwing an error if the body is used on its own.\r\n        /**\r\n         * Duration for the tab's animation.\r\n         */\r\n        this.animationDuration = '500ms';\r\n        if (_dir) {\r\n            this._dirChangeSubscription = _dir.change.subscribe((/**\r\n             * @param {?} dir\r\n             * @return {?}\r\n             */\r\n            function (dir) {\r\n                _this._computePositionAnimationState(dir);\r\n                changeDetectorRef.markForCheck();\r\n            }));\r\n        }\r\n        // Ensure that we get unique animation events, because the `.done` callback can get\r\n        // invoked twice in some browsers. See https://github.com/angular/angular/issues/24084.\r\n        this._translateTabComplete.pipe(distinctUntilChanged((/**\r\n         * @param {?} x\r\n         * @param {?} y\r\n         * @return {?}\r\n         */\r\n        function (x, y) {\r\n            return x.fromState === y.fromState && x.toState === y.toState;\r\n        }))).subscribe((/**\r\n         * @param {?} event\r\n         * @return {?}\r\n         */\r\n        function (event) {\r\n            // If the transition to the center is complete, emit an event.\r\n            if (_this._isCenterPosition(event.toState) && _this._isCenterPosition(_this._position)) {\r\n                _this._onCentered.emit();\r\n            }\r\n            if (_this._isCenterPosition(event.fromState) && !_this._isCenterPosition(_this._position)) {\r\n                _this._afterLeavingCenter.emit();\r\n            }\r\n        }));\r\n    }\r\n    Object.defineProperty(_MatTabBodyBase.prototype, \"position\", {\r\n        /** The shifted index position of the tab body, where zero represents the active center tab. */\r\n        set: /**\r\n         * The shifted index position of the tab body, where zero represents the active center tab.\r\n         * @param {?} position\r\n         * @return {?}\r\n         */\r\n        function (position) {\r\n            this._positionIndex = position;\r\n            this._computePositionAnimationState();\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * After initialized, check if the content is centered and has an origin. If so, set the\r\n     * special position states that transition the tab from the left or right before centering.\r\n     */\r\n    /**\r\n     * After initialized, check if the content is centered and has an origin. If so, set the\r\n     * special position states that transition the tab from the left or right before centering.\r\n     * @return {?}\r\n     */\r\n    _MatTabBodyBase.prototype.ngOnInit = /**\r\n     * After initialized, check if the content is centered and has an origin. If so, set the\r\n     * special position states that transition the tab from the left or right before centering.\r\n     * @return {?}\r\n     */\r\n    function () {\r\n        if (this._position == 'center' && this.origin != null) {\r\n            this._position = this._computePositionFromOrigin();\r\n        }\r\n    };\r\n    /**\r\n     * @return {?}\r\n     */\r\n    _MatTabBodyBase.prototype.ngOnDestroy = /**\r\n     * @return {?}\r\n     */\r\n    function () {\r\n        this._dirChangeSubscription.unsubscribe();\r\n        this._translateTabComplete.complete();\r\n    };\r\n    /**\r\n     * @param {?} event\r\n     * @return {?}\r\n     */\r\n    _MatTabBodyBase.prototype._onTranslateTabStarted = /**\r\n     * @param {?} event\r\n     * @return {?}\r\n     */\r\n    function (event) {\r\n        /** @type {?} */\r\n        var isCentering = this._isCenterPosition(event.toState);\r\n        this._beforeCentering.emit(isCentering);\r\n        if (isCentering) {\r\n            this._onCentering.emit(this._elementRef.nativeElement.clientHeight);\r\n        }\r\n    };\r\n    /** The text direction of the containing app. */\r\n    /**\r\n     * The text direction of the containing app.\r\n     * @return {?}\r\n     */\r\n    _MatTabBodyBase.prototype._getLayoutDirection = /**\r\n     * The text direction of the containing app.\r\n     * @return {?}\r\n     */\r\n    function () {\r\n        return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\r\n    };\r\n    /** Whether the provided position state is considered center, regardless of origin. */\r\n    /**\r\n     * Whether the provided position state is considered center, regardless of origin.\r\n     * @param {?} position\r\n     * @return {?}\r\n     */\r\n    _MatTabBodyBase.prototype._isCenterPosition = /**\r\n     * Whether the provided position state is considered center, regardless of origin.\r\n     * @param {?} position\r\n     * @return {?}\r\n     */\r\n    function (position) {\r\n        return position == 'center' ||\r\n            position == 'left-origin-center' ||\r\n            position == 'right-origin-center';\r\n    };\r\n    /** Computes the position state that will be used for the tab-body animation trigger. */\r\n    /**\r\n     * Computes the position state that will be used for the tab-body animation trigger.\r\n     * @private\r\n     * @param {?=} dir\r\n     * @return {?}\r\n     */\r\n    _MatTabBodyBase.prototype._computePositionAnimationState = /**\r\n     * Computes the position state that will be used for the tab-body animation trigger.\r\n     * @private\r\n     * @param {?=} dir\r\n     * @return {?}\r\n     */\r\n    function (dir) {\r\n        if (dir === void 0) { dir = this._getLayoutDirection(); }\r\n        if (this._positionIndex < 0) {\r\n            this._position = dir == 'ltr' ? 'left' : 'right';\r\n        }\r\n        else if (this._positionIndex > 0) {\r\n            this._position = dir == 'ltr' ? 'right' : 'left';\r\n        }\r\n        else {\r\n            this._position = 'center';\r\n        }\r\n    };\r\n    /**\r\n     * Computes the position state based on the specified origin position. This is used if the\r\n     * tab is becoming visible immediately after creation.\r\n     */\r\n    /**\r\n     * Computes the position state based on the specified origin position. This is used if the\r\n     * tab is becoming visible immediately after creation.\r\n     * @private\r\n     * @return {?}\r\n     */\r\n    _MatTabBodyBase.prototype._computePositionFromOrigin = /**\r\n     * Computes the position state based on the specified origin position. This is used if the\r\n     * tab is becoming visible immediately after creation.\r\n     * @private\r\n     * @return {?}\r\n     */\r\n    function () {\r\n        /** @type {?} */\r\n        var dir = this._getLayoutDirection();\r\n        if ((dir == 'ltr' && this.origin <= 0) || (dir == 'rtl' && this.origin > 0)) {\r\n            return 'left-origin-center';\r\n        }\r\n        return 'right-origin-center';\r\n    };\r\n    _MatTabBodyBase.decorators = [\r\n        { type: Directive, args: [{\r\n                    // TODO(crisbeto): this selector can be removed when we update to Angular 9.0.\r\n                    selector: 'do-not-use-abstract-mat-tab-body-base'\r\n                },] },\r\n    ];\r\n    /** @nocollapse */\r\n    _MatTabBodyBase.ctorParameters = function () { return [\r\n        { type: ElementRef },\r\n        { type: Directionality, decorators: [{ type: Optional }] },\r\n        { type: ChangeDetectorRef }\r\n    ]; };\r\n    _MatTabBodyBase.propDecorators = {\r\n        _onCentering: [{ type: Output }],\r\n        _beforeCentering: [{ type: Output }],\r\n        _afterLeavingCenter: [{ type: Output }],\r\n        _onCentered: [{ type: Output }],\r\n        _content: [{ type: Input, args: ['content',] }],\r\n        origin: [{ type: Input }],\r\n        animationDuration: [{ type: Input }],\r\n        position: [{ type: Input }]\r\n    };\r\n    return _MatTabBodyBase;\r\n}());\r\n/**\r\n * Wrapper for the contents of a tab.\r\n * \\@docs-private\r\n */\r\nvar MatTabBody = /** @class */ (function (_super) {\r\n    __extends(MatTabBody, _super);\r\n    function MatTabBody(elementRef, dir, changeDetectorRef) {\r\n        return _super.call(this, elementRef, dir, changeDetectorRef) || this;\r\n    }\r\n    MatTabBody.decorators = [\r\n        { type: Component, args: [{selector: 'mat-tab-body',\r\n                    template: \"<div class=\\\"mat-tab-body-content\\\" #content [@translateTab]=\\\"{ value: _position, params: {animationDuration: animationDuration} }\\\" (@translateTab.start)=\\\"_onTranslateTabStarted($event)\\\" (@translateTab.done)=\\\"_translateTabComplete.next($event)\\\"><ng-template matTabBodyHost></ng-template></div>\",\r\n                    styles: [\".mat-tab-body-content{height:100%;overflow:auto}.mat-tab-group-dynamic-height .mat-tab-body-content{overflow:hidden}\"],\r\n                    encapsulation: ViewEncapsulation.None,\r\n                    changeDetection: ChangeDetectionStrategy.OnPush,\r\n                    animations: [matTabsAnimations.translateTab],\r\n                    host: {\r\n                        'class': 'mat-tab-body',\r\n                    }\r\n                },] },\r\n    ];\r\n    /** @nocollapse */\r\n    MatTabBody.ctorParameters = function () { return [\r\n        { type: ElementRef },\r\n        { type: Directionality, decorators: [{ type: Optional }] },\r\n        { type: ChangeDetectorRef }\r\n    ]; };\r\n    MatTabBody.propDecorators = {\r\n        _portalHost: [{ type: ViewChild, args: [PortalHostDirective, { static: false },] }]\r\n    };\r\n    return MatTabBody;\r\n}(_MatTabBodyBase));\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n/**\r\n * Used to generate unique ID's for each tab component\r\n * @type {?}\r\n */\r\nvar nextId = 0;\r\n/**\r\n * A simple change event emitted on focus or selection changes.\r\n */\r\nvar  /**\r\n * A simple change event emitted on focus or selection changes.\r\n */\r\nMatTabChangeEvent = /** @class */ (function () {\r\n    function MatTabChangeEvent() {\r\n    }\r\n    return MatTabChangeEvent;\r\n}());\r\n/**\r\n * Injection token that can be used to provide the default options the tabs module.\r\n * @type {?}\r\n */\r\nvar MAT_TABS_CONFIG = new InjectionToken('MAT_TABS_CONFIG');\r\n// Boilerplate for applying mixins to MatTabGroup.\r\n/**\r\n * \\@docs-private\r\n */\r\nvar \r\n// Boilerplate for applying mixins to MatTabGroup.\r\n/**\r\n * \\@docs-private\r\n */\r\nMatTabGroupMixinBase = /** @class */ (function () {\r\n    function MatTabGroupMixinBase(_elementRef) {\r\n        this._elementRef = _elementRef;\r\n    }\r\n    return MatTabGroupMixinBase;\r\n}());\r\n/** @type {?} */\r\nvar _MatTabGroupMixinBase = mixinColor(mixinDisableRipple(MatTabGroupMixinBase), 'primary');\r\n/**\r\n * Base class with all of the `MatTabGroupBase` functionality.\r\n * \\@docs-private\r\n * @abstract\r\n */\r\nvar _MatTabGroupBase = /** @class */ (function (_super) {\r\n    __extends(_MatTabGroupBase, _super);\r\n    function _MatTabGroupBase(elementRef, _changeDetectorRef, defaultConfig, _animationMode) {\r\n        var _this = _super.call(this, elementRef) || this;\r\n        _this._changeDetectorRef = _changeDetectorRef;\r\n        _this._animationMode = _animationMode;\r\n        /**\r\n         * The tab index that should be selected after the content has been checked.\r\n         */\r\n        _this._indexToSelect = 0;\r\n        /**\r\n         * Snapshot of the height of the tab body wrapper before another tab is activated.\r\n         */\r\n        _this._tabBodyWrapperHeight = 0;\r\n        /**\r\n         * Subscription to tabs being added/removed.\r\n         */\r\n        _this._tabsSubscription = Subscription.EMPTY;\r\n        /**\r\n         * Subscription to changes in the tab labels.\r\n         */\r\n        _this._tabLabelSubscription = Subscription.EMPTY;\r\n        _this._dynamicHeight = false;\r\n        _this._selectedIndex = null;\r\n        /**\r\n         * Position of the tab header.\r\n         */\r\n        _this.headerPosition = 'above';\r\n        /**\r\n         * Output to enable support for two-way binding on `[(selectedIndex)]`\r\n         */\r\n        _this.selectedIndexChange = new EventEmitter();\r\n        /**\r\n         * Event emitted when focus has changed within a tab group.\r\n         */\r\n        _this.focusChange = new EventEmitter();\r\n        /**\r\n         * Event emitted when the body animation has completed\r\n         */\r\n        _this.animationDone = new EventEmitter();\r\n        /**\r\n         * Event emitted when the tab selection has changed.\r\n         */\r\n        _this.selectedTabChange = new EventEmitter(true);\r\n        _this._groupId = nextId++;\r\n        _this.animationDuration = defaultConfig && defaultConfig.animationDuration ?\r\n            defaultConfig.animationDuration : '500ms';\r\n        return _this;\r\n    }\r\n    Object.defineProperty(_MatTabGroupBase.prototype, \"dynamicHeight\", {\r\n        /** Whether the tab group should grow to the size of the active tab. */\r\n        get: /**\r\n         * Whether the tab group should grow to the size of the active tab.\r\n         * @return {?}\r\n         */\r\n        function () { return this._dynamicHeight; },\r\n        set: /**\r\n         * @param {?} value\r\n         * @return {?}\r\n         */\r\n        function (value) { this._dynamicHeight = coerceBooleanProperty(value); },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(_MatTabGroupBase.prototype, \"selectedIndex\", {\r\n        /** The index of the active tab. */\r\n        get: /**\r\n         * The index of the active tab.\r\n         * @return {?}\r\n         */\r\n        function () { return this._selectedIndex; },\r\n        set: /**\r\n         * @param {?} value\r\n         * @return {?}\r\n         */\r\n        function (value) {\r\n            this._indexToSelect = coerceNumberProperty(value, null);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(_MatTabGroupBase.prototype, \"animationDuration\", {\r\n        /** Duration for the tab animation. Will be normalized to milliseconds if no units are set. */\r\n        get: /**\r\n         * Duration for the tab animation. Will be normalized to milliseconds if no units are set.\r\n         * @return {?}\r\n         */\r\n        function () { return this._animationDuration; },\r\n        set: /**\r\n         * @param {?} value\r\n         * @return {?}\r\n         */\r\n        function (value) {\r\n            this._animationDuration = /^\\d+$/.test(value) ? value + 'ms' : value;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(_MatTabGroupBase.prototype, \"backgroundColor\", {\r\n        /** Background color of the tab group. */\r\n        get: /**\r\n         * Background color of the tab group.\r\n         * @return {?}\r\n         */\r\n        function () { return this._backgroundColor; },\r\n        set: /**\r\n         * @param {?} value\r\n         * @return {?}\r\n         */\r\n        function (value) {\r\n            /** @type {?} */\r\n            var nativeElement = this._elementRef.nativeElement;\r\n            nativeElement.classList.remove(\"mat-background-\" + this.backgroundColor);\r\n            if (value) {\r\n                nativeElement.classList.add(\"mat-background-\" + value);\r\n            }\r\n            this._backgroundColor = value;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * After the content is checked, this component knows what tabs have been defined\r\n     * and what the selected index should be. This is where we can know exactly what position\r\n     * each tab should be in according to the new selected index, and additionally we know how\r\n     * a new selected tab should transition in (from the left or right).\r\n     */\r\n    /**\r\n     * After the content is checked, this component knows what tabs have been defined\r\n     * and what the selected index should be. This is where we can know exactly what position\r\n     * each tab should be in according to the new selected index, and additionally we know how\r\n     * a new selected tab should transition in (from the left or right).\r\n     * @return {?}\r\n     */\r\n    _MatTabGroupBase.prototype.ngAfterContentChecked = /**\r\n     * After the content is checked, this component knows what tabs have been defined\r\n     * and what the selected index should be. This is where we can know exactly what position\r\n     * each tab should be in according to the new selected index, and additionally we know how\r\n     * a new selected tab should transition in (from the left or right).\r\n     * @return {?}\r\n     */\r\n    function () {\r\n        var _this = this;\r\n        // Don't clamp the `indexToSelect` immediately in the setter because it can happen that\r\n        // the amount of tabs changes before the actual change detection runs.\r\n        /** @type {?} */\r\n        var indexToSelect = this._indexToSelect = this._clampTabIndex(this._indexToSelect);\r\n        // If there is a change in selected index, emit a change event. Should not trigger if\r\n        // the selected index has not yet been initialized.\r\n        if (this._selectedIndex != indexToSelect) {\r\n            /** @type {?} */\r\n            var isFirstRun_1 = this._selectedIndex == null;\r\n            if (!isFirstRun_1) {\r\n                this.selectedTabChange.emit(this._createChangeEvent(indexToSelect));\r\n            }\r\n            // Changing these values after change detection has run\r\n            // since the checked content may contain references to them.\r\n            Promise.resolve().then((/**\r\n             * @return {?}\r\n             */\r\n            function () {\r\n                _this._tabs.forEach((/**\r\n                 * @param {?} tab\r\n                 * @param {?} index\r\n                 * @return {?}\r\n                 */\r\n                function (tab, index) { return tab.isActive = index === indexToSelect; }));\r\n                if (!isFirstRun_1) {\r\n                    _this.selectedIndexChange.emit(indexToSelect);\r\n                }\r\n            }));\r\n        }\r\n        // Setup the position for each tab and optionally setup an origin on the next selected tab.\r\n        this._tabs.forEach((/**\r\n         * @param {?} tab\r\n         * @param {?} index\r\n         * @return {?}\r\n         */\r\n        function (tab, index) {\r\n            tab.position = index - indexToSelect;\r\n            // If there is already a selected tab, then set up an origin for the next selected tab\r\n            // if it doesn't have one already.\r\n            if (_this._selectedIndex != null && tab.position == 0 && !tab.origin) {\r\n                tab.origin = indexToSelect - _this._selectedIndex;\r\n            }\r\n        }));\r\n        if (this._selectedIndex !== indexToSelect) {\r\n            this._selectedIndex = indexToSelect;\r\n            this._changeDetectorRef.markForCheck();\r\n        }\r\n    };\r\n    /**\r\n     * @return {?}\r\n     */\r\n    _MatTabGroupBase.prototype.ngAfterContentInit = /**\r\n     * @return {?}\r\n     */\r\n    function () {\r\n        var _this = this;\r\n        this._subscribeToTabLabels();\r\n        // Subscribe to changes in the amount of tabs, in order to be\r\n        // able to re-render the content as new tabs are added or removed.\r\n        this._tabsSubscription = this._tabs.changes.subscribe((/**\r\n         * @return {?}\r\n         */\r\n        function () {\r\n            /** @type {?} */\r\n            var indexToSelect = _this._clampTabIndex(_this._indexToSelect);\r\n            // Maintain the previously-selected tab if a new tab is added or removed and there is no\r\n            // explicit change that selects a different tab.\r\n            if (indexToSelect === _this._selectedIndex) {\r\n                /** @type {?} */\r\n                var tabs = _this._tabs.toArray();\r\n                for (var i = 0; i < tabs.length; i++) {\r\n                    if (tabs[i].isActive) {\r\n                        // Assign both to the `_indexToSelect` and `_selectedIndex` so we don't fire a changed\r\n                        // event, otherwise the consumer may end up in an infinite loop in some edge cases like\r\n                        // adding a tab within the `selectedIndexChange` event.\r\n                        _this._indexToSelect = _this._selectedIndex = i;\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n            _this._subscribeToTabLabels();\r\n            _this._changeDetectorRef.markForCheck();\r\n        }));\r\n    };\r\n    /**\r\n     * @return {?}\r\n     */\r\n    _MatTabGroupBase.prototype.ngOnDestroy = /**\r\n     * @return {?}\r\n     */\r\n    function () {\r\n        this._tabsSubscription.unsubscribe();\r\n        this._tabLabelSubscription.unsubscribe();\r\n    };\r\n    /** Re-aligns the ink bar to the selected tab element. */\r\n    /**\r\n     * Re-aligns the ink bar to the selected tab element.\r\n     * @return {?}\r\n     */\r\n    _MatTabGroupBase.prototype.realignInkBar = /**\r\n     * Re-aligns the ink bar to the selected tab element.\r\n     * @return {?}\r\n     */\r\n    function () {\r\n        if (this._tabHeader) {\r\n            this._tabHeader._alignInkBarToSelectedTab();\r\n        }\r\n    };\r\n    /**\r\n     * @param {?} index\r\n     * @return {?}\r\n     */\r\n    _MatTabGroupBase.prototype._focusChanged = /**\r\n     * @param {?} index\r\n     * @return {?}\r\n     */\r\n    function (index) {\r\n        this.focusChange.emit(this._createChangeEvent(index));\r\n    };\r\n    /**\r\n     * @private\r\n     * @param {?} index\r\n     * @return {?}\r\n     */\r\n    _MatTabGroupBase.prototype._createChangeEvent = /**\r\n     * @private\r\n     * @param {?} index\r\n     * @return {?}\r\n     */\r\n    function (index) {\r\n        /** @type {?} */\r\n        var event = new MatTabChangeEvent;\r\n        event.index = index;\r\n        if (this._tabs && this._tabs.length) {\r\n            event.tab = this._tabs.toArray()[index];\r\n        }\r\n        return event;\r\n    };\r\n    /**\r\n     * Subscribes to changes in the tab labels. This is needed, because the @Input for the label is\r\n     * on the MatTab component, whereas the data binding is inside the MatTabGroup. In order for the\r\n     * binding to be updated, we need to subscribe to changes in it and trigger change detection\r\n     * manually.\r\n     */\r\n    /**\r\n     * Subscribes to changes in the tab labels. This is needed, because the \\@Input for the label is\r\n     * on the MatTab component, whereas the data binding is inside the MatTabGroup. In order for the\r\n     * binding to be updated, we need to subscribe to changes in it and trigger change detection\r\n     * manually.\r\n     * @private\r\n     * @return {?}\r\n     */\r\n    _MatTabGroupBase.prototype._subscribeToTabLabels = /**\r\n     * Subscribes to changes in the tab labels. This is needed, because the \\@Input for the label is\r\n     * on the MatTab component, whereas the data binding is inside the MatTabGroup. In order for the\r\n     * binding to be updated, we need to subscribe to changes in it and trigger change detection\r\n     * manually.\r\n     * @private\r\n     * @return {?}\r\n     */\r\n    function () {\r\n        var _this = this;\r\n        if (this._tabLabelSubscription) {\r\n            this._tabLabelSubscription.unsubscribe();\r\n        }\r\n        this._tabLabelSubscription = merge.apply(void 0, this._tabs.map((/**\r\n         * @param {?} tab\r\n         * @return {?}\r\n         */\r\n        function (tab) { return tab._stateChanges; }))).subscribe((/**\r\n         * @return {?}\r\n         */\r\n        function () { return _this._changeDetectorRef.markForCheck(); }));\r\n    };\r\n    /** Clamps the given index to the bounds of 0 and the tabs length. */\r\n    /**\r\n     * Clamps the given index to the bounds of 0 and the tabs length.\r\n     * @private\r\n     * @param {?} index\r\n     * @return {?}\r\n     */\r\n    _MatTabGroupBase.prototype._clampTabIndex = /**\r\n     * Clamps the given index to the bounds of 0 and the tabs length.\r\n     * @private\r\n     * @param {?} index\r\n     * @return {?}\r\n     */\r\n    function (index) {\r\n        // Note the `|| 0`, which ensures that values like NaN can't get through\r\n        // and which would otherwise throw the component into an infinite loop\r\n        // (since Math.max(NaN, 0) === NaN).\r\n        return Math.min(this._tabs.length - 1, Math.max(index || 0, 0));\r\n    };\r\n    /** Returns a unique id for each tab label element */\r\n    /**\r\n     * Returns a unique id for each tab label element\r\n     * @param {?} i\r\n     * @return {?}\r\n     */\r\n    _MatTabGroupBase.prototype._getTabLabelId = /**\r\n     * Returns a unique id for each tab label element\r\n     * @param {?} i\r\n     * @return {?}\r\n     */\r\n    function (i) {\r\n        return \"mat-tab-label-\" + this._groupId + \"-\" + i;\r\n    };\r\n    /** Returns a unique id for each tab content element */\r\n    /**\r\n     * Returns a unique id for each tab content element\r\n     * @param {?} i\r\n     * @return {?}\r\n     */\r\n    _MatTabGroupBase.prototype._getTabContentId = /**\r\n     * Returns a unique id for each tab content element\r\n     * @param {?} i\r\n     * @return {?}\r\n     */\r\n    function (i) {\r\n        return \"mat-tab-content-\" + this._groupId + \"-\" + i;\r\n    };\r\n    /**\r\n     * Sets the height of the body wrapper to the height of the activating tab if dynamic\r\n     * height property is true.\r\n     */\r\n    /**\r\n     * Sets the height of the body wrapper to the height of the activating tab if dynamic\r\n     * height property is true.\r\n     * @param {?} tabHeight\r\n     * @return {?}\r\n     */\r\n    _MatTabGroupBase.prototype._setTabBodyWrapperHeight = /**\r\n     * Sets the height of the body wrapper to the height of the activating tab if dynamic\r\n     * height property is true.\r\n     * @param {?} tabHeight\r\n     * @return {?}\r\n     */\r\n    function (tabHeight) {\r\n        if (!this._dynamicHeight || !this._tabBodyWrapperHeight) {\r\n            return;\r\n        }\r\n        /** @type {?} */\r\n        var wrapper = this._tabBodyWrapper.nativeElement;\r\n        wrapper.style.height = this._tabBodyWrapperHeight + 'px';\r\n        // This conditional forces the browser to paint the height so that\r\n        // the animation to the new height can have an origin.\r\n        if (this._tabBodyWrapper.nativeElement.offsetHeight) {\r\n            wrapper.style.height = tabHeight + 'px';\r\n        }\r\n    };\r\n    /** Removes the height of the tab body wrapper. */\r\n    /**\r\n     * Removes the height of the tab body wrapper.\r\n     * @return {?}\r\n     */\r\n    _MatTabGroupBase.prototype._removeTabBodyWrapperHeight = /**\r\n     * Removes the height of the tab body wrapper.\r\n     * @return {?}\r\n     */\r\n    function () {\r\n        /** @type {?} */\r\n        var wrapper = this._tabBodyWrapper.nativeElement;\r\n        this._tabBodyWrapperHeight = wrapper.clientHeight;\r\n        wrapper.style.height = '';\r\n        this.animationDone.emit();\r\n    };\r\n    /** Handle click events, setting new selected index if appropriate. */\r\n    /**\r\n     * Handle click events, setting new selected index if appropriate.\r\n     * @param {?} tab\r\n     * @param {?} tabHeader\r\n     * @param {?} index\r\n     * @return {?}\r\n     */\r\n    _MatTabGroupBase.prototype._handleClick = /**\r\n     * Handle click events, setting new selected index if appropriate.\r\n     * @param {?} tab\r\n     * @param {?} tabHeader\r\n     * @param {?} index\r\n     * @return {?}\r\n     */\r\n    function (tab, tabHeader, index) {\r\n        if (!tab.disabled) {\r\n            this.selectedIndex = tabHeader.focusIndex = index;\r\n        }\r\n    };\r\n    /** Retrieves the tabindex for the tab. */\r\n    /**\r\n     * Retrieves the tabindex for the tab.\r\n     * @param {?} tab\r\n     * @param {?} idx\r\n     * @return {?}\r\n     */\r\n    _MatTabGroupBase.prototype._getTabIndex = /**\r\n     * Retrieves the tabindex for the tab.\r\n     * @param {?} tab\r\n     * @param {?} idx\r\n     * @return {?}\r\n     */\r\n    function (tab, idx) {\r\n        if (tab.disabled) {\r\n            return null;\r\n        }\r\n        return this.selectedIndex === idx ? 0 : -1;\r\n    };\r\n    _MatTabGroupBase.decorators = [\r\n        { type: Directive, args: [{\r\n                    // TODO(crisbeto): this selector can be removed when we update to Angular 9.0.\r\n                    selector: 'do-not-use-abstract-mat-tab-group-base'\r\n                },] },\r\n    ];\r\n    /** @nocollapse */\r\n    _MatTabGroupBase.ctorParameters = function () { return [\r\n        { type: ElementRef },\r\n        { type: ChangeDetectorRef },\r\n        { type: undefined, decorators: [{ type: Inject, args: [MAT_TABS_CONFIG,] }, { type: Optional }] },\r\n        { type: String, decorators: [{ type: Optional }, { type: Inject, args: [ANIMATION_MODULE_TYPE,] }] }\r\n    ]; };\r\n    _MatTabGroupBase.propDecorators = {\r\n        dynamicHeight: [{ type: Input }],\r\n        selectedIndex: [{ type: Input }],\r\n        headerPosition: [{ type: Input }],\r\n        animationDuration: [{ type: Input }],\r\n        backgroundColor: [{ type: Input }],\r\n        selectedIndexChange: [{ type: Output }],\r\n        focusChange: [{ type: Output }],\r\n        animationDone: [{ type: Output }],\r\n        selectedTabChange: [{ type: Output }]\r\n    };\r\n    return _MatTabGroupBase;\r\n}(_MatTabGroupMixinBase));\r\n/**\r\n * Material design tab-group component. Supports basic tab pairs (label + content) and includes\r\n * animated ink-bar, keyboard navigation, and screen reader.\r\n * See: https://material.io/design/components/tabs.html\r\n */\r\nvar MatTabGroup = /** @class */ (function (_super) {\r\n    __extends(MatTabGroup, _super);\r\n    function MatTabGroup(elementRef, changeDetectorRef, defaultConfig, animationMode) {\r\n        return _super.call(this, elementRef, changeDetectorRef, defaultConfig, animationMode) || this;\r\n    }\r\n    MatTabGroup.decorators = [\r\n        { type: Component, args: [{selector: 'mat-tab-group',\r\n                    exportAs: 'matTabGroup',\r\n                    template: \"<mat-tab-header #tabHeader [selectedIndex]=\\\"selectedIndex\\\" [disableRipple]=\\\"disableRipple\\\" (indexFocused)=\\\"_focusChanged($event)\\\" (selectFocusedIndex)=\\\"selectedIndex = $event\\\"><div class=\\\"mat-tab-label\\\" role=\\\"tab\\\" matTabLabelWrapper mat-ripple cdkMonitorElementFocus *ngFor=\\\"let tab of _tabs; let i = index\\\" [id]=\\\"_getTabLabelId(i)\\\" [attr.tabIndex]=\\\"_getTabIndex(tab, i)\\\" [attr.aria-posinset]=\\\"i + 1\\\" [attr.aria-setsize]=\\\"_tabs.length\\\" [attr.aria-controls]=\\\"_getTabContentId(i)\\\" [attr.aria-selected]=\\\"selectedIndex == i\\\" [attr.aria-label]=\\\"tab.ariaLabel || null\\\" [attr.aria-labelledby]=\\\"(!tab.ariaLabel && tab.ariaLabelledby) ? tab.ariaLabelledby : null\\\" [class.mat-tab-label-active]=\\\"selectedIndex == i\\\" [disabled]=\\\"tab.disabled\\\" [matRippleDisabled]=\\\"tab.disabled || disableRipple\\\" (click)=\\\"_handleClick(tab, tabHeader, i)\\\"><div class=\\\"mat-tab-label-content\\\"><ng-template [ngIf]=\\\"tab.templateLabel\\\"><ng-template [cdkPortalOutlet]=\\\"tab.templateLabel\\\"></ng-template></ng-template><ng-template [ngIf]=\\\"!tab.templateLabel\\\">{{tab.textLabel}}</ng-template></div></div></mat-tab-header><div class=\\\"mat-tab-body-wrapper\\\" [class._mat-animation-noopable]=\\\"_animationMode === 'NoopAnimations'\\\" #tabBodyWrapper><mat-tab-body role=\\\"tabpanel\\\" *ngFor=\\\"let tab of _tabs; let i = index\\\" [id]=\\\"_getTabContentId(i)\\\" [attr.aria-labelledby]=\\\"_getTabLabelId(i)\\\" [class.mat-tab-body-active]=\\\"selectedIndex == i\\\" [content]=\\\"tab.content\\\" [position]=\\\"tab.position\\\" [origin]=\\\"tab.origin\\\" [animationDuration]=\\\"animationDuration\\\" (_onCentered)=\\\"_removeTabBodyWrapperHeight()\\\" (_onCentering)=\\\"_setTabBodyWrapperHeight($event)\\\"></mat-tab-body></div>\",\r\n                    styles: [\".mat-tab-group{display:flex;flex-direction:column}.mat-tab-group.mat-tab-group-inverted-header{flex-direction:column-reverse}.mat-tab-label{height:48px;padding:0 24px;cursor:pointer;box-sizing:border-box;opacity:.6;min-width:160px;text-align:center;display:inline-flex;justify-content:center;align-items:center;white-space:nowrap;position:relative}.mat-tab-label:focus{outline:0}.mat-tab-label:focus:not(.mat-tab-disabled){opacity:1}@media (-ms-high-contrast:active){.mat-tab-label:focus{outline:dotted 2px}}.mat-tab-label.mat-tab-disabled{cursor:default}@media (-ms-high-contrast:active){.mat-tab-label.mat-tab-disabled{opacity:.5}}.mat-tab-label .mat-tab-label-content{display:inline-flex;justify-content:center;align-items:center;white-space:nowrap}@media (-ms-high-contrast:active){.mat-tab-label{opacity:1}}@media (max-width:599px){.mat-tab-label{padding:0 12px}}@media (max-width:959px){.mat-tab-label{padding:0 12px}}.mat-tab-group[mat-stretch-tabs]>.mat-tab-header .mat-tab-label{flex-basis:0;flex-grow:1}.mat-tab-body-wrapper{position:relative;overflow:hidden;display:flex;transition:height .5s cubic-bezier(.35,0,.25,1)}._mat-animation-noopable.mat-tab-body-wrapper{transition:none;animation:none}.mat-tab-body{top:0;left:0;right:0;bottom:0;position:absolute;display:block;overflow:hidden;flex-basis:100%}.mat-tab-body.mat-tab-body-active{position:relative;overflow-x:hidden;overflow-y:auto;z-index:1;flex-grow:1}.mat-tab-group.mat-tab-group-dynamic-height .mat-tab-body.mat-tab-body-active{overflow-y:hidden}\"],\r\n                    encapsulation: ViewEncapsulation.None,\r\n                    changeDetection: ChangeDetectionStrategy.OnPush,\r\n                    inputs: ['color', 'disableRipple'],\r\n                    host: {\r\n                        'class': 'mat-tab-group',\r\n                        '[class.mat-tab-group-dynamic-height]': 'dynamicHeight',\r\n                        '[class.mat-tab-group-inverted-header]': 'headerPosition === \"below\"',\r\n                    },\r\n                },] },\r\n    ];\r\n    /** @nocollapse */\r\n    MatTabGroup.ctorParameters = function () { return [\r\n        { type: ElementRef },\r\n        { type: ChangeDetectorRef },\r\n        { type: undefined, decorators: [{ type: Inject, args: [MAT_TABS_CONFIG,] }, { type: Optional }] },\r\n        { type: String, decorators: [{ type: Optional }, { type: Inject, args: [ANIMATION_MODULE_TYPE,] }] }\r\n    ]; };\r\n    MatTabGroup.propDecorators = {\r\n        _tabs: [{ type: ContentChildren, args: [MatTab,] }],\r\n        _tabBodyWrapper: [{ type: ViewChild, args: ['tabBodyWrapper', { static: false },] }],\r\n        _tabHeader: [{ type: ViewChild, args: ['tabHeader', { static: false },] }]\r\n    };\r\n    return MatTabGroup;\r\n}(_MatTabGroupBase));\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n// Boilerplate for applying mixins to MatTabLabelWrapper.\r\n/**\r\n * \\@docs-private\r\n */\r\nvar \r\n// Boilerplate for applying mixins to MatTabLabelWrapper.\r\n/**\r\n * \\@docs-private\r\n */\r\nMatTabLabelWrapperBase = /** @class */ (function () {\r\n    function MatTabLabelWrapperBase() {\r\n    }\r\n    return MatTabLabelWrapperBase;\r\n}());\r\n/** @type {?} */\r\nvar _MatTabLabelWrapperMixinBase = mixinDisabled(MatTabLabelWrapperBase);\r\n/**\r\n * Used in the `mat-tab-group` view to display tab labels.\r\n * \\@docs-private\r\n */\r\nvar MatTabLabelWrapper = /** @class */ (function (_super) {\r\n    __extends(MatTabLabelWrapper, _super);\r\n    function MatTabLabelWrapper(elementRef) {\r\n        var _this = _super.call(this) || this;\r\n        _this.elementRef = elementRef;\r\n        return _this;\r\n    }\r\n    /** Sets focus on the wrapper element */\r\n    /**\r\n     * Sets focus on the wrapper element\r\n     * @return {?}\r\n     */\r\n    MatTabLabelWrapper.prototype.focus = /**\r\n     * Sets focus on the wrapper element\r\n     * @return {?}\r\n     */\r\n    function () {\r\n        this.elementRef.nativeElement.focus();\r\n    };\r\n    /**\r\n     * @return {?}\r\n     */\r\n    MatTabLabelWrapper.prototype.getOffsetLeft = /**\r\n     * @return {?}\r\n     */\r\n    function () {\r\n        return this.elementRef.nativeElement.offsetLeft;\r\n    };\r\n    /**\r\n     * @return {?}\r\n     */\r\n    MatTabLabelWrapper.prototype.getOffsetWidth = /**\r\n     * @return {?}\r\n     */\r\n    function () {\r\n        return this.elementRef.nativeElement.offsetWidth;\r\n    };\r\n    MatTabLabelWrapper.decorators = [\r\n        { type: Directive, args: [{\r\n                    selector: '[matTabLabelWrapper]',\r\n                    inputs: ['disabled'],\r\n                    host: {\r\n                        '[class.mat-tab-disabled]': 'disabled',\r\n                        '[attr.aria-disabled]': '!!disabled',\r\n                    }\r\n                },] },\r\n    ];\r\n    /** @nocollapse */\r\n    MatTabLabelWrapper.ctorParameters = function () { return [\r\n        { type: ElementRef }\r\n    ]; };\r\n    return MatTabLabelWrapper;\r\n}(_MatTabLabelWrapperMixinBase));\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n/**\r\n * Config used to bind passive event listeners\r\n * @type {?}\r\n */\r\nvar passiveEventListenerOptions = (/** @type {?} */ (normalizePassiveListenerOptions({ passive: true })));\r\n/**\r\n * The distance in pixels that will be overshot when scrolling a tab label into view. This helps\r\n * provide a small affordance to the label next to it.\r\n * @type {?}\r\n */\r\nvar EXAGGERATED_OVERSCROLL = 60;\r\n/**\r\n * Amount of milliseconds to wait before starting to scroll the header automatically.\r\n * Set a little conservatively in order to handle fake events dispatched on touch devices.\r\n * @type {?}\r\n */\r\nvar HEADER_SCROLL_DELAY = 650;\r\n/**\r\n * Interval in milliseconds at which to scroll the header\r\n * while the user is holding their pointer.\r\n * @type {?}\r\n */\r\nvar HEADER_SCROLL_INTERVAL = 100;\r\n/**\r\n * Base class for a tab header that supported pagination.\r\n * \\@docs-private\r\n * @abstract\r\n */\r\nvar MatPaginatedTabHeader = /** @class */ (function () {\r\n    function MatPaginatedTabHeader(_elementRef, _changeDetectorRef, _viewportRuler, _dir, _ngZone, _platform, _animationMode) {\r\n        var _this = this;\r\n        this._elementRef = _elementRef;\r\n        this._changeDetectorRef = _changeDetectorRef;\r\n        this._viewportRuler = _viewportRuler;\r\n        this._dir = _dir;\r\n        this._ngZone = _ngZone;\r\n        this._platform = _platform;\r\n        this._animationMode = _animationMode;\r\n        /**\r\n         * The distance in pixels that the tab labels should be translated to the left.\r\n         */\r\n        this._scrollDistance = 0;\r\n        /**\r\n         * Whether the header should scroll to the selected index after the view has been checked.\r\n         */\r\n        this._selectedIndexChanged = false;\r\n        /**\r\n         * Emits when the component is destroyed.\r\n         */\r\n        this._destroyed = new Subject();\r\n        /**\r\n         * Whether the controls for pagination should be displayed\r\n         */\r\n        this._showPaginationControls = false;\r\n        /**\r\n         * Whether the tab list can be scrolled more towards the end of the tab label list.\r\n         */\r\n        this._disableScrollAfter = true;\r\n        /**\r\n         * Whether the tab list can be scrolled more towards the beginning of the tab label list.\r\n         */\r\n        this._disableScrollBefore = true;\r\n        /**\r\n         * Stream that will stop the automated scrolling.\r\n         */\r\n        this._stopScrolling = new Subject();\r\n        this._selectedIndex = 0;\r\n        /**\r\n         * Event emitted when the option is selected.\r\n         */\r\n        this.selectFocusedIndex = new EventEmitter();\r\n        /**\r\n         * Event emitted when a label is focused.\r\n         */\r\n        this.indexFocused = new EventEmitter();\r\n        // Bind the `mouseleave` event on the outside since it doesn't change anything in the view.\r\n        _ngZone.runOutsideAngular((/**\r\n         * @return {?}\r\n         */\r\n        function () {\r\n            fromEvent(_elementRef.nativeElement, 'mouseleave')\r\n                .pipe(takeUntil(_this._destroyed))\r\n                .subscribe((/**\r\n             * @return {?}\r\n             */\r\n            function () {\r\n                _this._stopInterval();\r\n            }));\r\n        }));\r\n    }\r\n    Object.defineProperty(MatPaginatedTabHeader.prototype, \"selectedIndex\", {\r\n        /** The index of the active tab. */\r\n        get: /**\r\n         * The index of the active tab.\r\n         * @return {?}\r\n         */\r\n        function () { return this._selectedIndex; },\r\n        set: /**\r\n         * @param {?} value\r\n         * @return {?}\r\n         */\r\n        function (value) {\r\n            value = coerceNumberProperty(value);\r\n            if (this._selectedIndex != value) {\r\n                this._selectedIndexChanged = true;\r\n                this._selectedIndex = value;\r\n                if (this._keyManager) {\r\n                    this._keyManager.updateActiveItemIndex(value);\r\n                }\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * @return {?}\r\n     */\r\n    MatPaginatedTabHeader.prototype.ngAfterViewInit = /**\r\n     * @return {?}\r\n     */\r\n    function () {\r\n        var _this = this;\r\n        // We need to handle these events manually, because we want to bind passive event listeners.\r\n        fromEvent(this._previousPaginator.nativeElement, 'touchstart', passiveEventListenerOptions)\r\n            .pipe(takeUntil(this._destroyed))\r\n            .subscribe((/**\r\n         * @return {?}\r\n         */\r\n        function () {\r\n            _this._handlePaginatorPress('before');\r\n        }));\r\n        fromEvent(this._nextPaginator.nativeElement, 'touchstart', passiveEventListenerOptions)\r\n            .pipe(takeUntil(this._destroyed))\r\n            .subscribe((/**\r\n         * @return {?}\r\n         */\r\n        function () {\r\n            _this._handlePaginatorPress('after');\r\n        }));\r\n    };\r\n    /**\r\n     * @return {?}\r\n     */\r\n    MatPaginatedTabHeader.prototype.ngAfterContentInit = /**\r\n     * @return {?}\r\n     */\r\n    function () {\r\n        var _this = this;\r\n        /** @type {?} */\r\n        var dirChange = this._dir ? this._dir.change : of(null);\r\n        /** @type {?} */\r\n        var resize = this._viewportRuler.change(150);\r\n        /** @type {?} */\r\n        var realign = (/**\r\n         * @return {?}\r\n         */\r\n        function () {\r\n            _this.updatePagination();\r\n            _this._alignInkBarToSelectedTab();\r\n        });\r\n        this._keyManager = new FocusKeyManager(this._items)\r\n            .withHorizontalOrientation(this._getLayoutDirection())\r\n            .withWrap();\r\n        this._keyManager.updateActiveItem(0);\r\n        // Defer the first call in order to allow for slower browsers to lay out the elements.\r\n        // This helps in cases where the user lands directly on a page with paginated tabs.\r\n        typeof requestAnimationFrame !== 'undefined' ? requestAnimationFrame(realign) : realign();\r\n        // On dir change or window resize, realign the ink bar and update the orientation of\r\n        // the key manager if the direction has changed.\r\n        merge(dirChange, resize, this._items.changes).pipe(takeUntil(this._destroyed)).subscribe((/**\r\n         * @return {?}\r\n         */\r\n        function () {\r\n            realign();\r\n            _this._keyManager.withHorizontalOrientation(_this._getLayoutDirection());\r\n        }));\r\n        // If there is a change in the focus key manager we need to emit the `indexFocused`\r\n        // event in order to provide a public event that notifies about focus changes. Also we realign\r\n        // the tabs container by scrolling the new focused tab into the visible section.\r\n        this._keyManager.change.pipe(takeUntil(this._destroyed)).subscribe((/**\r\n         * @param {?} newFocusIndex\r\n         * @return {?}\r\n         */\r\n        function (newFocusIndex) {\r\n            _this.indexFocused.emit(newFocusIndex);\r\n            _this._setTabFocus(newFocusIndex);\r\n        }));\r\n    };\r\n    /**\r\n     * @return {?}\r\n     */\r\n    MatPaginatedTabHeader.prototype.ngAfterContentChecked = /**\r\n     * @return {?}\r\n     */\r\n    function () {\r\n        // If the number of tab labels have changed, check if scrolling should be enabled\r\n        if (this._tabLabelCount != this._items.length) {\r\n            this.updatePagination();\r\n            this._tabLabelCount = this._items.length;\r\n            this._changeDetectorRef.markForCheck();\r\n        }\r\n        // If the selected index has changed, scroll to the label and check if the scrolling controls\r\n        // should be disabled.\r\n        if (this._selectedIndexChanged) {\r\n            this._scrollToLabel(this._selectedIndex);\r\n            this._checkScrollingControls();\r\n            this._alignInkBarToSelectedTab();\r\n            this._selectedIndexChanged = false;\r\n            this._changeDetectorRef.markForCheck();\r\n        }\r\n        // If the scroll distance has been changed (tab selected, focused, scroll controls activated),\r\n        // then translate the header to reflect this.\r\n        if (this._scrollDistanceChanged) {\r\n            this._updateTabScrollPosition();\r\n            this._scrollDistanceChanged = false;\r\n            this._changeDetectorRef.markForCheck();\r\n        }\r\n    };\r\n    /**\r\n     * @return {?}\r\n     */\r\n    MatPaginatedTabHeader.prototype.ngOnDestroy = /**\r\n     * @return {?}\r\n     */\r\n    function () {\r\n        this._destroyed.next();\r\n        this._destroyed.complete();\r\n        this._stopScrolling.complete();\r\n    };\r\n    /** Handles keyboard events on the header. */\r\n    /**\r\n     * Handles keyboard events on the header.\r\n     * @param {?} event\r\n     * @return {?}\r\n     */\r\n    MatPaginatedTabHeader.prototype._handleKeydown = /**\r\n     * Handles keyboard events on the header.\r\n     * @param {?} event\r\n     * @return {?}\r\n     */\r\n    function (event) {\r\n        // We don't handle any key bindings with a modifier key.\r\n        if (hasModifierKey(event)) {\r\n            return;\r\n        }\r\n        switch (event.keyCode) {\r\n            case HOME:\r\n                this._keyManager.setFirstItemActive();\r\n                event.preventDefault();\r\n                break;\r\n            case END:\r\n                this._keyManager.setLastItemActive();\r\n                event.preventDefault();\r\n                break;\r\n            case ENTER:\r\n            case SPACE:\r\n                this.selectFocusedIndex.emit(this.focusIndex);\r\n                this._itemSelected(event);\r\n                break;\r\n            default:\r\n                this._keyManager.onKeydown(event);\r\n        }\r\n    };\r\n    /**\r\n     * Callback for when the MutationObserver detects that the content has changed.\r\n     */\r\n    /**\r\n     * Callback for when the MutationObserver detects that the content has changed.\r\n     * @return {?}\r\n     */\r\n    MatPaginatedTabHeader.prototype._onContentChanges = /**\r\n     * Callback for when the MutationObserver detects that the content has changed.\r\n     * @return {?}\r\n     */\r\n    function () {\r\n        var _this = this;\r\n        /** @type {?} */\r\n        var textContent = this._elementRef.nativeElement.textContent;\r\n        // We need to diff the text content of the header, because the MutationObserver callback\r\n        // will fire even if the text content didn't change which is inefficient and is prone\r\n        // to infinite loops if a poorly constructed expression is passed in (see #14249).\r\n        if (textContent !== this._currentTextContent) {\r\n            this._currentTextContent = textContent || '';\r\n            // The content observer runs outside the `NgZone` by default, which\r\n            // means that we need to bring the callback back in ourselves.\r\n            this._ngZone.run((/**\r\n             * @return {?}\r\n             */\r\n            function () {\r\n                _this.updatePagination();\r\n                _this._alignInkBarToSelectedTab();\r\n                _this._changeDetectorRef.markForCheck();\r\n            }));\r\n        }\r\n    };\r\n    /**\r\n     * Updates the view whether pagination should be enabled or not.\r\n     *\r\n     * WARNING: Calling this method can be very costly in terms of performance. It should be called\r\n     * as infrequently as possible from outside of the Tabs component as it causes a reflow of the\r\n     * page.\r\n     */\r\n    /**\r\n     * Updates the view whether pagination should be enabled or not.\r\n     *\r\n     * WARNING: Calling this method can be very costly in terms of performance. It should be called\r\n     * as infrequently as possible from outside of the Tabs component as it causes a reflow of the\r\n     * page.\r\n     * @return {?}\r\n     */\r\n    MatPaginatedTabHeader.prototype.updatePagination = /**\r\n     * Updates the view whether pagination should be enabled or not.\r\n     *\r\n     * WARNING: Calling this method can be very costly in terms of performance. It should be called\r\n     * as infrequently as possible from outside of the Tabs component as it causes a reflow of the\r\n     * page.\r\n     * @return {?}\r\n     */\r\n    function () {\r\n        this._checkPaginationEnabled();\r\n        this._checkScrollingControls();\r\n        this._updateTabScrollPosition();\r\n    };\r\n    Object.defineProperty(MatPaginatedTabHeader.prototype, \"focusIndex\", {\r\n        /** Tracks which element has focus; used for keyboard navigation */\r\n        get: /**\r\n         * Tracks which element has focus; used for keyboard navigation\r\n         * @return {?}\r\n         */\r\n        function () {\r\n            return this._keyManager ? (/** @type {?} */ (this._keyManager.activeItemIndex)) : 0;\r\n        },\r\n        /** When the focus index is set, we must manually send focus to the correct label */\r\n        set: /**\r\n         * When the focus index is set, we must manually send focus to the correct label\r\n         * @param {?} value\r\n         * @return {?}\r\n         */\r\n        function (value) {\r\n            if (!this._isValidIndex(value) || this.focusIndex === value || !this._keyManager) {\r\n                return;\r\n            }\r\n            this._keyManager.setActiveItem(value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Determines if an index is valid.  If the tabs are not ready yet, we assume that the user is\r\n     * providing a valid index and return true.\r\n     */\r\n    /**\r\n     * Determines if an index is valid.  If the tabs are not ready yet, we assume that the user is\r\n     * providing a valid index and return true.\r\n     * @param {?} index\r\n     * @return {?}\r\n     */\r\n    MatPaginatedTabHeader.prototype._isValidIndex = /**\r\n     * Determines if an index is valid.  If the tabs are not ready yet, we assume that the user is\r\n     * providing a valid index and return true.\r\n     * @param {?} index\r\n     * @return {?}\r\n     */\r\n    function (index) {\r\n        if (!this._items) {\r\n            return true;\r\n        }\r\n        /** @type {?} */\r\n        var tab = this._items ? this._items.toArray()[index] : null;\r\n        return !!tab && !tab.disabled;\r\n    };\r\n    /**\r\n     * Sets focus on the HTML element for the label wrapper and scrolls it into the view if\r\n     * scrolling is enabled.\r\n     */\r\n    /**\r\n     * Sets focus on the HTML element for the label wrapper and scrolls it into the view if\r\n     * scrolling is enabled.\r\n     * @param {?} tabIndex\r\n     * @return {?}\r\n     */\r\n    MatPaginatedTabHeader.prototype._setTabFocus = /**\r\n     * Sets focus on the HTML element for the label wrapper and scrolls it into the view if\r\n     * scrolling is enabled.\r\n     * @param {?} tabIndex\r\n     * @return {?}\r\n     */\r\n    function (tabIndex) {\r\n        if (this._showPaginationControls) {\r\n            this._scrollToLabel(tabIndex);\r\n        }\r\n        if (this._items && this._items.length) {\r\n            this._items.toArray()[tabIndex].focus();\r\n            // Do not let the browser manage scrolling to focus the element, this will be handled\r\n            // by using translation. In LTR, the scroll left should be 0. In RTL, the scroll width\r\n            // should be the full width minus the offset width.\r\n            /** @type {?} */\r\n            var containerEl = this._tabListContainer.nativeElement;\r\n            /** @type {?} */\r\n            var dir = this._getLayoutDirection();\r\n            if (dir == 'ltr') {\r\n                containerEl.scrollLeft = 0;\r\n            }\r\n            else {\r\n                containerEl.scrollLeft = containerEl.scrollWidth - containerEl.offsetWidth;\r\n            }\r\n        }\r\n    };\r\n    /** The layout direction of the containing app. */\r\n    /**\r\n     * The layout direction of the containing app.\r\n     * @return {?}\r\n     */\r\n    MatPaginatedTabHeader.prototype._getLayoutDirection = /**\r\n     * The layout direction of the containing app.\r\n     * @return {?}\r\n     */\r\n    function () {\r\n        return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\r\n    };\r\n    /** Performs the CSS transformation on the tab list that will cause the list to scroll. */\r\n    /**\r\n     * Performs the CSS transformation on the tab list that will cause the list to scroll.\r\n     * @return {?}\r\n     */\r\n    MatPaginatedTabHeader.prototype._updateTabScrollPosition = /**\r\n     * Performs the CSS transformation on the tab list that will cause the list to scroll.\r\n     * @return {?}\r\n     */\r\n    function () {\r\n        /** @type {?} */\r\n        var scrollDistance = this.scrollDistance;\r\n        /** @type {?} */\r\n        var platform = this._platform;\r\n        /** @type {?} */\r\n        var translateX = this._getLayoutDirection() === 'ltr' ? -scrollDistance : scrollDistance;\r\n        // Don't use `translate3d` here because we don't want to create a new layer. A new layer\r\n        // seems to cause flickering and overflow in Internet Explorer. For example, the ink bar\r\n        // and ripples will exceed the boundaries of the visible tab bar.\r\n        // See: https://github.com/angular/components/issues/10276\r\n        // We round the `transform` here, because transforms with sub-pixel precision cause some\r\n        // browsers to blur the content of the element.\r\n        this._tabList.nativeElement.style.transform = \"translateX(\" + Math.round(translateX) + \"px)\";\r\n        // Setting the `transform` on IE will change the scroll offset of the parent, causing the\r\n        // position to be thrown off in some cases. We have to reset it ourselves to ensure that\r\n        // it doesn't get thrown off. Note that we scope it only to IE and Edge, because messing\r\n        // with the scroll position throws off Chrome 71+ in RTL mode (see #14689).\r\n        // @breaking-change 9.0.0 Remove null check for `platform` after it can no longer be undefined.\r\n        if (platform && (platform.TRIDENT || platform.EDGE)) {\r\n            this._tabListContainer.nativeElement.scrollLeft = 0;\r\n        }\r\n    };\r\n    Object.defineProperty(MatPaginatedTabHeader.prototype, \"scrollDistance\", {\r\n        /** Sets the distance in pixels that the tab header should be transformed in the X-axis. */\r\n        get: /**\r\n         * Sets the distance in pixels that the tab header should be transformed in the X-axis.\r\n         * @return {?}\r\n         */\r\n        function () { return this._scrollDistance; },\r\n        set: /**\r\n         * @param {?} value\r\n         * @return {?}\r\n         */\r\n        function (value) {\r\n            this._scrollTo(value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Moves the tab list in the 'before' or 'after' direction (towards the beginning of the list or\r\n     * the end of the list, respectively). The distance to scroll is computed to be a third of the\r\n     * length of the tab list view window.\r\n     *\r\n     * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\r\n     * should be called sparingly.\r\n     */\r\n    /**\r\n     * Moves the tab list in the 'before' or 'after' direction (towards the beginning of the list or\r\n     * the end of the list, respectively). The distance to scroll is computed to be a third of the\r\n     * length of the tab list view window.\r\n     *\r\n     * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\r\n     * should be called sparingly.\r\n     * @param {?} direction\r\n     * @return {?}\r\n     */\r\n    MatPaginatedTabHeader.prototype._scrollHeader = /**\r\n     * Moves the tab list in the 'before' or 'after' direction (towards the beginning of the list or\r\n     * the end of the list, respectively). The distance to scroll is computed to be a third of the\r\n     * length of the tab list view window.\r\n     *\r\n     * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\r\n     * should be called sparingly.\r\n     * @param {?} direction\r\n     * @return {?}\r\n     */\r\n    function (direction) {\r\n        /** @type {?} */\r\n        var viewLength = this._tabListContainer.nativeElement.offsetWidth;\r\n        // Move the scroll distance one-third the length of the tab list's viewport.\r\n        /** @type {?} */\r\n        var scrollAmount = (direction == 'before' ? -1 : 1) * viewLength / 3;\r\n        return this._scrollTo(this._scrollDistance + scrollAmount);\r\n    };\r\n    /** Handles click events on the pagination arrows. */\r\n    /**\r\n     * Handles click events on the pagination arrows.\r\n     * @param {?} direction\r\n     * @return {?}\r\n     */\r\n    MatPaginatedTabHeader.prototype._handlePaginatorClick = /**\r\n     * Handles click events on the pagination arrows.\r\n     * @param {?} direction\r\n     * @return {?}\r\n     */\r\n    function (direction) {\r\n        this._stopInterval();\r\n        this._scrollHeader(direction);\r\n    };\r\n    /**\r\n     * Moves the tab list such that the desired tab label (marked by index) is moved into view.\r\n     *\r\n     * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\r\n     * should be called sparingly.\r\n     */\r\n    /**\r\n     * Moves the tab list such that the desired tab label (marked by index) is moved into view.\r\n     *\r\n     * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\r\n     * should be called sparingly.\r\n     * @param {?} labelIndex\r\n     * @return {?}\r\n     */\r\n    MatPaginatedTabHeader.prototype._scrollToLabel = /**\r\n     * Moves the tab list such that the desired tab label (marked by index) is moved into view.\r\n     *\r\n     * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\r\n     * should be called sparingly.\r\n     * @param {?} labelIndex\r\n     * @return {?}\r\n     */\r\n    function (labelIndex) {\r\n        /** @type {?} */\r\n        var selectedLabel = this._items ? this._items.toArray()[labelIndex] : null;\r\n        if (!selectedLabel) {\r\n            return;\r\n        }\r\n        // The view length is the visible width of the tab labels.\r\n        /** @type {?} */\r\n        var viewLength = this._tabListContainer.nativeElement.offsetWidth;\r\n        var _a = selectedLabel.elementRef.nativeElement, offsetLeft = _a.offsetLeft, offsetWidth = _a.offsetWidth;\r\n        /** @type {?} */\r\n        var labelBeforePos;\r\n        /** @type {?} */\r\n        var labelAfterPos;\r\n        if (this._getLayoutDirection() == 'ltr') {\r\n            labelBeforePos = offsetLeft;\r\n            labelAfterPos = labelBeforePos + offsetWidth;\r\n        }\r\n        else {\r\n            labelAfterPos = this._tabList.nativeElement.offsetWidth - offsetLeft;\r\n            labelBeforePos = labelAfterPos - offsetWidth;\r\n        }\r\n        /** @type {?} */\r\n        var beforeVisiblePos = this.scrollDistance;\r\n        /** @type {?} */\r\n        var afterVisiblePos = this.scrollDistance + viewLength;\r\n        if (labelBeforePos < beforeVisiblePos) {\r\n            // Scroll header to move label to the before direction\r\n            this.scrollDistance -= beforeVisiblePos - labelBeforePos + EXAGGERATED_OVERSCROLL;\r\n        }\r\n        else if (labelAfterPos > afterVisiblePos) {\r\n            // Scroll header to move label to the after direction\r\n            this.scrollDistance += labelAfterPos - afterVisiblePos + EXAGGERATED_OVERSCROLL;\r\n        }\r\n    };\r\n    /**\r\n     * Evaluate whether the pagination controls should be displayed. If the scroll width of the\r\n     * tab list is wider than the size of the header container, then the pagination controls should\r\n     * be shown.\r\n     *\r\n     * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\r\n     * should be called sparingly.\r\n     */\r\n    /**\r\n     * Evaluate whether the pagination controls should be displayed. If the scroll width of the\r\n     * tab list is wider than the size of the header container, then the pagination controls should\r\n     * be shown.\r\n     *\r\n     * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\r\n     * should be called sparingly.\r\n     * @return {?}\r\n     */\r\n    MatPaginatedTabHeader.prototype._checkPaginationEnabled = /**\r\n     * Evaluate whether the pagination controls should be displayed. If the scroll width of the\r\n     * tab list is wider than the size of the header container, then the pagination controls should\r\n     * be shown.\r\n     *\r\n     * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\r\n     * should be called sparingly.\r\n     * @return {?}\r\n     */\r\n    function () {\r\n        /** @type {?} */\r\n        var isEnabled = this._tabList.nativeElement.scrollWidth > this._elementRef.nativeElement.offsetWidth;\r\n        if (!isEnabled) {\r\n            this.scrollDistance = 0;\r\n        }\r\n        if (isEnabled !== this._showPaginationControls) {\r\n            this._changeDetectorRef.markForCheck();\r\n        }\r\n        this._showPaginationControls = isEnabled;\r\n    };\r\n    /**\r\n     * Evaluate whether the before and after controls should be enabled or disabled.\r\n     * If the header is at the beginning of the list (scroll distance is equal to 0) then disable the\r\n     * before button. If the header is at the end of the list (scroll distance is equal to the\r\n     * maximum distance we can scroll), then disable the after button.\r\n     *\r\n     * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\r\n     * should be called sparingly.\r\n     */\r\n    /**\r\n     * Evaluate whether the before and after controls should be enabled or disabled.\r\n     * If the header is at the beginning of the list (scroll distance is equal to 0) then disable the\r\n     * before button. If the header is at the end of the list (scroll distance is equal to the\r\n     * maximum distance we can scroll), then disable the after button.\r\n     *\r\n     * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\r\n     * should be called sparingly.\r\n     * @return {?}\r\n     */\r\n    MatPaginatedTabHeader.prototype._checkScrollingControls = /**\r\n     * Evaluate whether the before and after controls should be enabled or disabled.\r\n     * If the header is at the beginning of the list (scroll distance is equal to 0) then disable the\r\n     * before button. If the header is at the end of the list (scroll distance is equal to the\r\n     * maximum distance we can scroll), then disable the after button.\r\n     *\r\n     * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\r\n     * should be called sparingly.\r\n     * @return {?}\r\n     */\r\n    function () {\r\n        // Check if the pagination arrows should be activated.\r\n        this._disableScrollBefore = this.scrollDistance == 0;\r\n        this._disableScrollAfter = this.scrollDistance == this._getMaxScrollDistance();\r\n        this._changeDetectorRef.markForCheck();\r\n    };\r\n    /**\r\n     * Determines what is the maximum length in pixels that can be set for the scroll distance. This\r\n     * is equal to the difference in width between the tab list container and tab header container.\r\n     *\r\n     * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\r\n     * should be called sparingly.\r\n     */\r\n    /**\r\n     * Determines what is the maximum length in pixels that can be set for the scroll distance. This\r\n     * is equal to the difference in width between the tab list container and tab header container.\r\n     *\r\n     * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\r\n     * should be called sparingly.\r\n     * @return {?}\r\n     */\r\n    MatPaginatedTabHeader.prototype._getMaxScrollDistance = /**\r\n     * Determines what is the maximum length in pixels that can be set for the scroll distance. This\r\n     * is equal to the difference in width between the tab list container and tab header container.\r\n     *\r\n     * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\r\n     * should be called sparingly.\r\n     * @return {?}\r\n     */\r\n    function () {\r\n        /** @type {?} */\r\n        var lengthOfTabList = this._tabList.nativeElement.scrollWidth;\r\n        /** @type {?} */\r\n        var viewLength = this._tabListContainer.nativeElement.offsetWidth;\r\n        return (lengthOfTabList - viewLength) || 0;\r\n    };\r\n    /** Tells the ink-bar to align itself to the current label wrapper */\r\n    /**\r\n     * Tells the ink-bar to align itself to the current label wrapper\r\n     * @return {?}\r\n     */\r\n    MatPaginatedTabHeader.prototype._alignInkBarToSelectedTab = /**\r\n     * Tells the ink-bar to align itself to the current label wrapper\r\n     * @return {?}\r\n     */\r\n    function () {\r\n        /** @type {?} */\r\n        var selectedItem = this._items && this._items.length ?\r\n            this._items.toArray()[this.selectedIndex] : null;\r\n        /** @type {?} */\r\n        var selectedLabelWrapper = selectedItem ? selectedItem.elementRef.nativeElement : null;\r\n        if (selectedLabelWrapper) {\r\n            this._inkBar.alignToElement(selectedLabelWrapper);\r\n        }\r\n        else {\r\n            this._inkBar.hide();\r\n        }\r\n    };\r\n    /** Stops the currently-running paginator interval.  */\r\n    /**\r\n     * Stops the currently-running paginator interval.\r\n     * @return {?}\r\n     */\r\n    MatPaginatedTabHeader.prototype._stopInterval = /**\r\n     * Stops the currently-running paginator interval.\r\n     * @return {?}\r\n     */\r\n    function () {\r\n        this._stopScrolling.next();\r\n    };\r\n    /**\r\n     * Handles the user pressing down on one of the paginators.\r\n     * Starts scrolling the header after a certain amount of time.\r\n     * @param direction In which direction the paginator should be scrolled.\r\n     */\r\n    /**\r\n     * Handles the user pressing down on one of the paginators.\r\n     * Starts scrolling the header after a certain amount of time.\r\n     * @param {?} direction In which direction the paginator should be scrolled.\r\n     * @return {?}\r\n     */\r\n    MatPaginatedTabHeader.prototype._handlePaginatorPress = /**\r\n     * Handles the user pressing down on one of the paginators.\r\n     * Starts scrolling the header after a certain amount of time.\r\n     * @param {?} direction In which direction the paginator should be scrolled.\r\n     * @return {?}\r\n     */\r\n    function (direction) {\r\n        var _this = this;\r\n        // Avoid overlapping timers.\r\n        this._stopInterval();\r\n        // Start a timer after the delay and keep firing based on the interval.\r\n        timer(HEADER_SCROLL_DELAY, HEADER_SCROLL_INTERVAL)\r\n            // Keep the timer going until something tells it to stop or the component is destroyed.\r\n            .pipe(takeUntil(merge(this._stopScrolling, this._destroyed)))\r\n            .subscribe((/**\r\n         * @return {?}\r\n         */\r\n        function () {\r\n            var _a = _this._scrollHeader(direction), maxScrollDistance = _a.maxScrollDistance, distance = _a.distance;\r\n            // Stop the timer if we've reached the start or the end.\r\n            if (distance === 0 || distance >= maxScrollDistance) {\r\n                _this._stopInterval();\r\n            }\r\n        }));\r\n    };\r\n    /**\r\n     * Scrolls the header to a given position.\r\n     * @param position Position to which to scroll.\r\n     * @returns Information on the current scroll distance and the maximum.\r\n     */\r\n    /**\r\n     * Scrolls the header to a given position.\r\n     * @private\r\n     * @param {?} position Position to which to scroll.\r\n     * @return {?} Information on the current scroll distance and the maximum.\r\n     */\r\n    MatPaginatedTabHeader.prototype._scrollTo = /**\r\n     * Scrolls the header to a given position.\r\n     * @private\r\n     * @param {?} position Position to which to scroll.\r\n     * @return {?} Information on the current scroll distance and the maximum.\r\n     */\r\n    function (position) {\r\n        /** @type {?} */\r\n        var maxScrollDistance = this._getMaxScrollDistance();\r\n        this._scrollDistance = Math.max(0, Math.min(maxScrollDistance, position));\r\n        // Mark that the scroll distance has changed so that after the view is checked, the CSS\r\n        // transformation can move the header.\r\n        this._scrollDistanceChanged = true;\r\n        this._checkScrollingControls();\r\n        return { maxScrollDistance: maxScrollDistance, distance: this._scrollDistance };\r\n    };\r\n    MatPaginatedTabHeader.decorators = [\r\n        { type: Directive, args: [{\r\n                    // TODO(crisbeto): this selector can be removed when we update to Angular 9.0.\r\n                    selector: 'do-not-use-abstract-mat-paginated-tab-header'\r\n                },] },\r\n    ];\r\n    /** @nocollapse */\r\n    MatPaginatedTabHeader.ctorParameters = function () { return [\r\n        { type: ElementRef },\r\n        { type: ChangeDetectorRef },\r\n        { type: ViewportRuler },\r\n        { type: Directionality, decorators: [{ type: Optional }] },\r\n        { type: NgZone },\r\n        { type: Platform },\r\n        { type: String, decorators: [{ type: Optional }, { type: Inject, args: [ANIMATION_MODULE_TYPE,] }] }\r\n    ]; };\r\n    return MatPaginatedTabHeader;\r\n}());\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n/**\r\n * Base class with all of the `MatTabHeader` functionality.\r\n * \\@docs-private\r\n * @abstract\r\n */\r\nvar _MatTabHeaderBase = /** @class */ (function (_super) {\r\n    __extends(_MatTabHeaderBase, _super);\r\n    function _MatTabHeaderBase(elementRef, changeDetectorRef, viewportRuler, dir, ngZone, platform, \r\n    // @breaking-change 9.0.0 `_animationMode` parameter to be made required.\r\n    animationMode) {\r\n        var _this = _super.call(this, elementRef, changeDetectorRef, viewportRuler, dir, ngZone, platform, animationMode) || this;\r\n        _this._disableRipple = false;\r\n        return _this;\r\n    }\r\n    Object.defineProperty(_MatTabHeaderBase.prototype, \"disableRipple\", {\r\n        /** Whether the ripple effect is disabled or not. */\r\n        get: /**\r\n         * Whether the ripple effect is disabled or not.\r\n         * @return {?}\r\n         */\r\n        function () { return this._disableRipple; },\r\n        set: /**\r\n         * @param {?} value\r\n         * @return {?}\r\n         */\r\n        function (value) { this._disableRipple = coerceBooleanProperty(value); },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * @protected\r\n     * @param {?} event\r\n     * @return {?}\r\n     */\r\n    _MatTabHeaderBase.prototype._itemSelected = /**\r\n     * @protected\r\n     * @param {?} event\r\n     * @return {?}\r\n     */\r\n    function (event) {\r\n        event.preventDefault();\r\n    };\r\n    _MatTabHeaderBase.decorators = [\r\n        { type: Directive, args: [{\r\n                    // TODO(crisbeto): this selector can be removed when we update to Angular 9.0.\r\n                    selector: 'do-not-use-abstract-mat-tab-header-base'\r\n                },] },\r\n    ];\r\n    /** @nocollapse */\r\n    _MatTabHeaderBase.ctorParameters = function () { return [\r\n        { type: ElementRef },\r\n        { type: ChangeDetectorRef },\r\n        { type: ViewportRuler },\r\n        { type: Directionality, decorators: [{ type: Optional }] },\r\n        { type: NgZone },\r\n        { type: Platform },\r\n        { type: String, decorators: [{ type: Optional }, { type: Inject, args: [ANIMATION_MODULE_TYPE,] }] }\r\n    ]; };\r\n    _MatTabHeaderBase.propDecorators = {\r\n        disableRipple: [{ type: Input }]\r\n    };\r\n    return _MatTabHeaderBase;\r\n}(MatPaginatedTabHeader));\r\n/**\r\n * The header of the tab group which displays a list of all the tabs in the tab group. Includes\r\n * an ink bar that follows the currently selected tab. When the tabs list's width exceeds the\r\n * width of the header container, then arrows will be displayed to allow the user to scroll\r\n * left and right across the header.\r\n * \\@docs-private\r\n */\r\nvar MatTabHeader = /** @class */ (function (_super) {\r\n    __extends(MatTabHeader, _super);\r\n    function MatTabHeader(elementRef, changeDetectorRef, viewportRuler, dir, ngZone, platform, \r\n    // @breaking-change 9.0.0 `_animationMode` parameter to be made required.\r\n    animationMode) {\r\n        return _super.call(this, elementRef, changeDetectorRef, viewportRuler, dir, ngZone, platform, animationMode) || this;\r\n    }\r\n    MatTabHeader.decorators = [\r\n        { type: Component, args: [{selector: 'mat-tab-header',\r\n                    template: \"<div class=\\\"mat-tab-header-pagination mat-tab-header-pagination-before mat-elevation-z4\\\" #previousPaginator aria-hidden=\\\"true\\\" mat-ripple [matRippleDisabled]=\\\"_disableScrollBefore || disableRipple\\\" [class.mat-tab-header-pagination-disabled]=\\\"_disableScrollBefore\\\" (click)=\\\"_handlePaginatorClick('before')\\\" (mousedown)=\\\"_handlePaginatorPress('before')\\\" (touchend)=\\\"_stopInterval()\\\"><div class=\\\"mat-tab-header-pagination-chevron\\\"></div></div><div class=\\\"mat-tab-label-container\\\" #tabListContainer (keydown)=\\\"_handleKeydown($event)\\\"><div #tabList class=\\\"mat-tab-list\\\" [class._mat-animation-noopable]=\\\"_animationMode === 'NoopAnimations'\\\" role=\\\"tablist\\\" (cdkObserveContent)=\\\"_onContentChanges()\\\"><div class=\\\"mat-tab-labels\\\"><ng-content></ng-content></div><mat-ink-bar></mat-ink-bar></div></div><div class=\\\"mat-tab-header-pagination mat-tab-header-pagination-after mat-elevation-z4\\\" #nextPaginator aria-hidden=\\\"true\\\" mat-ripple [matRippleDisabled]=\\\"_disableScrollAfter || disableRipple\\\" [class.mat-tab-header-pagination-disabled]=\\\"_disableScrollAfter\\\" (mousedown)=\\\"_handlePaginatorPress('after')\\\" (click)=\\\"_handlePaginatorClick('after')\\\" (touchend)=\\\"_stopInterval()\\\"><div class=\\\"mat-tab-header-pagination-chevron\\\"></div></div>\",\r\n                    styles: [\".mat-tab-header{display:flex;overflow:hidden;position:relative;flex-shrink:0}.mat-tab-header-pagination{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;position:relative;display:none;justify-content:center;align-items:center;min-width:32px;cursor:pointer;z-index:2;-webkit-tap-highlight-color:transparent;touch-action:none}.mat-tab-header-pagination-controls-enabled .mat-tab-header-pagination{display:flex}.mat-tab-header-pagination-before,.mat-tab-header-rtl .mat-tab-header-pagination-after{padding-left:4px}.mat-tab-header-pagination-before .mat-tab-header-pagination-chevron,.mat-tab-header-rtl .mat-tab-header-pagination-after .mat-tab-header-pagination-chevron{transform:rotate(-135deg)}.mat-tab-header-pagination-after,.mat-tab-header-rtl .mat-tab-header-pagination-before{padding-right:4px}.mat-tab-header-pagination-after .mat-tab-header-pagination-chevron,.mat-tab-header-rtl .mat-tab-header-pagination-before .mat-tab-header-pagination-chevron{transform:rotate(45deg)}.mat-tab-header-pagination-chevron{border-style:solid;border-width:2px 2px 0 0;content:'';height:8px;width:8px}.mat-tab-header-pagination-disabled{box-shadow:none;cursor:default}.mat-tab-list{flex-grow:1;position:relative;transition:transform .5s cubic-bezier(.35,0,.25,1)}.mat-ink-bar{position:absolute;bottom:0;height:2px;transition:.5s cubic-bezier(.35,0,.25,1)}._mat-animation-noopable.mat-ink-bar{transition:none;animation:none}.mat-tab-group-inverted-header .mat-ink-bar{bottom:auto;top:0}@media (-ms-high-contrast:active){.mat-ink-bar{outline:solid 2px;height:0}}.mat-tab-labels{display:flex}[mat-align-tabs=center] .mat-tab-labels{justify-content:center}[mat-align-tabs=end] .mat-tab-labels{justify-content:flex-end}.mat-tab-label-container{display:flex;flex-grow:1;overflow:hidden;z-index:1}._mat-animation-noopable.mat-tab-list{transition:none;animation:none}.mat-tab-label{height:48px;padding:0 24px;cursor:pointer;box-sizing:border-box;opacity:.6;min-width:160px;text-align:center;display:inline-flex;justify-content:center;align-items:center;white-space:nowrap;position:relative}.mat-tab-label:focus{outline:0}.mat-tab-label:focus:not(.mat-tab-disabled){opacity:1}@media (-ms-high-contrast:active){.mat-tab-label:focus{outline:dotted 2px}}.mat-tab-label.mat-tab-disabled{cursor:default}@media (-ms-high-contrast:active){.mat-tab-label.mat-tab-disabled{opacity:.5}}.mat-tab-label .mat-tab-label-content{display:inline-flex;justify-content:center;align-items:center;white-space:nowrap}@media (-ms-high-contrast:active){.mat-tab-label{opacity:1}}@media (max-width:599px){.mat-tab-label{min-width:72px}}\"],\r\n                    inputs: ['selectedIndex'],\r\n                    outputs: ['selectFocusedIndex', 'indexFocused'],\r\n                    encapsulation: ViewEncapsulation.None,\r\n                    changeDetection: ChangeDetectionStrategy.OnPush,\r\n                    host: {\r\n                        'class': 'mat-tab-header',\r\n                        '[class.mat-tab-header-pagination-controls-enabled]': '_showPaginationControls',\r\n                        '[class.mat-tab-header-rtl]': \"_getLayoutDirection() == 'rtl'\",\r\n                    },\r\n                },] },\r\n    ];\r\n    /** @nocollapse */\r\n    MatTabHeader.ctorParameters = function () { return [\r\n        { type: ElementRef },\r\n        { type: ChangeDetectorRef },\r\n        { type: ViewportRuler },\r\n        { type: Directionality, decorators: [{ type: Optional }] },\r\n        { type: NgZone },\r\n        { type: Platform },\r\n        { type: String, decorators: [{ type: Optional }, { type: Inject, args: [ANIMATION_MODULE_TYPE,] }] }\r\n    ]; };\r\n    MatTabHeader.propDecorators = {\r\n        _items: [{ type: ContentChildren, args: [MatTabLabelWrapper,] }],\r\n        _inkBar: [{ type: ViewChild, args: [MatInkBar, { static: true },] }],\r\n        _tabListContainer: [{ type: ViewChild, args: ['tabListContainer', { static: true },] }],\r\n        _tabList: [{ type: ViewChild, args: ['tabList', { static: true },] }],\r\n        _nextPaginator: [{ type: ViewChild, args: ['nextPaginator', { static: false },] }],\r\n        _previousPaginator: [{ type: ViewChild, args: ['previousPaginator', { static: false },] }]\r\n    };\r\n    return MatTabHeader;\r\n}(_MatTabHeaderBase));\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n/**\r\n * Base class with all of the `MatTabNav` functionality.\r\n * \\@docs-private\r\n * @abstract\r\n */\r\nvar _MatTabNavBase = /** @class */ (function (_super) {\r\n    __extends(_MatTabNavBase, _super);\r\n    function _MatTabNavBase(elementRef, dir, ngZone, changeDetectorRef, viewportRuler, \r\n    /**\r\n     * @deprecated @breaking-change 9.0.0 `platform` parameter to become required.\r\n     */\r\n    platform, animationMode) {\r\n        var _this = _super.call(this, elementRef, changeDetectorRef, viewportRuler, dir, ngZone, platform, animationMode) || this;\r\n        _this._disableRipple = false;\r\n        /**\r\n         * Theme color of the nav bar.\r\n         */\r\n        _this.color = 'primary';\r\n        return _this;\r\n    }\r\n    Object.defineProperty(_MatTabNavBase.prototype, \"backgroundColor\", {\r\n        /** Background color of the tab nav. */\r\n        get: /**\r\n         * Background color of the tab nav.\r\n         * @return {?}\r\n         */\r\n        function () { return this._backgroundColor; },\r\n        set: /**\r\n         * @param {?} value\r\n         * @return {?}\r\n         */\r\n        function (value) {\r\n            /** @type {?} */\r\n            var classList = this._elementRef.nativeElement.classList;\r\n            classList.remove(\"mat-background-\" + this.backgroundColor);\r\n            if (value) {\r\n                classList.add(\"mat-background-\" + value);\r\n            }\r\n            this._backgroundColor = value;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(_MatTabNavBase.prototype, \"disableRipple\", {\r\n        /** Whether the ripple effect is disabled or not. */\r\n        get: /**\r\n         * Whether the ripple effect is disabled or not.\r\n         * @return {?}\r\n         */\r\n        function () { return this._disableRipple; },\r\n        set: /**\r\n         * @param {?} value\r\n         * @return {?}\r\n         */\r\n        function (value) { this._disableRipple = coerceBooleanProperty(value); },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * @protected\r\n     * @return {?}\r\n     */\r\n    _MatTabNavBase.prototype._itemSelected = /**\r\n     * @protected\r\n     * @return {?}\r\n     */\r\n    function () {\r\n        // noop\r\n    };\r\n    /**\r\n     * @return {?}\r\n     */\r\n    _MatTabNavBase.prototype.ngAfterContentInit = /**\r\n     * @return {?}\r\n     */\r\n    function () {\r\n        var _this = this;\r\n        // We need this to run before the `changes` subscription in parent to ensure that the\r\n        // selectedIndex is up-to-date by the time the super class starts looking for it.\r\n        this._items.changes.pipe(startWith(null), takeUntil(this._destroyed)).subscribe((/**\r\n         * @return {?}\r\n         */\r\n        function () {\r\n            _this.updateActiveLink();\r\n        }));\r\n        _super.prototype.ngAfterContentInit.call(this);\r\n    };\r\n    /**\r\n     * Notifies the component that the active link has been changed.\r\n     * @breaking-change 8.0.0 `element` parameter to be removed.\r\n     */\r\n    /**\r\n     * Notifies the component that the active link has been changed.\r\n     * \\@breaking-change 8.0.0 `element` parameter to be removed.\r\n     * @param {?=} _element\r\n     * @return {?}\r\n     */\r\n    _MatTabNavBase.prototype.updateActiveLink = /**\r\n     * Notifies the component that the active link has been changed.\r\n     * \\@breaking-change 8.0.0 `element` parameter to be removed.\r\n     * @param {?=} _element\r\n     * @return {?}\r\n     */\r\n    function (_element) {\r\n        if (!this._items) {\r\n            return;\r\n        }\r\n        /** @type {?} */\r\n        var items = this._items.toArray();\r\n        for (var i = 0; i < items.length; i++) {\r\n            if (items[i].active) {\r\n                this.selectedIndex = i;\r\n                this._changeDetectorRef.markForCheck();\r\n                return;\r\n            }\r\n        }\r\n        // The ink bar should hide itself if no items are active.\r\n        this.selectedIndex = -1;\r\n        this._inkBar.hide();\r\n    };\r\n    _MatTabNavBase.decorators = [\r\n        { type: Directive, args: [{\r\n                    // TODO(crisbeto): this selector can be removed when we update to Angular 9.0.\r\n                    selector: 'do-not-use-abstract-mat-tab-nav-base'\r\n                },] },\r\n    ];\r\n    /** @nocollapse */\r\n    _MatTabNavBase.ctorParameters = function () { return [\r\n        { type: ElementRef },\r\n        { type: Directionality, decorators: [{ type: Optional }] },\r\n        { type: NgZone },\r\n        { type: ChangeDetectorRef },\r\n        { type: ViewportRuler },\r\n        { type: Platform, decorators: [{ type: Optional }] },\r\n        { type: String, decorators: [{ type: Optional }, { type: Inject, args: [ANIMATION_MODULE_TYPE,] }] }\r\n    ]; };\r\n    _MatTabNavBase.propDecorators = {\r\n        backgroundColor: [{ type: Input }],\r\n        disableRipple: [{ type: Input }],\r\n        color: [{ type: Input }]\r\n    };\r\n    return _MatTabNavBase;\r\n}(MatPaginatedTabHeader));\r\n/**\r\n * Navigation component matching the styles of the tab group header.\r\n * Provides anchored navigation with animated ink bar.\r\n */\r\nvar MatTabNav = /** @class */ (function (_super) {\r\n    __extends(MatTabNav, _super);\r\n    function MatTabNav(elementRef, dir, ngZone, changeDetectorRef, viewportRuler, \r\n    /**\r\n     * @deprecated @breaking-change 9.0.0 `platform` parameter to become required.\r\n     */\r\n    platform, animationMode) {\r\n        return _super.call(this, elementRef, dir, ngZone, changeDetectorRef, viewportRuler, platform, animationMode) || this;\r\n    }\r\n    MatTabNav.decorators = [\r\n        { type: Component, args: [{selector: '[mat-tab-nav-bar]',\r\n                    exportAs: 'matTabNavBar, matTabNav',\r\n                    inputs: ['color'],\r\n                    template: \"<div class=\\\"mat-tab-header-pagination mat-tab-header-pagination-before mat-elevation-z4\\\" #previousPaginator aria-hidden=\\\"true\\\" mat-ripple [matRippleDisabled]=\\\"_disableScrollBefore || disableRipple\\\" [class.mat-tab-header-pagination-disabled]=\\\"_disableScrollBefore\\\" (click)=\\\"_handlePaginatorClick('before')\\\" (mousedown)=\\\"_handlePaginatorPress('before')\\\" (touchend)=\\\"_stopInterval()\\\"><div class=\\\"mat-tab-header-pagination-chevron\\\"></div></div><div class=\\\"mat-tab-link-container\\\" #tabListContainer (keydown)=\\\"_handleKeydown($event)\\\"><div class=\\\"mat-tab-list\\\" #tabList (cdkObserveContent)=\\\"_onContentChanges()\\\"><div class=\\\"mat-tab-links\\\"><ng-content></ng-content></div><mat-ink-bar></mat-ink-bar></div></div><div class=\\\"mat-tab-header-pagination mat-tab-header-pagination-after mat-elevation-z4\\\" #nextPaginator aria-hidden=\\\"true\\\" mat-ripple [matRippleDisabled]=\\\"_disableScrollAfter || disableRipple\\\" [class.mat-tab-header-pagination-disabled]=\\\"_disableScrollAfter\\\" (mousedown)=\\\"_handlePaginatorPress('after')\\\" (click)=\\\"_handlePaginatorClick('after')\\\" (touchend)=\\\"_stopInterval()\\\"><div class=\\\"mat-tab-header-pagination-chevron\\\"></div></div>\",\r\n                    styles: [\".mat-tab-header{display:flex;overflow:hidden;position:relative;flex-shrink:0}.mat-tab-header-pagination{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;position:relative;display:none;justify-content:center;align-items:center;min-width:32px;cursor:pointer;z-index:2;-webkit-tap-highlight-color:transparent;touch-action:none}.mat-tab-header-pagination-controls-enabled .mat-tab-header-pagination{display:flex}.mat-tab-header-pagination-before,.mat-tab-header-rtl .mat-tab-header-pagination-after{padding-left:4px}.mat-tab-header-pagination-before .mat-tab-header-pagination-chevron,.mat-tab-header-rtl .mat-tab-header-pagination-after .mat-tab-header-pagination-chevron{transform:rotate(-135deg)}.mat-tab-header-pagination-after,.mat-tab-header-rtl .mat-tab-header-pagination-before{padding-right:4px}.mat-tab-header-pagination-after .mat-tab-header-pagination-chevron,.mat-tab-header-rtl .mat-tab-header-pagination-before .mat-tab-header-pagination-chevron{transform:rotate(45deg)}.mat-tab-header-pagination-chevron{border-style:solid;border-width:2px 2px 0 0;content:'';height:8px;width:8px}.mat-tab-header-pagination-disabled{box-shadow:none;cursor:default}.mat-tab-list{flex-grow:1;position:relative;transition:transform .5s cubic-bezier(.35,0,.25,1)}.mat-tab-links{display:flex}[mat-align-tabs=center] .mat-tab-links{justify-content:center}[mat-align-tabs=end] .mat-tab-links{justify-content:flex-end}.mat-ink-bar{position:absolute;bottom:0;height:2px;transition:.5s cubic-bezier(.35,0,.25,1)}._mat-animation-noopable.mat-ink-bar{transition:none;animation:none}.mat-tab-group-inverted-header .mat-ink-bar{bottom:auto;top:0}@media (-ms-high-contrast:active){.mat-ink-bar{outline:solid 2px;height:0}}.mat-tab-link-container{display:flex;flex-grow:1;overflow:hidden;z-index:1}.mat-tab-link{height:48px;padding:0 24px;cursor:pointer;box-sizing:border-box;opacity:.6;min-width:160px;text-align:center;display:inline-flex;justify-content:center;align-items:center;white-space:nowrap;vertical-align:top;text-decoration:none;position:relative;overflow:hidden;-webkit-tap-highlight-color:transparent}.mat-tab-link:focus{outline:0}.mat-tab-link:focus:not(.mat-tab-disabled){opacity:1}@media (-ms-high-contrast:active){.mat-tab-link:focus{outline:dotted 2px}}.mat-tab-link.mat-tab-disabled{cursor:default}@media (-ms-high-contrast:active){.mat-tab-link.mat-tab-disabled{opacity:.5}}.mat-tab-link .mat-tab-label-content{display:inline-flex;justify-content:center;align-items:center;white-space:nowrap}@media (-ms-high-contrast:active){.mat-tab-link{opacity:1}}[mat-stretch-tabs] .mat-tab-link{flex-basis:0;flex-grow:1}.mat-tab-link.mat-tab-disabled{pointer-events:none}@media (max-width:599px){.mat-tab-link{min-width:72px}}\"],\r\n                    host: {\r\n                        'class': 'mat-tab-nav-bar mat-tab-header',\r\n                        '[class.mat-tab-header-pagination-controls-enabled]': '_showPaginationControls',\r\n                        '[class.mat-tab-header-rtl]': \"_getLayoutDirection() == 'rtl'\",\r\n                        '[class.mat-primary]': 'color !== \"warn\" && color !== \"accent\"',\r\n                        '[class.mat-accent]': 'color === \"accent\"',\r\n                        '[class.mat-warn]': 'color === \"warn\"',\r\n                    },\r\n                    encapsulation: ViewEncapsulation.None,\r\n                    changeDetection: ChangeDetectionStrategy.OnPush,\r\n                },] },\r\n    ];\r\n    /** @nocollapse */\r\n    MatTabNav.ctorParameters = function () { return [\r\n        { type: ElementRef },\r\n        { type: Directionality, decorators: [{ type: Optional }] },\r\n        { type: NgZone },\r\n        { type: ChangeDetectorRef },\r\n        { type: ViewportRuler },\r\n        { type: Platform, decorators: [{ type: Optional }] },\r\n        { type: String, decorators: [{ type: Optional }, { type: Inject, args: [ANIMATION_MODULE_TYPE,] }] }\r\n    ]; };\r\n    MatTabNav.propDecorators = {\r\n        _items: [{ type: ContentChildren, args: [forwardRef((/**\r\n                     * @return {?}\r\n                     */\r\n                    function () { return MatTabLink; })), { descendants: true },] }],\r\n        _inkBar: [{ type: ViewChild, args: [MatInkBar, { static: true },] }],\r\n        _tabListContainer: [{ type: ViewChild, args: ['tabListContainer', { static: true },] }],\r\n        _tabList: [{ type: ViewChild, args: ['tabList', { static: true },] }],\r\n        _nextPaginator: [{ type: ViewChild, args: ['nextPaginator', { static: false },] }],\r\n        _previousPaginator: [{ type: ViewChild, args: ['previousPaginator', { static: false },] }]\r\n    };\r\n    return MatTabNav;\r\n}(_MatTabNavBase));\r\n// Boilerplate for applying mixins to MatTabLink.\r\nvar \r\n// Boilerplate for applying mixins to MatTabLink.\r\nMatTabLinkMixinBase = /** @class */ (function () {\r\n    function MatTabLinkMixinBase() {\r\n    }\r\n    return MatTabLinkMixinBase;\r\n}());\r\n/** @type {?} */\r\nvar _MatTabLinkMixinBase = mixinTabIndex(mixinDisableRipple(mixinDisabled(MatTabLinkMixinBase)));\r\n/**\r\n * Base class with all of the `MatTabLink` functionality.\r\n */\r\nvar _MatTabLinkBase = /** @class */ (function (_super) {\r\n    __extends(_MatTabLinkBase, _super);\r\n    function _MatTabLinkBase(_tabNavBar, elementRef, globalRippleOptions, tabIndex, _focusMonitor, animationMode) {\r\n        var _this = _super.call(this) || this;\r\n        _this._tabNavBar = _tabNavBar;\r\n        _this.elementRef = elementRef;\r\n        _this._focusMonitor = _focusMonitor;\r\n        /**\r\n         * Whether the tab link is active or not.\r\n         */\r\n        _this._isActive = false;\r\n        _this.rippleConfig = globalRippleOptions || {};\r\n        _this.tabIndex = parseInt(tabIndex) || 0;\r\n        if (animationMode === 'NoopAnimations') {\r\n            _this.rippleConfig.animation = { enterDuration: 0, exitDuration: 0 };\r\n        }\r\n        _focusMonitor.monitor(elementRef);\r\n        return _this;\r\n    }\r\n    Object.defineProperty(_MatTabLinkBase.prototype, \"active\", {\r\n        /** Whether the link is active. */\r\n        get: /**\r\n         * Whether the link is active.\r\n         * @return {?}\r\n         */\r\n        function () { return this._isActive; },\r\n        set: /**\r\n         * @param {?} value\r\n         * @return {?}\r\n         */\r\n        function (value) {\r\n            if (value !== this._isActive) {\r\n                this._isActive = value;\r\n                this._tabNavBar.updateActiveLink(this.elementRef);\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(_MatTabLinkBase.prototype, \"rippleDisabled\", {\r\n        /**\r\n         * Whether ripples are disabled on interaction.\r\n         * @docs-private\r\n         */\r\n        get: /**\r\n         * Whether ripples are disabled on interaction.\r\n         * \\@docs-private\r\n         * @return {?}\r\n         */\r\n        function () {\r\n            return this.disabled || this.disableRipple || this._tabNavBar.disableRipple ||\r\n                !!this.rippleConfig.disabled;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * @return {?}\r\n     */\r\n    _MatTabLinkBase.prototype.focus = /**\r\n     * @return {?}\r\n     */\r\n    function () {\r\n        this.elementRef.nativeElement.focus();\r\n    };\r\n    /**\r\n     * @return {?}\r\n     */\r\n    _MatTabLinkBase.prototype.ngOnDestroy = /**\r\n     * @return {?}\r\n     */\r\n    function () {\r\n        this._focusMonitor.stopMonitoring(this.elementRef);\r\n    };\r\n    _MatTabLinkBase.decorators = [\r\n        { type: Directive, args: [{\r\n                    // TODO(crisbeto): this selector can be removed when we update to Angular 9.0.\r\n                    selector: 'do-not-use-abstract-mat-tab-link-base'\r\n                },] },\r\n    ];\r\n    /** @nocollapse */\r\n    _MatTabLinkBase.ctorParameters = function () { return [\r\n        { type: _MatTabNavBase },\r\n        { type: ElementRef },\r\n        { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MAT_RIPPLE_GLOBAL_OPTIONS,] }] },\r\n        { type: String, decorators: [{ type: Attribute, args: ['tabindex',] }] },\r\n        { type: FocusMonitor },\r\n        { type: String, decorators: [{ type: Optional }, { type: Inject, args: [ANIMATION_MODULE_TYPE,] }] }\r\n    ]; };\r\n    _MatTabLinkBase.propDecorators = {\r\n        active: [{ type: Input }]\r\n    };\r\n    return _MatTabLinkBase;\r\n}(_MatTabLinkMixinBase));\r\n/**\r\n * Link inside of a `mat-tab-nav-bar`.\r\n */\r\nvar MatTabLink = /** @class */ (function (_super) {\r\n    __extends(MatTabLink, _super);\r\n    function MatTabLink(tabNavBar, elementRef, ngZone, platform, globalRippleOptions, tabIndex, focusMonitor, animationMode) {\r\n        var _this = _super.call(this, tabNavBar, elementRef, globalRippleOptions, tabIndex, focusMonitor, animationMode) || this;\r\n        _this._tabLinkRipple = new RippleRenderer(_this, ngZone, elementRef, platform);\r\n        _this._tabLinkRipple.setupTriggerEvents(elementRef.nativeElement);\r\n        return _this;\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    MatTabLink.prototype.ngOnDestroy = /**\r\n     * @return {?}\r\n     */\r\n    function () {\r\n        _super.prototype.ngOnDestroy.call(this);\r\n        this._tabLinkRipple._removeTriggerEvents();\r\n    };\r\n    MatTabLink.decorators = [\r\n        { type: Directive, args: [{\r\n                    selector: '[mat-tab-link], [matTabLink]',\r\n                    exportAs: 'matTabLink',\r\n                    inputs: ['disabled', 'disableRipple', 'tabIndex'],\r\n                    host: {\r\n                        'class': 'mat-tab-link',\r\n                        '[attr.aria-current]': 'active ? \"page\" : null',\r\n                        '[attr.aria-disabled]': 'disabled',\r\n                        '[attr.tabIndex]': 'tabIndex',\r\n                        '[class.mat-tab-disabled]': 'disabled',\r\n                        '[class.mat-tab-label-active]': 'active',\r\n                    }\r\n                },] },\r\n    ];\r\n    /** @nocollapse */\r\n    MatTabLink.ctorParameters = function () { return [\r\n        { type: MatTabNav },\r\n        { type: ElementRef },\r\n        { type: NgZone },\r\n        { type: Platform },\r\n        { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MAT_RIPPLE_GLOBAL_OPTIONS,] }] },\r\n        { type: String, decorators: [{ type: Attribute, args: ['tabindex',] }] },\r\n        { type: FocusMonitor },\r\n        { type: String, decorators: [{ type: Optional }, { type: Inject, args: [ANIMATION_MODULE_TYPE,] }] }\r\n    ]; };\r\n    return MatTabLink;\r\n}(_MatTabLinkBase));\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\nvar MatTabsModule = /** @class */ (function () {\r\n    function MatTabsModule() {\r\n    }\r\n    MatTabsModule.decorators = [\r\n        { type: NgModule, args: [{\r\n                    imports: [\r\n                        CommonModule,\r\n                        MatCommonModule,\r\n                        PortalModule,\r\n                        MatRippleModule,\r\n                        ObserversModule,\r\n                        A11yModule,\r\n                    ],\r\n                    // Don't export all components because some are only to be used internally.\r\n                    exports: [\r\n                        MatCommonModule,\r\n                        MatTabGroup,\r\n                        MatTabLabel,\r\n                        MatTab,\r\n                        MatTabNav,\r\n                        MatTabLink,\r\n                        MatTabContent,\r\n                    ],\r\n                    declarations: [\r\n                        MatTabGroup,\r\n                        MatTabLabel,\r\n                        MatTab,\r\n                        MatInkBar,\r\n                        MatTabLabelWrapper,\r\n                        MatTabNav,\r\n                        MatTabLink,\r\n                        MatTabBody,\r\n                        MatTabBodyPortal,\r\n                        MatTabHeader,\r\n                        MatTabContent,\r\n                        (/** @type {?} */ (\r\n                        // TODO(crisbeto): these can be removed once they're turned into selector-less directives.\r\n                        MatPaginatedTabHeader)),\r\n                        (/** @type {?} */ (_MatTabGroupBase)),\r\n                        (/** @type {?} */ (_MatTabNavBase)),\r\n                        (/** @type {?} */ (_MatTabBodyBase)),\r\n                        (/** @type {?} */ (_MatTabHeaderBase)),\r\n                        (/** @type {?} */ (_MatTabLinkBase)),\r\n                    ],\r\n                },] },\r\n    ];\r\n    return MatTabsModule;\r\n}());\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n\r\nexport { MatTabsModule, MatInkBar, _MAT_INK_BAR_POSITIONER, MatTabBody, _MatTabBodyBase, MatTabBodyPortal, MatTabHeader, _MatTabHeaderBase, MatTabLabelWrapper, MatTab, MatTabLabel, MatTabNav, MatTabLink, _MatTabNavBase, _MatTabLinkBase, MatTabContent, MatTabChangeEvent, MAT_TABS_CONFIG, _MatTabGroupBase, MatTabGroup, matTabsAnimations, _MAT_INK_BAR_POSITIONER_FACTORY as ɵa24, MatPaginatedTabHeader as ɵb24 };\r\n\r\n"]}