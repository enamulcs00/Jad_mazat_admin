{"version":3,"sources":["v:/jad-admin-go/mazat_admin_panel/node_modules/@angular/material/esm5/sort.es5.js"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAyBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;MAuOM,AAOA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;cAOA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;KAyID,AAGC;;;;;;0EAC6M;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;MA4V7M,AAyBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;cAaA;;;;;;;;;;KAUD;;;;;;;;;;;;;;oNAQC","file":"sort.es5.js","sourcesContent":["/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nimport { __extends } from 'tslib';\r\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\r\nimport { Directive, EventEmitter, Input, isDevMode, Output, Injectable, SkipSelf, Optional, NgModule, ChangeDetectionStrategy, ChangeDetectorRef, Component, ViewEncapsulation, Inject, ɵɵdefineInjectable } from '@angular/core';\r\nimport { mixinDisabled, mixinInitialized, AnimationCurves, AnimationDurations } from '@angular/material/core';\r\nimport { Subject, merge } from 'rxjs';\r\nimport { animate, state, style, transition, trigger, keyframes, query, animateChild } from '@angular/animations';\r\nimport { CommonModule } from '@angular/common';\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n\r\n/**\r\n * \\@docs-private\r\n * @param {?} id\r\n * @return {?}\r\n */\r\nfunction getSortDuplicateSortableIdError(id) {\r\n    return Error(\"Cannot have two MatSortables with the same id (\" + id + \").\");\r\n}\r\n/**\r\n * \\@docs-private\r\n * @return {?}\r\n */\r\nfunction getSortHeaderNotContainedWithinSortError() {\r\n    return Error(\"MatSortHeader must be placed within a parent element with the MatSort directive.\");\r\n}\r\n/**\r\n * \\@docs-private\r\n * @return {?}\r\n */\r\nfunction getSortHeaderMissingIdError() {\r\n    return Error(\"MatSortHeader must be provided with a unique id.\");\r\n}\r\n/**\r\n * \\@docs-private\r\n * @param {?} direction\r\n * @return {?}\r\n */\r\nfunction getSortInvalidDirectionError(direction) {\r\n    return Error(direction + \" is not a valid sort direction ('asc' or 'desc').\");\r\n}\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n// Boilerplate for applying mixins to MatSort.\r\n/**\r\n * \\@docs-private\r\n */\r\nvar \r\n// Boilerplate for applying mixins to MatSort.\r\n/**\r\n * \\@docs-private\r\n */\r\nMatSortBase = /** @class */ (function () {\r\n    function MatSortBase() {\r\n    }\r\n    return MatSortBase;\r\n}());\r\n/** @type {?} */\r\nvar _MatSortMixinBase = mixinInitialized(mixinDisabled(MatSortBase));\r\n/**\r\n * Container for MatSortables to manage the sort state and provide default sort parameters.\r\n */\r\nvar MatSort = /** @class */ (function (_super) {\r\n    __extends(MatSort, _super);\r\n    function MatSort() {\r\n        var _this = _super !== null && _super.apply(this, arguments) || this;\r\n        /**\r\n         * Collection of all registered sortables that this directive manages.\r\n         */\r\n        _this.sortables = new Map();\r\n        /**\r\n         * Used to notify any child components listening to state changes.\r\n         */\r\n        _this._stateChanges = new Subject();\r\n        /**\r\n         * The direction to set when an MatSortable is initially sorted.\r\n         * May be overriden by the MatSortable's sort start.\r\n         */\r\n        _this.start = 'asc';\r\n        _this._direction = '';\r\n        /**\r\n         * Event emitted when the user changes either the active sort or sort direction.\r\n         */\r\n        _this.sortChange = new EventEmitter();\r\n        return _this;\r\n    }\r\n    Object.defineProperty(MatSort.prototype, \"direction\", {\r\n        /** The sort direction of the currently active MatSortable. */\r\n        get: /**\r\n         * The sort direction of the currently active MatSortable.\r\n         * @return {?}\r\n         */\r\n        function () { return this._direction; },\r\n        set: /**\r\n         * @param {?} direction\r\n         * @return {?}\r\n         */\r\n        function (direction) {\r\n            if (isDevMode() && direction && direction !== 'asc' && direction !== 'desc') {\r\n                throw getSortInvalidDirectionError(direction);\r\n            }\r\n            this._direction = direction;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(MatSort.prototype, \"disableClear\", {\r\n        /**\r\n         * Whether to disable the user from clearing the sort by finishing the sort direction cycle.\r\n         * May be overriden by the MatSortable's disable clear input.\r\n         */\r\n        get: /**\r\n         * Whether to disable the user from clearing the sort by finishing the sort direction cycle.\r\n         * May be overriden by the MatSortable's disable clear input.\r\n         * @return {?}\r\n         */\r\n        function () { return this._disableClear; },\r\n        set: /**\r\n         * @param {?} v\r\n         * @return {?}\r\n         */\r\n        function (v) { this._disableClear = coerceBooleanProperty(v); },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Register function to be used by the contained MatSortables. Adds the MatSortable to the\r\n     * collection of MatSortables.\r\n     */\r\n    /**\r\n     * Register function to be used by the contained MatSortables. Adds the MatSortable to the\r\n     * collection of MatSortables.\r\n     * @param {?} sortable\r\n     * @return {?}\r\n     */\r\n    MatSort.prototype.register = /**\r\n     * Register function to be used by the contained MatSortables. Adds the MatSortable to the\r\n     * collection of MatSortables.\r\n     * @param {?} sortable\r\n     * @return {?}\r\n     */\r\n    function (sortable) {\r\n        if (!sortable.id) {\r\n            throw getSortHeaderMissingIdError();\r\n        }\r\n        if (this.sortables.has(sortable.id)) {\r\n            throw getSortDuplicateSortableIdError(sortable.id);\r\n        }\r\n        this.sortables.set(sortable.id, sortable);\r\n    };\r\n    /**\r\n     * Unregister function to be used by the contained MatSortables. Removes the MatSortable from the\r\n     * collection of contained MatSortables.\r\n     */\r\n    /**\r\n     * Unregister function to be used by the contained MatSortables. Removes the MatSortable from the\r\n     * collection of contained MatSortables.\r\n     * @param {?} sortable\r\n     * @return {?}\r\n     */\r\n    MatSort.prototype.deregister = /**\r\n     * Unregister function to be used by the contained MatSortables. Removes the MatSortable from the\r\n     * collection of contained MatSortables.\r\n     * @param {?} sortable\r\n     * @return {?}\r\n     */\r\n    function (sortable) {\r\n        this.sortables.delete(sortable.id);\r\n    };\r\n    /** Sets the active sort id and determines the new sort direction. */\r\n    /**\r\n     * Sets the active sort id and determines the new sort direction.\r\n     * @param {?} sortable\r\n     * @return {?}\r\n     */\r\n    MatSort.prototype.sort = /**\r\n     * Sets the active sort id and determines the new sort direction.\r\n     * @param {?} sortable\r\n     * @return {?}\r\n     */\r\n    function (sortable) {\r\n        if (this.active != sortable.id) {\r\n            this.active = sortable.id;\r\n            this.direction = sortable.start ? sortable.start : this.start;\r\n        }\r\n        else {\r\n            this.direction = this.getNextSortDirection(sortable);\r\n        }\r\n        this.sortChange.emit({ active: this.active, direction: this.direction });\r\n    };\r\n    /** Returns the next sort direction of the active sortable, checking for potential overrides. */\r\n    /**\r\n     * Returns the next sort direction of the active sortable, checking for potential overrides.\r\n     * @param {?} sortable\r\n     * @return {?}\r\n     */\r\n    MatSort.prototype.getNextSortDirection = /**\r\n     * Returns the next sort direction of the active sortable, checking for potential overrides.\r\n     * @param {?} sortable\r\n     * @return {?}\r\n     */\r\n    function (sortable) {\r\n        if (!sortable) {\r\n            return '';\r\n        }\r\n        // Get the sort direction cycle with the potential sortable overrides.\r\n        /** @type {?} */\r\n        var disableClear = sortable.disableClear != null ? sortable.disableClear : this.disableClear;\r\n        /** @type {?} */\r\n        var sortDirectionCycle = getSortDirectionCycle(sortable.start || this.start, disableClear);\r\n        // Get and return the next direction in the cycle\r\n        /** @type {?} */\r\n        var nextDirectionIndex = sortDirectionCycle.indexOf(this.direction) + 1;\r\n        if (nextDirectionIndex >= sortDirectionCycle.length) {\r\n            nextDirectionIndex = 0;\r\n        }\r\n        return sortDirectionCycle[nextDirectionIndex];\r\n    };\r\n    /**\r\n     * @return {?}\r\n     */\r\n    MatSort.prototype.ngOnInit = /**\r\n     * @return {?}\r\n     */\r\n    function () {\r\n        this._markInitialized();\r\n    };\r\n    /**\r\n     * @return {?}\r\n     */\r\n    MatSort.prototype.ngOnChanges = /**\r\n     * @return {?}\r\n     */\r\n    function () {\r\n        this._stateChanges.next();\r\n    };\r\n    /**\r\n     * @return {?}\r\n     */\r\n    MatSort.prototype.ngOnDestroy = /**\r\n     * @return {?}\r\n     */\r\n    function () {\r\n        this._stateChanges.complete();\r\n    };\r\n    MatSort.decorators = [\r\n        { type: Directive, args: [{\r\n                    selector: '[matSort]',\r\n                    exportAs: 'matSort',\r\n                    inputs: ['disabled: matSortDisabled']\r\n                },] },\r\n    ];\r\n    MatSort.propDecorators = {\r\n        active: [{ type: Input, args: ['matSortActive',] }],\r\n        start: [{ type: Input, args: ['matSortStart',] }],\r\n        direction: [{ type: Input, args: ['matSortDirection',] }],\r\n        disableClear: [{ type: Input, args: ['matSortDisableClear',] }],\r\n        sortChange: [{ type: Output, args: ['matSortChange',] }]\r\n    };\r\n    return MatSort;\r\n}(_MatSortMixinBase));\r\n/**\r\n * Returns the sort direction cycle to use given the provided parameters of order and clear.\r\n * @param {?} start\r\n * @param {?} disableClear\r\n * @return {?}\r\n */\r\nfunction getSortDirectionCycle(start, disableClear) {\r\n    /** @type {?} */\r\n    var sortOrder = ['asc', 'desc'];\r\n    if (start == 'desc') {\r\n        sortOrder.reverse();\r\n    }\r\n    if (!disableClear) {\r\n        sortOrder.push('');\r\n    }\r\n    return sortOrder;\r\n}\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n/** @type {?} */\r\nvar SORT_ANIMATION_TRANSITION = AnimationDurations.ENTERING + ' ' +\r\n    AnimationCurves.STANDARD_CURVE;\r\n/**\r\n * Animations used by MatSort.\r\n * \\@docs-private\r\n * @type {?}\r\n */\r\nvar matSortAnimations = {\r\n    /**\r\n     * Animation that moves the sort indicator.\r\n     */\r\n    indicator: trigger('indicator', [\r\n        state('active-asc, asc', style({ transform: 'translateY(0px)' })),\r\n        // 10px is the height of the sort indicator, minus the width of the pointers\r\n        state('active-desc, desc', style({ transform: 'translateY(10px)' })),\r\n        transition('active-asc <=> active-desc', animate(SORT_ANIMATION_TRANSITION))\r\n    ]),\r\n    /**\r\n     * Animation that rotates the left pointer of the indicator based on the sorting direction.\r\n     */\r\n    leftPointer: trigger('leftPointer', [\r\n        state('active-asc, asc', style({ transform: 'rotate(-45deg)' })),\r\n        state('active-desc, desc', style({ transform: 'rotate(45deg)' })),\r\n        transition('active-asc <=> active-desc', animate(SORT_ANIMATION_TRANSITION))\r\n    ]),\r\n    /**\r\n     * Animation that rotates the right pointer of the indicator based on the sorting direction.\r\n     */\r\n    rightPointer: trigger('rightPointer', [\r\n        state('active-asc, asc', style({ transform: 'rotate(45deg)' })),\r\n        state('active-desc, desc', style({ transform: 'rotate(-45deg)' })),\r\n        transition('active-asc <=> active-desc', animate(SORT_ANIMATION_TRANSITION))\r\n    ]),\r\n    /**\r\n     * Animation that controls the arrow opacity.\r\n     */\r\n    arrowOpacity: trigger('arrowOpacity', [\r\n        state('desc-to-active, asc-to-active, active', style({ opacity: 1 })),\r\n        state('desc-to-hint, asc-to-hint, hint', style({ opacity: .54 })),\r\n        state('hint-to-desc, active-to-desc, desc, hint-to-asc, active-to-asc, asc, void', style({ opacity: 0 })),\r\n        // Transition between all states except for immediate transitions\r\n        transition('* => asc, * => desc, * => active, * => hint, * => void', animate('0ms')),\r\n        transition('* <=> *', animate(SORT_ANIMATION_TRANSITION)),\r\n    ]),\r\n    /**\r\n     * Animation for the translation of the arrow as a whole. States are separated into two\r\n     * groups: ones with animations and others that are immediate. Immediate states are asc, desc,\r\n     * peek, and active. The other states define a specific animation (source-to-destination)\r\n     * and are determined as a function of their prev user-perceived state and what the next state\r\n     * should be.\r\n     */\r\n    arrowPosition: trigger('arrowPosition', [\r\n        // Hidden Above => Hint Center\r\n        transition('* => desc-to-hint, * => desc-to-active', animate(SORT_ANIMATION_TRANSITION, keyframes([\r\n            style({ transform: 'translateY(-25%)' }),\r\n            style({ transform: 'translateY(0)' })\r\n        ]))),\r\n        // Hint Center => Hidden Below\r\n        transition('* => hint-to-desc, * => active-to-desc', animate(SORT_ANIMATION_TRANSITION, keyframes([\r\n            style({ transform: 'translateY(0)' }),\r\n            style({ transform: 'translateY(25%)' })\r\n        ]))),\r\n        // Hidden Below => Hint Center\r\n        transition('* => asc-to-hint, * => asc-to-active', animate(SORT_ANIMATION_TRANSITION, keyframes([\r\n            style({ transform: 'translateY(25%)' }),\r\n            style({ transform: 'translateY(0)' })\r\n        ]))),\r\n        // Hint Center => Hidden Above\r\n        transition('* => hint-to-asc, * => active-to-asc', animate(SORT_ANIMATION_TRANSITION, keyframes([\r\n            style({ transform: 'translateY(0)' }),\r\n            style({ transform: 'translateY(-25%)' })\r\n        ]))),\r\n        state('desc-to-hint, asc-to-hint, hint, desc-to-active, asc-to-active, active', style({ transform: 'translateY(0)' })),\r\n        state('hint-to-desc, active-to-desc, desc', style({ transform: 'translateY(-25%)' })),\r\n        state('hint-to-asc, active-to-asc, asc', style({ transform: 'translateY(25%)' })),\r\n    ]),\r\n    /**\r\n     * Necessary trigger that calls animate on children animations.\r\n     */\r\n    allowChildren: trigger('allowChildren', [\r\n        transition('* <=> *', [\r\n            query('@*', animateChild(), { optional: true })\r\n        ])\r\n    ]),\r\n};\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n/**\r\n * To modify the labels and text displayed, create a new instance of MatSortHeaderIntl and\r\n * include it in a custom provider.\r\n */\r\nvar MatSortHeaderIntl = /** @class */ (function () {\r\n    function MatSortHeaderIntl() {\r\n        /**\r\n         * Stream that emits whenever the labels here are changed. Use this to notify\r\n         * components if the labels have changed after initialization.\r\n         */\r\n        this.changes = new Subject();\r\n        /**\r\n         * ARIA label for the sorting button.\r\n         */\r\n        this.sortButtonLabel = (/**\r\n         * @param {?} id\r\n         * @return {?}\r\n         */\r\n        function (id) {\r\n            return \"Change sorting for \" + id;\r\n        });\r\n    }\r\n    MatSortHeaderIntl.decorators = [\r\n        { type: Injectable, args: [{ providedIn: 'root' },] },\r\n    ];\r\n    /** @nocollapse */ MatSortHeaderIntl.ngInjectableDef = ɵɵdefineInjectable({ factory: function MatSortHeaderIntl_Factory() { return new MatSortHeaderIntl(); }, token: MatSortHeaderIntl, providedIn: \"root\" });\r\n    return MatSortHeaderIntl;\r\n}());\r\n/**\r\n * \\@docs-private\r\n * @param {?} parentIntl\r\n * @return {?}\r\n */\r\nfunction MAT_SORT_HEADER_INTL_PROVIDER_FACTORY(parentIntl) {\r\n    return parentIntl || new MatSortHeaderIntl();\r\n}\r\n/**\r\n * \\@docs-private\r\n * @type {?}\r\n */\r\nvar MAT_SORT_HEADER_INTL_PROVIDER = {\r\n    // If there is already an MatSortHeaderIntl available, use that. Otherwise, provide a new one.\r\n    provide: MatSortHeaderIntl,\r\n    deps: [[new Optional(), new SkipSelf(), MatSortHeaderIntl]],\r\n    useFactory: MAT_SORT_HEADER_INTL_PROVIDER_FACTORY\r\n};\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n// Boilerplate for applying mixins to the sort header.\r\n/**\r\n * \\@docs-private\r\n */\r\nvar \r\n// Boilerplate for applying mixins to the sort header.\r\n/**\r\n * \\@docs-private\r\n */\r\nMatSortHeaderBase = /** @class */ (function () {\r\n    function MatSortHeaderBase() {\r\n    }\r\n    return MatSortHeaderBase;\r\n}());\r\n/** @type {?} */\r\nvar _MatSortHeaderMixinBase = mixinDisabled(MatSortHeaderBase);\r\n/**\r\n * Applies sorting behavior (click to change sort) and styles to an element, including an\r\n * arrow to display the current sort direction.\r\n *\r\n * Must be provided with an id and contained within a parent MatSort directive.\r\n *\r\n * If used on header cells in a CdkTable, it will automatically default its id from its containing\r\n * column definition.\r\n */\r\nvar MatSortHeader = /** @class */ (function (_super) {\r\n    __extends(MatSortHeader, _super);\r\n    function MatSortHeader(_intl, changeDetectorRef, _sort, _columnDef) {\r\n        var _this = \r\n        // Note that we use a string token for the `_columnDef`, because the value is provided both by\r\n        // `material/table` and `cdk/table` and we can't have the CDK depending on Material,\r\n        // and we want to avoid having the sort header depending on the CDK table because\r\n        // of this single reference.\r\n        _super.call(this) || this;\r\n        _this._intl = _intl;\r\n        _this._sort = _sort;\r\n        _this._columnDef = _columnDef;\r\n        /**\r\n         * Flag set to true when the indicator should be displayed while the sort is not active. Used to\r\n         * provide an affordance that the header is sortable by showing on focus and hover.\r\n         */\r\n        _this._showIndicatorHint = false;\r\n        /**\r\n         * The direction the arrow should be facing according to the current state.\r\n         */\r\n        _this._arrowDirection = '';\r\n        /**\r\n         * Whether the view state animation should show the transition between the `from` and `to` states.\r\n         */\r\n        _this._disableViewStateAnimation = false;\r\n        /**\r\n         * Sets the position of the arrow that displays when sorted.\r\n         */\r\n        _this.arrowPosition = 'after';\r\n        if (!_sort) {\r\n            throw getSortHeaderNotContainedWithinSortError();\r\n        }\r\n        _this._rerenderSubscription = merge(_sort.sortChange, _sort._stateChanges, _intl.changes)\r\n            .subscribe((/**\r\n         * @return {?}\r\n         */\r\n        function () {\r\n            if (_this._isSorted()) {\r\n                _this._updateArrowDirection();\r\n            }\r\n            // If this header was recently active and now no longer sorted, animate away the arrow.\r\n            if (!_this._isSorted() && _this._viewState && _this._viewState.toState === 'active') {\r\n                _this._disableViewStateAnimation = false;\r\n                _this._setAnimationTransitionState({ fromState: 'active', toState: _this._arrowDirection });\r\n            }\r\n            changeDetectorRef.markForCheck();\r\n        }));\r\n        return _this;\r\n    }\r\n    Object.defineProperty(MatSortHeader.prototype, \"disableClear\", {\r\n        /** Overrides the disable clear value of the containing MatSort for this MatSortable. */\r\n        get: /**\r\n         * Overrides the disable clear value of the containing MatSort for this MatSortable.\r\n         * @return {?}\r\n         */\r\n        function () { return this._disableClear; },\r\n        set: /**\r\n         * @param {?} v\r\n         * @return {?}\r\n         */\r\n        function (v) { this._disableClear = coerceBooleanProperty(v); },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * @return {?}\r\n     */\r\n    MatSortHeader.prototype.ngOnInit = /**\r\n     * @return {?}\r\n     */\r\n    function () {\r\n        if (!this.id && this._columnDef) {\r\n            this.id = this._columnDef.name;\r\n        }\r\n        // Initialize the direction of the arrow and set the view state to be immediately that state.\r\n        this._updateArrowDirection();\r\n        this._setAnimationTransitionState({ toState: this._isSorted() ? 'active' : this._arrowDirection });\r\n        this._sort.register(this);\r\n    };\r\n    /**\r\n     * @return {?}\r\n     */\r\n    MatSortHeader.prototype.ngOnDestroy = /**\r\n     * @return {?}\r\n     */\r\n    function () {\r\n        this._sort.deregister(this);\r\n        this._rerenderSubscription.unsubscribe();\r\n    };\r\n    /**\r\n     * Sets the \"hint\" state such that the arrow will be semi-transparently displayed as a hint to the\r\n     * user showing what the active sort will become. If set to false, the arrow will fade away.\r\n     */\r\n    /**\r\n     * Sets the \"hint\" state such that the arrow will be semi-transparently displayed as a hint to the\r\n     * user showing what the active sort will become. If set to false, the arrow will fade away.\r\n     * @param {?} visible\r\n     * @return {?}\r\n     */\r\n    MatSortHeader.prototype._setIndicatorHintVisible = /**\r\n     * Sets the \"hint\" state such that the arrow will be semi-transparently displayed as a hint to the\r\n     * user showing what the active sort will become. If set to false, the arrow will fade away.\r\n     * @param {?} visible\r\n     * @return {?}\r\n     */\r\n    function (visible) {\r\n        // No-op if the sort header is disabled - should not make the hint visible.\r\n        if (this._isDisabled() && visible) {\r\n            return;\r\n        }\r\n        this._showIndicatorHint = visible;\r\n        if (!this._isSorted()) {\r\n            this._updateArrowDirection();\r\n            if (this._showIndicatorHint) {\r\n                this._setAnimationTransitionState({ fromState: this._arrowDirection, toState: 'hint' });\r\n            }\r\n            else {\r\n                this._setAnimationTransitionState({ fromState: 'hint', toState: this._arrowDirection });\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Sets the animation transition view state for the arrow's position and opacity. If the\r\n     * `disableViewStateAnimation` flag is set to true, the `fromState` will be ignored so that\r\n     * no animation appears.\r\n     */\r\n    /**\r\n     * Sets the animation transition view state for the arrow's position and opacity. If the\r\n     * `disableViewStateAnimation` flag is set to true, the `fromState` will be ignored so that\r\n     * no animation appears.\r\n     * @param {?} viewState\r\n     * @return {?}\r\n     */\r\n    MatSortHeader.prototype._setAnimationTransitionState = /**\r\n     * Sets the animation transition view state for the arrow's position and opacity. If the\r\n     * `disableViewStateAnimation` flag is set to true, the `fromState` will be ignored so that\r\n     * no animation appears.\r\n     * @param {?} viewState\r\n     * @return {?}\r\n     */\r\n    function (viewState) {\r\n        this._viewState = viewState;\r\n        // If the animation for arrow position state (opacity/translation) should be disabled,\r\n        // remove the fromState so that it jumps right to the toState.\r\n        if (this._disableViewStateAnimation) {\r\n            this._viewState = { toState: viewState.toState };\r\n        }\r\n    };\r\n    /** Triggers the sort on this sort header and removes the indicator hint. */\r\n    /**\r\n     * Triggers the sort on this sort header and removes the indicator hint.\r\n     * @return {?}\r\n     */\r\n    MatSortHeader.prototype._handleClick = /**\r\n     * Triggers the sort on this sort header and removes the indicator hint.\r\n     * @return {?}\r\n     */\r\n    function () {\r\n        if (this._isDisabled()) {\r\n            return;\r\n        }\r\n        this._sort.sort(this);\r\n        // Do not show the animation if the header was already shown in the right position.\r\n        if (this._viewState.toState === 'hint' || this._viewState.toState === 'active') {\r\n            this._disableViewStateAnimation = true;\r\n        }\r\n        // If the arrow is now sorted, animate the arrow into place. Otherwise, animate it away into\r\n        // the direction it is facing.\r\n        /** @type {?} */\r\n        var viewState = this._isSorted() ?\r\n            { fromState: this._arrowDirection, toState: 'active' } :\r\n            { fromState: 'active', toState: this._arrowDirection };\r\n        this._setAnimationTransitionState(viewState);\r\n        this._showIndicatorHint = false;\r\n    };\r\n    /** Whether this MatSortHeader is currently sorted in either ascending or descending order. */\r\n    /**\r\n     * Whether this MatSortHeader is currently sorted in either ascending or descending order.\r\n     * @return {?}\r\n     */\r\n    MatSortHeader.prototype._isSorted = /**\r\n     * Whether this MatSortHeader is currently sorted in either ascending or descending order.\r\n     * @return {?}\r\n     */\r\n    function () {\r\n        return this._sort.active == this.id &&\r\n            (this._sort.direction === 'asc' || this._sort.direction === 'desc');\r\n    };\r\n    /** Returns the animation state for the arrow direction (indicator and pointers). */\r\n    /**\r\n     * Returns the animation state for the arrow direction (indicator and pointers).\r\n     * @return {?}\r\n     */\r\n    MatSortHeader.prototype._getArrowDirectionState = /**\r\n     * Returns the animation state for the arrow direction (indicator and pointers).\r\n     * @return {?}\r\n     */\r\n    function () {\r\n        return \"\" + (this._isSorted() ? 'active-' : '') + this._arrowDirection;\r\n    };\r\n    /** Returns the arrow position state (opacity, translation). */\r\n    /**\r\n     * Returns the arrow position state (opacity, translation).\r\n     * @return {?}\r\n     */\r\n    MatSortHeader.prototype._getArrowViewState = /**\r\n     * Returns the arrow position state (opacity, translation).\r\n     * @return {?}\r\n     */\r\n    function () {\r\n        /** @type {?} */\r\n        var fromState = this._viewState.fromState;\r\n        return (fromState ? fromState + \"-to-\" : '') + this._viewState.toState;\r\n    };\r\n    /**\r\n     * Updates the direction the arrow should be pointing. If it is not sorted, the arrow should be\r\n     * facing the start direction. Otherwise if it is sorted, the arrow should point in the currently\r\n     * active sorted direction. The reason this is updated through a function is because the direction\r\n     * should only be changed at specific times - when deactivated but the hint is displayed and when\r\n     * the sort is active and the direction changes. Otherwise the arrow's direction should linger\r\n     * in cases such as the sort becoming deactivated but we want to animate the arrow away while\r\n     * preserving its direction, even though the next sort direction is actually different and should\r\n     * only be changed once the arrow displays again (hint or activation).\r\n     */\r\n    /**\r\n     * Updates the direction the arrow should be pointing. If it is not sorted, the arrow should be\r\n     * facing the start direction. Otherwise if it is sorted, the arrow should point in the currently\r\n     * active sorted direction. The reason this is updated through a function is because the direction\r\n     * should only be changed at specific times - when deactivated but the hint is displayed and when\r\n     * the sort is active and the direction changes. Otherwise the arrow's direction should linger\r\n     * in cases such as the sort becoming deactivated but we want to animate the arrow away while\r\n     * preserving its direction, even though the next sort direction is actually different and should\r\n     * only be changed once the arrow displays again (hint or activation).\r\n     * @return {?}\r\n     */\r\n    MatSortHeader.prototype._updateArrowDirection = /**\r\n     * Updates the direction the arrow should be pointing. If it is not sorted, the arrow should be\r\n     * facing the start direction. Otherwise if it is sorted, the arrow should point in the currently\r\n     * active sorted direction. The reason this is updated through a function is because the direction\r\n     * should only be changed at specific times - when deactivated but the hint is displayed and when\r\n     * the sort is active and the direction changes. Otherwise the arrow's direction should linger\r\n     * in cases such as the sort becoming deactivated but we want to animate the arrow away while\r\n     * preserving its direction, even though the next sort direction is actually different and should\r\n     * only be changed once the arrow displays again (hint or activation).\r\n     * @return {?}\r\n     */\r\n    function () {\r\n        this._arrowDirection = this._isSorted() ?\r\n            this._sort.direction :\r\n            (this.start || this._sort.start);\r\n    };\r\n    /**\r\n     * @return {?}\r\n     */\r\n    MatSortHeader.prototype._isDisabled = /**\r\n     * @return {?}\r\n     */\r\n    function () {\r\n        return this._sort.disabled || this.disabled;\r\n    };\r\n    /**\r\n     * Gets the aria-sort attribute that should be applied to this sort header. If this header\r\n     * is not sorted, returns null so that the attribute is removed from the host element. Aria spec\r\n     * says that the aria-sort property should only be present on one header at a time, so removing\r\n     * ensures this is true.\r\n     */\r\n    /**\r\n     * Gets the aria-sort attribute that should be applied to this sort header. If this header\r\n     * is not sorted, returns null so that the attribute is removed from the host element. Aria spec\r\n     * says that the aria-sort property should only be present on one header at a time, so removing\r\n     * ensures this is true.\r\n     * @return {?}\r\n     */\r\n    MatSortHeader.prototype._getAriaSortAttribute = /**\r\n     * Gets the aria-sort attribute that should be applied to this sort header. If this header\r\n     * is not sorted, returns null so that the attribute is removed from the host element. Aria spec\r\n     * says that the aria-sort property should only be present on one header at a time, so removing\r\n     * ensures this is true.\r\n     * @return {?}\r\n     */\r\n    function () {\r\n        if (!this._isSorted()) {\r\n            return null;\r\n        }\r\n        return this._sort.direction == 'asc' ? 'ascending' : 'descending';\r\n    };\r\n    /** Whether the arrow inside the sort header should be rendered. */\r\n    /**\r\n     * Whether the arrow inside the sort header should be rendered.\r\n     * @return {?}\r\n     */\r\n    MatSortHeader.prototype._renderArrow = /**\r\n     * Whether the arrow inside the sort header should be rendered.\r\n     * @return {?}\r\n     */\r\n    function () {\r\n        return !this._isDisabled() || this._isSorted();\r\n    };\r\n    MatSortHeader.decorators = [\r\n        { type: Component, args: [{selector: '[mat-sort-header]',\r\n                    exportAs: 'matSortHeader',\r\n                    template: \"<div class=\\\"mat-sort-header-container\\\" [class.mat-sort-header-sorted]=\\\"_isSorted()\\\" [class.mat-sort-header-position-before]=\\\"arrowPosition == 'before'\\\"><button class=\\\"mat-sort-header-button\\\" type=\\\"button\\\" [attr.disabled]=\\\"_isDisabled() || null\\\" [attr.aria-label]=\\\"_intl.sortButtonLabel(id)\\\" (focus)=\\\"_setIndicatorHintVisible(true)\\\" (blur)=\\\"_setIndicatorHintVisible(false)\\\"><ng-content></ng-content></button><div class=\\\"mat-sort-header-arrow\\\" *ngIf=\\\"_renderArrow()\\\" [@arrowOpacity]=\\\"_getArrowViewState()\\\" [@arrowPosition]=\\\"_getArrowViewState()\\\" [@allowChildren]=\\\"_getArrowDirectionState()\\\" (@arrowPosition.start)=\\\"_disableViewStateAnimation = true\\\" (@arrowPosition.done)=\\\"_disableViewStateAnimation = false\\\"><div class=\\\"mat-sort-header-stem\\\"></div><div class=\\\"mat-sort-header-indicator\\\" [@indicator]=\\\"_getArrowDirectionState()\\\"><div class=\\\"mat-sort-header-pointer-left\\\" [@leftPointer]=\\\"_getArrowDirectionState()\\\"></div><div class=\\\"mat-sort-header-pointer-right\\\" [@rightPointer]=\\\"_getArrowDirectionState()\\\"></div><div class=\\\"mat-sort-header-pointer-middle\\\"></div></div></div></div>\",\r\n                    styles: [\".mat-sort-header-container{display:flex;cursor:pointer;align-items:center}.mat-sort-header-disabled .mat-sort-header-container{cursor:default}.mat-sort-header-position-before{flex-direction:row-reverse}.mat-sort-header-button{border:none;background:0 0;display:flex;align-items:center;padding:0;cursor:inherit;outline:0;font:inherit;color:currentColor}.mat-sort-header-button::-moz-focus-inner{border:0}.mat-sort-header-arrow{height:12px;width:12px;min-width:12px;position:relative;display:flex;opacity:0}.mat-sort-header-arrow,[dir=rtl] .mat-sort-header-position-before .mat-sort-header-arrow{margin:0 0 0 6px}.mat-sort-header-position-before .mat-sort-header-arrow,[dir=rtl] .mat-sort-header-arrow{margin:0 6px 0 0}.mat-sort-header-stem{background:currentColor;height:10px;width:2px;margin:auto;display:flex;align-items:center}@media (-ms-high-contrast:active){.mat-sort-header-stem{width:0;border-left:solid 2px}}.mat-sort-header-indicator{width:100%;height:2px;display:flex;align-items:center;position:absolute;top:0;left:0}.mat-sort-header-pointer-middle{margin:auto;height:2px;width:2px;background:currentColor;transform:rotate(45deg)}@media (-ms-high-contrast:active){.mat-sort-header-pointer-middle{width:0;height:0;border-top:solid 2px;border-left:solid 2px}}.mat-sort-header-pointer-left,.mat-sort-header-pointer-right{background:currentColor;width:6px;height:2px;position:absolute;top:0}@media (-ms-high-contrast:active){.mat-sort-header-pointer-left,.mat-sort-header-pointer-right{width:0;height:0;border-left:solid 6px;border-top:solid 2px}}.mat-sort-header-pointer-left{transform-origin:right;left:0}.mat-sort-header-pointer-right{transform-origin:left;right:0}\"],\r\n                    host: {\r\n                        '(click)': '_handleClick()',\r\n                        '(mouseenter)': '_setIndicatorHintVisible(true)',\r\n                        '(mouseleave)': '_setIndicatorHintVisible(false)',\r\n                        '[attr.aria-sort]': '_getAriaSortAttribute()',\r\n                        '[class.mat-sort-header-disabled]': '_isDisabled()',\r\n                    },\r\n                    encapsulation: ViewEncapsulation.None,\r\n                    changeDetection: ChangeDetectionStrategy.OnPush,\r\n                    inputs: ['disabled'],\r\n                    animations: [\r\n                        matSortAnimations.indicator,\r\n                        matSortAnimations.leftPointer,\r\n                        matSortAnimations.rightPointer,\r\n                        matSortAnimations.arrowOpacity,\r\n                        matSortAnimations.arrowPosition,\r\n                        matSortAnimations.allowChildren,\r\n                    ]\r\n                },] },\r\n    ];\r\n    /** @nocollapse */\r\n    MatSortHeader.ctorParameters = function () { return [\r\n        { type: MatSortHeaderIntl },\r\n        { type: ChangeDetectorRef },\r\n        { type: MatSort, decorators: [{ type: Optional }] },\r\n        { type: undefined, decorators: [{ type: Inject, args: ['MAT_SORT_HEADER_COLUMN_DEF',] }, { type: Optional }] }\r\n    ]; };\r\n    MatSortHeader.propDecorators = {\r\n        id: [{ type: Input, args: ['mat-sort-header',] }],\r\n        arrowPosition: [{ type: Input }],\r\n        start: [{ type: Input }],\r\n        disableClear: [{ type: Input }]\r\n    };\r\n    return MatSortHeader;\r\n}(_MatSortHeaderMixinBase));\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\nvar MatSortModule = /** @class */ (function () {\r\n    function MatSortModule() {\r\n    }\r\n    MatSortModule.decorators = [\r\n        { type: NgModule, args: [{\r\n                    imports: [CommonModule],\r\n                    exports: [MatSort, MatSortHeader],\r\n                    declarations: [MatSort, MatSortHeader],\r\n                    providers: [MAT_SORT_HEADER_INTL_PROVIDER]\r\n                },] },\r\n    ];\r\n    return MatSortModule;\r\n}());\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n\r\nexport { MatSortModule, MatSortHeader, MAT_SORT_HEADER_INTL_PROVIDER_FACTORY, MatSortHeaderIntl, MAT_SORT_HEADER_INTL_PROVIDER, MatSort, matSortAnimations };\r\n\r\n"]}