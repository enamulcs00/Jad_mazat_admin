{"version":3,"sources":["v:/jad-admin-go/mazat_admin_panel/node_modules/@angular/material/esm5/chips.es5.js"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6BA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;KAmCK;;;;;;;;;;0CAMC;;;;;;;;;KASD;;;;;;;;;;0CAMC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;MAqaA,AAwBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;cAwwxCH,AA4BA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;cA6BA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;MAqOA,AAiBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;6JAcA;;;;;;;;;;;;;;;;;;;;;;KAsBD;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;SAaC","file":"chips.es5.js","sourcesContent":["/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nimport { __extends } from 'tslib';\r\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\r\nimport { BACKSPACE, DELETE, SPACE, END, HOME, hasModifierKey, TAB, ENTER } from '@angular/cdk/keycodes';\r\nimport { Platform } from '@angular/cdk/platform';\r\nimport { ContentChild, Directive, ElementRef, EventEmitter, forwardRef, Inject, Input, NgZone, Optional, Output, ChangeDetectorRef, InjectionToken, ChangeDetectionStrategy, Component, ContentChildren, Self, ViewEncapsulation, NgModule } from '@angular/core';\r\nimport { MAT_RIPPLE_GLOBAL_OPTIONS, mixinColor, mixinDisabled, mixinDisableRipple, RippleRenderer, ErrorStateMatcher, mixinErrorState } from '@angular/material/core';\r\nimport { Subject, merge } from 'rxjs';\r\nimport { take, startWith, takeUntil } from 'rxjs/operators';\r\nimport { ANIMATION_MODULE_TYPE } from '@angular/platform-browser/animations';\r\nimport { FocusKeyManager } from '@angular/cdk/a11y';\r\nimport { Directionality } from '@angular/cdk/bidi';\r\nimport { SelectionModel } from '@angular/cdk/collections';\r\nimport { FormGroupDirective, NgControl, NgForm } from '@angular/forms';\r\nimport { MatFormFieldControl } from '@angular/material/form-field';\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n/**\r\n * Event object emitted by MatChip when selected or deselected.\r\n */\r\nvar  /**\r\n * Event object emitted by MatChip when selected or deselected.\r\n */\r\nMatChipSelectionChange = /** @class */ (function () {\r\n    function MatChipSelectionChange(source, selected, isUserInput) {\r\n        if (isUserInput === void 0) { isUserInput = false; }\r\n        this.source = source;\r\n        this.selected = selected;\r\n        this.isUserInput = isUserInput;\r\n    }\r\n    return MatChipSelectionChange;\r\n}());\r\n// Boilerplate for applying mixins to MatChip.\r\n/**\r\n * \\@docs-private\r\n */\r\nvar \r\n// Boilerplate for applying mixins to MatChip.\r\n/**\r\n * \\@docs-private\r\n */\r\nMatChipBase = /** @class */ (function () {\r\n    function MatChipBase(_elementRef) {\r\n        this._elementRef = _elementRef;\r\n    }\r\n    return MatChipBase;\r\n}());\r\n/** @type {?} */\r\nvar _MatChipMixinBase = mixinColor(mixinDisableRipple(mixinDisabled(MatChipBase)), 'primary');\r\n/**\r\n * Dummy directive to add CSS class to chip avatar.\r\n * \\@docs-private\r\n */\r\nvar MatChipAvatar = /** @class */ (function () {\r\n    function MatChipAvatar() {\r\n    }\r\n    MatChipAvatar.decorators = [\r\n        { type: Directive, args: [{\r\n                    selector: 'mat-chip-avatar, [matChipAvatar]',\r\n                    host: { 'class': 'mat-chip-avatar' }\r\n                },] },\r\n    ];\r\n    return MatChipAvatar;\r\n}());\r\n/**\r\n * Dummy directive to add CSS class to chip trailing icon.\r\n * \\@docs-private\r\n */\r\nvar MatChipTrailingIcon = /** @class */ (function () {\r\n    function MatChipTrailingIcon() {\r\n    }\r\n    MatChipTrailingIcon.decorators = [\r\n        { type: Directive, args: [{\r\n                    selector: 'mat-chip-trailing-icon, [matChipTrailingIcon]',\r\n                    host: { 'class': 'mat-chip-trailing-icon' }\r\n                },] },\r\n    ];\r\n    return MatChipTrailingIcon;\r\n}());\r\n/**\r\n * Material design styled Chip component. Used inside the MatChipList component.\r\n */\r\nvar MatChip = /** @class */ (function (_super) {\r\n    __extends(MatChip, _super);\r\n    function MatChip(_elementRef, _ngZone, platform, globalRippleOptions, \r\n    // @breaking-change 8.0.0 `animationMode` parameter to become required.\r\n    animationMode, _changeDetectorRef) {\r\n        var _this = _super.call(this, _elementRef) || this;\r\n        _this._elementRef = _elementRef;\r\n        _this._ngZone = _ngZone;\r\n        _this._changeDetectorRef = _changeDetectorRef;\r\n        /**\r\n         * Whether the chip has focus.\r\n         */\r\n        _this._hasFocus = false;\r\n        /**\r\n         * Whether the chip list is selectable\r\n         */\r\n        _this.chipListSelectable = true;\r\n        /**\r\n         * Whether the chip list is in multi-selection mode.\r\n         */\r\n        _this._chipListMultiple = false;\r\n        _this._selected = false;\r\n        _this._selectable = true;\r\n        _this._removable = true;\r\n        /**\r\n         * Emits when the chip is focused.\r\n         */\r\n        _this._onFocus = new Subject();\r\n        /**\r\n         * Emits when the chip is blured.\r\n         */\r\n        _this._onBlur = new Subject();\r\n        /**\r\n         * Emitted when the chip is selected or deselected.\r\n         */\r\n        _this.selectionChange = new EventEmitter();\r\n        /**\r\n         * Emitted when the chip is destroyed.\r\n         */\r\n        _this.destroyed = new EventEmitter();\r\n        /**\r\n         * Emitted when a chip is to be removed.\r\n         */\r\n        _this.removed = new EventEmitter();\r\n        _this._addHostClassName();\r\n        _this._chipRipple = new RippleRenderer(_this, _ngZone, _elementRef, platform);\r\n        _this._chipRipple.setupTriggerEvents(_elementRef);\r\n        _this.rippleConfig = globalRippleOptions || {};\r\n        _this._animationsDisabled = animationMode === 'NoopAnimations';\r\n        return _this;\r\n    }\r\n    Object.defineProperty(MatChip.prototype, \"rippleDisabled\", {\r\n        /**\r\n         * Whether ripples are disabled on interaction\r\n         * @docs-private\r\n         */\r\n        get: /**\r\n         * Whether ripples are disabled on interaction\r\n         * \\@docs-private\r\n         * @return {?}\r\n         */\r\n        function () {\r\n            return this.disabled || this.disableRipple || !!this.rippleConfig.disabled;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(MatChip.prototype, \"selected\", {\r\n        /** Whether the chip is selected. */\r\n        get: /**\r\n         * Whether the chip is selected.\r\n         * @return {?}\r\n         */\r\n        function () { return this._selected; },\r\n        set: /**\r\n         * @param {?} value\r\n         * @return {?}\r\n         */\r\n        function (value) {\r\n            /** @type {?} */\r\n            var coercedValue = coerceBooleanProperty(value);\r\n            if (coercedValue !== this._selected) {\r\n                this._selected = coercedValue;\r\n                this._dispatchSelectionChange();\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(MatChip.prototype, \"value\", {\r\n        /** The value of the chip. Defaults to the content inside `<mat-chip>` tags. */\r\n        get: /**\r\n         * The value of the chip. Defaults to the content inside `<mat-chip>` tags.\r\n         * @return {?}\r\n         */\r\n        function () {\r\n            return this._value !== undefined\r\n                ? this._value\r\n                : this._elementRef.nativeElement.textContent;\r\n        },\r\n        set: /**\r\n         * @param {?} value\r\n         * @return {?}\r\n         */\r\n        function (value) { this._value = value; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(MatChip.prototype, \"selectable\", {\r\n        /**\r\n         * Whether or not the chip is selectable. When a chip is not selectable,\r\n         * changes to its selected state are always ignored. By default a chip is\r\n         * selectable, and it becomes non-selectable if its parent chip list is\r\n         * not selectable.\r\n         */\r\n        get: /**\r\n         * Whether or not the chip is selectable. When a chip is not selectable,\r\n         * changes to its selected state are always ignored. By default a chip is\r\n         * selectable, and it becomes non-selectable if its parent chip list is\r\n         * not selectable.\r\n         * @return {?}\r\n         */\r\n        function () { return this._selectable && this.chipListSelectable; },\r\n        set: /**\r\n         * @param {?} value\r\n         * @return {?}\r\n         */\r\n        function (value) {\r\n            this._selectable = coerceBooleanProperty(value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(MatChip.prototype, \"removable\", {\r\n        /**\r\n         * Determines whether or not the chip displays the remove styling and emits (removed) events.\r\n         */\r\n        get: /**\r\n         * Determines whether or not the chip displays the remove styling and emits (removed) events.\r\n         * @return {?}\r\n         */\r\n        function () { return this._removable; },\r\n        set: /**\r\n         * @param {?} value\r\n         * @return {?}\r\n         */\r\n        function (value) {\r\n            this._removable = coerceBooleanProperty(value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(MatChip.prototype, \"ariaSelected\", {\r\n        /** The ARIA selected applied to the chip. */\r\n        get: /**\r\n         * The ARIA selected applied to the chip.\r\n         * @return {?}\r\n         */\r\n        function () {\r\n            // Remove the `aria-selected` when the chip is deselected in single-selection mode, because\r\n            // it adds noise to NVDA users where \"not selected\" will be read out for each chip.\r\n            return this.selectable && (this._chipListMultiple || this.selected) ?\r\n                this.selected.toString() : null;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * @return {?}\r\n     */\r\n    MatChip.prototype._addHostClassName = /**\r\n     * @return {?}\r\n     */\r\n    function () {\r\n        /** @type {?} */\r\n        var basicChipAttrName = 'mat-basic-chip';\r\n        /** @type {?} */\r\n        var element = (/** @type {?} */ (this._elementRef.nativeElement));\r\n        if (element.hasAttribute(basicChipAttrName) ||\r\n            element.tagName.toLowerCase() === basicChipAttrName) {\r\n            element.classList.add(basicChipAttrName);\r\n            return;\r\n        }\r\n        else {\r\n            element.classList.add('mat-standard-chip');\r\n        }\r\n    };\r\n    /**\r\n     * @return {?}\r\n     */\r\n    MatChip.prototype.ngOnDestroy = /**\r\n     * @return {?}\r\n     */\r\n    function () {\r\n        this.destroyed.emit({ chip: this });\r\n        this._chipRipple._removeTriggerEvents();\r\n    };\r\n    /** Selects the chip. */\r\n    /**\r\n     * Selects the chip.\r\n     * @return {?}\r\n     */\r\n    MatChip.prototype.select = /**\r\n     * Selects the chip.\r\n     * @return {?}\r\n     */\r\n    function () {\r\n        if (!this._selected) {\r\n            this._selected = true;\r\n            this._dispatchSelectionChange();\r\n            this._markForCheck();\r\n        }\r\n    };\r\n    /** Deselects the chip. */\r\n    /**\r\n     * Deselects the chip.\r\n     * @return {?}\r\n     */\r\n    MatChip.prototype.deselect = /**\r\n     * Deselects the chip.\r\n     * @return {?}\r\n     */\r\n    function () {\r\n        if (this._selected) {\r\n            this._selected = false;\r\n            this._dispatchSelectionChange();\r\n            this._markForCheck();\r\n        }\r\n    };\r\n    /** Select this chip and emit selected event */\r\n    /**\r\n     * Select this chip and emit selected event\r\n     * @return {?}\r\n     */\r\n    MatChip.prototype.selectViaInteraction = /**\r\n     * Select this chip and emit selected event\r\n     * @return {?}\r\n     */\r\n    function () {\r\n        if (!this._selected) {\r\n            this._selected = true;\r\n            this._dispatchSelectionChange(true);\r\n            this._markForCheck();\r\n        }\r\n    };\r\n    /** Toggles the current selected state of this chip. */\r\n    /**\r\n     * Toggles the current selected state of this chip.\r\n     * @param {?=} isUserInput\r\n     * @return {?}\r\n     */\r\n    MatChip.prototype.toggleSelected = /**\r\n     * Toggles the current selected state of this chip.\r\n     * @param {?=} isUserInput\r\n     * @return {?}\r\n     */\r\n    function (isUserInput) {\r\n        if (isUserInput === void 0) { isUserInput = false; }\r\n        this._selected = !this.selected;\r\n        this._dispatchSelectionChange(isUserInput);\r\n        this._markForCheck();\r\n        return this.selected;\r\n    };\r\n    /** Allows for programmatic focusing of the chip. */\r\n    /**\r\n     * Allows for programmatic focusing of the chip.\r\n     * @return {?}\r\n     */\r\n    MatChip.prototype.focus = /**\r\n     * Allows for programmatic focusing of the chip.\r\n     * @return {?}\r\n     */\r\n    function () {\r\n        if (!this._hasFocus) {\r\n            this._elementRef.nativeElement.focus();\r\n            this._onFocus.next({ chip: this });\r\n        }\r\n        this._hasFocus = true;\r\n    };\r\n    /**\r\n     * Allows for programmatic removal of the chip. Called by the MatChipList when the DELETE or\r\n     * BACKSPACE keys are pressed.\r\n     *\r\n     * Informs any listeners of the removal request. Does not remove the chip from the DOM.\r\n     */\r\n    /**\r\n     * Allows for programmatic removal of the chip. Called by the MatChipList when the DELETE or\r\n     * BACKSPACE keys are pressed.\r\n     *\r\n     * Informs any listeners of the removal request. Does not remove the chip from the DOM.\r\n     * @return {?}\r\n     */\r\n    MatChip.prototype.remove = /**\r\n     * Allows for programmatic removal of the chip. Called by the MatChipList when the DELETE or\r\n     * BACKSPACE keys are pressed.\r\n     *\r\n     * Informs any listeners of the removal request. Does not remove the chip from the DOM.\r\n     * @return {?}\r\n     */\r\n    function () {\r\n        if (this.removable) {\r\n            this.removed.emit({ chip: this });\r\n        }\r\n    };\r\n    /** Handles click events on the chip. */\r\n    /**\r\n     * Handles click events on the chip.\r\n     * @param {?} event\r\n     * @return {?}\r\n     */\r\n    MatChip.prototype._handleClick = /**\r\n     * Handles click events on the chip.\r\n     * @param {?} event\r\n     * @return {?}\r\n     */\r\n    function (event) {\r\n        if (this.disabled) {\r\n            event.preventDefault();\r\n        }\r\n        else {\r\n            event.stopPropagation();\r\n        }\r\n    };\r\n    /** Handle custom key presses. */\r\n    /**\r\n     * Handle custom key presses.\r\n     * @param {?} event\r\n     * @return {?}\r\n     */\r\n    MatChip.prototype._handleKeydown = /**\r\n     * Handle custom key presses.\r\n     * @param {?} event\r\n     * @return {?}\r\n     */\r\n    function (event) {\r\n        if (this.disabled) {\r\n            return;\r\n        }\r\n        switch (event.keyCode) {\r\n            case DELETE:\r\n            case BACKSPACE:\r\n                // If we are removable, remove the focused chip\r\n                this.remove();\r\n                // Always prevent so page navigation does not occur\r\n                event.preventDefault();\r\n                break;\r\n            case SPACE:\r\n                // If we are selectable, toggle the focused chip\r\n                if (this.selectable) {\r\n                    this.toggleSelected(true);\r\n                }\r\n                // Always prevent space from scrolling the page since the list has focus\r\n                event.preventDefault();\r\n                break;\r\n        }\r\n    };\r\n    /**\r\n     * @return {?}\r\n     */\r\n    MatChip.prototype._blur = /**\r\n     * @return {?}\r\n     */\r\n    function () {\r\n        var _this = this;\r\n        // When animations are enabled, Angular may end up removing the chip from the DOM a little\r\n        // earlier than usual, causing it to be blurred and throwing off the logic in the chip list\r\n        // that moves focus not the next item. To work around the issue, we defer marking the chip\r\n        // as not focused until the next time the zone stabilizes.\r\n        this._ngZone.onStable\r\n            .asObservable()\r\n            .pipe(take(1))\r\n            .subscribe((/**\r\n         * @return {?}\r\n         */\r\n        function () {\r\n            _this._ngZone.run((/**\r\n             * @return {?}\r\n             */\r\n            function () {\r\n                _this._hasFocus = false;\r\n                _this._onBlur.next({ chip: _this });\r\n            }));\r\n        }));\r\n    };\r\n    /**\r\n     * @private\r\n     * @param {?=} isUserInput\r\n     * @return {?}\r\n     */\r\n    MatChip.prototype._dispatchSelectionChange = /**\r\n     * @private\r\n     * @param {?=} isUserInput\r\n     * @return {?}\r\n     */\r\n    function (isUserInput) {\r\n        if (isUserInput === void 0) { isUserInput = false; }\r\n        this.selectionChange.emit({\r\n            source: this,\r\n            isUserInput: isUserInput,\r\n            selected: this._selected\r\n        });\r\n    };\r\n    /**\r\n     * @private\r\n     * @return {?}\r\n     */\r\n    MatChip.prototype._markForCheck = /**\r\n     * @private\r\n     * @return {?}\r\n     */\r\n    function () {\r\n        // @breaking-change 9.0.0 Remove this method once the _changeDetectorRef is a required param.\r\n        if (this._changeDetectorRef) {\r\n            this._changeDetectorRef.markForCheck();\r\n        }\r\n    };\r\n    MatChip.decorators = [\r\n        { type: Directive, args: [{\r\n                    selector: \"mat-basic-chip, [mat-basic-chip], mat-chip, [mat-chip]\",\r\n                    inputs: ['color', 'disabled', 'disableRipple'],\r\n                    exportAs: 'matChip',\r\n                    host: {\r\n                        'class': 'mat-chip',\r\n                        '[attr.tabindex]': 'disabled ? null : -1',\r\n                        'role': 'option',\r\n                        '[class.mat-chip-selected]': 'selected',\r\n                        '[class.mat-chip-with-avatar]': 'avatar',\r\n                        '[class.mat-chip-with-trailing-icon]': 'trailingIcon || removeIcon',\r\n                        '[class.mat-chip-disabled]': 'disabled',\r\n                        '[class._mat-animation-noopable]': '_animationsDisabled',\r\n                        '[attr.disabled]': 'disabled || null',\r\n                        '[attr.aria-disabled]': 'disabled.toString()',\r\n                        '[attr.aria-selected]': 'ariaSelected',\r\n                        '(click)': '_handleClick($event)',\r\n                        '(keydown)': '_handleKeydown($event)',\r\n                        '(focus)': 'focus()',\r\n                        '(blur)': '_blur()',\r\n                    },\r\n                },] },\r\n    ];\r\n    /** @nocollapse */\r\n    MatChip.ctorParameters = function () { return [\r\n        { type: ElementRef },\r\n        { type: NgZone },\r\n        { type: Platform },\r\n        { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MAT_RIPPLE_GLOBAL_OPTIONS,] }] },\r\n        { type: String, decorators: [{ type: Optional }, { type: Inject, args: [ANIMATION_MODULE_TYPE,] }] },\r\n        { type: ChangeDetectorRef }\r\n    ]; };\r\n    MatChip.propDecorators = {\r\n        avatar: [{ type: ContentChild, args: [MatChipAvatar, { static: false },] }],\r\n        trailingIcon: [{ type: ContentChild, args: [MatChipTrailingIcon, { static: false },] }],\r\n        removeIcon: [{ type: ContentChild, args: [forwardRef((/**\r\n                     * @return {?}\r\n                     */\r\n                    function () { return MatChipRemove; })), { static: false },] }],\r\n        selected: [{ type: Input }],\r\n        value: [{ type: Input }],\r\n        selectable: [{ type: Input }],\r\n        removable: [{ type: Input }],\r\n        selectionChange: [{ type: Output }],\r\n        destroyed: [{ type: Output }],\r\n        removed: [{ type: Output }]\r\n    };\r\n    return MatChip;\r\n}(_MatChipMixinBase));\r\n/**\r\n * Applies proper (click) support and adds styling for use with the Material Design \"cancel\" icon\r\n * available at https://material.io/icons/#ic_cancel.\r\n *\r\n * Example:\r\n *\r\n *     `<mat-chip>\r\n *       <mat-icon matChipRemove>cancel</mat-icon>\r\n *     </mat-chip>`\r\n *\r\n * You *may* use a custom icon, but you may need to override the `mat-chip-remove` positioning\r\n * styles to properly center the icon within the chip.\r\n */\r\nvar MatChipRemove = /** @class */ (function () {\r\n    function MatChipRemove(_parentChip) {\r\n        this._parentChip = _parentChip;\r\n    }\r\n    /** Calls the parent chip's public `remove()` method if applicable. */\r\n    /**\r\n     * Calls the parent chip's public `remove()` method if applicable.\r\n     * @param {?} event\r\n     * @return {?}\r\n     */\r\n    MatChipRemove.prototype._handleClick = /**\r\n     * Calls the parent chip's public `remove()` method if applicable.\r\n     * @param {?} event\r\n     * @return {?}\r\n     */\r\n    function (event) {\r\n        /** @type {?} */\r\n        var parentChip = this._parentChip;\r\n        if (parentChip.removable && !parentChip.disabled) {\r\n            parentChip.remove();\r\n        }\r\n        // We need to stop event propagation because otherwise the event will bubble up to the\r\n        // form field and cause the `onContainerClick` method to be invoked. This method would then\r\n        // reset the focused chip that has been focused after chip removal. Usually the parent\r\n        // the parent click listener of the `MatChip` would prevent propagation, but it can happen\r\n        // that the chip is being removed before the event bubbles up.\r\n        event.stopPropagation();\r\n    };\r\n    MatChipRemove.decorators = [\r\n        { type: Directive, args: [{\r\n                    selector: '[matChipRemove]',\r\n                    host: {\r\n                        'class': 'mat-chip-remove mat-chip-trailing-icon',\r\n                        '(click)': '_handleClick($event)',\r\n                    }\r\n                },] },\r\n    ];\r\n    /** @nocollapse */\r\n    MatChipRemove.ctorParameters = function () { return [\r\n        { type: MatChip }\r\n    ]; };\r\n    return MatChipRemove;\r\n}());\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n/**\r\n * Injection token to be used to override the default options for the chips module.\r\n * @type {?}\r\n */\r\nvar MAT_CHIPS_DEFAULT_OPTIONS = new InjectionToken('mat-chips-default-options');\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n// Boilerplate for applying mixins to MatChipList.\r\n/**\r\n * \\@docs-private\r\n */\r\nvar \r\n// Boilerplate for applying mixins to MatChipList.\r\n/**\r\n * \\@docs-private\r\n */\r\nMatChipListBase = /** @class */ (function () {\r\n    function MatChipListBase(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl) {\r\n        this._defaultErrorStateMatcher = _defaultErrorStateMatcher;\r\n        this._parentForm = _parentForm;\r\n        this._parentFormGroup = _parentFormGroup;\r\n        this.ngControl = ngControl;\r\n    }\r\n    return MatChipListBase;\r\n}());\r\n/** @type {?} */\r\nvar _MatChipListMixinBase = mixinErrorState(MatChipListBase);\r\n// Increasing integer for generating unique ids for chip-list components.\r\n/** @type {?} */\r\nvar nextUniqueId = 0;\r\n/**\r\n * Change event object that is emitted when the chip list value has changed.\r\n */\r\nvar  /**\r\n * Change event object that is emitted when the chip list value has changed.\r\n */\r\nMatChipListChange = /** @class */ (function () {\r\n    function MatChipListChange(source, value) {\r\n        this.source = source;\r\n        this.value = value;\r\n    }\r\n    return MatChipListChange;\r\n}());\r\n/**\r\n * A material design chips component (named ChipList for its similarity to the List component).\r\n */\r\nvar MatChipList = /** @class */ (function (_super) {\r\n    __extends(MatChipList, _super);\r\n    function MatChipList(_elementRef, _changeDetectorRef, _dir, _parentForm, _parentFormGroup, _defaultErrorStateMatcher, ngControl) {\r\n        var _this = _super.call(this, _defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl) || this;\r\n        _this._elementRef = _elementRef;\r\n        _this._changeDetectorRef = _changeDetectorRef;\r\n        _this._dir = _dir;\r\n        _this.ngControl = ngControl;\r\n        /**\r\n         * Implemented as part of MatFormFieldControl.\r\n         * \\@docs-private\r\n         */\r\n        _this.controlType = 'mat-chip-list';\r\n        /**\r\n         * When a chip is destroyed, we store the index of the destroyed chip until the chips\r\n         * query list notifies about the update. This is necessary because we cannot determine an\r\n         * appropriate chip that should receive focus until the array of chips updated completely.\r\n         */\r\n        _this._lastDestroyedChipIndex = null;\r\n        /**\r\n         * Subject that emits when the component has been destroyed.\r\n         */\r\n        _this._destroyed = new Subject();\r\n        /**\r\n         * Uid of the chip list\r\n         */\r\n        _this._uid = \"mat-chip-list-\" + nextUniqueId++;\r\n        /**\r\n         * Tab index for the chip list.\r\n         */\r\n        _this._tabIndex = 0;\r\n        /**\r\n         * User defined tab index.\r\n         * When it is not null, use user defined tab index. Otherwise use _tabIndex\r\n         */\r\n        _this._userTabIndex = null;\r\n        /**\r\n         * Function when touched\r\n         */\r\n        _this._onTouched = (/**\r\n         * @return {?}\r\n         */\r\n        function () { });\r\n        /**\r\n         * Function when changed\r\n         */\r\n        _this._onChange = (/**\r\n         * @return {?}\r\n         */\r\n        function () { });\r\n        _this._multiple = false;\r\n        _this._compareWith = (/**\r\n         * @param {?} o1\r\n         * @param {?} o2\r\n         * @return {?}\r\n         */\r\n        function (o1, o2) { return o1 === o2; });\r\n        _this._required = false;\r\n        _this._disabled = false;\r\n        /**\r\n         * Orientation of the chip list.\r\n         */\r\n        _this.ariaOrientation = 'horizontal';\r\n        _this._selectable = true;\r\n        /**\r\n         * Event emitted when the selected chip list value has been changed by the user.\r\n         */\r\n        _this.change = new EventEmitter();\r\n        /**\r\n         * Event that emits whenever the raw value of the chip-list changes. This is here primarily\r\n         * to facilitate the two-way binding for the `value` input.\r\n         * \\@docs-private\r\n         */\r\n        _this.valueChange = new EventEmitter();\r\n        if (_this.ngControl) {\r\n            _this.ngControl.valueAccessor = _this;\r\n        }\r\n        return _this;\r\n    }\r\n    Object.defineProperty(MatChipList.prototype, \"selected\", {\r\n        /** The array of selected chips inside chip list. */\r\n        get: /**\r\n         * The array of selected chips inside chip list.\r\n         * @return {?}\r\n         */\r\n        function () {\r\n            return this.multiple ? this._selectionModel.selected : this._selectionModel.selected[0];\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(MatChipList.prototype, \"role\", {\r\n        /** The ARIA role applied to the chip list. */\r\n        get: /**\r\n         * The ARIA role applied to the chip list.\r\n         * @return {?}\r\n         */\r\n        function () { return this.empty ? null : 'listbox'; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(MatChipList.prototype, \"multiple\", {\r\n        /** Whether the user should be allowed to select multiple chips. */\r\n        get: /**\r\n         * Whether the user should be allowed to select multiple chips.\r\n         * @return {?}\r\n         */\r\n        function () { return this._multiple; },\r\n        set: /**\r\n         * @param {?} value\r\n         * @return {?}\r\n         */\r\n        function (value) {\r\n            this._multiple = coerceBooleanProperty(value);\r\n            this._syncChipsState();\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(MatChipList.prototype, \"compareWith\", {\r\n        /**\r\n         * A function to compare the option values with the selected values. The first argument\r\n         * is a value from an option. The second is a value from the selection. A boolean\r\n         * should be returned.\r\n         */\r\n        get: /**\r\n         * A function to compare the option values with the selected values. The first argument\r\n         * is a value from an option. The second is a value from the selection. A boolean\r\n         * should be returned.\r\n         * @return {?}\r\n         */\r\n        function () { return this._compareWith; },\r\n        set: /**\r\n         * @param {?} fn\r\n         * @return {?}\r\n         */\r\n        function (fn) {\r\n            this._compareWith = fn;\r\n            if (this._selectionModel) {\r\n                // A different comparator means the selection could change.\r\n                this._initializeSelection();\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(MatChipList.prototype, \"value\", {\r\n        /**\r\n         * Implemented as part of MatFormFieldControl.\r\n         * @docs-private\r\n         */\r\n        get: /**\r\n         * Implemented as part of MatFormFieldControl.\r\n         * \\@docs-private\r\n         * @return {?}\r\n         */\r\n        function () { return this._value; },\r\n        set: /**\r\n         * @param {?} value\r\n         * @return {?}\r\n         */\r\n        function (value) {\r\n            this.writeValue(value);\r\n            this._value = value;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(MatChipList.prototype, \"id\", {\r\n        /**\r\n         * Implemented as part of MatFormFieldControl.\r\n         * @docs-private\r\n         */\r\n        get: /**\r\n         * Implemented as part of MatFormFieldControl.\r\n         * \\@docs-private\r\n         * @return {?}\r\n         */\r\n        function () {\r\n            return this._chipInput ? this._chipInput.id : this._uid;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(MatChipList.prototype, \"required\", {\r\n        /**\r\n         * Implemented as part of MatFormFieldControl.\r\n         * @docs-private\r\n         */\r\n        get: /**\r\n         * Implemented as part of MatFormFieldControl.\r\n         * \\@docs-private\r\n         * @return {?}\r\n         */\r\n        function () { return this._required; },\r\n        set: /**\r\n         * @param {?} value\r\n         * @return {?}\r\n         */\r\n        function (value) {\r\n            this._required = coerceBooleanProperty(value);\r\n            this.stateChanges.next();\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(MatChipList.prototype, \"placeholder\", {\r\n        /**\r\n         * Implemented as part of MatFormFieldControl.\r\n         * @docs-private\r\n         */\r\n        get: /**\r\n         * Implemented as part of MatFormFieldControl.\r\n         * \\@docs-private\r\n         * @return {?}\r\n         */\r\n        function () {\r\n            return this._chipInput ? this._chipInput.placeholder : this._placeholder;\r\n        },\r\n        set: /**\r\n         * @param {?} value\r\n         * @return {?}\r\n         */\r\n        function (value) {\r\n            this._placeholder = value;\r\n            this.stateChanges.next();\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(MatChipList.prototype, \"focused\", {\r\n        /** Whether any chips or the matChipInput inside of this chip-list has focus. */\r\n        get: /**\r\n         * Whether any chips or the matChipInput inside of this chip-list has focus.\r\n         * @return {?}\r\n         */\r\n        function () {\r\n            return (this._chipInput && this._chipInput.focused) || this._hasFocusedChip();\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(MatChipList.prototype, \"empty\", {\r\n        /**\r\n         * Implemented as part of MatFormFieldControl.\r\n         * @docs-private\r\n         */\r\n        get: /**\r\n         * Implemented as part of MatFormFieldControl.\r\n         * \\@docs-private\r\n         * @return {?}\r\n         */\r\n        function () {\r\n            return (!this._chipInput || this._chipInput.empty) && this.chips.length === 0;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(MatChipList.prototype, \"shouldLabelFloat\", {\r\n        /**\r\n         * Implemented as part of MatFormFieldControl.\r\n         * @docs-private\r\n         */\r\n        get: /**\r\n         * Implemented as part of MatFormFieldControl.\r\n         * \\@docs-private\r\n         * @return {?}\r\n         */\r\n        function () { return !this.empty || this.focused; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(MatChipList.prototype, \"disabled\", {\r\n        /**\r\n         * Implemented as part of MatFormFieldControl.\r\n         * @docs-private\r\n         */\r\n        get: /**\r\n         * Implemented as part of MatFormFieldControl.\r\n         * \\@docs-private\r\n         * @return {?}\r\n         */\r\n        function () { return this.ngControl ? !!this.ngControl.disabled : this._disabled; },\r\n        set: /**\r\n         * @param {?} value\r\n         * @return {?}\r\n         */\r\n        function (value) {\r\n            this._disabled = coerceBooleanProperty(value);\r\n            this._syncChipsState();\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(MatChipList.prototype, \"selectable\", {\r\n        /**\r\n         * Whether or not this chip list is selectable. When a chip list is not selectable,\r\n         * the selected states for all the chips inside the chip list are always ignored.\r\n         */\r\n        get: /**\r\n         * Whether or not this chip list is selectable. When a chip list is not selectable,\r\n         * the selected states for all the chips inside the chip list are always ignored.\r\n         * @return {?}\r\n         */\r\n        function () { return this._selectable; },\r\n        set: /**\r\n         * @param {?} value\r\n         * @return {?}\r\n         */\r\n        function (value) {\r\n            var _this = this;\r\n            this._selectable = coerceBooleanProperty(value);\r\n            if (this.chips) {\r\n                this.chips.forEach((/**\r\n                 * @param {?} chip\r\n                 * @return {?}\r\n                 */\r\n                function (chip) { return chip.chipListSelectable = _this._selectable; }));\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(MatChipList.prototype, \"tabIndex\", {\r\n        set: /**\r\n         * @param {?} value\r\n         * @return {?}\r\n         */\r\n        function (value) {\r\n            this._userTabIndex = value;\r\n            this._tabIndex = value;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(MatChipList.prototype, \"chipSelectionChanges\", {\r\n        /** Combined stream of all of the child chips' selection change events. */\r\n        get: /**\r\n         * Combined stream of all of the child chips' selection change events.\r\n         * @return {?}\r\n         */\r\n        function () {\r\n            return merge.apply(void 0, this.chips.map((/**\r\n             * @param {?} chip\r\n             * @return {?}\r\n             */\r\n            function (chip) { return chip.selectionChange; })));\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(MatChipList.prototype, \"chipFocusChanges\", {\r\n        /** Combined stream of all of the child chips' focus change events. */\r\n        get: /**\r\n         * Combined stream of all of the child chips' focus change events.\r\n         * @return {?}\r\n         */\r\n        function () {\r\n            return merge.apply(void 0, this.chips.map((/**\r\n             * @param {?} chip\r\n             * @return {?}\r\n             */\r\n            function (chip) { return chip._onFocus; })));\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(MatChipList.prototype, \"chipBlurChanges\", {\r\n        /** Combined stream of all of the child chips' blur change events. */\r\n        get: /**\r\n         * Combined stream of all of the child chips' blur change events.\r\n         * @return {?}\r\n         */\r\n        function () {\r\n            return merge.apply(void 0, this.chips.map((/**\r\n             * @param {?} chip\r\n             * @return {?}\r\n             */\r\n            function (chip) { return chip._onBlur; })));\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(MatChipList.prototype, \"chipRemoveChanges\", {\r\n        /** Combined stream of all of the child chips' remove change events. */\r\n        get: /**\r\n         * Combined stream of all of the child chips' remove change events.\r\n         * @return {?}\r\n         */\r\n        function () {\r\n            return merge.apply(void 0, this.chips.map((/**\r\n             * @param {?} chip\r\n             * @return {?}\r\n             */\r\n            function (chip) { return chip.destroyed; })));\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * @return {?}\r\n     */\r\n    MatChipList.prototype.ngAfterContentInit = /**\r\n     * @return {?}\r\n     */\r\n    function () {\r\n        var _this = this;\r\n        this._keyManager = new FocusKeyManager(this.chips)\r\n            .withWrap()\r\n            .withVerticalOrientation()\r\n            .withHorizontalOrientation(this._dir ? this._dir.value : 'ltr');\r\n        if (this._dir) {\r\n            this._dir.change\r\n                .pipe(takeUntil(this._destroyed))\r\n                .subscribe((/**\r\n             * @param {?} dir\r\n             * @return {?}\r\n             */\r\n            function (dir) { return _this._keyManager.withHorizontalOrientation(dir); }));\r\n        }\r\n        this._keyManager.tabOut.pipe(takeUntil(this._destroyed)).subscribe((/**\r\n         * @return {?}\r\n         */\r\n        function () {\r\n            _this._allowFocusEscape();\r\n        }));\r\n        // When the list changes, re-subscribe\r\n        this.chips.changes.pipe(startWith(null), takeUntil(this._destroyed)).subscribe((/**\r\n         * @return {?}\r\n         */\r\n        function () {\r\n            if (_this.disabled) {\r\n                // Since this happens after the content has been\r\n                // checked, we need to defer it to the next tick.\r\n                Promise.resolve().then((/**\r\n                 * @return {?}\r\n                 */\r\n                function () {\r\n                    _this._syncChipsState();\r\n                }));\r\n            }\r\n            _this._resetChips();\r\n            // Reset chips selected/deselected status\r\n            _this._initializeSelection();\r\n            // Check to see if we need to update our tab index\r\n            _this._updateTabIndex();\r\n            // Check to see if we have a destroyed chip and need to refocus\r\n            _this._updateFocusForDestroyedChips();\r\n            _this.stateChanges.next();\r\n        }));\r\n    };\r\n    /**\r\n     * @return {?}\r\n     */\r\n    MatChipList.prototype.ngOnInit = /**\r\n     * @return {?}\r\n     */\r\n    function () {\r\n        this._selectionModel = new SelectionModel(this.multiple, undefined, false);\r\n        this.stateChanges.next();\r\n    };\r\n    /**\r\n     * @return {?}\r\n     */\r\n    MatChipList.prototype.ngDoCheck = /**\r\n     * @return {?}\r\n     */\r\n    function () {\r\n        if (this.ngControl) {\r\n            // We need to re-evaluate this on every change detection cycle, because there are some\r\n            // error triggers that we can't subscribe to (e.g. parent form submissions). This means\r\n            // that whatever logic is in here has to be super lean or we risk destroying the performance.\r\n            this.updateErrorState();\r\n        }\r\n    };\r\n    /**\r\n     * @return {?}\r\n     */\r\n    MatChipList.prototype.ngOnDestroy = /**\r\n     * @return {?}\r\n     */\r\n    function () {\r\n        this._destroyed.next();\r\n        this._destroyed.complete();\r\n        this.stateChanges.complete();\r\n        this._dropSubscriptions();\r\n    };\r\n    /** Associates an HTML input element with this chip list. */\r\n    /**\r\n     * Associates an HTML input element with this chip list.\r\n     * @param {?} inputElement\r\n     * @return {?}\r\n     */\r\n    MatChipList.prototype.registerInput = /**\r\n     * Associates an HTML input element with this chip list.\r\n     * @param {?} inputElement\r\n     * @return {?}\r\n     */\r\n    function (inputElement) {\r\n        this._chipInput = inputElement;\r\n    };\r\n    /**\r\n     * Implemented as part of MatFormFieldControl.\r\n     * @docs-private\r\n     */\r\n    /**\r\n     * Implemented as part of MatFormFieldControl.\r\n     * \\@docs-private\r\n     * @param {?} ids\r\n     * @return {?}\r\n     */\r\n    MatChipList.prototype.setDescribedByIds = /**\r\n     * Implemented as part of MatFormFieldControl.\r\n     * \\@docs-private\r\n     * @param {?} ids\r\n     * @return {?}\r\n     */\r\n    function (ids) { this._ariaDescribedby = ids.join(' '); };\r\n    // Implemented as part of ControlValueAccessor.\r\n    // Implemented as part of ControlValueAccessor.\r\n    /**\r\n     * @param {?} value\r\n     * @return {?}\r\n     */\r\n    MatChipList.prototype.writeValue = \r\n    // Implemented as part of ControlValueAccessor.\r\n    /**\r\n     * @param {?} value\r\n     * @return {?}\r\n     */\r\n    function (value) {\r\n        if (this.chips) {\r\n            this._setSelectionByValue(value, false);\r\n        }\r\n    };\r\n    // Implemented as part of ControlValueAccessor.\r\n    // Implemented as part of ControlValueAccessor.\r\n    /**\r\n     * @param {?} fn\r\n     * @return {?}\r\n     */\r\n    MatChipList.prototype.registerOnChange = \r\n    // Implemented as part of ControlValueAccessor.\r\n    /**\r\n     * @param {?} fn\r\n     * @return {?}\r\n     */\r\n    function (fn) {\r\n        this._onChange = fn;\r\n    };\r\n    // Implemented as part of ControlValueAccessor.\r\n    // Implemented as part of ControlValueAccessor.\r\n    /**\r\n     * @param {?} fn\r\n     * @return {?}\r\n     */\r\n    MatChipList.prototype.registerOnTouched = \r\n    // Implemented as part of ControlValueAccessor.\r\n    /**\r\n     * @param {?} fn\r\n     * @return {?}\r\n     */\r\n    function (fn) {\r\n        this._onTouched = fn;\r\n    };\r\n    // Implemented as part of ControlValueAccessor.\r\n    // Implemented as part of ControlValueAccessor.\r\n    /**\r\n     * @param {?} isDisabled\r\n     * @return {?}\r\n     */\r\n    MatChipList.prototype.setDisabledState = \r\n    // Implemented as part of ControlValueAccessor.\r\n    /**\r\n     * @param {?} isDisabled\r\n     * @return {?}\r\n     */\r\n    function (isDisabled) {\r\n        this.disabled = isDisabled;\r\n        this.stateChanges.next();\r\n    };\r\n    /**\r\n     * Implemented as part of MatFormFieldControl.\r\n     * @docs-private\r\n     */\r\n    /**\r\n     * Implemented as part of MatFormFieldControl.\r\n     * \\@docs-private\r\n     * @param {?} event\r\n     * @return {?}\r\n     */\r\n    MatChipList.prototype.onContainerClick = /**\r\n     * Implemented as part of MatFormFieldControl.\r\n     * \\@docs-private\r\n     * @param {?} event\r\n     * @return {?}\r\n     */\r\n    function (event) {\r\n        if (!this._originatesFromChip(event)) {\r\n            this.focus();\r\n        }\r\n    };\r\n    /**\r\n     * Focuses the first non-disabled chip in this chip list, or the associated input when there\r\n     * are no eligible chips.\r\n     */\r\n    /**\r\n     * Focuses the first non-disabled chip in this chip list, or the associated input when there\r\n     * are no eligible chips.\r\n     * @param {?=} options\r\n     * @return {?}\r\n     */\r\n    MatChipList.prototype.focus = /**\r\n     * Focuses the first non-disabled chip in this chip list, or the associated input when there\r\n     * are no eligible chips.\r\n     * @param {?=} options\r\n     * @return {?}\r\n     */\r\n    function (options) {\r\n        if (this.disabled) {\r\n            return;\r\n        }\r\n        // TODO: ARIA says this should focus the first `selected` chip if any are selected.\r\n        // Focus on first element if there's no chipInput inside chip-list\r\n        if (this._chipInput && this._chipInput.focused) {\r\n            // do nothing\r\n        }\r\n        else if (this.chips.length > 0) {\r\n            this._keyManager.setFirstItemActive();\r\n            this.stateChanges.next();\r\n        }\r\n        else {\r\n            this._focusInput(options);\r\n            this.stateChanges.next();\r\n        }\r\n    };\r\n    /** Attempt to focus an input if we have one. */\r\n    /**\r\n     * Attempt to focus an input if we have one.\r\n     * @param {?=} options\r\n     * @return {?}\r\n     */\r\n    MatChipList.prototype._focusInput = /**\r\n     * Attempt to focus an input if we have one.\r\n     * @param {?=} options\r\n     * @return {?}\r\n     */\r\n    function (options) {\r\n        if (this._chipInput) {\r\n            this._chipInput.focus(options);\r\n        }\r\n    };\r\n    /**\r\n     * Pass events to the keyboard manager. Available here for tests.\r\n     */\r\n    /**\r\n     * Pass events to the keyboard manager. Available here for tests.\r\n     * @param {?} event\r\n     * @return {?}\r\n     */\r\n    MatChipList.prototype._keydown = /**\r\n     * Pass events to the keyboard manager. Available here for tests.\r\n     * @param {?} event\r\n     * @return {?}\r\n     */\r\n    function (event) {\r\n        /** @type {?} */\r\n        var target = (/** @type {?} */ (event.target));\r\n        // If they are on an empty input and hit backspace, focus the last chip\r\n        if (event.keyCode === BACKSPACE && this._isInputEmpty(target)) {\r\n            this._keyManager.setLastItemActive();\r\n            event.preventDefault();\r\n        }\r\n        else if (target && target.classList.contains('mat-chip')) {\r\n            if (event.keyCode === HOME) {\r\n                this._keyManager.setFirstItemActive();\r\n                event.preventDefault();\r\n            }\r\n            else if (event.keyCode === END) {\r\n                this._keyManager.setLastItemActive();\r\n                event.preventDefault();\r\n            }\r\n            else {\r\n                this._keyManager.onKeydown(event);\r\n            }\r\n            this.stateChanges.next();\r\n        }\r\n    };\r\n    /**\r\n     * Check the tab index as you should not be allowed to focus an empty list.\r\n     */\r\n    /**\r\n     * Check the tab index as you should not be allowed to focus an empty list.\r\n     * @protected\r\n     * @return {?}\r\n     */\r\n    MatChipList.prototype._updateTabIndex = /**\r\n     * Check the tab index as you should not be allowed to focus an empty list.\r\n     * @protected\r\n     * @return {?}\r\n     */\r\n    function () {\r\n        // If we have 0 chips, we should not allow keyboard focus\r\n        this._tabIndex = this._userTabIndex || (this.chips.length === 0 ? -1 : 0);\r\n    };\r\n    /**\r\n     * If the amount of chips changed, we need to update the\r\n     * key manager state and focus the next closest chip.\r\n     */\r\n    /**\r\n     * If the amount of chips changed, we need to update the\r\n     * key manager state and focus the next closest chip.\r\n     * @protected\r\n     * @return {?}\r\n     */\r\n    MatChipList.prototype._updateFocusForDestroyedChips = /**\r\n     * If the amount of chips changed, we need to update the\r\n     * key manager state and focus the next closest chip.\r\n     * @protected\r\n     * @return {?}\r\n     */\r\n    function () {\r\n        // Move focus to the closest chip. If no other chips remain, focus the chip-list itself.\r\n        if (this._lastDestroyedChipIndex != null) {\r\n            if (this.chips.length) {\r\n                /** @type {?} */\r\n                var newChipIndex = Math.min(this._lastDestroyedChipIndex, this.chips.length - 1);\r\n                this._keyManager.setActiveItem(newChipIndex);\r\n            }\r\n            else {\r\n                this.focus();\r\n            }\r\n        }\r\n        this._lastDestroyedChipIndex = null;\r\n    };\r\n    /**\r\n     * Utility to ensure all indexes are valid.\r\n     *\r\n     * @param index The index to be checked.\r\n     * @returns True if the index is valid for our list of chips.\r\n     */\r\n    /**\r\n     * Utility to ensure all indexes are valid.\r\n     *\r\n     * @private\r\n     * @param {?} index The index to be checked.\r\n     * @return {?} True if the index is valid for our list of chips.\r\n     */\r\n    MatChipList.prototype._isValidIndex = /**\r\n     * Utility to ensure all indexes are valid.\r\n     *\r\n     * @private\r\n     * @param {?} index The index to be checked.\r\n     * @return {?} True if the index is valid for our list of chips.\r\n     */\r\n    function (index) {\r\n        return index >= 0 && index < this.chips.length;\r\n    };\r\n    /**\r\n     * @private\r\n     * @param {?} element\r\n     * @return {?}\r\n     */\r\n    MatChipList.prototype._isInputEmpty = /**\r\n     * @private\r\n     * @param {?} element\r\n     * @return {?}\r\n     */\r\n    function (element) {\r\n        if (element && element.nodeName.toLowerCase() === 'input') {\r\n            /** @type {?} */\r\n            var input = (/** @type {?} */ (element));\r\n            return !input.value;\r\n        }\r\n        return false;\r\n    };\r\n    /**\r\n     * @param {?} value\r\n     * @param {?=} isUserInput\r\n     * @return {?}\r\n     */\r\n    MatChipList.prototype._setSelectionByValue = /**\r\n     * @param {?} value\r\n     * @param {?=} isUserInput\r\n     * @return {?}\r\n     */\r\n    function (value, isUserInput) {\r\n        var _this = this;\r\n        if (isUserInput === void 0) { isUserInput = true; }\r\n        this._clearSelection();\r\n        this.chips.forEach((/**\r\n         * @param {?} chip\r\n         * @return {?}\r\n         */\r\n        function (chip) { return chip.deselect(); }));\r\n        if (Array.isArray(value)) {\r\n            value.forEach((/**\r\n             * @param {?} currentValue\r\n             * @return {?}\r\n             */\r\n            function (currentValue) { return _this._selectValue(currentValue, isUserInput); }));\r\n            this._sortValues();\r\n        }\r\n        else {\r\n            /** @type {?} */\r\n            var correspondingChip = this._selectValue(value, isUserInput);\r\n            // Shift focus to the active item. Note that we shouldn't do this in multiple\r\n            // mode, because we don't know what chip the user interacted with last.\r\n            if (correspondingChip) {\r\n                if (isUserInput) {\r\n                    this._keyManager.setActiveItem(correspondingChip);\r\n                }\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Finds and selects the chip based on its value.\r\n     * @returns Chip that has the corresponding value.\r\n     */\r\n    /**\r\n     * Finds and selects the chip based on its value.\r\n     * @private\r\n     * @param {?} value\r\n     * @param {?=} isUserInput\r\n     * @return {?} Chip that has the corresponding value.\r\n     */\r\n    MatChipList.prototype._selectValue = /**\r\n     * Finds and selects the chip based on its value.\r\n     * @private\r\n     * @param {?} value\r\n     * @param {?=} isUserInput\r\n     * @return {?} Chip that has the corresponding value.\r\n     */\r\n    function (value, isUserInput) {\r\n        var _this = this;\r\n        if (isUserInput === void 0) { isUserInput = true; }\r\n        /** @type {?} */\r\n        var correspondingChip = this.chips.find((/**\r\n         * @param {?} chip\r\n         * @return {?}\r\n         */\r\n        function (chip) {\r\n            return chip.value != null && _this._compareWith(chip.value, value);\r\n        }));\r\n        if (correspondingChip) {\r\n            isUserInput ? correspondingChip.selectViaInteraction() : correspondingChip.select();\r\n            this._selectionModel.select(correspondingChip);\r\n        }\r\n        return correspondingChip;\r\n    };\r\n    /**\r\n     * @private\r\n     * @return {?}\r\n     */\r\n    MatChipList.prototype._initializeSelection = /**\r\n     * @private\r\n     * @return {?}\r\n     */\r\n    function () {\r\n        var _this = this;\r\n        // Defer setting the value in order to avoid the \"Expression\r\n        // has changed after it was checked\" errors from Angular.\r\n        Promise.resolve().then((/**\r\n         * @return {?}\r\n         */\r\n        function () {\r\n            if (_this.ngControl || _this._value) {\r\n                _this._setSelectionByValue(_this.ngControl ? _this.ngControl.value : _this._value, false);\r\n                _this.stateChanges.next();\r\n            }\r\n        }));\r\n    };\r\n    /**\r\n     * Deselects every chip in the list.\r\n     * @param skip Chip that should not be deselected.\r\n     */\r\n    /**\r\n     * Deselects every chip in the list.\r\n     * @private\r\n     * @param {?=} skip Chip that should not be deselected.\r\n     * @return {?}\r\n     */\r\n    MatChipList.prototype._clearSelection = /**\r\n     * Deselects every chip in the list.\r\n     * @private\r\n     * @param {?=} skip Chip that should not be deselected.\r\n     * @return {?}\r\n     */\r\n    function (skip) {\r\n        this._selectionModel.clear();\r\n        this.chips.forEach((/**\r\n         * @param {?} chip\r\n         * @return {?}\r\n         */\r\n        function (chip) {\r\n            if (chip !== skip) {\r\n                chip.deselect();\r\n            }\r\n        }));\r\n        this.stateChanges.next();\r\n    };\r\n    /**\r\n     * Sorts the model values, ensuring that they keep the same\r\n     * order that they have in the panel.\r\n     */\r\n    /**\r\n     * Sorts the model values, ensuring that they keep the same\r\n     * order that they have in the panel.\r\n     * @private\r\n     * @return {?}\r\n     */\r\n    MatChipList.prototype._sortValues = /**\r\n     * Sorts the model values, ensuring that they keep the same\r\n     * order that they have in the panel.\r\n     * @private\r\n     * @return {?}\r\n     */\r\n    function () {\r\n        var _this = this;\r\n        if (this._multiple) {\r\n            this._selectionModel.clear();\r\n            this.chips.forEach((/**\r\n             * @param {?} chip\r\n             * @return {?}\r\n             */\r\n            function (chip) {\r\n                if (chip.selected) {\r\n                    _this._selectionModel.select(chip);\r\n                }\r\n            }));\r\n            this.stateChanges.next();\r\n        }\r\n    };\r\n    /** Emits change event to set the model value. */\r\n    /**\r\n     * Emits change event to set the model value.\r\n     * @private\r\n     * @param {?=} fallbackValue\r\n     * @return {?}\r\n     */\r\n    MatChipList.prototype._propagateChanges = /**\r\n     * Emits change event to set the model value.\r\n     * @private\r\n     * @param {?=} fallbackValue\r\n     * @return {?}\r\n     */\r\n    function (fallbackValue) {\r\n        /** @type {?} */\r\n        var valueToEmit = null;\r\n        if (Array.isArray(this.selected)) {\r\n            valueToEmit = this.selected.map((/**\r\n             * @param {?} chip\r\n             * @return {?}\r\n             */\r\n            function (chip) { return chip.value; }));\r\n        }\r\n        else {\r\n            valueToEmit = this.selected ? this.selected.value : fallbackValue;\r\n        }\r\n        this._value = valueToEmit;\r\n        this.change.emit(new MatChipListChange(this, valueToEmit));\r\n        this.valueChange.emit(valueToEmit);\r\n        this._onChange(valueToEmit);\r\n        this._changeDetectorRef.markForCheck();\r\n    };\r\n    /** When blurred, mark the field as touched when focus moved outside the chip list. */\r\n    /**\r\n     * When blurred, mark the field as touched when focus moved outside the chip list.\r\n     * @return {?}\r\n     */\r\n    MatChipList.prototype._blur = /**\r\n     * When blurred, mark the field as touched when focus moved outside the chip list.\r\n     * @return {?}\r\n     */\r\n    function () {\r\n        var _this = this;\r\n        if (!this._hasFocusedChip()) {\r\n            this._keyManager.setActiveItem(-1);\r\n        }\r\n        if (!this.disabled) {\r\n            if (this._chipInput) {\r\n                // If there's a chip input, we should check whether the focus moved to chip input.\r\n                // If the focus is not moved to chip input, mark the field as touched. If the focus moved\r\n                // to chip input, do nothing.\r\n                // Timeout is needed to wait for the focus() event trigger on chip input.\r\n                setTimeout((/**\r\n                 * @return {?}\r\n                 */\r\n                function () {\r\n                    if (!_this.focused) {\r\n                        _this._markAsTouched();\r\n                    }\r\n                }));\r\n            }\r\n            else {\r\n                // If there's no chip input, then mark the field as touched.\r\n                this._markAsTouched();\r\n            }\r\n        }\r\n    };\r\n    /** Mark the field as touched */\r\n    /**\r\n     * Mark the field as touched\r\n     * @return {?}\r\n     */\r\n    MatChipList.prototype._markAsTouched = /**\r\n     * Mark the field as touched\r\n     * @return {?}\r\n     */\r\n    function () {\r\n        this._onTouched();\r\n        this._changeDetectorRef.markForCheck();\r\n        this.stateChanges.next();\r\n    };\r\n    /**\r\n     * Removes the `tabindex` from the chip list and resets it back afterwards, allowing the\r\n     * user to tab out of it. This prevents the list from capturing focus and redirecting\r\n     * it back to the first chip, creating a focus trap, if it user tries to tab away.\r\n     */\r\n    /**\r\n     * Removes the `tabindex` from the chip list and resets it back afterwards, allowing the\r\n     * user to tab out of it. This prevents the list from capturing focus and redirecting\r\n     * it back to the first chip, creating a focus trap, if it user tries to tab away.\r\n     * @return {?}\r\n     */\r\n    MatChipList.prototype._allowFocusEscape = /**\r\n     * Removes the `tabindex` from the chip list and resets it back afterwards, allowing the\r\n     * user to tab out of it. This prevents the list from capturing focus and redirecting\r\n     * it back to the first chip, creating a focus trap, if it user tries to tab away.\r\n     * @return {?}\r\n     */\r\n    function () {\r\n        var _this = this;\r\n        if (this._tabIndex !== -1) {\r\n            this._tabIndex = -1;\r\n            setTimeout((/**\r\n             * @return {?}\r\n             */\r\n            function () {\r\n                _this._tabIndex = _this._userTabIndex || 0;\r\n                _this._changeDetectorRef.markForCheck();\r\n            }));\r\n        }\r\n    };\r\n    /**\r\n     * @private\r\n     * @return {?}\r\n     */\r\n    MatChipList.prototype._resetChips = /**\r\n     * @private\r\n     * @return {?}\r\n     */\r\n    function () {\r\n        this._dropSubscriptions();\r\n        this._listenToChipsFocus();\r\n        this._listenToChipsSelection();\r\n        this._listenToChipsRemoved();\r\n    };\r\n    /**\r\n     * @private\r\n     * @return {?}\r\n     */\r\n    MatChipList.prototype._dropSubscriptions = /**\r\n     * @private\r\n     * @return {?}\r\n     */\r\n    function () {\r\n        if (this._chipFocusSubscription) {\r\n            this._chipFocusSubscription.unsubscribe();\r\n            this._chipFocusSubscription = null;\r\n        }\r\n        if (this._chipBlurSubscription) {\r\n            this._chipBlurSubscription.unsubscribe();\r\n            this._chipBlurSubscription = null;\r\n        }\r\n        if (this._chipSelectionSubscription) {\r\n            this._chipSelectionSubscription.unsubscribe();\r\n            this._chipSelectionSubscription = null;\r\n        }\r\n        if (this._chipRemoveSubscription) {\r\n            this._chipRemoveSubscription.unsubscribe();\r\n            this._chipRemoveSubscription = null;\r\n        }\r\n    };\r\n    /** Listens to user-generated selection events on each chip. */\r\n    /**\r\n     * Listens to user-generated selection events on each chip.\r\n     * @private\r\n     * @return {?}\r\n     */\r\n    MatChipList.prototype._listenToChipsSelection = /**\r\n     * Listens to user-generated selection events on each chip.\r\n     * @private\r\n     * @return {?}\r\n     */\r\n    function () {\r\n        var _this = this;\r\n        this._chipSelectionSubscription = this.chipSelectionChanges.subscribe((/**\r\n         * @param {?} event\r\n         * @return {?}\r\n         */\r\n        function (event) {\r\n            event.source.selected\r\n                ? _this._selectionModel.select(event.source)\r\n                : _this._selectionModel.deselect(event.source);\r\n            // For single selection chip list, make sure the deselected value is unselected.\r\n            if (!_this.multiple) {\r\n                _this.chips.forEach((/**\r\n                 * @param {?} chip\r\n                 * @return {?}\r\n                 */\r\n                function (chip) {\r\n                    if (!_this._selectionModel.isSelected(chip) && chip.selected) {\r\n                        chip.deselect();\r\n                    }\r\n                }));\r\n            }\r\n            if (event.isUserInput) {\r\n                _this._propagateChanges();\r\n            }\r\n        }));\r\n    };\r\n    /** Listens to user-generated selection events on each chip. */\r\n    /**\r\n     * Listens to user-generated selection events on each chip.\r\n     * @private\r\n     * @return {?}\r\n     */\r\n    MatChipList.prototype._listenToChipsFocus = /**\r\n     * Listens to user-generated selection events on each chip.\r\n     * @private\r\n     * @return {?}\r\n     */\r\n    function () {\r\n        var _this = this;\r\n        this._chipFocusSubscription = this.chipFocusChanges.subscribe((/**\r\n         * @param {?} event\r\n         * @return {?}\r\n         */\r\n        function (event) {\r\n            /** @type {?} */\r\n            var chipIndex = _this.chips.toArray().indexOf(event.chip);\r\n            if (_this._isValidIndex(chipIndex)) {\r\n                _this._keyManager.updateActiveItemIndex(chipIndex);\r\n            }\r\n            _this.stateChanges.next();\r\n        }));\r\n        this._chipBlurSubscription = this.chipBlurChanges.subscribe((/**\r\n         * @return {?}\r\n         */\r\n        function () {\r\n            _this._blur();\r\n            _this.stateChanges.next();\r\n        }));\r\n    };\r\n    /**\r\n     * @private\r\n     * @return {?}\r\n     */\r\n    MatChipList.prototype._listenToChipsRemoved = /**\r\n     * @private\r\n     * @return {?}\r\n     */\r\n    function () {\r\n        var _this = this;\r\n        this._chipRemoveSubscription = this.chipRemoveChanges.subscribe((/**\r\n         * @param {?} event\r\n         * @return {?}\r\n         */\r\n        function (event) {\r\n            /** @type {?} */\r\n            var chip = event.chip;\r\n            /** @type {?} */\r\n            var chipIndex = _this.chips.toArray().indexOf(event.chip);\r\n            // In case the chip that will be removed is currently focused, we temporarily store\r\n            // the index in order to be able to determine an appropriate sibling chip that will\r\n            // receive focus.\r\n            if (_this._isValidIndex(chipIndex) && chip._hasFocus) {\r\n                _this._lastDestroyedChipIndex = chipIndex;\r\n            }\r\n        }));\r\n    };\r\n    /** Checks whether an event comes from inside a chip element. */\r\n    /**\r\n     * Checks whether an event comes from inside a chip element.\r\n     * @private\r\n     * @param {?} event\r\n     * @return {?}\r\n     */\r\n    MatChipList.prototype._originatesFromChip = /**\r\n     * Checks whether an event comes from inside a chip element.\r\n     * @private\r\n     * @param {?} event\r\n     * @return {?}\r\n     */\r\n    function (event) {\r\n        /** @type {?} */\r\n        var currentElement = (/** @type {?} */ (event.target));\r\n        while (currentElement && currentElement !== this._elementRef.nativeElement) {\r\n            if (currentElement.classList.contains('mat-chip')) {\r\n                return true;\r\n            }\r\n            currentElement = currentElement.parentElement;\r\n        }\r\n        return false;\r\n    };\r\n    /** Checks whether any of the chips is focused. */\r\n    /**\r\n     * Checks whether any of the chips is focused.\r\n     * @private\r\n     * @return {?}\r\n     */\r\n    MatChipList.prototype._hasFocusedChip = /**\r\n     * Checks whether any of the chips is focused.\r\n     * @private\r\n     * @return {?}\r\n     */\r\n    function () {\r\n        return this.chips.some((/**\r\n         * @param {?} chip\r\n         * @return {?}\r\n         */\r\n        function (chip) { return chip._hasFocus; }));\r\n    };\r\n    /** Syncs the list's state with the individual chips. */\r\n    /**\r\n     * Syncs the list's state with the individual chips.\r\n     * @private\r\n     * @return {?}\r\n     */\r\n    MatChipList.prototype._syncChipsState = /**\r\n     * Syncs the list's state with the individual chips.\r\n     * @private\r\n     * @return {?}\r\n     */\r\n    function () {\r\n        var _this = this;\r\n        if (this.chips) {\r\n            this.chips.forEach((/**\r\n             * @param {?} chip\r\n             * @return {?}\r\n             */\r\n            function (chip) {\r\n                chip.disabled = _this._disabled;\r\n                chip._chipListMultiple = _this.multiple;\r\n            }));\r\n        }\r\n    };\r\n    MatChipList.decorators = [\r\n        { type: Component, args: [{selector: 'mat-chip-list',\r\n                    template: \"<div class=\\\"mat-chip-list-wrapper\\\"><ng-content></ng-content></div>\",\r\n                    exportAs: 'matChipList',\r\n                    host: {\r\n                        '[attr.tabindex]': 'disabled ? null : _tabIndex',\r\n                        '[attr.aria-describedby]': '_ariaDescribedby || null',\r\n                        '[attr.aria-required]': 'required.toString()',\r\n                        '[attr.aria-disabled]': 'disabled.toString()',\r\n                        '[attr.aria-invalid]': 'errorState',\r\n                        '[attr.aria-multiselectable]': 'multiple',\r\n                        '[attr.role]': 'role',\r\n                        '[class.mat-chip-list-disabled]': 'disabled',\r\n                        '[class.mat-chip-list-invalid]': 'errorState',\r\n                        '[class.mat-chip-list-required]': 'required',\r\n                        '[attr.aria-orientation]': 'ariaOrientation',\r\n                        'class': 'mat-chip-list',\r\n                        '(focus)': 'focus()',\r\n                        '(blur)': '_blur()',\r\n                        '(keydown)': '_keydown($event)',\r\n                        '[id]': '_uid',\r\n                    },\r\n                    providers: [{ provide: MatFormFieldControl, useExisting: MatChipList }],\r\n                    styles: [\".mat-chip{position:relative;overflow:hidden;box-sizing:border-box;-webkit-tap-highlight-color:transparent;transform:translateZ(0)}.mat-standard-chip{transition:box-shadow 280ms cubic-bezier(.4,0,.2,1);display:inline-flex;padding:7px 12px;border-radius:16px;align-items:center;cursor:default;min-height:32px;height:1px}._mat-animation-noopable.mat-standard-chip{transition:none;animation:none}.mat-standard-chip .mat-chip-remove.mat-icon{width:18px;height:18px}.mat-standard-chip::after{top:0;left:0;right:0;bottom:0;position:absolute;border-radius:inherit;opacity:0;content:'';pointer-events:none;transition:opacity .2s cubic-bezier(.35,0,.25,1)}.mat-standard-chip:hover::after{opacity:.12}.mat-standard-chip:focus{outline:0}.mat-standard-chip:focus::after{opacity:.16}@media (-ms-high-contrast:active){.mat-standard-chip{outline:solid 1px}.mat-standard-chip:focus{outline:dotted 2px}}.mat-standard-chip.mat-chip-disabled::after{opacity:0}.mat-standard-chip.mat-chip-disabled .mat-chip-remove,.mat-standard-chip.mat-chip-disabled .mat-chip-trailing-icon{cursor:default}.mat-standard-chip.mat-chip-with-avatar,.mat-standard-chip.mat-chip-with-trailing-icon.mat-chip-with-avatar{padding-top:0;padding-bottom:0}.mat-standard-chip.mat-chip-with-trailing-icon.mat-chip-with-avatar{padding-right:8px;padding-left:0}[dir=rtl] .mat-standard-chip.mat-chip-with-trailing-icon.mat-chip-with-avatar{padding-left:8px;padding-right:0}.mat-standard-chip.mat-chip-with-trailing-icon{padding-top:7px;padding-bottom:7px;padding-right:8px;padding-left:12px}[dir=rtl] .mat-standard-chip.mat-chip-with-trailing-icon{padding-left:8px;padding-right:12px}.mat-standard-chip.mat-chip-with-avatar{padding-left:0;padding-right:12px}[dir=rtl] .mat-standard-chip.mat-chip-with-avatar{padding-right:0;padding-left:12px}.mat-standard-chip .mat-chip-avatar{width:24px;height:24px;margin-right:8px;margin-left:4px}[dir=rtl] .mat-standard-chip .mat-chip-avatar{margin-left:8px;margin-right:4px}.mat-standard-chip .mat-chip-remove,.mat-standard-chip .mat-chip-trailing-icon{width:18px;height:18px;cursor:pointer}.mat-standard-chip .mat-chip-remove,.mat-standard-chip .mat-chip-trailing-icon{margin-left:8px;margin-right:0}[dir=rtl] .mat-standard-chip .mat-chip-remove,[dir=rtl] .mat-standard-chip .mat-chip-trailing-icon{margin-right:8px;margin-left:0}.mat-chip-list-wrapper{display:flex;flex-direction:row;flex-wrap:wrap;align-items:center;margin:-4px}.mat-chip-list-wrapper .mat-standard-chip,.mat-chip-list-wrapper input.mat-input-element{margin:4px}.mat-chip-list-stacked .mat-chip-list-wrapper{flex-direction:column;align-items:flex-start}.mat-chip-list-stacked .mat-chip-list-wrapper .mat-standard-chip{width:100%}.mat-chip-avatar{border-radius:50%;justify-content:center;align-items:center;display:flex;overflow:hidden;object-fit:cover}input.mat-chip-input{width:150px;margin:4px;flex:1 0 150px}\"],\r\n                    encapsulation: ViewEncapsulation.None,\r\n                    changeDetection: ChangeDetectionStrategy.OnPush\r\n                },] },\r\n    ];\r\n    /** @nocollapse */\r\n    MatChipList.ctorParameters = function () { return [\r\n        { type: ElementRef },\r\n        { type: ChangeDetectorRef },\r\n        { type: Directionality, decorators: [{ type: Optional }] },\r\n        { type: NgForm, decorators: [{ type: Optional }] },\r\n        { type: FormGroupDirective, decorators: [{ type: Optional }] },\r\n        { type: ErrorStateMatcher },\r\n        { type: NgControl, decorators: [{ type: Optional }, { type: Self }] }\r\n    ]; };\r\n    MatChipList.propDecorators = {\r\n        errorStateMatcher: [{ type: Input }],\r\n        multiple: [{ type: Input }],\r\n        compareWith: [{ type: Input }],\r\n        value: [{ type: Input }],\r\n        required: [{ type: Input }],\r\n        placeholder: [{ type: Input }],\r\n        disabled: [{ type: Input }],\r\n        ariaOrientation: [{ type: Input, args: ['aria-orientation',] }],\r\n        selectable: [{ type: Input }],\r\n        tabIndex: [{ type: Input }],\r\n        change: [{ type: Output }],\r\n        valueChange: [{ type: Output }],\r\n        chips: [{ type: ContentChildren, args: [MatChip, {\r\n                        // We need to use `descendants: true`, because Ivy will no longer match\r\n                        // indirect descendants if it's left as false.\r\n                        descendants: true\r\n                    },] }]\r\n    };\r\n    return MatChipList;\r\n}(_MatChipListMixinBase));\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n// Increasing integer for generating unique ids.\r\n/** @type {?} */\r\nvar nextUniqueId$1 = 0;\r\n/**\r\n * Directive that adds chip-specific behaviors to an input element inside `<mat-form-field>`.\r\n * May be placed inside or outside of an `<mat-chip-list>`.\r\n */\r\nvar MatChipInput = /** @class */ (function () {\r\n    function MatChipInput(_elementRef, _defaultOptions) {\r\n        this._elementRef = _elementRef;\r\n        this._defaultOptions = _defaultOptions;\r\n        /**\r\n         * Whether the control is focused.\r\n         */\r\n        this.focused = false;\r\n        this._addOnBlur = false;\r\n        /**\r\n         * The list of key codes that will trigger a chipEnd event.\r\n         *\r\n         * Defaults to `[ENTER]`.\r\n         */\r\n        this.separatorKeyCodes = this._defaultOptions.separatorKeyCodes;\r\n        /**\r\n         * Emitted when a chip is to be added.\r\n         */\r\n        this.chipEnd = new EventEmitter();\r\n        /**\r\n         * The input's placeholder text.\r\n         */\r\n        this.placeholder = '';\r\n        /**\r\n         * Unique id for the input.\r\n         */\r\n        this.id = \"mat-chip-list-input-\" + nextUniqueId$1++;\r\n        this._disabled = false;\r\n        this._inputElement = (/** @type {?} */ (this._elementRef.nativeElement));\r\n    }\r\n    Object.defineProperty(MatChipInput.prototype, \"chipList\", {\r\n        /** Register input for chip list */\r\n        set: /**\r\n         * Register input for chip list\r\n         * @param {?} value\r\n         * @return {?}\r\n         */\r\n        function (value) {\r\n            if (value) {\r\n                this._chipList = value;\r\n                this._chipList.registerInput(this);\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(MatChipInput.prototype, \"addOnBlur\", {\r\n        /**\r\n         * Whether or not the chipEnd event will be emitted when the input is blurred.\r\n         */\r\n        get: /**\r\n         * Whether or not the chipEnd event will be emitted when the input is blurred.\r\n         * @return {?}\r\n         */\r\n        function () { return this._addOnBlur; },\r\n        set: /**\r\n         * @param {?} value\r\n         * @return {?}\r\n         */\r\n        function (value) { this._addOnBlur = coerceBooleanProperty(value); },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(MatChipInput.prototype, \"disabled\", {\r\n        /** Whether the input is disabled. */\r\n        get: /**\r\n         * Whether the input is disabled.\r\n         * @return {?}\r\n         */\r\n        function () { return this._disabled || (this._chipList && this._chipList.disabled); },\r\n        set: /**\r\n         * @param {?} value\r\n         * @return {?}\r\n         */\r\n        function (value) { this._disabled = coerceBooleanProperty(value); },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(MatChipInput.prototype, \"empty\", {\r\n        /** Whether the input is empty. */\r\n        get: /**\r\n         * Whether the input is empty.\r\n         * @return {?}\r\n         */\r\n        function () { return !this._inputElement.value; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * @return {?}\r\n     */\r\n    MatChipInput.prototype.ngOnChanges = /**\r\n     * @return {?}\r\n     */\r\n    function () {\r\n        this._chipList.stateChanges.next();\r\n    };\r\n    /** Utility method to make host definition/tests more clear. */\r\n    /**\r\n     * Utility method to make host definition/tests more clear.\r\n     * @param {?=} event\r\n     * @return {?}\r\n     */\r\n    MatChipInput.prototype._keydown = /**\r\n     * Utility method to make host definition/tests more clear.\r\n     * @param {?=} event\r\n     * @return {?}\r\n     */\r\n    function (event) {\r\n        // Allow the user's focus to escape when they're tabbing forward. Note that we don't\r\n        // want to do this when going backwards, because focus should go back to the first chip.\r\n        if (event && event.keyCode === TAB && !hasModifierKey(event, 'shiftKey')) {\r\n            this._chipList._allowFocusEscape();\r\n        }\r\n        this._emitChipEnd(event);\r\n    };\r\n    /** Checks to see if the blur should emit the (chipEnd) event. */\r\n    /**\r\n     * Checks to see if the blur should emit the (chipEnd) event.\r\n     * @return {?}\r\n     */\r\n    MatChipInput.prototype._blur = /**\r\n     * Checks to see if the blur should emit the (chipEnd) event.\r\n     * @return {?}\r\n     */\r\n    function () {\r\n        if (this.addOnBlur) {\r\n            this._emitChipEnd();\r\n        }\r\n        this.focused = false;\r\n        // Blur the chip list if it is not focused\r\n        if (!this._chipList.focused) {\r\n            this._chipList._blur();\r\n        }\r\n        this._chipList.stateChanges.next();\r\n    };\r\n    /**\r\n     * @return {?}\r\n     */\r\n    MatChipInput.prototype._focus = /**\r\n     * @return {?}\r\n     */\r\n    function () {\r\n        this.focused = true;\r\n        this._chipList.stateChanges.next();\r\n    };\r\n    /** Checks to see if the (chipEnd) event needs to be emitted. */\r\n    /**\r\n     * Checks to see if the (chipEnd) event needs to be emitted.\r\n     * @param {?=} event\r\n     * @return {?}\r\n     */\r\n    MatChipInput.prototype._emitChipEnd = /**\r\n     * Checks to see if the (chipEnd) event needs to be emitted.\r\n     * @param {?=} event\r\n     * @return {?}\r\n     */\r\n    function (event) {\r\n        if (!this._inputElement.value && !!event) {\r\n            this._chipList._keydown(event);\r\n        }\r\n        if (!event || this._isSeparatorKey(event)) {\r\n            this.chipEnd.emit({ input: this._inputElement, value: this._inputElement.value });\r\n            if (event) {\r\n                event.preventDefault();\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * @return {?}\r\n     */\r\n    MatChipInput.prototype._onInput = /**\r\n     * @return {?}\r\n     */\r\n    function () {\r\n        // Let chip list know whenever the value changes.\r\n        this._chipList.stateChanges.next();\r\n    };\r\n    /** Focuses the input. */\r\n    /**\r\n     * Focuses the input.\r\n     * @param {?=} options\r\n     * @return {?}\r\n     */\r\n    MatChipInput.prototype.focus = /**\r\n     * Focuses the input.\r\n     * @param {?=} options\r\n     * @return {?}\r\n     */\r\n    function (options) {\r\n        this._inputElement.focus(options);\r\n    };\r\n    /** Checks whether a keycode is one of the configured separators. */\r\n    /**\r\n     * Checks whether a keycode is one of the configured separators.\r\n     * @private\r\n     * @param {?} event\r\n     * @return {?}\r\n     */\r\n    MatChipInput.prototype._isSeparatorKey = /**\r\n     * Checks whether a keycode is one of the configured separators.\r\n     * @private\r\n     * @param {?} event\r\n     * @return {?}\r\n     */\r\n    function (event) {\r\n        if (hasModifierKey(event)) {\r\n            return false;\r\n        }\r\n        /** @type {?} */\r\n        var separators = this.separatorKeyCodes;\r\n        /** @type {?} */\r\n        var keyCode = event.keyCode;\r\n        return Array.isArray(separators) ? separators.indexOf(keyCode) > -1 : separators.has(keyCode);\r\n    };\r\n    MatChipInput.decorators = [\r\n        { type: Directive, args: [{\r\n                    selector: 'input[matChipInputFor]',\r\n                    exportAs: 'matChipInput, matChipInputFor',\r\n                    host: {\r\n                        'class': 'mat-chip-input mat-input-element',\r\n                        '(keydown)': '_keydown($event)',\r\n                        '(blur)': '_blur()',\r\n                        '(focus)': '_focus()',\r\n                        '(input)': '_onInput()',\r\n                        '[id]': 'id',\r\n                        '[attr.disabled]': 'disabled || null',\r\n                        '[attr.placeholder]': 'placeholder || null',\r\n                        '[attr.aria-invalid]': '_chipList && _chipList.ngControl ? _chipList.ngControl.invalid : null',\r\n                    }\r\n                },] },\r\n    ];\r\n    /** @nocollapse */\r\n    MatChipInput.ctorParameters = function () { return [\r\n        { type: ElementRef },\r\n        { type: undefined, decorators: [{ type: Inject, args: [MAT_CHIPS_DEFAULT_OPTIONS,] }] }\r\n    ]; };\r\n    MatChipInput.propDecorators = {\r\n        chipList: [{ type: Input, args: ['matChipInputFor',] }],\r\n        addOnBlur: [{ type: Input, args: ['matChipInputAddOnBlur',] }],\r\n        separatorKeyCodes: [{ type: Input, args: ['matChipInputSeparatorKeyCodes',] }],\r\n        chipEnd: [{ type: Output, args: ['matChipInputTokenEnd',] }],\r\n        placeholder: [{ type: Input }],\r\n        id: [{ type: Input }],\r\n        disabled: [{ type: Input }]\r\n    };\r\n    return MatChipInput;\r\n}());\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n/** @type {?} */\r\nvar CHIP_DECLARATIONS = [\r\n    MatChipList,\r\n    MatChip,\r\n    MatChipInput,\r\n    MatChipRemove,\r\n    MatChipAvatar,\r\n    MatChipTrailingIcon,\r\n];\r\nvar ɵ0 = ({\r\n    separatorKeyCodes: [ENTER]\r\n});\r\nvar MatChipsModule = /** @class */ (function () {\r\n    function MatChipsModule() {\r\n    }\r\n    MatChipsModule.decorators = [\r\n        { type: NgModule, args: [{\r\n                    exports: CHIP_DECLARATIONS,\r\n                    declarations: CHIP_DECLARATIONS,\r\n                    providers: [\r\n                        ErrorStateMatcher,\r\n                        {\r\n                            provide: MAT_CHIPS_DEFAULT_OPTIONS,\r\n                            useValue: (/** @type {?} */ (ɵ0))\r\n                        }\r\n                    ]\r\n                },] },\r\n    ];\r\n    return MatChipsModule;\r\n}());\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n\r\nexport { MatChipsModule, MatChipListChange, MatChipList, MatChipSelectionChange, MatChipAvatar, MatChipTrailingIcon, MatChip, MatChipRemove, MatChipInput, MAT_CHIPS_DEFAULT_OPTIONS };\r\n\r\n"]}