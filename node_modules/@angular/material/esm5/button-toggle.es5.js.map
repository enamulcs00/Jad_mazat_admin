{"version":3,"sources":["v:/jad-admin-go/mazat_admin_panel/node_modules/@angular/material/esm5/button-toggle.es5.js"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAwfM,AAiBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;cAmBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;MAsNA,AAuBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;cAsBA;;;;;;;;;;KAUD;;;;;;;;;;;;;;;4BAOC","file":"button-toggle.es5.js","sourcesContent":["/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nimport { __extends } from 'tslib';\r\nimport { FocusMonitor } from '@angular/cdk/a11y';\r\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\r\nimport { SelectionModel } from '@angular/cdk/collections';\r\nimport { Attribute, ChangeDetectionStrategy, ChangeDetectorRef, Component, ContentChildren, Directive, ElementRef, EventEmitter, forwardRef, Input, Optional, Output, ViewChild, ViewEncapsulation, InjectionToken, Inject, NgModule } from '@angular/core';\r\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\r\nimport { mixinDisableRipple, MatCommonModule, MatRippleModule } from '@angular/material/core';\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n/**\r\n * Injection token that can be used to configure the\r\n * default options for all button toggles within an app.\r\n * @type {?}\r\n */\r\nvar MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS = new InjectionToken('MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS');\r\n/**\r\n * Provider Expression that allows mat-button-toggle-group to register as a ControlValueAccessor.\r\n * This allows it to support [(ngModel)].\r\n * \\@docs-private\r\n * @type {?}\r\n */\r\nvar MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR = {\r\n    provide: NG_VALUE_ACCESSOR,\r\n    useExisting: forwardRef((/**\r\n     * @return {?}\r\n     */\r\n    function () { return MatButtonToggleGroup; })),\r\n    multi: true\r\n};\r\n/**\r\n * @deprecated Use `MatButtonToggleGroup` instead.\r\n * \\@breaking-change 8.0.0\r\n */\r\nvar  /**\r\n * @deprecated Use `MatButtonToggleGroup` instead.\r\n * \\@breaking-change 8.0.0\r\n */\r\nMatButtonToggleGroupMultiple = /** @class */ (function () {\r\n    function MatButtonToggleGroupMultiple() {\r\n    }\r\n    return MatButtonToggleGroupMultiple;\r\n}());\r\n/** @type {?} */\r\nvar _uniqueIdCounter = 0;\r\n/**\r\n * Change event object emitted by MatButtonToggle.\r\n */\r\nvar  /**\r\n * Change event object emitted by MatButtonToggle.\r\n */\r\nMatButtonToggleChange = /** @class */ (function () {\r\n    function MatButtonToggleChange(source, value) {\r\n        this.source = source;\r\n        this.value = value;\r\n    }\r\n    return MatButtonToggleChange;\r\n}());\r\n/**\r\n * Exclusive selection button toggle group that behaves like a radio-button group.\r\n */\r\nvar MatButtonToggleGroup = /** @class */ (function () {\r\n    function MatButtonToggleGroup(_changeDetector, defaultOptions) {\r\n        this._changeDetector = _changeDetector;\r\n        this._vertical = false;\r\n        this._multiple = false;\r\n        this._disabled = false;\r\n        /**\r\n         * The method to be called in order to update ngModel.\r\n         * Now `ngModel` binding is not supported in multiple selection mode.\r\n         */\r\n        this._controlValueAccessorChangeFn = (/**\r\n         * @return {?}\r\n         */\r\n        function () { });\r\n        /**\r\n         * onTouch function registered via registerOnTouch (ControlValueAccessor).\r\n         */\r\n        this._onTouched = (/**\r\n         * @return {?}\r\n         */\r\n        function () { });\r\n        this._name = \"mat-button-toggle-group-\" + _uniqueIdCounter++;\r\n        /**\r\n         * Event that emits whenever the value of the group changes.\r\n         * Used to facilitate two-way data binding.\r\n         * \\@docs-private\r\n         */\r\n        this.valueChange = new EventEmitter();\r\n        /**\r\n         * Event emitted when the group's value changes.\r\n         */\r\n        this.change = new EventEmitter();\r\n        this.appearance =\r\n            defaultOptions && defaultOptions.appearance ? defaultOptions.appearance : 'standard';\r\n    }\r\n    Object.defineProperty(MatButtonToggleGroup.prototype, \"name\", {\r\n        /** `name` attribute for the underlying `input` element. */\r\n        get: /**\r\n         * `name` attribute for the underlying `input` element.\r\n         * @return {?}\r\n         */\r\n        function () { return this._name; },\r\n        set: /**\r\n         * @param {?} value\r\n         * @return {?}\r\n         */\r\n        function (value) {\r\n            var _this = this;\r\n            this._name = value;\r\n            if (this._buttonToggles) {\r\n                this._buttonToggles.forEach((/**\r\n                 * @param {?} toggle\r\n                 * @return {?}\r\n                 */\r\n                function (toggle) {\r\n                    toggle.name = _this._name;\r\n                    toggle._markForCheck();\r\n                }));\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(MatButtonToggleGroup.prototype, \"vertical\", {\r\n        /** Whether the toggle group is vertical. */\r\n        get: /**\r\n         * Whether the toggle group is vertical.\r\n         * @return {?}\r\n         */\r\n        function () { return this._vertical; },\r\n        set: /**\r\n         * @param {?} value\r\n         * @return {?}\r\n         */\r\n        function (value) {\r\n            this._vertical = coerceBooleanProperty(value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(MatButtonToggleGroup.prototype, \"value\", {\r\n        /** Value of the toggle group. */\r\n        get: /**\r\n         * Value of the toggle group.\r\n         * @return {?}\r\n         */\r\n        function () {\r\n            /** @type {?} */\r\n            var selected = this._selectionModel ? this._selectionModel.selected : [];\r\n            if (this.multiple) {\r\n                return selected.map((/**\r\n                 * @param {?} toggle\r\n                 * @return {?}\r\n                 */\r\n                function (toggle) { return toggle.value; }));\r\n            }\r\n            return selected[0] ? selected[0].value : undefined;\r\n        },\r\n        set: /**\r\n         * @param {?} newValue\r\n         * @return {?}\r\n         */\r\n        function (newValue) {\r\n            this._setSelectionByValue(newValue);\r\n            this.valueChange.emit(this.value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(MatButtonToggleGroup.prototype, \"selected\", {\r\n        /** Selected button toggles in the group. */\r\n        get: /**\r\n         * Selected button toggles in the group.\r\n         * @return {?}\r\n         */\r\n        function () {\r\n            /** @type {?} */\r\n            var selected = this._selectionModel ? this._selectionModel.selected : [];\r\n            return this.multiple ? selected : (selected[0] || null);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(MatButtonToggleGroup.prototype, \"multiple\", {\r\n        /** Whether multiple button toggles can be selected. */\r\n        get: /**\r\n         * Whether multiple button toggles can be selected.\r\n         * @return {?}\r\n         */\r\n        function () { return this._multiple; },\r\n        set: /**\r\n         * @param {?} value\r\n         * @return {?}\r\n         */\r\n        function (value) {\r\n            this._multiple = coerceBooleanProperty(value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(MatButtonToggleGroup.prototype, \"disabled\", {\r\n        /** Whether multiple button toggle group is disabled. */\r\n        get: /**\r\n         * Whether multiple button toggle group is disabled.\r\n         * @return {?}\r\n         */\r\n        function () { return this._disabled; },\r\n        set: /**\r\n         * @param {?} value\r\n         * @return {?}\r\n         */\r\n        function (value) {\r\n            this._disabled = coerceBooleanProperty(value);\r\n            if (this._buttonToggles) {\r\n                this._buttonToggles.forEach((/**\r\n                 * @param {?} toggle\r\n                 * @return {?}\r\n                 */\r\n                function (toggle) { return toggle._markForCheck(); }));\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * @return {?}\r\n     */\r\n    MatButtonToggleGroup.prototype.ngOnInit = /**\r\n     * @return {?}\r\n     */\r\n    function () {\r\n        this._selectionModel = new SelectionModel(this.multiple, undefined, false);\r\n    };\r\n    /**\r\n     * @return {?}\r\n     */\r\n    MatButtonToggleGroup.prototype.ngAfterContentInit = /**\r\n     * @return {?}\r\n     */\r\n    function () {\r\n        var _a;\r\n        (_a = this._selectionModel).select.apply(_a, this._buttonToggles.filter((/**\r\n         * @param {?} toggle\r\n         * @return {?}\r\n         */\r\n        function (toggle) { return toggle.checked; })));\r\n    };\r\n    /**\r\n     * Sets the model value. Implemented as part of ControlValueAccessor.\r\n     * @param value Value to be set to the model.\r\n     */\r\n    /**\r\n     * Sets the model value. Implemented as part of ControlValueAccessor.\r\n     * @param {?} value Value to be set to the model.\r\n     * @return {?}\r\n     */\r\n    MatButtonToggleGroup.prototype.writeValue = /**\r\n     * Sets the model value. Implemented as part of ControlValueAccessor.\r\n     * @param {?} value Value to be set to the model.\r\n     * @return {?}\r\n     */\r\n    function (value) {\r\n        this.value = value;\r\n        this._changeDetector.markForCheck();\r\n    };\r\n    // Implemented as part of ControlValueAccessor.\r\n    // Implemented as part of ControlValueAccessor.\r\n    /**\r\n     * @param {?} fn\r\n     * @return {?}\r\n     */\r\n    MatButtonToggleGroup.prototype.registerOnChange = \r\n    // Implemented as part of ControlValueAccessor.\r\n    /**\r\n     * @param {?} fn\r\n     * @return {?}\r\n     */\r\n    function (fn) {\r\n        this._controlValueAccessorChangeFn = fn;\r\n    };\r\n    // Implemented as part of ControlValueAccessor.\r\n    // Implemented as part of ControlValueAccessor.\r\n    /**\r\n     * @param {?} fn\r\n     * @return {?}\r\n     */\r\n    MatButtonToggleGroup.prototype.registerOnTouched = \r\n    // Implemented as part of ControlValueAccessor.\r\n    /**\r\n     * @param {?} fn\r\n     * @return {?}\r\n     */\r\n    function (fn) {\r\n        this._onTouched = fn;\r\n    };\r\n    // Implemented as part of ControlValueAccessor.\r\n    // Implemented as part of ControlValueAccessor.\r\n    /**\r\n     * @param {?} isDisabled\r\n     * @return {?}\r\n     */\r\n    MatButtonToggleGroup.prototype.setDisabledState = \r\n    // Implemented as part of ControlValueAccessor.\r\n    /**\r\n     * @param {?} isDisabled\r\n     * @return {?}\r\n     */\r\n    function (isDisabled) {\r\n        this.disabled = isDisabled;\r\n    };\r\n    /** Dispatch change event with current selection and group value. */\r\n    /**\r\n     * Dispatch change event with current selection and group value.\r\n     * @return {?}\r\n     */\r\n    MatButtonToggleGroup.prototype._emitChangeEvent = /**\r\n     * Dispatch change event with current selection and group value.\r\n     * @return {?}\r\n     */\r\n    function () {\r\n        /** @type {?} */\r\n        var selected = this.selected;\r\n        /** @type {?} */\r\n        var source = Array.isArray(selected) ? selected[selected.length - 1] : selected;\r\n        /** @type {?} */\r\n        var event = new MatButtonToggleChange((/** @type {?} */ (source)), this.value);\r\n        this._controlValueAccessorChangeFn(event.value);\r\n        this.change.emit(event);\r\n    };\r\n    /**\r\n     * Syncs a button toggle's selected state with the model value.\r\n     * @param toggle Toggle to be synced.\r\n     * @param select Whether the toggle should be selected.\r\n     * @param isUserInput Whether the change was a result of a user interaction.\r\n     * @param deferEvents Whether to defer emitting the change events.\r\n     */\r\n    /**\r\n     * Syncs a button toggle's selected state with the model value.\r\n     * @param {?} toggle Toggle to be synced.\r\n     * @param {?} select Whether the toggle should be selected.\r\n     * @param {?=} isUserInput Whether the change was a result of a user interaction.\r\n     * @param {?=} deferEvents Whether to defer emitting the change events.\r\n     * @return {?}\r\n     */\r\n    MatButtonToggleGroup.prototype._syncButtonToggle = /**\r\n     * Syncs a button toggle's selected state with the model value.\r\n     * @param {?} toggle Toggle to be synced.\r\n     * @param {?} select Whether the toggle should be selected.\r\n     * @param {?=} isUserInput Whether the change was a result of a user interaction.\r\n     * @param {?=} deferEvents Whether to defer emitting the change events.\r\n     * @return {?}\r\n     */\r\n    function (toggle, select, isUserInput, deferEvents) {\r\n        if (isUserInput === void 0) { isUserInput = false; }\r\n        if (deferEvents === void 0) { deferEvents = false; }\r\n        // Deselect the currently-selected toggle, if we're in single-selection\r\n        // mode and the button being toggled isn't selected at the moment.\r\n        if (!this.multiple && this.selected && !toggle.checked) {\r\n            ((/** @type {?} */ (this.selected))).checked = false;\r\n        }\r\n        if (this._selectionModel) {\r\n            if (select) {\r\n                this._selectionModel.select(toggle);\r\n            }\r\n            else {\r\n                this._selectionModel.deselect(toggle);\r\n            }\r\n        }\r\n        else {\r\n            deferEvents = true;\r\n        }\r\n        // We need to defer in some cases in order to avoid \"changed after checked errors\", however\r\n        // the side-effect is that we may end up updating the model value out of sequence in others\r\n        // The `deferEvents` flag allows us to decide whether to do it on a case-by-case basis.\r\n        if (deferEvents) {\r\n        }\r\n        else {\r\n            this._updateModelValue(isUserInput);\r\n        }\r\n    };\r\n    /** Checks whether a button toggle is selected. */\r\n    /**\r\n     * Checks whether a button toggle is selected.\r\n     * @param {?} toggle\r\n     * @return {?}\r\n     */\r\n    MatButtonToggleGroup.prototype._isSelected = /**\r\n     * Checks whether a button toggle is selected.\r\n     * @param {?} toggle\r\n     * @return {?}\r\n     */\r\n    function (toggle) {\r\n        return this._selectionModel && this._selectionModel.isSelected(toggle);\r\n    };\r\n    /** Determines whether a button toggle should be checked on init. */\r\n    /**\r\n     * Determines whether a button toggle should be checked on init.\r\n     * @param {?} toggle\r\n     * @return {?}\r\n     */\r\n    MatButtonToggleGroup.prototype._isPrechecked = /**\r\n     * Determines whether a button toggle should be checked on init.\r\n     * @param {?} toggle\r\n     * @return {?}\r\n     */\r\n    function (toggle) {\r\n        if (typeof this._rawValue === 'undefined') {\r\n            return false;\r\n        }\r\n        if (this.multiple && Array.isArray(this._rawValue)) {\r\n            return this._rawValue.some((/**\r\n             * @param {?} value\r\n             * @return {?}\r\n             */\r\n            function (value) { return toggle.value != null && value === toggle.value; }));\r\n        }\r\n        return toggle.value === this._rawValue;\r\n    };\r\n    /** Updates the selection state of the toggles in the group based on a value. */\r\n    /**\r\n     * Updates the selection state of the toggles in the group based on a value.\r\n     * @private\r\n     * @param {?} value\r\n     * @return {?}\r\n     */\r\n    MatButtonToggleGroup.prototype._setSelectionByValue = /**\r\n     * Updates the selection state of the toggles in the group based on a value.\r\n     * @private\r\n     * @param {?} value\r\n     * @return {?}\r\n     */\r\n    function (value) {\r\n        var _this = this;\r\n        this._rawValue = value;\r\n        if (!this._buttonToggles) {\r\n            return;\r\n        }\r\n        if (this.multiple && value) {\r\n            if (!Array.isArray(value)) {\r\n                throw Error('Value must be an array in multiple-selection mode.');\r\n            }\r\n            this._clearSelection();\r\n            value.forEach((/**\r\n             * @param {?} currentValue\r\n             * @return {?}\r\n             */\r\n            function (currentValue) { return _this._selectValue(currentValue); }));\r\n        }\r\n        else {\r\n            this._clearSelection();\r\n            this._selectValue(value);\r\n        }\r\n    };\r\n    /** Clears the selected toggles. */\r\n    /**\r\n     * Clears the selected toggles.\r\n     * @private\r\n     * @return {?}\r\n     */\r\n    MatButtonToggleGroup.prototype._clearSelection = /**\r\n     * Clears the selected toggles.\r\n     * @private\r\n     * @return {?}\r\n     */\r\n    function () {\r\n        this._selectionModel.clear();\r\n        this._buttonToggles.forEach((/**\r\n         * @param {?} toggle\r\n         * @return {?}\r\n         */\r\n        function (toggle) { return toggle.checked = false; }));\r\n    };\r\n    /** Selects a value if there's a toggle that corresponds to it. */\r\n    /**\r\n     * Selects a value if there's a toggle that corresponds to it.\r\n     * @private\r\n     * @param {?} value\r\n     * @return {?}\r\n     */\r\n    MatButtonToggleGroup.prototype._selectValue = /**\r\n     * Selects a value if there's a toggle that corresponds to it.\r\n     * @private\r\n     * @param {?} value\r\n     * @return {?}\r\n     */\r\n    function (value) {\r\n        /** @type {?} */\r\n        var correspondingOption = this._buttonToggles.find((/**\r\n         * @param {?} toggle\r\n         * @return {?}\r\n         */\r\n        function (toggle) {\r\n            return toggle.value != null && toggle.value === value;\r\n        }));\r\n        if (correspondingOption) {\r\n            correspondingOption.checked = true;\r\n            this._selectionModel.select(correspondingOption);\r\n        }\r\n    };\r\n    /** Syncs up the group's value with the model and emits the change event. */\r\n    /**\r\n     * Syncs up the group's value with the model and emits the change event.\r\n     * @private\r\n     * @param {?} isUserInput\r\n     * @return {?}\r\n     */\r\n    MatButtonToggleGroup.prototype._updateModelValue = /**\r\n     * Syncs up the group's value with the model and emits the change event.\r\n     * @private\r\n     * @param {?} isUserInput\r\n     * @return {?}\r\n     */\r\n    function (isUserInput) {\r\n        // Only emit the change event for user input.\r\n        if (isUserInput) {\r\n            this._emitChangeEvent();\r\n        }\r\n        // Note: we emit this one no matter whether it was a user interaction, because\r\n        // it is used by Angular to sync up the two-way data binding.\r\n        this.valueChange.emit(this.value);\r\n    };\r\n    MatButtonToggleGroup.decorators = [\r\n        { type: Directive, args: [{\r\n                    selector: 'mat-button-toggle-group',\r\n                    providers: [\r\n                        MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR,\r\n                        { provide: MatButtonToggleGroupMultiple, useExisting: MatButtonToggleGroup },\r\n                    ],\r\n                    host: {\r\n                        'role': 'group',\r\n                        'class': 'mat-button-toggle-group',\r\n                        '[attr.aria-disabled]': 'disabled',\r\n                        '[class.mat-button-toggle-vertical]': 'vertical',\r\n                        '[class.mat-button-toggle-group-appearance-standard]': 'appearance === \"standard\"',\r\n                    },\r\n                    exportAs: 'matButtonToggleGroup',\r\n                },] },\r\n    ];\r\n    /** @nocollapse */\r\n    MatButtonToggleGroup.ctorParameters = function () { return [\r\n        { type: ChangeDetectorRef },\r\n        { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS,] }] }\r\n    ]; };\r\n    MatButtonToggleGroup.propDecorators = {\r\n        _buttonToggles: [{ type: ContentChildren, args: [forwardRef((/**\r\n                     * @return {?}\r\n                     */\r\n                    function () { return MatButtonToggle; })),] }],\r\n        appearance: [{ type: Input }],\r\n        name: [{ type: Input }],\r\n        vertical: [{ type: Input }],\r\n        value: [{ type: Input }],\r\n        valueChange: [{ type: Output }],\r\n        multiple: [{ type: Input }],\r\n        disabled: [{ type: Input }],\r\n        change: [{ type: Output }]\r\n    };\r\n    return MatButtonToggleGroup;\r\n}());\r\n// Boilerplate for applying mixins to the MatButtonToggle class.\r\n/**\r\n * \\@docs-private\r\n */\r\nvar \r\n// Boilerplate for applying mixins to the MatButtonToggle class.\r\n/**\r\n * \\@docs-private\r\n */\r\nMatButtonToggleBase = /** @class */ (function () {\r\n    function MatButtonToggleBase() {\r\n    }\r\n    return MatButtonToggleBase;\r\n}());\r\n/** @type {?} */\r\nvar _MatButtonToggleMixinBase = mixinDisableRipple(MatButtonToggleBase);\r\n/**\r\n * Single button inside of a toggle group.\r\n */\r\nvar MatButtonToggle = /** @class */ (function (_super) {\r\n    __extends(MatButtonToggle, _super);\r\n    function MatButtonToggle(toggleGroup, _changeDetectorRef, _elementRef, _focusMonitor, \r\n    // @breaking-change 8.0.0 `defaultTabIndex` to be made a required parameter.\r\n    defaultTabIndex, defaultOptions) {\r\n        var _this = _super.call(this) || this;\r\n        _this._changeDetectorRef = _changeDetectorRef;\r\n        _this._elementRef = _elementRef;\r\n        _this._focusMonitor = _focusMonitor;\r\n        _this._isSingleSelector = false;\r\n        _this._checked = false;\r\n        /**\r\n         * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\r\n         */\r\n        _this.ariaLabelledby = null;\r\n        _this._disabled = false;\r\n        /**\r\n         * Event emitted when the group value changes.\r\n         */\r\n        _this.change = new EventEmitter();\r\n        /** @type {?} */\r\n        var parsedTabIndex = Number(defaultTabIndex);\r\n        _this.tabIndex = (parsedTabIndex || parsedTabIndex === 0) ? parsedTabIndex : null;\r\n        _this.buttonToggleGroup = toggleGroup;\r\n        _this.appearance =\r\n            defaultOptions && defaultOptions.appearance ? defaultOptions.appearance : 'standard';\r\n        return _this;\r\n    }\r\n    Object.defineProperty(MatButtonToggle.prototype, \"buttonId\", {\r\n        /** Unique ID for the underlying `button` element. */\r\n        get: /**\r\n         * Unique ID for the underlying `button` element.\r\n         * @return {?}\r\n         */\r\n        function () { return this.id + \"-button\"; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(MatButtonToggle.prototype, \"appearance\", {\r\n        /** The appearance style of the button. */\r\n        get: /**\r\n         * The appearance style of the button.\r\n         * @return {?}\r\n         */\r\n        function () {\r\n            return this.buttonToggleGroup ? this.buttonToggleGroup.appearance : this._appearance;\r\n        },\r\n        set: /**\r\n         * @param {?} value\r\n         * @return {?}\r\n         */\r\n        function (value) {\r\n            this._appearance = value;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(MatButtonToggle.prototype, \"checked\", {\r\n        /** Whether the button is checked. */\r\n        get: /**\r\n         * Whether the button is checked.\r\n         * @return {?}\r\n         */\r\n        function () {\r\n            return this.buttonToggleGroup ? this.buttonToggleGroup._isSelected(this) : this._checked;\r\n        },\r\n        set: /**\r\n         * @param {?} value\r\n         * @return {?}\r\n         */\r\n        function (value) {\r\n            /** @type {?} */\r\n            var newValue = coerceBooleanProperty(value);\r\n            if (newValue !== this._checked) {\r\n                this._checked = newValue;\r\n                if (this.buttonToggleGroup) {\r\n                    this.buttonToggleGroup._syncButtonToggle(this, this._checked);\r\n                }\r\n                this._changeDetectorRef.markForCheck();\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(MatButtonToggle.prototype, \"disabled\", {\r\n        /** Whether the button is disabled. */\r\n        get: /**\r\n         * Whether the button is disabled.\r\n         * @return {?}\r\n         */\r\n        function () {\r\n            return this._disabled || (this.buttonToggleGroup && this.buttonToggleGroup.disabled);\r\n        },\r\n        set: /**\r\n         * @param {?} value\r\n         * @return {?}\r\n         */\r\n        function (value) { this._disabled = coerceBooleanProperty(value); },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * @return {?}\r\n     */\r\n    MatButtonToggle.prototype.ngOnInit = /**\r\n     * @return {?}\r\n     */\r\n    function () {\r\n        this._isSingleSelector = this.buttonToggleGroup && !this.buttonToggleGroup.multiple;\r\n        this._type = this._isSingleSelector ? 'radio' : 'checkbox';\r\n        this.id = this.id || \"mat-button-toggle-\" + _uniqueIdCounter++;\r\n        if (this._isSingleSelector) {\r\n            this.name = this.buttonToggleGroup.name;\r\n        }\r\n        if (this.buttonToggleGroup && this.buttonToggleGroup._isPrechecked(this)) {\r\n            this.checked = true;\r\n        }\r\n        this._focusMonitor.monitor(this._elementRef, true);\r\n    };\r\n    /**\r\n     * @return {?}\r\n     */\r\n    MatButtonToggle.prototype.ngOnDestroy = /**\r\n     * @return {?}\r\n     */\r\n    function () {\r\n        /** @type {?} */\r\n        var group = this.buttonToggleGroup;\r\n        this._focusMonitor.stopMonitoring(this._elementRef);\r\n        // Remove the toggle from the selection once it's destroyed. Needs to happen\r\n        // on the next tick in order to avoid \"changed after checked\" errors.\r\n        if (group && group._isSelected(this)) {\r\n            group._syncButtonToggle(this, false, false, true);\r\n        }\r\n    };\r\n    /** Focuses the button. */\r\n    /**\r\n     * Focuses the button.\r\n     * @param {?=} options\r\n     * @return {?}\r\n     */\r\n    MatButtonToggle.prototype.focus = /**\r\n     * Focuses the button.\r\n     * @param {?=} options\r\n     * @return {?}\r\n     */\r\n    function (options) {\r\n        this._buttonElement.nativeElement.focus(options);\r\n    };\r\n    /** Checks the button toggle due to an interaction with the underlying native button. */\r\n    /**\r\n     * Checks the button toggle due to an interaction with the underlying native button.\r\n     * @return {?}\r\n     */\r\n    MatButtonToggle.prototype._onButtonClick = /**\r\n     * Checks the button toggle due to an interaction with the underlying native button.\r\n     * @return {?}\r\n     */\r\n    function () {\r\n        /** @type {?} */\r\n        var newChecked = this._isSingleSelector ? true : !this._checked;\r\n        if (newChecked !== this._checked) {\r\n            this._checked = newChecked;\r\n            if (this.buttonToggleGroup) {\r\n                this.buttonToggleGroup._syncButtonToggle(this, this._checked, true);\r\n                this.buttonToggleGroup._onTouched();\r\n            }\r\n        }\r\n        // Emit a change event when it's the single selector\r\n        this.change.emit(new MatButtonToggleChange(this, this.value));\r\n    };\r\n    /**\r\n     * Marks the button toggle as needing checking for change detection.\r\n     * This method is exposed because the parent button toggle group will directly\r\n     * update bound properties of the radio button.\r\n     */\r\n    /**\r\n     * Marks the button toggle as needing checking for change detection.\r\n     * This method is exposed because the parent button toggle group will directly\r\n     * update bound properties of the radio button.\r\n     * @return {?}\r\n     */\r\n    MatButtonToggle.prototype._markForCheck = /**\r\n     * Marks the button toggle as needing checking for change detection.\r\n     * This method is exposed because the parent button toggle group will directly\r\n     * update bound properties of the radio button.\r\n     * @return {?}\r\n     */\r\n    function () {\r\n        // When the group value changes, the button will not be notified.\r\n        // Use `markForCheck` to explicit update button toggle's status.\r\n        this._changeDetectorRef.markForCheck();\r\n    };\r\n    MatButtonToggle.decorators = [\r\n        { type: Component, args: [{selector: 'mat-button-toggle',\r\n                    template: \"<button #button class=\\\"mat-button-toggle-button\\\" type=\\\"button\\\" [id]=\\\"buttonId\\\" [attr.tabindex]=\\\"disabled ? -1 : tabIndex\\\" [attr.aria-pressed]=\\\"checked\\\" [disabled]=\\\"disabled || null\\\" [attr.name]=\\\"name || null\\\" [attr.aria-label]=\\\"ariaLabel\\\" [attr.aria-labelledby]=\\\"ariaLabelledby\\\" (click)=\\\"_onButtonClick()\\\"><div class=\\\"mat-button-toggle-label-content\\\"><ng-content></ng-content></div></button><div class=\\\"mat-button-toggle-focus-overlay\\\"></div><div class=\\\"mat-button-toggle-ripple\\\" matRipple [matRippleTrigger]=\\\"button\\\" [matRippleDisabled]=\\\"this.disableRipple || this.disabled\\\"></div>\",\r\n                    styles: [\".mat-button-toggle-group,.mat-button-toggle-standalone{position:relative;display:inline-flex;flex-direction:row;white-space:nowrap;overflow:hidden;border-radius:2px;-webkit-tap-highlight-color:transparent}@media (-ms-high-contrast:active){.mat-button-toggle-group,.mat-button-toggle-standalone{outline:solid 1px}}.mat-button-toggle-group-appearance-standard,.mat-button-toggle-standalone.mat-button-toggle-appearance-standard{border-radius:4px}@media (-ms-high-contrast:active){.mat-button-toggle-group-appearance-standard,.mat-button-toggle-standalone.mat-button-toggle-appearance-standard{outline:0}}.mat-button-toggle-vertical{flex-direction:column}.mat-button-toggle-vertical .mat-button-toggle-label-content{display:block}.mat-button-toggle{white-space:nowrap;position:relative}.mat-button-toggle .mat-icon svg{vertical-align:top}.mat-button-toggle.cdk-keyboard-focused .mat-button-toggle-focus-overlay{opacity:1}@media (-ms-high-contrast:active){.mat-button-toggle.cdk-keyboard-focused .mat-button-toggle-focus-overlay{opacity:.5}}.mat-button-toggle-appearance-standard:not(.mat-button-toggle-disabled):hover .mat-button-toggle-focus-overlay{opacity:.04}.mat-button-toggle-appearance-standard.cdk-keyboard-focused:not(.mat-button-toggle-disabled) .mat-button-toggle-focus-overlay{opacity:.12}@media (-ms-high-contrast:active){.mat-button-toggle-appearance-standard.cdk-keyboard-focused:not(.mat-button-toggle-disabled) .mat-button-toggle-focus-overlay{opacity:.5}}@media (hover:none){.mat-button-toggle-appearance-standard:not(.mat-button-toggle-disabled):hover .mat-button-toggle-focus-overlay{display:none}}.mat-button-toggle-label-content{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;display:inline-block;line-height:36px;padding:0 16px;position:relative}.mat-button-toggle-appearance-standard .mat-button-toggle-label-content{line-height:48px;padding:0 12px}.mat-button-toggle-label-content>*{vertical-align:middle}.mat-button-toggle-focus-overlay{border-radius:inherit;pointer-events:none;opacity:0;top:0;left:0;right:0;bottom:0;position:absolute}.mat-button-toggle-checked .mat-button-toggle-focus-overlay{border-bottom:solid 36px}@media (-ms-high-contrast:active){.mat-button-toggle-checked .mat-button-toggle-focus-overlay{opacity:.5;height:0}}@media (-ms-high-contrast:active){.mat-button-toggle-checked.mat-button-toggle-appearance-standard .mat-button-toggle-focus-overlay{border-bottom:solid 48px}}.mat-button-toggle .mat-button-toggle-ripple{top:0;left:0;right:0;bottom:0;position:absolute;pointer-events:none}.mat-button-toggle-button{border:0;background:0 0;color:inherit;padding:0;margin:0;font:inherit;outline:0;width:100%;cursor:pointer}.mat-button-toggle-disabled .mat-button-toggle-button{cursor:default}.mat-button-toggle-button::-moz-focus-inner{border:0}\"],\r\n                    encapsulation: ViewEncapsulation.None,\r\n                    exportAs: 'matButtonToggle',\r\n                    changeDetection: ChangeDetectionStrategy.OnPush,\r\n                    inputs: ['disableRipple'],\r\n                    host: {\r\n                        '[class.mat-button-toggle-standalone]': '!buttonToggleGroup',\r\n                        '[class.mat-button-toggle-checked]': 'checked',\r\n                        '[class.mat-button-toggle-disabled]': 'disabled',\r\n                        '[class.mat-button-toggle-appearance-standard]': 'appearance === \"standard\"',\r\n                        'class': 'mat-button-toggle',\r\n                        // Always reset the tabindex to -1 so it doesn't conflict with the one on the `button`,\r\n                        // but can still receive focus from things like cdkFocusInitial.\r\n                        '[attr.tabindex]': '-1',\r\n                        '[attr.id]': 'id',\r\n                        '[attr.name]': 'null',\r\n                        '(focus)': 'focus()',\r\n                    }\r\n                },] },\r\n    ];\r\n    /** @nocollapse */\r\n    MatButtonToggle.ctorParameters = function () { return [\r\n        { type: MatButtonToggleGroup, decorators: [{ type: Optional }] },\r\n        { type: ChangeDetectorRef },\r\n        { type: ElementRef },\r\n        { type: FocusMonitor },\r\n        { type: String, decorators: [{ type: Attribute, args: ['tabindex',] }] },\r\n        { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS,] }] }\r\n    ]; };\r\n    MatButtonToggle.propDecorators = {\r\n        ariaLabel: [{ type: Input, args: ['aria-label',] }],\r\n        ariaLabelledby: [{ type: Input, args: ['aria-labelledby',] }],\r\n        _buttonElement: [{ type: ViewChild, args: ['button', { static: false },] }],\r\n        id: [{ type: Input }],\r\n        name: [{ type: Input }],\r\n        value: [{ type: Input }],\r\n        tabIndex: [{ type: Input }],\r\n        appearance: [{ type: Input }],\r\n        checked: [{ type: Input }],\r\n        disabled: [{ type: Input }],\r\n        change: [{ type: Output }]\r\n    };\r\n    return MatButtonToggle;\r\n}(_MatButtonToggleMixinBase));\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\nvar MatButtonToggleModule = /** @class */ (function () {\r\n    function MatButtonToggleModule() {\r\n    }\r\n    MatButtonToggleModule.decorators = [\r\n        { type: NgModule, args: [{\r\n                    imports: [MatCommonModule, MatRippleModule],\r\n                    exports: [MatCommonModule, MatButtonToggleGroup, MatButtonToggle],\r\n                    declarations: [MatButtonToggleGroup, MatButtonToggle],\r\n                },] },\r\n    ];\r\n    return MatButtonToggleModule;\r\n}());\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n\r\nexport { MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS, MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR, MatButtonToggleGroupMultiple, MatButtonToggleChange, MatButtonToggleGroup, MatButtonToggle, MatButtonToggleModule };\r\n\r\n"]}