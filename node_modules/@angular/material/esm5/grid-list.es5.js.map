{"version":3,"sources":["v:/jad-admin-go/mazat_admin_panel/node_modules/@angular/material/esm5/grid-list.es5.js"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAsBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;MA+DM,AAYA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;0CASA;;;;;;;;;;;;;;;MAeA,AAOA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;cgBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;cAWA;;;;;;;;;;KAUD;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4BAuBC","file":"grid-list.es5.js","sourcesContent":["/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nimport { InjectionToken, Component, ViewEncapsulation, ElementRef, Input, Optional, ContentChildren, Directive, ChangeDetectionStrategy, Inject, NgModule } from '@angular/core';\r\nimport { MatLine, setLines, MatLineModule, MatCommonModule } from '@angular/material/core';\r\nimport { coerceNumberProperty } from '@angular/cdk/coercion';\r\nimport { __extends } from 'tslib';\r\nimport { Directionality } from '@angular/cdk/bidi';\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n/**\r\n * Injection token used to provide a grid list to a tile and to avoid circular imports.\r\n * \\@docs-private\r\n * @type {?}\r\n */\r\nvar MAT_GRID_LIST = new InjectionToken('MAT_GRID_LIST');\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\nvar MatGridTile = /** @class */ (function () {\r\n    function MatGridTile(_element, _gridList) {\r\n        this._element = _element;\r\n        this._gridList = _gridList;\r\n        this._rowspan = 1;\r\n        this._colspan = 1;\r\n    }\r\n    Object.defineProperty(MatGridTile.prototype, \"rowspan\", {\r\n        /** Amount of rows that the grid tile takes up. */\r\n        get: /**\r\n         * Amount of rows that the grid tile takes up.\r\n         * @return {?}\r\n         */\r\n        function () { return this._rowspan; },\r\n        set: /**\r\n         * @param {?} value\r\n         * @return {?}\r\n         */\r\n        function (value) { this._rowspan = Math.round(coerceNumberProperty(value)); },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(MatGridTile.prototype, \"colspan\", {\r\n        /** Amount of columns that the grid tile takes up. */\r\n        get: /**\r\n         * Amount of columns that the grid tile takes up.\r\n         * @return {?}\r\n         */\r\n        function () { return this._colspan; },\r\n        set: /**\r\n         * @param {?} value\r\n         * @return {?}\r\n         */\r\n        function (value) { this._colspan = Math.round(coerceNumberProperty(value)); },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Sets the style of the grid-tile element.  Needs to be set manually to avoid\r\n     * \"Changed after checked\" errors that would occur with HostBinding.\r\n     */\r\n    /**\r\n     * Sets the style of the grid-tile element.  Needs to be set manually to avoid\r\n     * \"Changed after checked\" errors that would occur with HostBinding.\r\n     * @param {?} property\r\n     * @param {?} value\r\n     * @return {?}\r\n     */\r\n    MatGridTile.prototype._setStyle = /**\r\n     * Sets the style of the grid-tile element.  Needs to be set manually to avoid\r\n     * \"Changed after checked\" errors that would occur with HostBinding.\r\n     * @param {?} property\r\n     * @param {?} value\r\n     * @return {?}\r\n     */\r\n    function (property, value) {\r\n        ((/** @type {?} */ (this._element.nativeElement.style)))[property] = value;\r\n    };\r\n    MatGridTile.decorators = [\r\n        { type: Component, args: [{selector: 'mat-grid-tile',\r\n                    exportAs: 'matGridTile',\r\n                    host: {\r\n                        'class': 'mat-grid-tile',\r\n                    },\r\n                    template: \"<figure class=\\\"mat-figure\\\"><ng-content></ng-content></figure>\",\r\n                    styles: [\".mat-grid-list{display:block;position:relative}.mat-grid-tile{display:block;position:absolute;overflow:hidden}.mat-grid-tile .mat-figure{top:0;left:0;right:0;bottom:0;position:absolute;display:flex;align-items:center;justify-content:center;height:100%;padding:0;margin:0}.mat-grid-tile .mat-grid-tile-footer,.mat-grid-tile .mat-grid-tile-header{display:flex;align-items:center;height:48px;color:#fff;background:rgba(0,0,0,.38);overflow:hidden;padding:0 16px;position:absolute;left:0;right:0}.mat-grid-tile .mat-grid-tile-footer>*,.mat-grid-tile .mat-grid-tile-header>*{margin:0;padding:0;font-weight:400;font-size:inherit}.mat-grid-tile .mat-grid-tile-footer.mat-2-line,.mat-grid-tile .mat-grid-tile-header.mat-2-line{height:68px}.mat-grid-tile .mat-grid-list-text{display:flex;flex-direction:column;width:100%;box-sizing:border-box;overflow:hidden}.mat-grid-tile .mat-grid-list-text>*{margin:0;padding:0;font-weight:400;font-size:inherit}.mat-grid-tile .mat-grid-list-text:empty{display:none}.mat-grid-tile .mat-grid-tile-header{top:0}.mat-grid-tile .mat-grid-tile-footer{bottom:0}.mat-grid-tile .mat-grid-avatar{padding-right:16px}[dir=rtl] .mat-grid-tile .mat-grid-avatar{padding-right:0;padding-left:16px}.mat-grid-tile .mat-grid-avatar:empty{display:none}\"],\r\n                    encapsulation: ViewEncapsulation.None,\r\n                    changeDetection: ChangeDetectionStrategy.OnPush,\r\n                },] },\r\n    ];\r\n    /** @nocollapse */\r\n    MatGridTile.ctorParameters = function () { return [\r\n        { type: ElementRef },\r\n        { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MAT_GRID_LIST,] }] }\r\n    ]; };\r\n    MatGridTile.propDecorators = {\r\n        rowspan: [{ type: Input }],\r\n        colspan: [{ type: Input }]\r\n    };\r\n    return MatGridTile;\r\n}());\r\nvar MatGridTileText = /** @class */ (function () {\r\n    function MatGridTileText(_element) {\r\n        this._element = _element;\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    MatGridTileText.prototype.ngAfterContentInit = /**\r\n     * @return {?}\r\n     */\r\n    function () {\r\n        setLines(this._lines, this._element);\r\n    };\r\n    MatGridTileText.decorators = [\r\n        { type: Component, args: [{selector: 'mat-grid-tile-header, mat-grid-tile-footer',\r\n                    template: \"<ng-content select=\\\"[mat-grid-avatar], [matGridAvatar]\\\"></ng-content><div class=\\\"mat-grid-list-text\\\"><ng-content select=\\\"[mat-line], [matLine]\\\"></ng-content></div><ng-content></ng-content>\",\r\n                    changeDetection: ChangeDetectionStrategy.OnPush,\r\n                    encapsulation: ViewEncapsulation.None,\r\n                },] },\r\n    ];\r\n    /** @nocollapse */\r\n    MatGridTileText.ctorParameters = function () { return [\r\n        { type: ElementRef }\r\n    ]; };\r\n    MatGridTileText.propDecorators = {\r\n        _lines: [{ type: ContentChildren, args: [MatLine,] }]\r\n    };\r\n    return MatGridTileText;\r\n}());\r\n/**\r\n * Directive whose purpose is to add the mat- CSS styling to this selector.\r\n * \\@docs-private\r\n */\r\nvar MatGridAvatarCssMatStyler = /** @class */ (function () {\r\n    function MatGridAvatarCssMatStyler() {\r\n    }\r\n    MatGridAvatarCssMatStyler.decorators = [\r\n        { type: Directive, args: [{\r\n                    selector: '[mat-grid-avatar], [matGridAvatar]',\r\n                    host: { 'class': 'mat-grid-avatar' }\r\n                },] },\r\n    ];\r\n    return MatGridAvatarCssMatStyler;\r\n}());\r\n/**\r\n * Directive whose purpose is to add the mat- CSS styling to this selector.\r\n * \\@docs-private\r\n */\r\nvar MatGridTileHeaderCssMatStyler = /** @class */ (function () {\r\n    function MatGridTileHeaderCssMatStyler() {\r\n    }\r\n    MatGridTileHeaderCssMatStyler.decorators = [\r\n        { type: Directive, args: [{\r\n                    selector: 'mat-grid-tile-header',\r\n                    host: { 'class': 'mat-grid-tile-header' }\r\n                },] },\r\n    ];\r\n    return MatGridTileHeaderCssMatStyler;\r\n}());\r\n/**\r\n * Directive whose purpose is to add the mat- CSS styling to this selector.\r\n * \\@docs-private\r\n */\r\nvar MatGridTileFooterCssMatStyler = /** @class */ (function () {\r\n    function MatGridTileFooterCssMatStyler() {\r\n    }\r\n    MatGridTileFooterCssMatStyler.decorators = [\r\n        { type: Directive, args: [{\r\n                    selector: 'mat-grid-tile-footer',\r\n                    host: { 'class': 'mat-grid-tile-footer' }\r\n                },] },\r\n    ];\r\n    return MatGridTileFooterCssMatStyler;\r\n}());\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n\r\n/**\r\n * Class for determining, from a list of tiles, the (row, col) position of each of those tiles\r\n * in the grid. This is necessary (rather than just rendering the tiles in normal document flow)\r\n * because the tiles can have a rowspan.\r\n *\r\n * The positioning algorithm greedily places each tile as soon as it encounters a gap in the grid\r\n * large enough to accommodate it so that the tiles still render in the same order in which they\r\n * are given.\r\n *\r\n * The basis of the algorithm is the use of an array to track the already placed tiles. Each\r\n * element of the array corresponds to a column, and the value indicates how many cells in that\r\n * column are already occupied; zero indicates an empty cell. Moving \"down\" to the next row\r\n * decrements each value in the tracking array (indicating that the column is one cell closer to\r\n * being free).\r\n *\r\n * \\@docs-private\r\n */\r\nvar /**\r\n * Class for determining, from a list of tiles, the (row, col) position of each of those tiles\r\n * in the grid. This is necessary (rather than just rendering the tiles in normal document flow)\r\n * because the tiles can have a rowspan.\r\n *\r\n * The positioning algorithm greedily places each tile as soon as it encounters a gap in the grid\r\n * large enough to accommodate it so that the tiles still render in the same order in which they\r\n * are given.\r\n *\r\n * The basis of the algorithm is the use of an array to track the already placed tiles. Each\r\n * element of the array corresponds to a column, and the value indicates how many cells in that\r\n * column are already occupied; zero indicates an empty cell. Moving \"down\" to the next row\r\n * decrements each value in the tracking array (indicating that the column is one cell closer to\r\n * being free).\r\n *\r\n * \\@docs-private\r\n */\r\nTileCoordinator = /** @class */ (function () {\r\n    function TileCoordinator() {\r\n        /**\r\n         * Index at which the search for the next gap will start.\r\n         */\r\n        this.columnIndex = 0;\r\n        /**\r\n         * The current row index.\r\n         */\r\n        this.rowIndex = 0;\r\n    }\r\n    Object.defineProperty(TileCoordinator.prototype, \"rowCount\", {\r\n        /** Gets the total number of rows occupied by tiles */\r\n        get: /**\r\n         * Gets the total number of rows occupied by tiles\r\n         * @return {?}\r\n         */\r\n        function () { return this.rowIndex + 1; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(TileCoordinator.prototype, \"rowspan\", {\r\n        /**\r\n         * Gets the total span of rows occupied by tiles.\r\n         * Ex: A list with 1 row that contains a tile with rowspan 2 will have a total rowspan of 2.\r\n         */\r\n        get: /**\r\n         * Gets the total span of rows occupied by tiles.\r\n         * Ex: A list with 1 row that contains a tile with rowspan 2 will have a total rowspan of 2.\r\n         * @return {?}\r\n         */\r\n        function () {\r\n            /** @type {?} */\r\n            var lastRowMax = Math.max.apply(Math, this.tracker);\r\n            // if any of the tiles has a rowspan that pushes it beyond the total row count,\r\n            // add the difference to the rowcount\r\n            return lastRowMax > 1 ? this.rowCount + lastRowMax - 1 : this.rowCount;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Updates the tile positions.\r\n     * @param numColumns Amount of columns in the grid.\r\n     */\r\n    /**\r\n     * Updates the tile positions.\r\n     * @param {?} numColumns Amount of columns in the grid.\r\n     * @param {?} tiles\r\n     * @return {?}\r\n     */\r\n    TileCoordinator.prototype.update = /**\r\n     * Updates the tile positions.\r\n     * @param {?} numColumns Amount of columns in the grid.\r\n     * @param {?} tiles\r\n     * @return {?}\r\n     */\r\n    function (numColumns, tiles) {\r\n        var _this = this;\r\n        this.columnIndex = 0;\r\n        this.rowIndex = 0;\r\n        this.tracker = new Array(numColumns);\r\n        this.tracker.fill(0, 0, this.tracker.length);\r\n        this.positions = tiles.map((/**\r\n         * @param {?} tile\r\n         * @return {?}\r\n         */\r\n        function (tile) { return _this._trackTile(tile); }));\r\n    };\r\n    /** Calculates the row and col position of a tile. */\r\n    /**\r\n     * Calculates the row and col position of a tile.\r\n     * @private\r\n     * @param {?} tile\r\n     * @return {?}\r\n     */\r\n    TileCoordinator.prototype._trackTile = /**\r\n     * Calculates the row and col position of a tile.\r\n     * @private\r\n     * @param {?} tile\r\n     * @return {?}\r\n     */\r\n    function (tile) {\r\n        // Find a gap large enough for this tile.\r\n        /** @type {?} */\r\n        var gapStartIndex = this._findMatchingGap(tile.colspan);\r\n        // Place tile in the resulting gap.\r\n        this._markTilePosition(gapStartIndex, tile);\r\n        // The next time we look for a gap, the search will start at columnIndex, which should be\r\n        // immediately after the tile that has just been placed.\r\n        this.columnIndex = gapStartIndex + tile.colspan;\r\n        return new TilePosition(this.rowIndex, gapStartIndex);\r\n    };\r\n    /** Finds the next available space large enough to fit the tile. */\r\n    /**\r\n     * Finds the next available space large enough to fit the tile.\r\n     * @private\r\n     * @param {?} tileCols\r\n     * @return {?}\r\n     */\r\n    TileCoordinator.prototype._findMatchingGap = /**\r\n     * Finds the next available space large enough to fit the tile.\r\n     * @private\r\n     * @param {?} tileCols\r\n     * @return {?}\r\n     */\r\n    function (tileCols) {\r\n        if (tileCols > this.tracker.length) {\r\n            throw Error(\"mat-grid-list: tile with colspan \" + tileCols + \" is wider than \" +\r\n                (\"grid with cols=\\\"\" + this.tracker.length + \"\\\".\"));\r\n        }\r\n        // Start index is inclusive, end index is exclusive.\r\n        /** @type {?} */\r\n        var gapStartIndex = -1;\r\n        /** @type {?} */\r\n        var gapEndIndex = -1;\r\n        // Look for a gap large enough to fit the given tile. Empty spaces are marked with a zero.\r\n        do {\r\n            // If we've reached the end of the row, go to the next row.\r\n            if (this.columnIndex + tileCols > this.tracker.length) {\r\n                this._nextRow();\r\n                gapStartIndex = this.tracker.indexOf(0, this.columnIndex);\r\n                gapEndIndex = this._findGapEndIndex(gapStartIndex);\r\n                continue;\r\n            }\r\n            gapStartIndex = this.tracker.indexOf(0, this.columnIndex);\r\n            // If there are no more empty spaces in this row at all, move on to the next row.\r\n            if (gapStartIndex == -1) {\r\n                this._nextRow();\r\n                gapStartIndex = this.tracker.indexOf(0, this.columnIndex);\r\n                gapEndIndex = this._findGapEndIndex(gapStartIndex);\r\n                continue;\r\n            }\r\n            gapEndIndex = this._findGapEndIndex(gapStartIndex);\r\n            // If a gap large enough isn't found, we want to start looking immediately after the current\r\n            // gap on the next iteration.\r\n            this.columnIndex = gapStartIndex + 1;\r\n            // Continue iterating until we find a gap wide enough for this tile. Since gapEndIndex is\r\n            // exclusive, gapEndIndex is 0 means we didn't find a gap and should continue.\r\n        } while ((gapEndIndex - gapStartIndex < tileCols) || (gapEndIndex == 0));\r\n        // If we still didn't manage to find a gap, ensure that the index is\r\n        // at least zero so the tile doesn't get pulled out of the grid.\r\n        return Math.max(gapStartIndex, 0);\r\n    };\r\n    /** Move \"down\" to the next row. */\r\n    /**\r\n     * Move \"down\" to the next row.\r\n     * @private\r\n     * @return {?}\r\n     */\r\n    TileCoordinator.prototype._nextRow = /**\r\n     * Move \"down\" to the next row.\r\n     * @private\r\n     * @return {?}\r\n     */\r\n    function () {\r\n        this.columnIndex = 0;\r\n        this.rowIndex++;\r\n        // Decrement all spaces by one to reflect moving down one row.\r\n        for (var i = 0; i < this.tracker.length; i++) {\r\n            this.tracker[i] = Math.max(0, this.tracker[i] - 1);\r\n        }\r\n    };\r\n    /**\r\n     * Finds the end index (exclusive) of a gap given the index from which to start looking.\r\n     * The gap ends when a non-zero value is found.\r\n     */\r\n    /**\r\n     * Finds the end index (exclusive) of a gap given the index from which to start looking.\r\n     * The gap ends when a non-zero value is found.\r\n     * @private\r\n     * @param {?} gapStartIndex\r\n     * @return {?}\r\n     */\r\n    TileCoordinator.prototype._findGapEndIndex = /**\r\n     * Finds the end index (exclusive) of a gap given the index from which to start looking.\r\n     * The gap ends when a non-zero value is found.\r\n     * @private\r\n     * @param {?} gapStartIndex\r\n     * @return {?}\r\n     */\r\n    function (gapStartIndex) {\r\n        for (var i = gapStartIndex + 1; i < this.tracker.length; i++) {\r\n            if (this.tracker[i] != 0) {\r\n                return i;\r\n            }\r\n        }\r\n        // The gap ends with the end of the row.\r\n        return this.tracker.length;\r\n    };\r\n    /** Update the tile tracker to account for the given tile in the given space. */\r\n    /**\r\n     * Update the tile tracker to account for the given tile in the given space.\r\n     * @private\r\n     * @param {?} start\r\n     * @param {?} tile\r\n     * @return {?}\r\n     */\r\n    TileCoordinator.prototype._markTilePosition = /**\r\n     * Update the tile tracker to account for the given tile in the given space.\r\n     * @private\r\n     * @param {?} start\r\n     * @param {?} tile\r\n     * @return {?}\r\n     */\r\n    function (start, tile) {\r\n        for (var i = 0; i < tile.colspan; i++) {\r\n            this.tracker[start + i] = tile.rowspan;\r\n        }\r\n    };\r\n    return TileCoordinator;\r\n}());\r\n/**\r\n * Simple data structure for tile position (row, col).\r\n * \\@docs-private\r\n */\r\nvar /**\r\n * Simple data structure for tile position (row, col).\r\n * \\@docs-private\r\n */\r\nTilePosition = /** @class */ (function () {\r\n    function TilePosition(row, col) {\r\n        this.row = row;\r\n        this.col = col;\r\n    }\r\n    return TilePosition;\r\n}());\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n\r\n/**\r\n * RegExp that can be used to check whether a value will\r\n * be allowed inside a CSS `calc()` expression.\r\n * @type {?}\r\n */\r\nvar cssCalcAllowedValue = /^-?\\d+((\\.\\d+)?[A-Za-z%$]?)+$/;\r\n/**\r\n * Sets the style properties for an individual tile, given the position calculated by the\r\n * Tile Coordinator.\r\n * \\@docs-private\r\n * @abstract\r\n */\r\nvar /**\r\n * Sets the style properties for an individual tile, given the position calculated by the\r\n * Tile Coordinator.\r\n * \\@docs-private\r\n * @abstract\r\n */\r\nTileStyler = /** @class */ (function () {\r\n    function TileStyler() {\r\n        this._rows = 0;\r\n        this._rowspan = 0;\r\n    }\r\n    /**\r\n     * Adds grid-list layout info once it is available. Cannot be processed in the constructor\r\n     * because these properties haven't been calculated by that point.\r\n     *\r\n     * @param gutterSize Size of the grid's gutter.\r\n     * @param tracker Instance of the TileCoordinator.\r\n     * @param cols Amount of columns in the grid.\r\n     * @param direction Layout direction of the grid.\r\n     */\r\n    /**\r\n     * Adds grid-list layout info once it is available. Cannot be processed in the constructor\r\n     * because these properties haven't been calculated by that point.\r\n     *\r\n     * @param {?} gutterSize Size of the grid's gutter.\r\n     * @param {?} tracker Instance of the TileCoordinator.\r\n     * @param {?} cols Amount of columns in the grid.\r\n     * @param {?} direction Layout direction of the grid.\r\n     * @return {?}\r\n     */\r\n    TileStyler.prototype.init = /**\r\n     * Adds grid-list layout info once it is available. Cannot be processed in the constructor\r\n     * because these properties haven't been calculated by that point.\r\n     *\r\n     * @param {?} gutterSize Size of the grid's gutter.\r\n     * @param {?} tracker Instance of the TileCoordinator.\r\n     * @param {?} cols Amount of columns in the grid.\r\n     * @param {?} direction Layout direction of the grid.\r\n     * @return {?}\r\n     */\r\n    function (gutterSize, tracker, cols, direction) {\r\n        this._gutterSize = normalizeUnits(gutterSize);\r\n        this._rows = tracker.rowCount;\r\n        this._rowspan = tracker.rowspan;\r\n        this._cols = cols;\r\n        this._direction = direction;\r\n    };\r\n    /**\r\n     * Computes the amount of space a single 1x1 tile would take up (width or height).\r\n     * Used as a basis for other calculations.\r\n     * @param sizePercent Percent of the total grid-list space that one 1x1 tile would take up.\r\n     * @param gutterFraction Fraction of the gutter size taken up by one 1x1 tile.\r\n     * @return The size of a 1x1 tile as an expression that can be evaluated via CSS calc().\r\n     */\r\n    /**\r\n     * Computes the amount of space a single 1x1 tile would take up (width or height).\r\n     * Used as a basis for other calculations.\r\n     * @param {?} sizePercent Percent of the total grid-list space that one 1x1 tile would take up.\r\n     * @param {?} gutterFraction Fraction of the gutter size taken up by one 1x1 tile.\r\n     * @return {?} The size of a 1x1 tile as an expression that can be evaluated via CSS calc().\r\n     */\r\n    TileStyler.prototype.getBaseTileSize = /**\r\n     * Computes the amount of space a single 1x1 tile would take up (width or height).\r\n     * Used as a basis for other calculations.\r\n     * @param {?} sizePercent Percent of the total grid-list space that one 1x1 tile would take up.\r\n     * @param {?} gutterFraction Fraction of the gutter size taken up by one 1x1 tile.\r\n     * @return {?} The size of a 1x1 tile as an expression that can be evaluated via CSS calc().\r\n     */\r\n    function (sizePercent, gutterFraction) {\r\n        // Take the base size percent (as would be if evenly dividing the size between cells),\r\n        // and then subtracting the size of one gutter. However, since there are no gutters on the\r\n        // edges, each tile only uses a fraction (gutterShare = numGutters / numCells) of the gutter\r\n        // size. (Imagine having one gutter per tile, and then breaking up the extra gutter on the\r\n        // edge evenly among the cells).\r\n        return \"(\" + sizePercent + \"% - (\" + this._gutterSize + \" * \" + gutterFraction + \"))\";\r\n    };\r\n    /**\r\n     * Gets The horizontal or vertical position of a tile, e.g., the 'top' or 'left' property value.\r\n     * @param offset Number of tiles that have already been rendered in the row/column.\r\n     * @param baseSize Base size of a 1x1 tile (as computed in getBaseTileSize).\r\n     * @return Position of the tile as a CSS calc() expression.\r\n     */\r\n    /**\r\n     * Gets The horizontal or vertical position of a tile, e.g., the 'top' or 'left' property value.\r\n     * @param {?} baseSize Base size of a 1x1 tile (as computed in getBaseTileSize).\r\n     * @param {?} offset Number of tiles that have already been rendered in the row/column.\r\n     * @return {?} Position of the tile as a CSS calc() expression.\r\n     */\r\n    TileStyler.prototype.getTilePosition = /**\r\n     * Gets The horizontal or vertical position of a tile, e.g., the 'top' or 'left' property value.\r\n     * @param {?} baseSize Base size of a 1x1 tile (as computed in getBaseTileSize).\r\n     * @param {?} offset Number of tiles that have already been rendered in the row/column.\r\n     * @return {?} Position of the tile as a CSS calc() expression.\r\n     */\r\n    function (baseSize, offset) {\r\n        // The position comes the size of a 1x1 tile plus gutter for each previous tile in the\r\n        // row/column (offset).\r\n        return offset === 0 ? '0' : calc(\"(\" + baseSize + \" + \" + this._gutterSize + \") * \" + offset);\r\n    };\r\n    /**\r\n     * Gets the actual size of a tile, e.g., width or height, taking rowspan or colspan into account.\r\n     * @param baseSize Base size of a 1x1 tile (as computed in getBaseTileSize).\r\n     * @param span The tile's rowspan or colspan.\r\n     * @return Size of the tile as a CSS calc() expression.\r\n     */\r\n    /**\r\n     * Gets the actual size of a tile, e.g., width or height, taking rowspan or colspan into account.\r\n     * @param {?} baseSize Base size of a 1x1 tile (as computed in getBaseTileSize).\r\n     * @param {?} span The tile's rowspan or colspan.\r\n     * @return {?} Size of the tile as a CSS calc() expression.\r\n     */\r\n    TileStyler.prototype.getTileSize = /**\r\n     * Gets the actual size of a tile, e.g., width or height, taking rowspan or colspan into account.\r\n     * @param {?} baseSize Base size of a 1x1 tile (as computed in getBaseTileSize).\r\n     * @param {?} span The tile's rowspan or colspan.\r\n     * @return {?} Size of the tile as a CSS calc() expression.\r\n     */\r\n    function (baseSize, span) {\r\n        return \"(\" + baseSize + \" * \" + span + \") + (\" + (span - 1) + \" * \" + this._gutterSize + \")\";\r\n    };\r\n    /**\r\n     * Sets the style properties to be applied to a tile for the given row and column index.\r\n     * @param tile Tile to which to apply the styling.\r\n     * @param rowIndex Index of the tile's row.\r\n     * @param colIndex Index of the tile's column.\r\n     */\r\n    /**\r\n     * Sets the style properties to be applied to a tile for the given row and column index.\r\n     * @param {?} tile Tile to which to apply the styling.\r\n     * @param {?} rowIndex Index of the tile's row.\r\n     * @param {?} colIndex Index of the tile's column.\r\n     * @return {?}\r\n     */\r\n    TileStyler.prototype.setStyle = /**\r\n     * Sets the style properties to be applied to a tile for the given row and column index.\r\n     * @param {?} tile Tile to which to apply the styling.\r\n     * @param {?} rowIndex Index of the tile's row.\r\n     * @param {?} colIndex Index of the tile's column.\r\n     * @return {?}\r\n     */\r\n    function (tile, rowIndex, colIndex) {\r\n        // Percent of the available horizontal space that one column takes up.\r\n        /** @type {?} */\r\n        var percentWidthPerTile = 100 / this._cols;\r\n        // Fraction of the vertical gutter size that each column takes up.\r\n        // For example, if there are 5 columns, each column uses 4/5 = 0.8 times the gutter width.\r\n        /** @type {?} */\r\n        var gutterWidthFractionPerTile = (this._cols - 1) / this._cols;\r\n        this.setColStyles(tile, colIndex, percentWidthPerTile, gutterWidthFractionPerTile);\r\n        this.setRowStyles(tile, rowIndex, percentWidthPerTile, gutterWidthFractionPerTile);\r\n    };\r\n    /** Sets the horizontal placement of the tile in the list. */\r\n    /**\r\n     * Sets the horizontal placement of the tile in the list.\r\n     * @param {?} tile\r\n     * @param {?} colIndex\r\n     * @param {?} percentWidth\r\n     * @param {?} gutterWidth\r\n     * @return {?}\r\n     */\r\n    TileStyler.prototype.setColStyles = /**\r\n     * Sets the horizontal placement of the tile in the list.\r\n     * @param {?} tile\r\n     * @param {?} colIndex\r\n     * @param {?} percentWidth\r\n     * @param {?} gutterWidth\r\n     * @return {?}\r\n     */\r\n    function (tile, colIndex, percentWidth, gutterWidth) {\r\n        // Base horizontal size of a column.\r\n        /** @type {?} */\r\n        var baseTileWidth = this.getBaseTileSize(percentWidth, gutterWidth);\r\n        // The width and horizontal position of each tile is always calculated the same way, but the\r\n        // height and vertical position depends on the rowMode.\r\n        /** @type {?} */\r\n        var side = this._direction === 'rtl' ? 'right' : 'left';\r\n        tile._setStyle(side, this.getTilePosition(baseTileWidth, colIndex));\r\n        tile._setStyle('width', calc(this.getTileSize(baseTileWidth, tile.colspan)));\r\n    };\r\n    /**\r\n     * Calculates the total size taken up by gutters across one axis of a list.\r\n     */\r\n    /**\r\n     * Calculates the total size taken up by gutters across one axis of a list.\r\n     * @return {?}\r\n     */\r\n    TileStyler.prototype.getGutterSpan = /**\r\n     * Calculates the total size taken up by gutters across one axis of a list.\r\n     * @return {?}\r\n     */\r\n    function () {\r\n        return this._gutterSize + \" * (\" + this._rowspan + \" - 1)\";\r\n    };\r\n    /**\r\n     * Calculates the total size taken up by tiles across one axis of a list.\r\n     * @param tileHeight Height of the tile.\r\n     */\r\n    /**\r\n     * Calculates the total size taken up by tiles across one axis of a list.\r\n     * @param {?} tileHeight Height of the tile.\r\n     * @return {?}\r\n     */\r\n    TileStyler.prototype.getTileSpan = /**\r\n     * Calculates the total size taken up by tiles across one axis of a list.\r\n     * @param {?} tileHeight Height of the tile.\r\n     * @return {?}\r\n     */\r\n    function (tileHeight) {\r\n        return this._rowspan + \" * \" + this.getTileSize(tileHeight, 1);\r\n    };\r\n    /**\r\n     * Calculates the computed height and returns the correct style property to set.\r\n     * This method can be implemented by each type of TileStyler.\r\n     * @docs-private\r\n     */\r\n    /**\r\n     * Calculates the computed height and returns the correct style property to set.\r\n     * This method can be implemented by each type of TileStyler.\r\n     * \\@docs-private\r\n     * @return {?}\r\n     */\r\n    TileStyler.prototype.getComputedHeight = /**\r\n     * Calculates the computed height and returns the correct style property to set.\r\n     * This method can be implemented by each type of TileStyler.\r\n     * \\@docs-private\r\n     * @return {?}\r\n     */\r\n    function () { return null; };\r\n    return TileStyler;\r\n}());\r\n/**\r\n * This type of styler is instantiated when the user passes in a fixed row height.\r\n * Example `<mat-grid-list cols=\"3\" rowHeight=\"100px\">`\r\n * \\@docs-private\r\n */\r\nvar /**\r\n * This type of styler is instantiated when the user passes in a fixed row height.\r\n * Example `<mat-grid-list cols=\"3\" rowHeight=\"100px\">`\r\n * \\@docs-private\r\n */\r\nFixedTileStyler = /** @class */ (function (_super) {\r\n    __extends(FixedTileStyler, _super);\r\n    function FixedTileStyler(fixedRowHeight) {\r\n        var _this = _super.call(this) || this;\r\n        _this.fixedRowHeight = fixedRowHeight;\r\n        return _this;\r\n    }\r\n    /**\r\n     * @param {?} gutterSize\r\n     * @param {?} tracker\r\n     * @param {?} cols\r\n     * @param {?} direction\r\n     * @return {?}\r\n     */\r\n    FixedTileStyler.prototype.init = /**\r\n     * @param {?} gutterSize\r\n     * @param {?} tracker\r\n     * @param {?} cols\r\n     * @param {?} direction\r\n     * @return {?}\r\n     */\r\n    function (gutterSize, tracker, cols, direction) {\r\n        _super.prototype.init.call(this, gutterSize, tracker, cols, direction);\r\n        this.fixedRowHeight = normalizeUnits(this.fixedRowHeight);\r\n        if (!cssCalcAllowedValue.test(this.fixedRowHeight)) {\r\n            throw Error(\"Invalid value \\\"\" + this.fixedRowHeight + \"\\\" set as rowHeight.\");\r\n        }\r\n    };\r\n    /**\r\n     * @param {?} tile\r\n     * @param {?} rowIndex\r\n     * @return {?}\r\n     */\r\n    FixedTileStyler.prototype.setRowStyles = /**\r\n     * @param {?} tile\r\n     * @param {?} rowIndex\r\n     * @return {?}\r\n     */\r\n    function (tile, rowIndex) {\r\n        tile._setStyle('top', this.getTilePosition(this.fixedRowHeight, rowIndex));\r\n        tile._setStyle('height', calc(this.getTileSize(this.fixedRowHeight, tile.rowspan)));\r\n    };\r\n    /**\r\n     * @return {?}\r\n     */\r\n    FixedTileStyler.prototype.getComputedHeight = /**\r\n     * @return {?}\r\n     */\r\n    function () {\r\n        return [\r\n            'height', calc(this.getTileSpan(this.fixedRowHeight) + \" + \" + this.getGutterSpan())\r\n        ];\r\n    };\r\n    /**\r\n     * @param {?} list\r\n     * @return {?}\r\n     */\r\n    FixedTileStyler.prototype.reset = /**\r\n     * @param {?} list\r\n     * @return {?}\r\n     */\r\n    function (list) {\r\n        list._setListStyle(['height', null]);\r\n        if (list._tiles) {\r\n            list._tiles.forEach((/**\r\n             * @param {?} tile\r\n             * @return {?}\r\n             */\r\n            function (tile) {\r\n                tile._setStyle('top', null);\r\n                tile._setStyle('height', null);\r\n            }));\r\n        }\r\n    };\r\n    return FixedTileStyler;\r\n}(TileStyler));\r\n/**\r\n * This type of styler is instantiated when the user passes in a width:height ratio\r\n * for the row height.  Example `<mat-grid-list cols=\"3\" rowHeight=\"3:1\">`\r\n * \\@docs-private\r\n */\r\nvar /**\r\n * This type of styler is instantiated when the user passes in a width:height ratio\r\n * for the row height.  Example `<mat-grid-list cols=\"3\" rowHeight=\"3:1\">`\r\n * \\@docs-private\r\n */\r\nRatioTileStyler = /** @class */ (function (_super) {\r\n    __extends(RatioTileStyler, _super);\r\n    function RatioTileStyler(value) {\r\n        var _this = _super.call(this) || this;\r\n        _this._parseRatio(value);\r\n        return _this;\r\n    }\r\n    /**\r\n     * @param {?} tile\r\n     * @param {?} rowIndex\r\n     * @param {?} percentWidth\r\n     * @param {?} gutterWidth\r\n     * @return {?}\r\n     */\r\n    RatioTileStyler.prototype.setRowStyles = /**\r\n     * @param {?} tile\r\n     * @param {?} rowIndex\r\n     * @param {?} percentWidth\r\n     * @param {?} gutterWidth\r\n     * @return {?}\r\n     */\r\n    function (tile, rowIndex, percentWidth, gutterWidth) {\r\n        /** @type {?} */\r\n        var percentHeightPerTile = percentWidth / this.rowHeightRatio;\r\n        this.baseTileHeight = this.getBaseTileSize(percentHeightPerTile, gutterWidth);\r\n        // Use padding-top and margin-top to maintain the given aspect ratio, as\r\n        // a percentage-based value for these properties is applied versus the *width* of the\r\n        // containing block. See http://www.w3.org/TR/CSS2/box.html#margin-properties\r\n        tile._setStyle('marginTop', this.getTilePosition(this.baseTileHeight, rowIndex));\r\n        tile._setStyle('paddingTop', calc(this.getTileSize(this.baseTileHeight, tile.rowspan)));\r\n    };\r\n    /**\r\n     * @return {?}\r\n     */\r\n    RatioTileStyler.prototype.getComputedHeight = /**\r\n     * @return {?}\r\n     */\r\n    function () {\r\n        return [\r\n            'paddingBottom', calc(this.getTileSpan(this.baseTileHeight) + \" + \" + this.getGutterSpan())\r\n        ];\r\n    };\r\n    /**\r\n     * @param {?} list\r\n     * @return {?}\r\n     */\r\n    RatioTileStyler.prototype.reset = /**\r\n     * @param {?} list\r\n     * @return {?}\r\n     */\r\n    function (list) {\r\n        list._setListStyle(['paddingBottom', null]);\r\n        list._tiles.forEach((/**\r\n         * @param {?} tile\r\n         * @return {?}\r\n         */\r\n        function (tile) {\r\n            tile._setStyle('marginTop', null);\r\n            tile._setStyle('paddingTop', null);\r\n        }));\r\n    };\r\n    /**\r\n     * @private\r\n     * @param {?} value\r\n     * @return {?}\r\n     */\r\n    RatioTileStyler.prototype._parseRatio = /**\r\n     * @private\r\n     * @param {?} value\r\n     * @return {?}\r\n     */\r\n    function (value) {\r\n        /** @type {?} */\r\n        var ratioParts = value.split(':');\r\n        if (ratioParts.length !== 2) {\r\n            throw Error(\"mat-grid-list: invalid ratio given for row-height: \\\"\" + value + \"\\\"\");\r\n        }\r\n        this.rowHeightRatio = parseFloat(ratioParts[0]) / parseFloat(ratioParts[1]);\r\n    };\r\n    return RatioTileStyler;\r\n}(TileStyler));\r\n/**\r\n * This type of styler is instantiated when the user selects a \"fit\" row height mode.\r\n * In other words, the row height will reflect the total height of the container divided\r\n * by the number of rows.  Example `<mat-grid-list cols=\"3\" rowHeight=\"fit\">`\r\n *\r\n * \\@docs-private\r\n */\r\nvar /**\r\n * This type of styler is instantiated when the user selects a \"fit\" row height mode.\r\n * In other words, the row height will reflect the total height of the container divided\r\n * by the number of rows.  Example `<mat-grid-list cols=\"3\" rowHeight=\"fit\">`\r\n *\r\n * \\@docs-private\r\n */\r\nFitTileStyler = /** @class */ (function (_super) {\r\n    __extends(FitTileStyler, _super);\r\n    function FitTileStyler() {\r\n        return _super !== null && _super.apply(this, arguments) || this;\r\n    }\r\n    /**\r\n     * @param {?} tile\r\n     * @param {?} rowIndex\r\n     * @return {?}\r\n     */\r\n    FitTileStyler.prototype.setRowStyles = /**\r\n     * @param {?} tile\r\n     * @param {?} rowIndex\r\n     * @return {?}\r\n     */\r\n    function (tile, rowIndex) {\r\n        // Percent of the available vertical space that one row takes up.\r\n        /** @type {?} */\r\n        var percentHeightPerTile = 100 / this._rowspan;\r\n        // Fraction of the horizontal gutter size that each column takes up.\r\n        /** @type {?} */\r\n        var gutterHeightPerTile = (this._rows - 1) / this._rows;\r\n        // Base vertical size of a column.\r\n        /** @type {?} */\r\n        var baseTileHeight = this.getBaseTileSize(percentHeightPerTile, gutterHeightPerTile);\r\n        tile._setStyle('top', this.getTilePosition(baseTileHeight, rowIndex));\r\n        tile._setStyle('height', calc(this.getTileSize(baseTileHeight, tile.rowspan)));\r\n    };\r\n    /**\r\n     * @param {?} list\r\n     * @return {?}\r\n     */\r\n    FitTileStyler.prototype.reset = /**\r\n     * @param {?} list\r\n     * @return {?}\r\n     */\r\n    function (list) {\r\n        if (list._tiles) {\r\n            list._tiles.forEach((/**\r\n             * @param {?} tile\r\n             * @return {?}\r\n             */\r\n            function (tile) {\r\n                tile._setStyle('top', null);\r\n                tile._setStyle('height', null);\r\n            }));\r\n        }\r\n    };\r\n    return FitTileStyler;\r\n}(TileStyler));\r\n/**\r\n * Wraps a CSS string in a calc function\r\n * @param {?} exp\r\n * @return {?}\r\n */\r\nfunction calc(exp) {\r\n    return \"calc(\" + exp + \")\";\r\n}\r\n/**\r\n * Appends pixels to a CSS string if no units are given.\r\n * @param {?} value\r\n * @return {?}\r\n */\r\nfunction normalizeUnits(value) {\r\n    return value.match(/([A-Za-z%]+)$/) ? value : value + \"px\";\r\n}\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n// TODO(kara): Conditional (responsive) column count / row size.\r\n// TODO(kara): Re-layout on window resize / media change (debounced).\r\n// TODO(kara): gridTileHeader and gridTileFooter.\r\n/** @type {?} */\r\nvar MAT_FIT_MODE = 'fit';\r\nvar MatGridList = /** @class */ (function () {\r\n    function MatGridList(_element, _dir) {\r\n        this._element = _element;\r\n        this._dir = _dir;\r\n        /**\r\n         * The amount of space between tiles. This will be something like '5px' or '2em'.\r\n         */\r\n        this._gutter = '1px';\r\n    }\r\n    Object.defineProperty(MatGridList.prototype, \"cols\", {\r\n        /** Amount of columns in the grid list. */\r\n        get: /**\r\n         * Amount of columns in the grid list.\r\n         * @return {?}\r\n         */\r\n        function () { return this._cols; },\r\n        set: /**\r\n         * @param {?} value\r\n         * @return {?}\r\n         */\r\n        function (value) {\r\n            this._cols = Math.max(1, Math.round(coerceNumberProperty(value)));\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(MatGridList.prototype, \"gutterSize\", {\r\n        /** Size of the grid list's gutter in pixels. */\r\n        get: /**\r\n         * Size of the grid list's gutter in pixels.\r\n         * @return {?}\r\n         */\r\n        function () { return this._gutter; },\r\n        set: /**\r\n         * @param {?} value\r\n         * @return {?}\r\n         */\r\n        function (value) { this._gutter = \"\" + (value == null ? '' : value); },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(MatGridList.prototype, \"rowHeight\", {\r\n        /** Set internal representation of row height from the user-provided value. */\r\n        get: /**\r\n         * Set internal representation of row height from the user-provided value.\r\n         * @return {?}\r\n         */\r\n        function () { return this._rowHeight; },\r\n        set: /**\r\n         * @param {?} value\r\n         * @return {?}\r\n         */\r\n        function (value) {\r\n            /** @type {?} */\r\n            var newValue = \"\" + (value == null ? '' : value);\r\n            if (newValue !== this._rowHeight) {\r\n                this._rowHeight = newValue;\r\n                this._setTileStyler(this._rowHeight);\r\n            }\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * @return {?}\r\n     */\r\n    MatGridList.prototype.ngOnInit = /**\r\n     * @return {?}\r\n     */\r\n    function () {\r\n        this._checkCols();\r\n        this._checkRowHeight();\r\n    };\r\n    /**\r\n     * The layout calculation is fairly cheap if nothing changes, so there's little cost\r\n     * to run it frequently.\r\n     */\r\n    /**\r\n     * The layout calculation is fairly cheap if nothing changes, so there's little cost\r\n     * to run it frequently.\r\n     * @return {?}\r\n     */\r\n    MatGridList.prototype.ngAfterContentChecked = /**\r\n     * The layout calculation is fairly cheap if nothing changes, so there's little cost\r\n     * to run it frequently.\r\n     * @return {?}\r\n     */\r\n    function () {\r\n        this._layoutTiles();\r\n    };\r\n    /** Throw a friendly error if cols property is missing */\r\n    /**\r\n     * Throw a friendly error if cols property is missing\r\n     * @private\r\n     * @return {?}\r\n     */\r\n    MatGridList.prototype._checkCols = /**\r\n     * Throw a friendly error if cols property is missing\r\n     * @private\r\n     * @return {?}\r\n     */\r\n    function () {\r\n        if (!this.cols) {\r\n            throw Error(\"mat-grid-list: must pass in number of columns. \" +\r\n                \"Example: <mat-grid-list cols=\\\"3\\\">\");\r\n        }\r\n    };\r\n    /** Default to equal width:height if rowHeight property is missing */\r\n    /**\r\n     * Default to equal width:height if rowHeight property is missing\r\n     * @private\r\n     * @return {?}\r\n     */\r\n    MatGridList.prototype._checkRowHeight = /**\r\n     * Default to equal width:height if rowHeight property is missing\r\n     * @private\r\n     * @return {?}\r\n     */\r\n    function () {\r\n        if (!this._rowHeight) {\r\n            this._setTileStyler('1:1');\r\n        }\r\n    };\r\n    /** Creates correct Tile Styler subtype based on rowHeight passed in by user */\r\n    /**\r\n     * Creates correct Tile Styler subtype based on rowHeight passed in by user\r\n     * @private\r\n     * @param {?} rowHeight\r\n     * @return {?}\r\n     */\r\n    MatGridList.prototype._setTileStyler = /**\r\n     * Creates correct Tile Styler subtype based on rowHeight passed in by user\r\n     * @private\r\n     * @param {?} rowHeight\r\n     * @return {?}\r\n     */\r\n    function (rowHeight) {\r\n        if (this._tileStyler) {\r\n            this._tileStyler.reset(this);\r\n        }\r\n        if (rowHeight === MAT_FIT_MODE) {\r\n            this._tileStyler = new FitTileStyler();\r\n        }\r\n        else if (rowHeight && rowHeight.indexOf(':') > -1) {\r\n            this._tileStyler = new RatioTileStyler(rowHeight);\r\n        }\r\n        else {\r\n            this._tileStyler = new FixedTileStyler(rowHeight);\r\n        }\r\n    };\r\n    /** Computes and applies the size and position for all children grid tiles. */\r\n    /**\r\n     * Computes and applies the size and position for all children grid tiles.\r\n     * @private\r\n     * @return {?}\r\n     */\r\n    MatGridList.prototype._layoutTiles = /**\r\n     * Computes and applies the size and position for all children grid tiles.\r\n     * @private\r\n     * @return {?}\r\n     */\r\n    function () {\r\n        var _this = this;\r\n        if (!this._tileCoordinator) {\r\n            this._tileCoordinator = new TileCoordinator();\r\n        }\r\n        /** @type {?} */\r\n        var tracker = this._tileCoordinator;\r\n        /** @type {?} */\r\n        var tiles = this._tiles.filter((/**\r\n         * @param {?} tile\r\n         * @return {?}\r\n         */\r\n        function (tile) { return !tile._gridList || tile._gridList === _this; }));\r\n        /** @type {?} */\r\n        var direction = this._dir ? this._dir.value : 'ltr';\r\n        this._tileCoordinator.update(this.cols, tiles);\r\n        this._tileStyler.init(this.gutterSize, tracker, this.cols, direction);\r\n        tiles.forEach((/**\r\n         * @param {?} tile\r\n         * @param {?} index\r\n         * @return {?}\r\n         */\r\n        function (tile, index) {\r\n            /** @type {?} */\r\n            var pos = tracker.positions[index];\r\n            _this._tileStyler.setStyle(tile, pos.row, pos.col);\r\n        }));\r\n        this._setListStyle(this._tileStyler.getComputedHeight());\r\n    };\r\n    /** Sets style on the main grid-list element, given the style name and value. */\r\n    /**\r\n     * Sets style on the main grid-list element, given the style name and value.\r\n     * @param {?} style\r\n     * @return {?}\r\n     */\r\n    MatGridList.prototype._setListStyle = /**\r\n     * Sets style on the main grid-list element, given the style name and value.\r\n     * @param {?} style\r\n     * @return {?}\r\n     */\r\n    function (style) {\r\n        if (style) {\r\n            ((/** @type {?} */ (this._element.nativeElement.style)))[style[0]] = style[1];\r\n        }\r\n    };\r\n    MatGridList.decorators = [\r\n        { type: Component, args: [{selector: 'mat-grid-list',\r\n                    exportAs: 'matGridList',\r\n                    template: \"<div><ng-content></ng-content></div>\",\r\n                    styles: [\".mat-grid-list{display:block;position:relative}.mat-grid-tile{display:block;position:absolute;overflow:hidden}.mat-grid-tile .mat-figure{top:0;left:0;right:0;bottom:0;position:absolute;display:flex;align-items:center;justify-content:center;height:100%;padding:0;margin:0}.mat-grid-tile .mat-grid-tile-footer,.mat-grid-tile .mat-grid-tile-header{display:flex;align-items:center;height:48px;color:#fff;background:rgba(0,0,0,.38);overflow:hidden;padding:0 16px;position:absolute;left:0;right:0}.mat-grid-tile .mat-grid-tile-footer>*,.mat-grid-tile .mat-grid-tile-header>*{margin:0;padding:0;font-weight:400;font-size:inherit}.mat-grid-tile .mat-grid-tile-footer.mat-2-line,.mat-grid-tile .mat-grid-tile-header.mat-2-line{height:68px}.mat-grid-tile .mat-grid-list-text{display:flex;flex-direction:column;width:100%;box-sizing:border-box;overflow:hidden}.mat-grid-tile .mat-grid-list-text>*{margin:0;padding:0;font-weight:400;font-size:inherit}.mat-grid-tile .mat-grid-list-text:empty{display:none}.mat-grid-tile .mat-grid-tile-header{top:0}.mat-grid-tile .mat-grid-tile-footer{bottom:0}.mat-grid-tile .mat-grid-avatar{padding-right:16px}[dir=rtl] .mat-grid-tile .mat-grid-avatar{padding-right:0;padding-left:16px}.mat-grid-tile .mat-grid-avatar:empty{display:none}\"],\r\n                    host: {\r\n                        'class': 'mat-grid-list',\r\n                    },\r\n                    providers: [{\r\n                            provide: MAT_GRID_LIST,\r\n                            useExisting: MatGridList\r\n                        }],\r\n                    changeDetection: ChangeDetectionStrategy.OnPush,\r\n                    encapsulation: ViewEncapsulation.None,\r\n                },] },\r\n    ];\r\n    /** @nocollapse */\r\n    MatGridList.ctorParameters = function () { return [\r\n        { type: ElementRef },\r\n        { type: Directionality, decorators: [{ type: Optional }] }\r\n    ]; };\r\n    MatGridList.propDecorators = {\r\n        _tiles: [{ type: ContentChildren, args: [MatGridTile, { descendants: true },] }],\r\n        cols: [{ type: Input }],\r\n        gutterSize: [{ type: Input }],\r\n        rowHeight: [{ type: Input }]\r\n    };\r\n    return MatGridList;\r\n}());\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\nvar MatGridListModule = /** @class */ (function () {\r\n    function MatGridListModule() {\r\n    }\r\n    MatGridListModule.decorators = [\r\n        { type: NgModule, args: [{\r\n                    imports: [MatLineModule, MatCommonModule],\r\n                    exports: [\r\n                        MatGridList,\r\n                        MatGridTile,\r\n                        MatGridTileText,\r\n                        MatLineModule,\r\n                        MatCommonModule,\r\n                        MatGridTileHeaderCssMatStyler,\r\n                        MatGridTileFooterCssMatStyler,\r\n                        MatGridAvatarCssMatStyler\r\n                    ],\r\n                    declarations: [\r\n                        MatGridList,\r\n                        MatGridTile,\r\n                        MatGridTileText,\r\n                        MatGridTileHeaderCssMatStyler,\r\n                        MatGridTileFooterCssMatStyler,\r\n                        MatGridAvatarCssMatStyler\r\n                    ],\r\n                },] },\r\n    ];\r\n    return MatGridListModule;\r\n}());\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n\r\nexport { MatGridListModule, MatGridList, MatGridTile, MatGridTileText, MatGridAvatarCssMatStyler, MatGridTileHeaderCssMatStyler, MatGridTileFooterCssMatStyler, MAT_GRID_LIST as ɵa11 };\r\n\r\n"]}