{"version":3,"sources":["v:/jad-admin-go/mazat_admin_panel/node_modules/@angular/material/esm5/dialog.es5.js"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4BA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;MAqUM,AAwBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;cy5BA,AAGA;;;;;;;;;;;;;;;;;;;;;;;;;;;;ipBAUG;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;MAiEH,AAWA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;cAYA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;MAoCA,AAUA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4BASA;;;;;;;;KAQD;;;;;;;;;;0CAMC;;;;;;;;;KASD;;;;;;;;;;0CAMC;;;;;;;;;;;;;;;;;;;;;;;;;;;;KA4BD;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4BA8BC","file":"dialog.es5.js","sourcesContent":["/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nimport { animate, state, style, transition, trigger } from '@angular/animations';\r\nimport { __assign, __extends } from 'tslib';\r\nimport { Component, ElementRef, EventEmitter, Inject, Optional, ChangeDetectorRef, ViewChild, ViewEncapsulation, ChangeDetectionStrategy, Injectable, InjectionToken, Injector, SkipSelf, TemplateRef, Directive, Input, NgModule } from '@angular/core';\r\nimport { DOCUMENT, Location, CommonModule } from '@angular/common';\r\nimport { BasePortalOutlet, CdkPortalOutlet, ComponentPortal, PortalInjector, TemplatePortal, PortalModule } from '@angular/cdk/portal';\r\nimport { FocusTrapFactory } from '@angular/cdk/a11y';\r\nimport { ESCAPE, hasModifierKey } from '@angular/cdk/keycodes';\r\nimport { Subject, defer, of } from 'rxjs';\r\nimport { filter, take, startWith } from 'rxjs/operators';\r\nimport { Directionality } from '@angular/cdk/bidi';\r\nimport { Overlay, OverlayConfig, OverlayContainer, OverlayModule } from '@angular/cdk/overlay';\r\nimport { MatCommonModule } from '@angular/material/core';\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n/**\r\n * Configuration for opening a modal dialog with the MatDialog service.\r\n * @template D\r\n */\r\nvar  /**\r\n * Configuration for opening a modal dialog with the MatDialog service.\r\n * @template D\r\n */\r\nMatDialogConfig = /** @class */ (function () {\r\n    function MatDialogConfig() {\r\n        /**\r\n         * The ARIA role of the dialog element.\r\n         */\r\n        this.role = 'dialog';\r\n        /**\r\n         * Custom class for the overlay pane.\r\n         */\r\n        this.panelClass = '';\r\n        /**\r\n         * Whether the dialog has a backdrop.\r\n         */\r\n        this.hasBackdrop = true;\r\n        /**\r\n         * Custom class for the backdrop.\r\n         */\r\n        this.backdropClass = '';\r\n        /**\r\n         * Whether the user can use escape or clicking on the backdrop to close the modal.\r\n         */\r\n        this.disableClose = false;\r\n        /**\r\n         * Width of the dialog.\r\n         */\r\n        this.width = '';\r\n        /**\r\n         * Height of the dialog.\r\n         */\r\n        this.height = '';\r\n        /**\r\n         * Max-width of the dialog. If a number is provided, assumes pixel units. Defaults to 80vw.\r\n         */\r\n        this.maxWidth = '80vw';\r\n        /**\r\n         * Data being injected into the child component.\r\n         */\r\n        this.data = null;\r\n        /**\r\n         * ID of the element that describes the dialog.\r\n         */\r\n        this.ariaDescribedBy = null;\r\n        /**\r\n         * ID of the element that labels the dialog.\r\n         */\r\n        this.ariaLabelledBy = null;\r\n        /**\r\n         * Aria label to assign to the dialog element.\r\n         */\r\n        this.ariaLabel = null;\r\n        /**\r\n         * Whether the dialog should focus the first focusable element on open.\r\n         */\r\n        this.autoFocus = true;\r\n        /**\r\n         * Whether the dialog should restore focus to the\r\n         * previously-focused element, after it's closed.\r\n         */\r\n        this.restoreFocus = true;\r\n        /**\r\n         * Whether the dialog should close when the user goes backwards/forwards in history.\r\n         * Note that this usually doesn't include clicking on links (unless the user is using\r\n         * the `HashLocationStrategy`).\r\n         */\r\n        this.closeOnNavigation = true;\r\n        // TODO(jelbourn): add configuration for lifecycle hooks, ARIA labelling.\r\n    }\r\n    return MatDialogConfig;\r\n}());\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n/** @type {?} */\r\nvar animationBody = [\r\n    // Note: The `enter` animation transitions to `transform: none`, because for some reason\r\n    // specifying the transform explicitly, causes IE both to blur the dialog content and\r\n    // decimate the animation performance. Leaving it as `none` solves both issues.\r\n    state('void, exit', style({ opacity: 0, transform: 'scale(0.7)' })),\r\n    state('enter', style({ transform: 'none' })),\r\n    transition('* => enter', animate('150ms cubic-bezier(0, 0, 0.2, 1)', style({ transform: 'none', opacity: 1 }))),\r\n    transition('* => void, * => exit', animate('75ms cubic-bezier(0.4, 0.0, 0.2, 1)', style({ opacity: 0 }))),\r\n];\r\n/**\r\n * Animations used by MatDialog.\r\n * \\@docs-private\r\n * @type {?}\r\n */\r\nvar matDialogAnimations = {\r\n    /**\r\n     * Animation that is applied on the dialog container by defalt.\r\n     */\r\n    dialogContainer: trigger('dialogContainer', animationBody),\r\n    /**\r\n     * @deprecated \\@breaking-change 8.0.0 Use `matDialogAnimations.dialogContainer` instead.\r\n     */\r\n    slideDialog: trigger('slideDialog', animationBody)\r\n};\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n/**\r\n * Throws an exception for the case when a ComponentPortal is\r\n * attached to a DomPortalOutlet without an origin.\r\n * \\@docs-private\r\n * @return {?}\r\n */\r\nfunction throwMatDialogContentAlreadyAttachedError() {\r\n    throw Error('Attempting to attach dialog content after content is already attached');\r\n}\r\n/**\r\n * Internal component that wraps user-provided dialog content.\r\n * Animation is based on https://material.io/guidelines/motion/choreography.html.\r\n * \\@docs-private\r\n */\r\nvar MatDialogContainer = /** @class */ (function (_super) {\r\n    __extends(MatDialogContainer, _super);\r\n    function MatDialogContainer(_elementRef, _focusTrapFactory, _changeDetectorRef, _document, _config) {\r\n        var _this = _super.call(this) || this;\r\n        _this._elementRef = _elementRef;\r\n        _this._focusTrapFactory = _focusTrapFactory;\r\n        _this._changeDetectorRef = _changeDetectorRef;\r\n        _this._document = _document;\r\n        _this._config = _config;\r\n        /**\r\n         * Element that was focused before the dialog was opened. Save this to restore upon close.\r\n         */\r\n        _this._elementFocusedBeforeDialogWasOpened = null;\r\n        /**\r\n         * State of the dialog animation.\r\n         */\r\n        _this._state = 'enter';\r\n        /**\r\n         * Emits when an animation state changes.\r\n         */\r\n        _this._animationStateChanged = new EventEmitter();\r\n        _this._ariaLabelledBy = _config.ariaLabelledBy || null;\r\n        return _this;\r\n    }\r\n    /**\r\n     * Attach a ComponentPortal as content to this dialog container.\r\n     * @param portal Portal to be attached as the dialog content.\r\n     */\r\n    /**\r\n     * Attach a ComponentPortal as content to this dialog container.\r\n     * @template T\r\n     * @param {?} portal Portal to be attached as the dialog content.\r\n     * @return {?}\r\n     */\r\n    MatDialogContainer.prototype.attachComponentPortal = /**\r\n     * Attach a ComponentPortal as content to this dialog container.\r\n     * @template T\r\n     * @param {?} portal Portal to be attached as the dialog content.\r\n     * @return {?}\r\n     */\r\n    function (portal) {\r\n        if (this._portalOutlet.hasAttached()) {\r\n            throwMatDialogContentAlreadyAttachedError();\r\n        }\r\n        this._savePreviouslyFocusedElement();\r\n        return this._portalOutlet.attachComponentPortal(portal);\r\n    };\r\n    /**\r\n     * Attach a TemplatePortal as content to this dialog container.\r\n     * @param portal Portal to be attached as the dialog content.\r\n     */\r\n    /**\r\n     * Attach a TemplatePortal as content to this dialog container.\r\n     * @template C\r\n     * @param {?} portal Portal to be attached as the dialog content.\r\n     * @return {?}\r\n     */\r\n    MatDialogContainer.prototype.attachTemplatePortal = /**\r\n     * Attach a TemplatePortal as content to this dialog container.\r\n     * @template C\r\n     * @param {?} portal Portal to be attached as the dialog content.\r\n     * @return {?}\r\n     */\r\n    function (portal) {\r\n        if (this._portalOutlet.hasAttached()) {\r\n            throwMatDialogContentAlreadyAttachedError();\r\n        }\r\n        this._savePreviouslyFocusedElement();\r\n        return this._portalOutlet.attachTemplatePortal(portal);\r\n    };\r\n    /** Moves the focus inside the focus trap. */\r\n    /**\r\n     * Moves the focus inside the focus trap.\r\n     * @private\r\n     * @return {?}\r\n     */\r\n    MatDialogContainer.prototype._trapFocus = /**\r\n     * Moves the focus inside the focus trap.\r\n     * @private\r\n     * @return {?}\r\n     */\r\n    function () {\r\n        /** @type {?} */\r\n        var element = this._elementRef.nativeElement;\r\n        if (!this._focusTrap) {\r\n            this._focusTrap = this._focusTrapFactory.create(element);\r\n        }\r\n        // If we were to attempt to focus immediately, then the content of the dialog would not yet be\r\n        // ready in instances where change detection has to run first. To deal with this, we simply\r\n        // wait for the microtask queue to be empty.\r\n        if (this._config.autoFocus) {\r\n            this._focusTrap.focusInitialElementWhenReady();\r\n        }\r\n        else {\r\n            /** @type {?} */\r\n            var activeElement = this._document.activeElement;\r\n            // Otherwise ensure that focus is on the dialog container. It's possible that a different\r\n            // component tried to move focus while the open animation was running. See:\r\n            // https://github.com/angular/components/issues/16215. Note that we only want to do this\r\n            // if the focus isn't inside the dialog already, because it's possible that the consumer\r\n            // turned off `autoFocus` in order to move focus themselves.\r\n            if (activeElement !== element && !element.contains(activeElement)) {\r\n                element.focus();\r\n            }\r\n        }\r\n    };\r\n    /** Restores focus to the element that was focused before the dialog opened. */\r\n    /**\r\n     * Restores focus to the element that was focused before the dialog opened.\r\n     * @private\r\n     * @return {?}\r\n     */\r\n    MatDialogContainer.prototype._restoreFocus = /**\r\n     * Restores focus to the element that was focused before the dialog opened.\r\n     * @private\r\n     * @return {?}\r\n     */\r\n    function () {\r\n        /** @type {?} */\r\n        var toFocus = this._elementFocusedBeforeDialogWasOpened;\r\n        // We need the extra check, because IE can set the `activeElement` to null in some cases.\r\n        if (this._config.restoreFocus && toFocus && typeof toFocus.focus === 'function') {\r\n            toFocus.focus();\r\n        }\r\n        if (this._focusTrap) {\r\n            this._focusTrap.destroy();\r\n        }\r\n    };\r\n    /** Saves a reference to the element that was focused before the dialog was opened. */\r\n    /**\r\n     * Saves a reference to the element that was focused before the dialog was opened.\r\n     * @private\r\n     * @return {?}\r\n     */\r\n    MatDialogContainer.prototype._savePreviouslyFocusedElement = /**\r\n     * Saves a reference to the element that was focused before the dialog was opened.\r\n     * @private\r\n     * @return {?}\r\n     */\r\n    function () {\r\n        var _this = this;\r\n        if (this._document) {\r\n            this._elementFocusedBeforeDialogWasOpened = (/** @type {?} */ (this._document.activeElement));\r\n            // Note that there is no focus method when rendering on the server.\r\n            if (this._elementRef.nativeElement.focus) {\r\n                // Move focus onto the dialog immediately in order to prevent the user from accidentally\r\n                // opening multiple dialogs at the same time. Needs to be async, because the element\r\n                // may not be focusable immediately.\r\n                Promise.resolve().then((/**\r\n                 * @return {?}\r\n                 */\r\n                function () { return _this._elementRef.nativeElement.focus(); }));\r\n            }\r\n        }\r\n    };\r\n    /** Callback, invoked whenever an animation on the host completes. */\r\n    /**\r\n     * Callback, invoked whenever an animation on the host completes.\r\n     * @param {?} event\r\n     * @return {?}\r\n     */\r\n    MatDialogContainer.prototype._onAnimationDone = /**\r\n     * Callback, invoked whenever an animation on the host completes.\r\n     * @param {?} event\r\n     * @return {?}\r\n     */\r\n    function (event) {\r\n        if (event.toState === 'enter') {\r\n            this._trapFocus();\r\n        }\r\n        else if (event.toState === 'exit') {\r\n            this._restoreFocus();\r\n        }\r\n        this._animationStateChanged.emit(event);\r\n    };\r\n    /** Callback, invoked when an animation on the host starts. */\r\n    /**\r\n     * Callback, invoked when an animation on the host starts.\r\n     * @param {?} event\r\n     * @return {?}\r\n     */\r\n    MatDialogContainer.prototype._onAnimationStart = /**\r\n     * Callback, invoked when an animation on the host starts.\r\n     * @param {?} event\r\n     * @return {?}\r\n     */\r\n    function (event) {\r\n        this._animationStateChanged.emit(event);\r\n    };\r\n    /** Starts the dialog exit animation. */\r\n    /**\r\n     * Starts the dialog exit animation.\r\n     * @return {?}\r\n     */\r\n    MatDialogContainer.prototype._startExitAnimation = /**\r\n     * Starts the dialog exit animation.\r\n     * @return {?}\r\n     */\r\n    function () {\r\n        this._state = 'exit';\r\n        // Mark the container for check so it can react if the\r\n        // view container is using OnPush change detection.\r\n        this._changeDetectorRef.markForCheck();\r\n    };\r\n    MatDialogContainer.decorators = [\r\n        { type: Component, args: [{selector: 'mat-dialog-container',\r\n                    template: \"<ng-template cdkPortalOutlet></ng-template>\",\r\n                    styles: [\".mat-dialog-container{display:block;padding:24px;border-radius:4px;box-sizing:border-box;overflow:auto;outline:0;width:100%;height:100%;min-height:inherit;max-height:inherit}@media (-ms-high-contrast:active){.mat-dialog-container{outline:solid 1px}}.mat-dialog-content{display:block;margin:0 -24px;padding:0 24px;max-height:65vh;overflow:auto;-webkit-overflow-scrolling:touch}.mat-dialog-title{margin:0 0 20px;display:block}.mat-dialog-actions{padding:8px 0;display:flex;flex-wrap:wrap;min-height:52px;align-items:center;margin-bottom:-24px}.mat-dialog-actions[align=end]{justify-content:flex-end}.mat-dialog-actions[align=center]{justify-content:center}.mat-dialog-actions .mat-button-base+.mat-button-base{margin-left:8px}[dir=rtl] .mat-dialog-actions .mat-button-base+.mat-button-base{margin-left:0;margin-right:8px}\"],\r\n                    encapsulation: ViewEncapsulation.None,\r\n                    // Using OnPush for dialogs caused some G3 sync issues. Disabled until we can track them down.\r\n                    // tslint:disable-next-line:validate-decorators\r\n                    changeDetection: ChangeDetectionStrategy.Default,\r\n                    animations: [matDialogAnimations.dialogContainer],\r\n                    host: {\r\n                        'class': 'mat-dialog-container',\r\n                        'tabindex': '-1',\r\n                        'aria-modal': 'true',\r\n                        '[attr.id]': '_id',\r\n                        '[attr.role]': '_config.role',\r\n                        '[attr.aria-labelledby]': '_config.ariaLabel ? null : _ariaLabelledBy',\r\n                        '[attr.aria-label]': '_config.ariaLabel',\r\n                        '[attr.aria-describedby]': '_config.ariaDescribedBy || null',\r\n                        '[@dialogContainer]': '_state',\r\n                        '(@dialogContainer.start)': '_onAnimationStart($event)',\r\n                        '(@dialogContainer.done)': '_onAnimationDone($event)',\r\n                    },\r\n                },] },\r\n    ];\r\n    /** @nocollapse */\r\n    MatDialogContainer.ctorParameters = function () { return [\r\n        { type: ElementRef },\r\n        { type: FocusTrapFactory },\r\n        { type: ChangeDetectorRef },\r\n        { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [DOCUMENT,] }] },\r\n        { type: MatDialogConfig }\r\n    ]; };\r\n    MatDialogContainer.propDecorators = {\r\n        _portalOutlet: [{ type: ViewChild, args: [CdkPortalOutlet, { static: true },] }]\r\n    };\r\n    return MatDialogContainer;\r\n}(BasePortalOutlet));\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n// TODO(jelbourn): resizing\r\n// Counter for unique dialog ids.\r\n/** @type {?} */\r\nvar uniqueId = 0;\r\n/**\r\n * Reference to a dialog opened via the MatDialog service.\r\n * @template T, R\r\n */\r\nvar  /**\r\n * Reference to a dialog opened via the MatDialog service.\r\n * @template T, R\r\n */\r\nMatDialogRef = /** @class */ (function () {\r\n    function MatDialogRef(_overlayRef, _containerInstance, \r\n    // @breaking-change 8.0.0 `_location` parameter to be removed.\r\n    _location, id) {\r\n        var _this = this;\r\n        if (id === void 0) { id = \"mat-dialog-\" + uniqueId++; }\r\n        this._overlayRef = _overlayRef;\r\n        this._containerInstance = _containerInstance;\r\n        this.id = id;\r\n        /**\r\n         * Whether the user is allowed to close the dialog.\r\n         */\r\n        this.disableClose = this._containerInstance._config.disableClose;\r\n        /**\r\n         * Subject for notifying the user that the dialog has finished opening.\r\n         */\r\n        this._afterOpened = new Subject();\r\n        /**\r\n         * Subject for notifying the user that the dialog has finished closing.\r\n         */\r\n        this._afterClosed = new Subject();\r\n        /**\r\n         * Subject for notifying the user that the dialog has started closing.\r\n         */\r\n        this._beforeClosed = new Subject();\r\n        /**\r\n         * Current state of the dialog.\r\n         */\r\n        this._state = 0 /* OPEN */;\r\n        // Pass the id along to the container.\r\n        _containerInstance._id = id;\r\n        // Emit when opening animation completes\r\n        _containerInstance._animationStateChanged.pipe(filter((/**\r\n         * @param {?} event\r\n         * @return {?}\r\n         */\r\n        function (event) { return event.phaseName === 'done' && event.toState === 'enter'; })), take(1))\r\n            .subscribe((/**\r\n         * @return {?}\r\n         */\r\n        function () {\r\n            _this._afterOpened.next();\r\n            _this._afterOpened.complete();\r\n        }));\r\n        // Dispose overlay when closing animation is complete\r\n        _containerInstance._animationStateChanged.pipe(filter((/**\r\n         * @param {?} event\r\n         * @return {?}\r\n         */\r\n        function (event) { return event.phaseName === 'done' && event.toState === 'exit'; })), take(1)).subscribe((/**\r\n         * @return {?}\r\n         */\r\n        function () {\r\n            clearTimeout(_this._closeFallbackTimeout);\r\n            _this._overlayRef.dispose();\r\n        }));\r\n        _overlayRef.detachments().subscribe((/**\r\n         * @return {?}\r\n         */\r\n        function () {\r\n            _this._beforeClosed.next(_this._result);\r\n            _this._beforeClosed.complete();\r\n            _this._afterClosed.next(_this._result);\r\n            _this._afterClosed.complete();\r\n            _this.componentInstance = (/** @type {?} */ (null));\r\n            _this._overlayRef.dispose();\r\n        }));\r\n        _overlayRef.keydownEvents()\r\n            .pipe(filter((/**\r\n         * @param {?} event\r\n         * @return {?}\r\n         */\r\n        function (event) {\r\n            return event.keyCode === ESCAPE && !_this.disableClose && !hasModifierKey(event);\r\n        })))\r\n            .subscribe((/**\r\n         * @param {?} event\r\n         * @return {?}\r\n         */\r\n        function (event) {\r\n            event.preventDefault();\r\n            _this.close();\r\n        }));\r\n    }\r\n    /**\r\n     * Close the dialog.\r\n     * @param dialogResult Optional result to return to the dialog opener.\r\n     */\r\n    /**\r\n     * Close the dialog.\r\n     * @param {?=} dialogResult Optional result to return to the dialog opener.\r\n     * @return {?}\r\n     */\r\n    MatDialogRef.prototype.close = /**\r\n     * Close the dialog.\r\n     * @param {?=} dialogResult Optional result to return to the dialog opener.\r\n     * @return {?}\r\n     */\r\n    function (dialogResult) {\r\n        var _this = this;\r\n        this._result = dialogResult;\r\n        // Transition the backdrop in parallel to the dialog.\r\n        this._containerInstance._animationStateChanged.pipe(filter((/**\r\n         * @param {?} event\r\n         * @return {?}\r\n         */\r\n        function (event) { return event.phaseName === 'start'; })), take(1))\r\n            .subscribe((/**\r\n         * @param {?} event\r\n         * @return {?}\r\n         */\r\n        function (event) {\r\n            _this._beforeClosed.next(dialogResult);\r\n            _this._beforeClosed.complete();\r\n            _this._state = 2 /* CLOSED */;\r\n            _this._overlayRef.detachBackdrop();\r\n            // The logic that disposes of the overlay depends on the exit animation completing, however\r\n            // it isn't guaranteed if the parent view is destroyed while it's running. Add a fallback\r\n            // timeout which will clean everything up if the animation hasn't fired within the specified\r\n            // amount of time plus 100ms. We don't need to run this outside the NgZone, because for the\r\n            // vast majority of cases the timeout will have been cleared before it has the chance to fire.\r\n            _this._closeFallbackTimeout = setTimeout((/**\r\n             * @return {?}\r\n             */\r\n            function () {\r\n                _this._overlayRef.dispose();\r\n            }), event.totalTime + 100);\r\n        }));\r\n        this._containerInstance._startExitAnimation();\r\n        this._state = 1 /* CLOSING */;\r\n    };\r\n    /**\r\n     * Gets an observable that is notified when the dialog is finished opening.\r\n     */\r\n    /**\r\n     * Gets an observable that is notified when the dialog is finished opening.\r\n     * @return {?}\r\n     */\r\n    MatDialogRef.prototype.afterOpened = /**\r\n     * Gets an observable that is notified when the dialog is finished opening.\r\n     * @return {?}\r\n     */\r\n    function () {\r\n        return this._afterOpened.asObservable();\r\n    };\r\n    /**\r\n     * Gets an observable that is notified when the dialog is finished closing.\r\n     */\r\n    /**\r\n     * Gets an observable that is notified when the dialog is finished closing.\r\n     * @return {?}\r\n     */\r\n    MatDialogRef.prototype.afterClosed = /**\r\n     * Gets an observable that is notified when the dialog is finished closing.\r\n     * @return {?}\r\n     */\r\n    function () {\r\n        return this._afterClosed.asObservable();\r\n    };\r\n    /**\r\n     * Gets an observable that is notified when the dialog has started closing.\r\n     */\r\n    /**\r\n     * Gets an observable that is notified when the dialog has started closing.\r\n     * @return {?}\r\n     */\r\n    MatDialogRef.prototype.beforeClosed = /**\r\n     * Gets an observable that is notified when the dialog has started closing.\r\n     * @return {?}\r\n     */\r\n    function () {\r\n        return this._beforeClosed.asObservable();\r\n    };\r\n    /**\r\n     * Gets an observable that emits when the overlay's backdrop has been clicked.\r\n     */\r\n    /**\r\n     * Gets an observable that emits when the overlay's backdrop has been clicked.\r\n     * @return {?}\r\n     */\r\n    MatDialogRef.prototype.backdropClick = /**\r\n     * Gets an observable that emits when the overlay's backdrop has been clicked.\r\n     * @return {?}\r\n     */\r\n    function () {\r\n        return this._overlayRef.backdropClick();\r\n    };\r\n    /**\r\n     * Gets an observable that emits when keydown events are targeted on the overlay.\r\n     */\r\n    /**\r\n     * Gets an observable that emits when keydown events are targeted on the overlay.\r\n     * @return {?}\r\n     */\r\n    MatDialogRef.prototype.keydownEvents = /**\r\n     * Gets an observable that emits when keydown events are targeted on the overlay.\r\n     * @return {?}\r\n     */\r\n    function () {\r\n        return this._overlayRef.keydownEvents();\r\n    };\r\n    /**\r\n     * Updates the dialog's position.\r\n     * @param position New dialog position.\r\n     */\r\n    /**\r\n     * Updates the dialog's position.\r\n     * @template THIS\r\n     * @this {THIS}\r\n     * @param {?=} position New dialog position.\r\n     * @return {THIS}\r\n     */\r\n    MatDialogRef.prototype.updatePosition = /**\r\n     * Updates the dialog's position.\r\n     * @template THIS\r\n     * @this {THIS}\r\n     * @param {?=} position New dialog position.\r\n     * @return {THIS}\r\n     */\r\n    function (position) {\r\n        /** @type {?} */\r\n        var strategy = (/** @type {?} */ (this))._getPositionStrategy();\r\n        if (position && (position.left || position.right)) {\r\n            position.left ? strategy.left(position.left) : strategy.right(position.right);\r\n        }\r\n        else {\r\n            strategy.centerHorizontally();\r\n        }\r\n        if (position && (position.top || position.bottom)) {\r\n            position.top ? strategy.top(position.top) : strategy.bottom(position.bottom);\r\n        }\r\n        else {\r\n            strategy.centerVertically();\r\n        }\r\n        (/** @type {?} */ (this))._overlayRef.updatePosition();\r\n        return (/** @type {?} */ (this));\r\n    };\r\n    /**\r\n     * Updates the dialog's width and height.\r\n     * @param width New width of the dialog.\r\n     * @param height New height of the dialog.\r\n     */\r\n    /**\r\n     * Updates the dialog's width and height.\r\n     * @template THIS\r\n     * @this {THIS}\r\n     * @param {?=} width New width of the dialog.\r\n     * @param {?=} height New height of the dialog.\r\n     * @return {THIS}\r\n     */\r\n    MatDialogRef.prototype.updateSize = /**\r\n     * Updates the dialog's width and height.\r\n     * @template THIS\r\n     * @this {THIS}\r\n     * @param {?=} width New width of the dialog.\r\n     * @param {?=} height New height of the dialog.\r\n     * @return {THIS}\r\n     */\r\n    function (width, height) {\r\n        if (width === void 0) { width = ''; }\r\n        if (height === void 0) { height = ''; }\r\n        (/** @type {?} */ (this))._getPositionStrategy().width(width).height(height);\r\n        (/** @type {?} */ (this))._overlayRef.updatePosition();\r\n        return (/** @type {?} */ (this));\r\n    };\r\n    /** Add a CSS class or an array of classes to the overlay pane. */\r\n    /**\r\n     * Add a CSS class or an array of classes to the overlay pane.\r\n     * @template THIS\r\n     * @this {THIS}\r\n     * @param {?} classes\r\n     * @return {THIS}\r\n     */\r\n    MatDialogRef.prototype.addPanelClass = /**\r\n     * Add a CSS class or an array of classes to the overlay pane.\r\n     * @template THIS\r\n     * @this {THIS}\r\n     * @param {?} classes\r\n     * @return {THIS}\r\n     */\r\n    function (classes) {\r\n        (/** @type {?} */ (this))._overlayRef.addPanelClass(classes);\r\n        return (/** @type {?} */ (this));\r\n    };\r\n    /** Remove a CSS class or an array of classes from the overlay pane. */\r\n    /**\r\n     * Remove a CSS class or an array of classes from the overlay pane.\r\n     * @template THIS\r\n     * @this {THIS}\r\n     * @param {?} classes\r\n     * @return {THIS}\r\n     */\r\n    MatDialogRef.prototype.removePanelClass = /**\r\n     * Remove a CSS class or an array of classes from the overlay pane.\r\n     * @template THIS\r\n     * @this {THIS}\r\n     * @param {?} classes\r\n     * @return {THIS}\r\n     */\r\n    function (classes) {\r\n        (/** @type {?} */ (this))._overlayRef.removePanelClass(classes);\r\n        return (/** @type {?} */ (this));\r\n    };\r\n    /**\r\n     * Gets an observable that is notified when the dialog is finished opening.\r\n     * @deprecated Use `afterOpened` instead.\r\n     * @breaking-change 8.0.0\r\n     */\r\n    /**\r\n     * Gets an observable that is notified when the dialog is finished opening.\r\n     * @deprecated Use `afterOpened` instead.\r\n     * \\@breaking-change 8.0.0\r\n     * @return {?}\r\n     */\r\n    MatDialogRef.prototype.afterOpen = /**\r\n     * Gets an observable that is notified when the dialog is finished opening.\r\n     * @deprecated Use `afterOpened` instead.\r\n     * \\@breaking-change 8.0.0\r\n     * @return {?}\r\n     */\r\n    function () {\r\n        return this.afterOpened();\r\n    };\r\n    /**\r\n     * Gets an observable that is notified when the dialog has started closing.\r\n     * @deprecated Use `beforeClosed` instead.\r\n     * @breaking-change 8.0.0\r\n     */\r\n    /**\r\n     * Gets an observable that is notified when the dialog has started closing.\r\n     * @deprecated Use `beforeClosed` instead.\r\n     * \\@breaking-change 8.0.0\r\n     * @return {?}\r\n     */\r\n    MatDialogRef.prototype.beforeClose = /**\r\n     * Gets an observable that is notified when the dialog has started closing.\r\n     * @deprecated Use `beforeClosed` instead.\r\n     * \\@breaking-change 8.0.0\r\n     * @return {?}\r\n     */\r\n    function () {\r\n        return this.beforeClosed();\r\n    };\r\n    /** Gets the current state of the dialog's lifecycle. */\r\n    /**\r\n     * Gets the current state of the dialog's lifecycle.\r\n     * @return {?}\r\n     */\r\n    MatDialogRef.prototype.getState = /**\r\n     * Gets the current state of the dialog's lifecycle.\r\n     * @return {?}\r\n     */\r\n    function () {\r\n        return this._state;\r\n    };\r\n    /** Fetches the position strategy object from the overlay ref. */\r\n    /**\r\n     * Fetches the position strategy object from the overlay ref.\r\n     * @private\r\n     * @return {?}\r\n     */\r\n    MatDialogRef.prototype._getPositionStrategy = /**\r\n     * Fetches the position strategy object from the overlay ref.\r\n     * @private\r\n     * @return {?}\r\n     */\r\n    function () {\r\n        return (/** @type {?} */ (this._overlayRef.getConfig().positionStrategy));\r\n    };\r\n    return MatDialogRef;\r\n}());\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n/**\r\n * Injection token that can be used to access the data that was passed in to a dialog.\r\n * @type {?}\r\n */\r\nvar MAT_DIALOG_DATA = new InjectionToken('MatDialogData');\r\n/**\r\n * Injection token that can be used to specify default dialog options.\r\n * @type {?}\r\n */\r\nvar MAT_DIALOG_DEFAULT_OPTIONS = new InjectionToken('mat-dialog-default-options');\r\n/**\r\n * Injection token that determines the scroll handling while the dialog is open.\r\n * @type {?}\r\n */\r\nvar MAT_DIALOG_SCROLL_STRATEGY = new InjectionToken('mat-dialog-scroll-strategy');\r\n/**\r\n * \\@docs-private\r\n * @param {?} overlay\r\n * @return {?}\r\n */\r\nfunction MAT_DIALOG_SCROLL_STRATEGY_FACTORY(overlay) {\r\n    return (/**\r\n     * @return {?}\r\n     */\r\n    function () { return overlay.scrollStrategies.block(); });\r\n}\r\n/**\r\n * \\@docs-private\r\n * @param {?} overlay\r\n * @return {?}\r\n */\r\nfunction MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay) {\r\n    return (/**\r\n     * @return {?}\r\n     */\r\n    function () { return overlay.scrollStrategies.block(); });\r\n}\r\n/**\r\n * \\@docs-private\r\n * @type {?}\r\n */\r\nvar MAT_DIALOG_SCROLL_STRATEGY_PROVIDER = {\r\n    provide: MAT_DIALOG_SCROLL_STRATEGY,\r\n    deps: [Overlay],\r\n    useFactory: MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY,\r\n};\r\n/**\r\n * Service to open Material Design modal dialogs.\r\n */\r\nvar MatDialog = /** @class */ (function () {\r\n    function MatDialog(_overlay, _injector, _location, _defaultOptions, scrollStrategy, _parentDialog, _overlayContainer) {\r\n        var _this = this;\r\n        this._overlay = _overlay;\r\n        this._injector = _injector;\r\n        this._location = _location;\r\n        this._defaultOptions = _defaultOptions;\r\n        this._parentDialog = _parentDialog;\r\n        this._overlayContainer = _overlayContainer;\r\n        this._openDialogsAtThisLevel = [];\r\n        this._afterAllClosedAtThisLevel = new Subject();\r\n        this._afterOpenedAtThisLevel = new Subject();\r\n        this._ariaHiddenElements = new Map();\r\n        // TODO (jelbourn): tighten the typing right-hand side of this expression.\r\n        /**\r\n         * Stream that emits when all open dialog have finished closing.\r\n         * Will emit on subscribe if there are no open dialogs to begin with.\r\n         */\r\n        this.afterAllClosed = (/** @type {?} */ (defer((/**\r\n         * @return {?}\r\n         */\r\n        function () { return _this.openDialogs.length ?\r\n            _this._afterAllClosed :\r\n            _this._afterAllClosed.pipe(startWith(undefined)); }))));\r\n        this._scrollStrategy = scrollStrategy;\r\n    }\r\n    Object.defineProperty(MatDialog.prototype, \"openDialogs\", {\r\n        /** Keeps track of the currently-open dialogs. */\r\n        get: /**\r\n         * Keeps track of the currently-open dialogs.\r\n         * @return {?}\r\n         */\r\n        function () {\r\n            return this._parentDialog ? this._parentDialog.openDialogs : this._openDialogsAtThisLevel;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(MatDialog.prototype, \"afterOpened\", {\r\n        /** Stream that emits when a dialog has been opened. */\r\n        get: /**\r\n         * Stream that emits when a dialog has been opened.\r\n         * @return {?}\r\n         */\r\n        function () {\r\n            return this._parentDialog ? this._parentDialog.afterOpened : this._afterOpenedAtThisLevel;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(MatDialog.prototype, \"afterOpen\", {\r\n        /**\r\n         * Stream that emits when a dialog has been opened.\r\n         * @deprecated Use `afterOpened` instead.\r\n         * @breaking-change 8.0.0\r\n         */\r\n        get: /**\r\n         * Stream that emits when a dialog has been opened.\r\n         * @deprecated Use `afterOpened` instead.\r\n         * \\@breaking-change 8.0.0\r\n         * @return {?}\r\n         */\r\n        function () {\r\n            return this.afterOpened;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(MatDialog.prototype, \"_afterAllClosed\", {\r\n        get: /**\r\n         * @return {?}\r\n         */\r\n        function () {\r\n            /** @type {?} */\r\n            var parent = this._parentDialog;\r\n            return parent ? parent._afterAllClosed : this._afterAllClosedAtThisLevel;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Opens a modal dialog containing the given component.\r\n     * @param componentOrTemplateRef Type of the component to load into the dialog,\r\n     *     or a TemplateRef to instantiate as the dialog content.\r\n     * @param config Extra configuration options.\r\n     * @returns Reference to the newly-opened dialog.\r\n     */\r\n    /**\r\n     * Opens a modal dialog containing the given component.\r\n     * @template T, D, R\r\n     * @param {?} componentOrTemplateRef Type of the component to load into the dialog,\r\n     *     or a TemplateRef to instantiate as the dialog content.\r\n     * @param {?=} config Extra configuration options.\r\n     * @return {?} Reference to the newly-opened dialog.\r\n     */\r\n    MatDialog.prototype.open = /**\r\n     * Opens a modal dialog containing the given component.\r\n     * @template T, D, R\r\n     * @param {?} componentOrTemplateRef Type of the component to load into the dialog,\r\n     *     or a TemplateRef to instantiate as the dialog content.\r\n     * @param {?=} config Extra configuration options.\r\n     * @return {?} Reference to the newly-opened dialog.\r\n     */\r\n    function (componentOrTemplateRef, config) {\r\n        var _this = this;\r\n        config = _applyConfigDefaults(config, this._defaultOptions || new MatDialogConfig());\r\n        if (config.id && this.getDialogById(config.id)) {\r\n            throw Error(\"Dialog with id \\\"\" + config.id + \"\\\" exists already. The dialog id must be unique.\");\r\n        }\r\n        /** @type {?} */\r\n        var overlayRef = this._createOverlay(config);\r\n        /** @type {?} */\r\n        var dialogContainer = this._attachDialogContainer(overlayRef, config);\r\n        /** @type {?} */\r\n        var dialogRef = this._attachDialogContent(componentOrTemplateRef, dialogContainer, overlayRef, config);\r\n        // If this is the first dialog that we're opening, hide all the non-overlay content.\r\n        if (!this.openDialogs.length) {\r\n            this._hideNonDialogContentFromAssistiveTechnology();\r\n        }\r\n        this.openDialogs.push(dialogRef);\r\n        dialogRef.afterClosed().subscribe((/**\r\n         * @return {?}\r\n         */\r\n        function () { return _this._removeOpenDialog(dialogRef); }));\r\n        this.afterOpened.next(dialogRef);\r\n        return dialogRef;\r\n    };\r\n    /**\r\n     * Closes all of the currently-open dialogs.\r\n     */\r\n    /**\r\n     * Closes all of the currently-open dialogs.\r\n     * @return {?}\r\n     */\r\n    MatDialog.prototype.closeAll = /**\r\n     * Closes all of the currently-open dialogs.\r\n     * @return {?}\r\n     */\r\n    function () {\r\n        this._closeDialogs(this.openDialogs);\r\n    };\r\n    /**\r\n     * Finds an open dialog by its id.\r\n     * @param id ID to use when looking up the dialog.\r\n     */\r\n    /**\r\n     * Finds an open dialog by its id.\r\n     * @param {?} id ID to use when looking up the dialog.\r\n     * @return {?}\r\n     */\r\n    MatDialog.prototype.getDialogById = /**\r\n     * Finds an open dialog by its id.\r\n     * @param {?} id ID to use when looking up the dialog.\r\n     * @return {?}\r\n     */\r\n    function (id) {\r\n        return this.openDialogs.find((/**\r\n         * @param {?} dialog\r\n         * @return {?}\r\n         */\r\n        function (dialog) { return dialog.id === id; }));\r\n    };\r\n    /**\r\n     * @return {?}\r\n     */\r\n    MatDialog.prototype.ngOnDestroy = /**\r\n     * @return {?}\r\n     */\r\n    function () {\r\n        // Only close the dialogs at this level on destroy\r\n        // since the parent service may still be active.\r\n        this._closeDialogs(this._openDialogsAtThisLevel);\r\n        this._afterAllClosedAtThisLevel.complete();\r\n        this._afterOpenedAtThisLevel.complete();\r\n    };\r\n    /**\r\n     * Creates the overlay into which the dialog will be loaded.\r\n     * @param config The dialog configuration.\r\n     * @returns A promise resolving to the OverlayRef for the created overlay.\r\n     */\r\n    /**\r\n     * Creates the overlay into which the dialog will be loaded.\r\n     * @private\r\n     * @param {?} config The dialog configuration.\r\n     * @return {?} A promise resolving to the OverlayRef for the created overlay.\r\n     */\r\n    MatDialog.prototype._createOverlay = /**\r\n     * Creates the overlay into which the dialog will be loaded.\r\n     * @private\r\n     * @param {?} config The dialog configuration.\r\n     * @return {?} A promise resolving to the OverlayRef for the created overlay.\r\n     */\r\n    function (config) {\r\n        /** @type {?} */\r\n        var overlayConfig = this._getOverlayConfig(config);\r\n        return this._overlay.create(overlayConfig);\r\n    };\r\n    /**\r\n     * Creates an overlay config from a dialog config.\r\n     * @param dialogConfig The dialog configuration.\r\n     * @returns The overlay configuration.\r\n     */\r\n    /**\r\n     * Creates an overlay config from a dialog config.\r\n     * @private\r\n     * @param {?} dialogConfig The dialog configuration.\r\n     * @return {?} The overlay configuration.\r\n     */\r\n    MatDialog.prototype._getOverlayConfig = /**\r\n     * Creates an overlay config from a dialog config.\r\n     * @private\r\n     * @param {?} dialogConfig The dialog configuration.\r\n     * @return {?} The overlay configuration.\r\n     */\r\n    function (dialogConfig) {\r\n        /** @type {?} */\r\n        var state$$1 = new OverlayConfig({\r\n            positionStrategy: this._overlay.position().global(),\r\n            scrollStrategy: dialogConfig.scrollStrategy || this._scrollStrategy(),\r\n            panelClass: dialogConfig.panelClass,\r\n            hasBackdrop: dialogConfig.hasBackdrop,\r\n            direction: dialogConfig.direction,\r\n            minWidth: dialogConfig.minWidth,\r\n            minHeight: dialogConfig.minHeight,\r\n            maxWidth: dialogConfig.maxWidth,\r\n            maxHeight: dialogConfig.maxHeight,\r\n            disposeOnNavigation: dialogConfig.closeOnNavigation\r\n        });\r\n        if (dialogConfig.backdropClass) {\r\n            state$$1.backdropClass = dialogConfig.backdropClass;\r\n        }\r\n        return state$$1;\r\n    };\r\n    /**\r\n     * Attaches an MatDialogContainer to a dialog's already-created overlay.\r\n     * @param overlay Reference to the dialog's underlying overlay.\r\n     * @param config The dialog configuration.\r\n     * @returns A promise resolving to a ComponentRef for the attached container.\r\n     */\r\n    /**\r\n     * Attaches an MatDialogContainer to a dialog's already-created overlay.\r\n     * @private\r\n     * @param {?} overlay Reference to the dialog's underlying overlay.\r\n     * @param {?} config The dialog configuration.\r\n     * @return {?} A promise resolving to a ComponentRef for the attached container.\r\n     */\r\n    MatDialog.prototype._attachDialogContainer = /**\r\n     * Attaches an MatDialogContainer to a dialog's already-created overlay.\r\n     * @private\r\n     * @param {?} overlay Reference to the dialog's underlying overlay.\r\n     * @param {?} config The dialog configuration.\r\n     * @return {?} A promise resolving to a ComponentRef for the attached container.\r\n     */\r\n    function (overlay, config) {\r\n        /** @type {?} */\r\n        var userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\r\n        /** @type {?} */\r\n        var injector = new PortalInjector(userInjector || this._injector, new WeakMap([\r\n            [MatDialogConfig, config]\r\n        ]));\r\n        /** @type {?} */\r\n        var containerPortal = new ComponentPortal(MatDialogContainer, config.viewContainerRef, injector, config.componentFactoryResolver);\r\n        /** @type {?} */\r\n        var containerRef = overlay.attach(containerPortal);\r\n        return containerRef.instance;\r\n    };\r\n    /**\r\n     * Attaches the user-provided component to the already-created MatDialogContainer.\r\n     * @param componentOrTemplateRef The type of component being loaded into the dialog,\r\n     *     or a TemplateRef to instantiate as the content.\r\n     * @param dialogContainer Reference to the wrapping MatDialogContainer.\r\n     * @param overlayRef Reference to the overlay in which the dialog resides.\r\n     * @param config The dialog configuration.\r\n     * @returns A promise resolving to the MatDialogRef that should be returned to the user.\r\n     */\r\n    /**\r\n     * Attaches the user-provided component to the already-created MatDialogContainer.\r\n     * @private\r\n     * @template T, R\r\n     * @param {?} componentOrTemplateRef The type of component being loaded into the dialog,\r\n     *     or a TemplateRef to instantiate as the content.\r\n     * @param {?} dialogContainer Reference to the wrapping MatDialogContainer.\r\n     * @param {?} overlayRef Reference to the overlay in which the dialog resides.\r\n     * @param {?} config The dialog configuration.\r\n     * @return {?} A promise resolving to the MatDialogRef that should be returned to the user.\r\n     */\r\n    MatDialog.prototype._attachDialogContent = /**\r\n     * Attaches the user-provided component to the already-created MatDialogContainer.\r\n     * @private\r\n     * @template T, R\r\n     * @param {?} componentOrTemplateRef The type of component being loaded into the dialog,\r\n     *     or a TemplateRef to instantiate as the content.\r\n     * @param {?} dialogContainer Reference to the wrapping MatDialogContainer.\r\n     * @param {?} overlayRef Reference to the overlay in which the dialog resides.\r\n     * @param {?} config The dialog configuration.\r\n     * @return {?} A promise resolving to the MatDialogRef that should be returned to the user.\r\n     */\r\n    function (componentOrTemplateRef, dialogContainer, overlayRef, config) {\r\n        // Create a reference to the dialog we're creating in order to give the user a handle\r\n        // to modify and close it.\r\n        /** @type {?} */\r\n        var dialogRef = new MatDialogRef(overlayRef, dialogContainer, this._location, config.id);\r\n        // When the dialog backdrop is clicked, we want to close it.\r\n        if (config.hasBackdrop) {\r\n            overlayRef.backdropClick().subscribe((/**\r\n             * @return {?}\r\n             */\r\n            function () {\r\n                if (!dialogRef.disableClose) {\r\n                    dialogRef.close();\r\n                }\r\n            }));\r\n        }\r\n        if (componentOrTemplateRef instanceof TemplateRef) {\r\n            dialogContainer.attachTemplatePortal(new TemplatePortal(componentOrTemplateRef, (/** @type {?} */ (null)), (/** @type {?} */ ({ $implicit: config.data, dialogRef: dialogRef }))));\r\n        }\r\n        else {\r\n            /** @type {?} */\r\n            var injector = this._createInjector(config, dialogRef, dialogContainer);\r\n            /** @type {?} */\r\n            var contentRef = dialogContainer.attachComponentPortal(new ComponentPortal(componentOrTemplateRef, undefined, injector));\r\n            dialogRef.componentInstance = contentRef.instance;\r\n        }\r\n        dialogRef\r\n            .updateSize(config.width, config.height)\r\n            .updatePosition(config.position);\r\n        return dialogRef;\r\n    };\r\n    /**\r\n     * Creates a custom injector to be used inside the dialog. This allows a component loaded inside\r\n     * of a dialog to close itself and, optionally, to return a value.\r\n     * @param config Config object that is used to construct the dialog.\r\n     * @param dialogRef Reference to the dialog.\r\n     * @param container Dialog container element that wraps all of the contents.\r\n     * @returns The custom injector that can be used inside the dialog.\r\n     */\r\n    /**\r\n     * Creates a custom injector to be used inside the dialog. This allows a component loaded inside\r\n     * of a dialog to close itself and, optionally, to return a value.\r\n     * @private\r\n     * @template T\r\n     * @param {?} config Config object that is used to construct the dialog.\r\n     * @param {?} dialogRef Reference to the dialog.\r\n     * @param {?} dialogContainer\r\n     * @return {?} The custom injector that can be used inside the dialog.\r\n     */\r\n    MatDialog.prototype._createInjector = /**\r\n     * Creates a custom injector to be used inside the dialog. This allows a component loaded inside\r\n     * of a dialog to close itself and, optionally, to return a value.\r\n     * @private\r\n     * @template T\r\n     * @param {?} config Config object that is used to construct the dialog.\r\n     * @param {?} dialogRef Reference to the dialog.\r\n     * @param {?} dialogContainer\r\n     * @return {?} The custom injector that can be used inside the dialog.\r\n     */\r\n    function (config, dialogRef, dialogContainer) {\r\n        /** @type {?} */\r\n        var userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\r\n        // The MatDialogContainer is injected in the portal as the MatDialogContainer and the dialog's\r\n        // content are created out of the same ViewContainerRef and as such, are siblings for injector\r\n        // purposes. To allow the hierarchy that is expected, the MatDialogContainer is explicitly\r\n        // added to the injection tokens.\r\n        /** @type {?} */\r\n        var injectionTokens = new WeakMap([\r\n            [MatDialogContainer, dialogContainer],\r\n            [MAT_DIALOG_DATA, config.data],\r\n            [MatDialogRef, dialogRef]\r\n        ]);\r\n        if (config.direction &&\r\n            (!userInjector || !userInjector.get(Directionality, null))) {\r\n            injectionTokens.set(Directionality, {\r\n                value: config.direction,\r\n                change: of()\r\n            });\r\n        }\r\n        return new PortalInjector(userInjector || this._injector, injectionTokens);\r\n    };\r\n    /**\r\n     * Removes a dialog from the array of open dialogs.\r\n     * @param dialogRef Dialog to be removed.\r\n     */\r\n    /**\r\n     * Removes a dialog from the array of open dialogs.\r\n     * @private\r\n     * @param {?} dialogRef Dialog to be removed.\r\n     * @return {?}\r\n     */\r\n    MatDialog.prototype._removeOpenDialog = /**\r\n     * Removes a dialog from the array of open dialogs.\r\n     * @private\r\n     * @param {?} dialogRef Dialog to be removed.\r\n     * @return {?}\r\n     */\r\n    function (dialogRef) {\r\n        /** @type {?} */\r\n        var index = this.openDialogs.indexOf(dialogRef);\r\n        if (index > -1) {\r\n            this.openDialogs.splice(index, 1);\r\n            // If all the dialogs were closed, remove/restore the `aria-hidden`\r\n            // to a the siblings and emit to the `afterAllClosed` stream.\r\n            if (!this.openDialogs.length) {\r\n                this._ariaHiddenElements.forEach((/**\r\n                 * @param {?} previousValue\r\n                 * @param {?} element\r\n                 * @return {?}\r\n                 */\r\n                function (previousValue, element) {\r\n                    if (previousValue) {\r\n                        element.setAttribute('aria-hidden', previousValue);\r\n                    }\r\n                    else {\r\n                        element.removeAttribute('aria-hidden');\r\n                    }\r\n                }));\r\n                this._ariaHiddenElements.clear();\r\n                this._afterAllClosed.next();\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Hides all of the content that isn't an overlay from assistive technology.\r\n     */\r\n    /**\r\n     * Hides all of the content that isn't an overlay from assistive technology.\r\n     * @private\r\n     * @return {?}\r\n     */\r\n    MatDialog.prototype._hideNonDialogContentFromAssistiveTechnology = /**\r\n     * Hides all of the content that isn't an overlay from assistive technology.\r\n     * @private\r\n     * @return {?}\r\n     */\r\n    function () {\r\n        /** @type {?} */\r\n        var overlayContainer = this._overlayContainer.getContainerElement();\r\n        // Ensure that the overlay container is attached to the DOM.\r\n        if (overlayContainer.parentElement) {\r\n            /** @type {?} */\r\n            var siblings = overlayContainer.parentElement.children;\r\n            for (var i = siblings.length - 1; i > -1; i--) {\r\n                /** @type {?} */\r\n                var sibling = siblings[i];\r\n                if (sibling !== overlayContainer &&\r\n                    sibling.nodeName !== 'SCRIPT' &&\r\n                    sibling.nodeName !== 'STYLE' &&\r\n                    !sibling.hasAttribute('aria-live')) {\r\n                    this._ariaHiddenElements.set(sibling, sibling.getAttribute('aria-hidden'));\r\n                    sibling.setAttribute('aria-hidden', 'true');\r\n                }\r\n            }\r\n        }\r\n    };\r\n    /** Closes all of the dialogs in an array. */\r\n    /**\r\n     * Closes all of the dialogs in an array.\r\n     * @private\r\n     * @param {?} dialogs\r\n     * @return {?}\r\n     */\r\n    MatDialog.prototype._closeDialogs = /**\r\n     * Closes all of the dialogs in an array.\r\n     * @private\r\n     * @param {?} dialogs\r\n     * @return {?}\r\n     */\r\n    function (dialogs) {\r\n        /** @type {?} */\r\n        var i = dialogs.length;\r\n        while (i--) {\r\n            // The `_openDialogs` property isn't updated after close until the rxjs subscription\r\n            // runs on the next microtask, in addition to modifying the array as we're going\r\n            // through it. We loop through all of them and call close without assuming that\r\n            // they'll be removed from the list instantaneously.\r\n            dialogs[i].close();\r\n        }\r\n    };\r\n    MatDialog.decorators = [\r\n        { type: Injectable },\r\n    ];\r\n    /** @nocollapse */\r\n    MatDialog.ctorParameters = function () { return [\r\n        { type: Overlay },\r\n        { type: Injector },\r\n        { type: Location, decorators: [{ type: Optional }] },\r\n        { type: MatDialogConfig, decorators: [{ type: Optional }, { type: Inject, args: [MAT_DIALOG_DEFAULT_OPTIONS,] }] },\r\n        { type: undefined, decorators: [{ type: Inject, args: [MAT_DIALOG_SCROLL_STRATEGY,] }] },\r\n        { type: MatDialog, decorators: [{ type: Optional }, { type: SkipSelf }] },\r\n        { type: OverlayContainer }\r\n    ]; };\r\n    return MatDialog;\r\n}());\r\n/**\r\n * Applies default options to the dialog config.\r\n * @param {?=} config Config to be modified.\r\n * @param {?=} defaultOptions Default options provided.\r\n * @return {?} The new configuration object.\r\n */\r\nfunction _applyConfigDefaults(config, defaultOptions) {\r\n    return __assign({}, defaultOptions, config);\r\n}\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n/**\r\n * Counter used to generate unique IDs for dialog elements.\r\n * @type {?}\r\n */\r\nvar dialogElementUid = 0;\r\n/**\r\n * Button that will close the current dialog.\r\n */\r\nvar MatDialogClose = /** @class */ (function () {\r\n    function MatDialogClose(dialogRef, _elementRef, _dialog) {\r\n        this.dialogRef = dialogRef;\r\n        this._elementRef = _elementRef;\r\n        this._dialog = _dialog;\r\n        /**\r\n         * Default to \"button\" to prevents accidental form submits.\r\n         */\r\n        this.type = 'button';\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    MatDialogClose.prototype.ngOnInit = /**\r\n     * @return {?}\r\n     */\r\n    function () {\r\n        if (!this.dialogRef) {\r\n            // When this directive is included in a dialog via TemplateRef (rather than being\r\n            // in a Component), the DialogRef isn't available via injection because embedded\r\n            // views cannot be given a custom injector. Instead, we look up the DialogRef by\r\n            // ID. This must occur in `onInit`, as the ID binding for the dialog container won't\r\n            // be resolved at constructor time.\r\n            this.dialogRef = (/** @type {?} */ (getClosestDialog(this._elementRef, this._dialog.openDialogs)));\r\n        }\r\n    };\r\n    /**\r\n     * @param {?} changes\r\n     * @return {?}\r\n     */\r\n    MatDialogClose.prototype.ngOnChanges = /**\r\n     * @param {?} changes\r\n     * @return {?}\r\n     */\r\n    function (changes) {\r\n        /** @type {?} */\r\n        var proxiedChange = changes['_matDialogClose'] || changes['_matDialogCloseResult'];\r\n        if (proxiedChange) {\r\n            this.dialogResult = proxiedChange.currentValue;\r\n        }\r\n    };\r\n    MatDialogClose.decorators = [\r\n        { type: Directive, args: [{\r\n                    selector: '[mat-dialog-close], [matDialogClose]',\r\n                    exportAs: 'matDialogClose',\r\n                    host: {\r\n                        '(click)': 'dialogRef.close(dialogResult)',\r\n                        '[attr.aria-label]': 'ariaLabel || null',\r\n                        '[attr.type]': 'type',\r\n                    }\r\n                },] },\r\n    ];\r\n    /** @nocollapse */\r\n    MatDialogClose.ctorParameters = function () { return [\r\n        { type: MatDialogRef, decorators: [{ type: Optional }] },\r\n        { type: ElementRef },\r\n        { type: MatDialog }\r\n    ]; };\r\n    MatDialogClose.propDecorators = {\r\n        ariaLabel: [{ type: Input, args: ['aria-label',] }],\r\n        type: [{ type: Input }],\r\n        dialogResult: [{ type: Input, args: ['mat-dialog-close',] }],\r\n        _matDialogClose: [{ type: Input, args: ['matDialogClose',] }]\r\n    };\r\n    return MatDialogClose;\r\n}());\r\n/**\r\n * Title of a dialog element. Stays fixed to the top of the dialog when scrolling.\r\n */\r\nvar MatDialogTitle = /** @class */ (function () {\r\n    function MatDialogTitle(_dialogRef, _elementRef, _dialog) {\r\n        this._dialogRef = _dialogRef;\r\n        this._elementRef = _elementRef;\r\n        this._dialog = _dialog;\r\n        this.id = \"mat-dialog-title-\" + dialogElementUid++;\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    MatDialogTitle.prototype.ngOnInit = /**\r\n     * @return {?}\r\n     */\r\n    function () {\r\n        var _this = this;\r\n        if (!this._dialogRef) {\r\n            this._dialogRef = (/** @type {?} */ (getClosestDialog(this._elementRef, this._dialog.openDialogs)));\r\n        }\r\n        if (this._dialogRef) {\r\n            Promise.resolve().then((/**\r\n             * @return {?}\r\n             */\r\n            function () {\r\n                /** @type {?} */\r\n                var container = _this._dialogRef._containerInstance;\r\n                if (container && !container._ariaLabelledBy) {\r\n                    container._ariaLabelledBy = _this.id;\r\n                }\r\n            }));\r\n        }\r\n    };\r\n    MatDialogTitle.decorators = [\r\n        { type: Directive, args: [{\r\n                    selector: '[mat-dialog-title], [matDialogTitle]',\r\n                    exportAs: 'matDialogTitle',\r\n                    host: {\r\n                        'class': 'mat-dialog-title',\r\n                        '[id]': 'id',\r\n                    },\r\n                },] },\r\n    ];\r\n    /** @nocollapse */\r\n    MatDialogTitle.ctorParameters = function () { return [\r\n        { type: MatDialogRef, decorators: [{ type: Optional }] },\r\n        { type: ElementRef },\r\n        { type: MatDialog }\r\n    ]; };\r\n    MatDialogTitle.propDecorators = {\r\n        id: [{ type: Input }]\r\n    };\r\n    return MatDialogTitle;\r\n}());\r\n/**\r\n * Scrollable content container of a dialog.\r\n */\r\nvar MatDialogContent = /** @class */ (function () {\r\n    function MatDialogContent() {\r\n    }\r\n    MatDialogContent.decorators = [\r\n        { type: Directive, args: [{\r\n                    selector: \"[mat-dialog-content], mat-dialog-content, [matDialogContent]\",\r\n                    host: { 'class': 'mat-dialog-content' }\r\n                },] },\r\n    ];\r\n    return MatDialogContent;\r\n}());\r\n/**\r\n * Container for the bottom action buttons in a dialog.\r\n * Stays fixed to the bottom when scrolling.\r\n */\r\nvar MatDialogActions = /** @class */ (function () {\r\n    function MatDialogActions() {\r\n    }\r\n    MatDialogActions.decorators = [\r\n        { type: Directive, args: [{\r\n                    selector: \"[mat-dialog-actions], mat-dialog-actions, [matDialogActions]\",\r\n                    host: { 'class': 'mat-dialog-actions' }\r\n                },] },\r\n    ];\r\n    return MatDialogActions;\r\n}());\r\n/**\r\n * Finds the closest MatDialogRef to an element by looking at the DOM.\r\n * @param {?} element Element relative to which to look for a dialog.\r\n * @param {?} openDialogs References to the currently-open dialogs.\r\n * @return {?}\r\n */\r\nfunction getClosestDialog(element, openDialogs) {\r\n    /** @type {?} */\r\n    var parent = element.nativeElement.parentElement;\r\n    while (parent && !parent.classList.contains('mat-dialog-container')) {\r\n        parent = parent.parentElement;\r\n    }\r\n    return parent ? openDialogs.find((/**\r\n     * @param {?} dialog\r\n     * @return {?}\r\n     */\r\n    function (dialog) { return dialog.id === (/** @type {?} */ (parent)).id; })) : null;\r\n}\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\nvar MatDialogModule = /** @class */ (function () {\r\n    function MatDialogModule() {\r\n    }\r\n    MatDialogModule.decorators = [\r\n        { type: NgModule, args: [{\r\n                    imports: [\r\n                        CommonModule,\r\n                        OverlayModule,\r\n                        PortalModule,\r\n                        MatCommonModule,\r\n                    ],\r\n                    exports: [\r\n                        MatDialogContainer,\r\n                        MatDialogClose,\r\n                        MatDialogTitle,\r\n                        MatDialogContent,\r\n                        MatDialogActions,\r\n                        MatCommonModule,\r\n                    ],\r\n                    declarations: [\r\n                        MatDialogContainer,\r\n                        MatDialogClose,\r\n                        MatDialogTitle,\r\n                        MatDialogActions,\r\n                        MatDialogContent,\r\n                    ],\r\n                    providers: [\r\n                        MatDialog,\r\n                        MAT_DIALOG_SCROLL_STRATEGY_PROVIDER,\r\n                    ],\r\n                    entryComponents: [MatDialogContainer],\r\n                },] },\r\n    ];\r\n    return MatDialogModule;\r\n}());\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n\r\nexport { MatDialogModule, MAT_DIALOG_SCROLL_STRATEGY_FACTORY, MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY, MAT_DIALOG_DATA, MAT_DIALOG_DEFAULT_OPTIONS, MAT_DIALOG_SCROLL_STRATEGY, MAT_DIALOG_SCROLL_STRATEGY_PROVIDER, MatDialog, throwMatDialogContentAlreadyAttachedError, MatDialogContainer, MatDialogClose, MatDialogTitle, MatDialogContent, MatDialogActions, MatDialogConfig, MatDialogRef, matDialogAnimations };\r\n\r\n"]}