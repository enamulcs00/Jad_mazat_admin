{"version":3,"sources":["v:/jad-admin-go/mazat_admin_panel/node_modules/@angular/material/esm5/icon.es5.js"],"names":[],"mappingswgCM,AAGA;;;;;;;;;;;;;;;;;;;;;;y8BAQslBtS,AAgBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;cAcA;;;;;;;;;;KAUD;;;;;;;;;;;;;4BAOC","file":"icon.es5.js","sourcesContent":["/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nimport { DOCUMENT } from '@angular/common';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { ErrorHandler, Inject, Injectable, Optional, SecurityContext, SkipSelf, NgModule, Attribute, ChangeDetectionStrategy, Component, ElementRef, inject, InjectionToken, Input, ViewEncapsulation, ɵɵdefineInjectable, ɵɵinject } from '@angular/core';\r\nimport { DomSanitizer } from '@angular/platform-browser';\r\nimport { forkJoin, of, throwError } from 'rxjs';\r\nimport { catchError, finalize, map, share, tap, take } from 'rxjs/operators';\r\nimport { __extends } from 'tslib';\r\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\r\nimport { mixinColor, MatCommonModule } from '@angular/material/core';\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n/**\r\n * Returns an exception to be thrown in the case when attempting to\r\n * load an icon with a name that cannot be found.\r\n * \\@docs-private\r\n * @param {?} iconName\r\n * @return {?}\r\n */\r\nfunction getMatIconNameNotFoundError(iconName) {\r\n    return Error(\"Unable to find icon with the name \\\"\" + iconName + \"\\\"\");\r\n}\r\n/**\r\n * Returns an exception to be thrown when the consumer attempts to use\r\n * `<mat-icon>` without including \\@angular/common/http.\r\n * \\@docs-private\r\n * @return {?}\r\n */\r\nfunction getMatIconNoHttpProviderError() {\r\n    return Error('Could not find HttpClient provider for use with Angular Material icons. ' +\r\n        'Please include the HttpClientModule from @angular/common/http in your ' +\r\n        'app imports.');\r\n}\r\n/**\r\n * Returns an exception to be thrown when a URL couldn't be sanitized.\r\n * \\@docs-private\r\n * @param {?} url URL that was attempted to be sanitized.\r\n * @return {?}\r\n */\r\nfunction getMatIconFailedToSanitizeUrlError(url) {\r\n    return Error(\"The URL provided to MatIconRegistry was not trusted as a resource URL \" +\r\n        (\"via Angular's DomSanitizer. Attempted URL was \\\"\" + url + \"\\\".\"));\r\n}\r\n/**\r\n * Returns an exception to be thrown when a HTML string couldn't be sanitized.\r\n * \\@docs-private\r\n * @param {?} literal HTML that was attempted to be sanitized.\r\n * @return {?}\r\n */\r\nfunction getMatIconFailedToSanitizeLiteralError(literal) {\r\n    return Error(\"The literal provided to MatIconRegistry was not trusted as safe HTML by \" +\r\n        (\"Angular's DomSanitizer. Attempted literal was \\\"\" + literal + \"\\\".\"));\r\n}\r\n/**\r\n * Configuration for an icon, including the URL and possibly the cached SVG element.\r\n * \\@docs-private\r\n */\r\nvar /**\r\n * Configuration for an icon, including the URL and possibly the cached SVG element.\r\n * \\@docs-private\r\n */\r\nSvgIconConfig = /** @class */ (function () {\r\n    function SvgIconConfig(data, options) {\r\n        this.options = options;\r\n        // Note that we can't use `instanceof SVGElement` here,\r\n        // because it'll break during server-side rendering.\r\n        if (!!((/** @type {?} */ (data))).nodeName) {\r\n            this.svgElement = (/** @type {?} */ (data));\r\n        }\r\n        else {\r\n            this.url = (/** @type {?} */ (data));\r\n        }\r\n    }\r\n    return SvgIconConfig;\r\n}());\r\n/**\r\n * Service to register and display icons used by the `<mat-icon>` component.\r\n * - Registers icon URLs by namespace and name.\r\n * - Registers icon set URLs by namespace.\r\n * - Registers aliases for CSS classes, for use with icon fonts.\r\n * - Loads icons from URLs and extracts individual icons from icon sets.\r\n */\r\nvar MatIconRegistry = /** @class */ (function () {\r\n    function MatIconRegistry(_httpClient, _sanitizer, document, _errorHandler) {\r\n        this._httpClient = _httpClient;\r\n        this._sanitizer = _sanitizer;\r\n        this._errorHandler = _errorHandler;\r\n        /**\r\n         * URLs and cached SVG elements for individual icons. Keys are of the format \"[namespace]:[icon]\".\r\n         */\r\n        this._svgIconConfigs = new Map();\r\n        /**\r\n         * SvgIconConfig objects and cached SVG elements for icon sets, keyed by namespace.\r\n         * Multiple icon sets can be registered under the same namespace.\r\n         */\r\n        this._iconSetConfigs = new Map();\r\n        /**\r\n         * Cache for icons loaded by direct URLs.\r\n         */\r\n        this._cachedIconsByUrl = new Map();\r\n        /**\r\n         * In-progress icon fetches. Used to coalesce multiple requests to the same URL.\r\n         */\r\n        this._inProgressUrlFetches = new Map();\r\n        /**\r\n         * Map from font identifiers to their CSS class names. Used for icon fonts.\r\n         */\r\n        this._fontCssClassesByAlias = new Map();\r\n        /**\r\n         * The CSS class to apply when an `<mat-icon>` component has no icon name, url, or font specified.\r\n         * The default 'material-icons' value assumes that the material icon font has been loaded as\r\n         * described at http://google.github.io/material-design-icons/#icon-font-for-the-web\r\n         */\r\n        this._defaultFontSetClass = 'material-icons';\r\n        this._document = document;\r\n    }\r\n    /**\r\n     * Registers an icon by URL in the default namespace.\r\n     * @param iconName Name under which the icon should be registered.\r\n     * @param url\r\n     */\r\n    /**\r\n     * Registers an icon by URL in the default namespace.\r\n     * @template THIS\r\n     * @this {THIS}\r\n     * @param {?} iconName Name under which the icon should be registered.\r\n     * @param {?} url\r\n     * @param {?=} options\r\n     * @return {THIS}\r\n     */\r\n    MatIconRegistry.prototype.addSvgIcon = /**\r\n     * Registers an icon by URL in the default namespace.\r\n     * @template THIS\r\n     * @this {THIS}\r\n     * @param {?} iconName Name under which the icon should be registered.\r\n     * @param {?} url\r\n     * @param {?=} options\r\n     * @return {THIS}\r\n     */\r\n    function (iconName, url, options) {\r\n        return (/** @type {?} */ (this)).addSvgIconInNamespace('', iconName, url, options);\r\n    };\r\n    /**\r\n     * Registers an icon using an HTML string in the default namespace.\r\n     * @param iconName Name under which the icon should be registered.\r\n     * @param literal SVG source of the icon.\r\n     */\r\n    /**\r\n     * Registers an icon using an HTML string in the default namespace.\r\n     * @template THIS\r\n     * @this {THIS}\r\n     * @param {?} iconName Name under which the icon should be registered.\r\n     * @param {?} literal SVG source of the icon.\r\n     * @param {?=} options\r\n     * @return {THIS}\r\n     */\r\n    MatIconRegistry.prototype.addSvgIconLiteral = /**\r\n     * Registers an icon using an HTML string in the default namespace.\r\n     * @template THIS\r\n     * @this {THIS}\r\n     * @param {?} iconName Name under which the icon should be registered.\r\n     * @param {?} literal SVG source of the icon.\r\n     * @param {?=} options\r\n     * @return {THIS}\r\n     */\r\n    function (iconName, literal, options) {\r\n        return (/** @type {?} */ (this)).addSvgIconLiteralInNamespace('', iconName, literal, options);\r\n    };\r\n    /**\r\n     * Registers an icon by URL in the specified namespace.\r\n     * @param namespace Namespace in which the icon should be registered.\r\n     * @param iconName Name under which the icon should be registered.\r\n     * @param url\r\n     */\r\n    /**\r\n     * Registers an icon by URL in the specified namespace.\r\n     * @template THIS\r\n     * @this {THIS}\r\n     * @param {?} namespace Namespace in which the icon should be registered.\r\n     * @param {?} iconName Name under which the icon should be registered.\r\n     * @param {?} url\r\n     * @param {?=} options\r\n     * @return {THIS}\r\n     */\r\n    MatIconRegistry.prototype.addSvgIconInNamespace = /**\r\n     * Registers an icon by URL in the specified namespace.\r\n     * @template THIS\r\n     * @this {THIS}\r\n     * @param {?} namespace Namespace in which the icon should be registered.\r\n     * @param {?} iconName Name under which the icon should be registered.\r\n     * @param {?} url\r\n     * @param {?=} options\r\n     * @return {THIS}\r\n     */\r\n    function (namespace, iconName, url, options) {\r\n        return (/** @type {?} */ (this))._addSvgIconConfig(namespace, iconName, new SvgIconConfig(url, options));\r\n    };\r\n    /**\r\n     * Registers an icon using an HTML string in the specified namespace.\r\n     * @param namespace Namespace in which the icon should be registered.\r\n     * @param iconName Name under which the icon should be registered.\r\n     * @param literal SVG source of the icon.\r\n     */\r\n    /**\r\n     * Registers an icon using an HTML string in the specified namespace.\r\n     * @template THIS\r\n     * @this {THIS}\r\n     * @param {?} namespace Namespace in which the icon should be registered.\r\n     * @param {?} iconName Name under which the icon should be registered.\r\n     * @param {?} literal SVG source of the icon.\r\n     * @param {?=} options\r\n     * @return {THIS}\r\n     */\r\n    MatIconRegistry.prototype.addSvgIconLiteralInNamespace = /**\r\n     * Registers an icon using an HTML string in the specified namespace.\r\n     * @template THIS\r\n     * @this {THIS}\r\n     * @param {?} namespace Namespace in which the icon should be registered.\r\n     * @param {?} iconName Name under which the icon should be registered.\r\n     * @param {?} literal SVG source of the icon.\r\n     * @param {?=} options\r\n     * @return {THIS}\r\n     */\r\n    function (namespace, iconName, literal, options) {\r\n        /** @type {?} */\r\n        var sanitizedLiteral = (/** @type {?} */ (this))._sanitizer.sanitize(SecurityContext.HTML, literal);\r\n        if (!sanitizedLiteral) {\r\n            throw getMatIconFailedToSanitizeLiteralError(literal);\r\n        }\r\n        /** @type {?} */\r\n        var svgElement = (/** @type {?} */ (this))._createSvgElementForSingleIcon(sanitizedLiteral, options);\r\n        return (/** @type {?} */ (this))._addSvgIconConfig(namespace, iconName, new SvgIconConfig(svgElement, options));\r\n    };\r\n    /**\r\n     * Registers an icon set by URL in the default namespace.\r\n     * @param url\r\n     */\r\n    /**\r\n     * Registers an icon set by URL in the default namespace.\r\n     * @template THIS\r\n     * @this {THIS}\r\n     * @param {?} url\r\n     * @param {?=} options\r\n     * @return {THIS}\r\n     */\r\n    MatIconRegistry.prototype.addSvgIconSet = /**\r\n     * Registers an icon set by URL in the default namespace.\r\n     * @template THIS\r\n     * @this {THIS}\r\n     * @param {?} url\r\n     * @param {?=} options\r\n     * @return {THIS}\r\n     */\r\n    function (url, options) {\r\n        return (/** @type {?} */ (this)).addSvgIconSetInNamespace('', url, options);\r\n    };\r\n    /**\r\n     * Registers an icon set using an HTML string in the default namespace.\r\n     * @param literal SVG source of the icon set.\r\n     */\r\n    /**\r\n     * Registers an icon set using an HTML string in the default namespace.\r\n     * @template THIS\r\n     * @this {THIS}\r\n     * @param {?} literal SVG source of the icon set.\r\n     * @param {?=} options\r\n     * @return {THIS}\r\n     */\r\n    MatIconRegistry.prototype.addSvgIconSetLiteral = /**\r\n     * Registers an icon set using an HTML string in the default namespace.\r\n     * @template THIS\r\n     * @this {THIS}\r\n     * @param {?} literal SVG source of the icon set.\r\n     * @param {?=} options\r\n     * @return {THIS}\r\n     */\r\n    function (literal, options) {\r\n        return (/** @type {?} */ (this)).addSvgIconSetLiteralInNamespace('', literal, options);\r\n    };\r\n    /**\r\n     * Registers an icon set by URL in the specified namespace.\r\n     * @param namespace Namespace in which to register the icon set.\r\n     * @param url\r\n     */\r\n    /**\r\n     * Registers an icon set by URL in the specified namespace.\r\n     * @template THIS\r\n     * @this {THIS}\r\n     * @param {?} namespace Namespace in which to register the icon set.\r\n     * @param {?} url\r\n     * @param {?=} options\r\n     * @return {THIS}\r\n     */\r\n    MatIconRegistry.prototype.addSvgIconSetInNamespace = /**\r\n     * Registers an icon set by URL in the specified namespace.\r\n     * @template THIS\r\n     * @this {THIS}\r\n     * @param {?} namespace Namespace in which to register the icon set.\r\n     * @param {?} url\r\n     * @param {?=} options\r\n     * @return {THIS}\r\n     */\r\n    function (namespace, url, options) {\r\n        return (/** @type {?} */ (this))._addSvgIconSetConfig(namespace, new SvgIconConfig(url, options));\r\n    };\r\n    /**\r\n     * Registers an icon set using an HTML string in the specified namespace.\r\n     * @param namespace Namespace in which to register the icon set.\r\n     * @param literal SVG source of the icon set.\r\n     */\r\n    /**\r\n     * Registers an icon set using an HTML string in the specified namespace.\r\n     * @template THIS\r\n     * @this {THIS}\r\n     * @param {?} namespace Namespace in which to register the icon set.\r\n     * @param {?} literal SVG source of the icon set.\r\n     * @param {?=} options\r\n     * @return {THIS}\r\n     */\r\n    MatIconRegistry.prototype.addSvgIconSetLiteralInNamespace = /**\r\n     * Registers an icon set using an HTML string in the specified namespace.\r\n     * @template THIS\r\n     * @this {THIS}\r\n     * @param {?} namespace Namespace in which to register the icon set.\r\n     * @param {?} literal SVG source of the icon set.\r\n     * @param {?=} options\r\n     * @return {THIS}\r\n     */\r\n    function (namespace, literal, options) {\r\n        /** @type {?} */\r\n        var sanitizedLiteral = (/** @type {?} */ (this))._sanitizer.sanitize(SecurityContext.HTML, literal);\r\n        if (!sanitizedLiteral) {\r\n            throw getMatIconFailedToSanitizeLiteralError(literal);\r\n        }\r\n        /** @type {?} */\r\n        var svgElement = (/** @type {?} */ (this))._svgElementFromString(sanitizedLiteral);\r\n        return (/** @type {?} */ (this))._addSvgIconSetConfig(namespace, new SvgIconConfig(svgElement, options));\r\n    };\r\n    /**\r\n     * Defines an alias for a CSS class name to be used for icon fonts. Creating an matIcon\r\n     * component with the alias as the fontSet input will cause the class name to be applied\r\n     * to the `<mat-icon>` element.\r\n     *\r\n     * @param alias Alias for the font.\r\n     * @param className Class name override to be used instead of the alias.\r\n     */\r\n    /**\r\n     * Defines an alias for a CSS class name to be used for icon fonts. Creating an matIcon\r\n     * component with the alias as the fontSet input will cause the class name to be applied\r\n     * to the `<mat-icon>` element.\r\n     *\r\n     * @template THIS\r\n     * @this {THIS}\r\n     * @param {?} alias Alias for the font.\r\n     * @param {?=} className Class name override to be used instead of the alias.\r\n     * @return {THIS}\r\n     */\r\n    MatIconRegistry.prototype.registerFontClassAlias = /**\r\n     * Defines an alias for a CSS class name to be used for icon fonts. Creating an matIcon\r\n     * component with the alias as the fontSet input will cause the class name to be applied\r\n     * to the `<mat-icon>` element.\r\n     *\r\n     * @template THIS\r\n     * @this {THIS}\r\n     * @param {?} alias Alias for the font.\r\n     * @param {?=} className Class name override to be used instead of the alias.\r\n     * @return {THIS}\r\n     */\r\n    function (alias, className) {\r\n        if (className === void 0) { className = alias; }\r\n        (/** @type {?} */ (this))._fontCssClassesByAlias.set(alias, className);\r\n        return (/** @type {?} */ (this));\r\n    };\r\n    /**\r\n     * Returns the CSS class name associated with the alias by a previous call to\r\n     * registerFontClassAlias. If no CSS class has been associated, returns the alias unmodified.\r\n     */\r\n    /**\r\n     * Returns the CSS class name associated with the alias by a previous call to\r\n     * registerFontClassAlias. If no CSS class has been associated, returns the alias unmodified.\r\n     * @param {?} alias\r\n     * @return {?}\r\n     */\r\n    MatIconRegistry.prototype.classNameForFontAlias = /**\r\n     * Returns the CSS class name associated with the alias by a previous call to\r\n     * registerFontClassAlias. If no CSS class has been associated, returns the alias unmodified.\r\n     * @param {?} alias\r\n     * @return {?}\r\n     */\r\n    function (alias) {\r\n        return this._fontCssClassesByAlias.get(alias) || alias;\r\n    };\r\n    /**\r\n     * Sets the CSS class name to be used for icon fonts when an `<mat-icon>` component does not\r\n     * have a fontSet input value, and is not loading an icon by name or URL.\r\n     *\r\n     * @param className\r\n     */\r\n    /**\r\n     * Sets the CSS class name to be used for icon fonts when an `<mat-icon>` component does not\r\n     * have a fontSet input value, and is not loading an icon by name or URL.\r\n     *\r\n     * @template THIS\r\n     * @this {THIS}\r\n     * @param {?} className\r\n     * @return {THIS}\r\n     */\r\n    MatIconRegistry.prototype.setDefaultFontSetClass = /**\r\n     * Sets the CSS class name to be used for icon fonts when an `<mat-icon>` component does not\r\n     * have a fontSet input value, and is not loading an icon by name or URL.\r\n     *\r\n     * @template THIS\r\n     * @this {THIS}\r\n     * @param {?} className\r\n     * @return {THIS}\r\n     */\r\n    function (className) {\r\n        (/** @type {?} */ (this))._defaultFontSetClass = className;\r\n        return (/** @type {?} */ (this));\r\n    };\r\n    /**\r\n     * Returns the CSS class name to be used for icon fonts when an `<mat-icon>` component does not\r\n     * have a fontSet input value, and is not loading an icon by name or URL.\r\n     */\r\n    /**\r\n     * Returns the CSS class name to be used for icon fonts when an `<mat-icon>` component does not\r\n     * have a fontSet input value, and is not loading an icon by name or URL.\r\n     * @return {?}\r\n     */\r\n    MatIconRegistry.prototype.getDefaultFontSetClass = /**\r\n     * Returns the CSS class name to be used for icon fonts when an `<mat-icon>` component does not\r\n     * have a fontSet input value, and is not loading an icon by name or URL.\r\n     * @return {?}\r\n     */\r\n    function () {\r\n        return this._defaultFontSetClass;\r\n    };\r\n    /**\r\n     * Returns an Observable that produces the icon (as an `<svg>` DOM element) from the given URL.\r\n     * The response from the URL may be cached so this will not always cause an HTTP request, but\r\n     * the produced element will always be a new copy of the originally fetched icon. (That is,\r\n     * it will not contain any modifications made to elements previously returned).\r\n     *\r\n     * @param safeUrl URL from which to fetch the SVG icon.\r\n     */\r\n    /**\r\n     * Returns an Observable that produces the icon (as an `<svg>` DOM element) from the given URL.\r\n     * The response from the URL may be cached so this will not always cause an HTTP request, but\r\n     * the produced element will always be a new copy of the originally fetched icon. (That is,\r\n     * it will not contain any modifications made to elements previously returned).\r\n     *\r\n     * @param {?} safeUrl URL from which to fetch the SVG icon.\r\n     * @return {?}\r\n     */\r\n    MatIconRegistry.prototype.getSvgIconFromUrl = /**\r\n     * Returns an Observable that produces the icon (as an `<svg>` DOM element) from the given URL.\r\n     * The response from the URL may be cached so this will not always cause an HTTP request, but\r\n     * the produced element will always be a new copy of the originally fetched icon. (That is,\r\n     * it will not contain any modifications made to elements previously returned).\r\n     *\r\n     * @param {?} safeUrl URL from which to fetch the SVG icon.\r\n     * @return {?}\r\n     */\r\n    function (safeUrl) {\r\n        var _this = this;\r\n        /** @type {?} */\r\n        var url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, safeUrl);\r\n        if (!url) {\r\n            throw getMatIconFailedToSanitizeUrlError(safeUrl);\r\n        }\r\n        /** @type {?} */\r\n        var cachedIcon = this._cachedIconsByUrl.get(url);\r\n        if (cachedIcon) {\r\n            return of(cloneSvg(cachedIcon));\r\n        }\r\n        return this._loadSvgIconFromConfig(new SvgIconConfig(safeUrl)).pipe(tap((/**\r\n         * @param {?} svg\r\n         * @return {?}\r\n         */\r\n        function (svg) { return _this._cachedIconsByUrl.set((/** @type {?} */ (url)), svg); })), map((/**\r\n         * @param {?} svg\r\n         * @return {?}\r\n         */\r\n        function (svg) { return cloneSvg(svg); })));\r\n    };\r\n    /**\r\n     * Returns an Observable that produces the icon (as an `<svg>` DOM element) with the given name\r\n     * and namespace. The icon must have been previously registered with addIcon or addIconSet;\r\n     * if not, the Observable will throw an error.\r\n     *\r\n     * @param name Name of the icon to be retrieved.\r\n     * @param namespace Namespace in which to look for the icon.\r\n     */\r\n    /**\r\n     * Returns an Observable that produces the icon (as an `<svg>` DOM element) with the given name\r\n     * and namespace. The icon must have been previously registered with addIcon or addIconSet;\r\n     * if not, the Observable will throw an error.\r\n     *\r\n     * @param {?} name Name of the icon to be retrieved.\r\n     * @param {?=} namespace Namespace in which to look for the icon.\r\n     * @return {?}\r\n     */\r\n    MatIconRegistry.prototype.getNamedSvgIcon = /**\r\n     * Returns an Observable that produces the icon (as an `<svg>` DOM element) with the given name\r\n     * and namespace. The icon must have been previously registered with addIcon or addIconSet;\r\n     * if not, the Observable will throw an error.\r\n     *\r\n     * @param {?} name Name of the icon to be retrieved.\r\n     * @param {?=} namespace Namespace in which to look for the icon.\r\n     * @return {?}\r\n     */\r\n    function (name, namespace) {\r\n        if (namespace === void 0) { namespace = ''; }\r\n        // Return (copy of) cached icon if possible.\r\n        /** @type {?} */\r\n        var key = iconKey(namespace, name);\r\n        /** @type {?} */\r\n        var config = this._svgIconConfigs.get(key);\r\n        if (config) {\r\n            return this._getSvgFromConfig(config);\r\n        }\r\n        // See if we have any icon sets registered for the namespace.\r\n        /** @type {?} */\r\n        var iconSetConfigs = this._iconSetConfigs.get(namespace);\r\n        if (iconSetConfigs) {\r\n            return this._getSvgFromIconSetConfigs(name, iconSetConfigs);\r\n        }\r\n        return throwError(getMatIconNameNotFoundError(key));\r\n    };\r\n    /**\r\n     * @return {?}\r\n     */\r\n    MatIconRegistry.prototype.ngOnDestroy = /**\r\n     * @return {?}\r\n     */\r\n    function () {\r\n        this._svgIconConfigs.clear();\r\n        this._iconSetConfigs.clear();\r\n        this._cachedIconsByUrl.clear();\r\n    };\r\n    /**\r\n     * Returns the cached icon for a SvgIconConfig if available, or fetches it from its URL if not.\r\n     */\r\n    /**\r\n     * Returns the cached icon for a SvgIconConfig if available, or fetches it from its URL if not.\r\n     * @private\r\n     * @param {?} config\r\n     * @return {?}\r\n     */\r\n    MatIconRegistry.prototype._getSvgFromConfig = /**\r\n     * Returns the cached icon for a SvgIconConfig if available, or fetches it from its URL if not.\r\n     * @private\r\n     * @param {?} config\r\n     * @return {?}\r\n     */\r\n    function (config) {\r\n        if (config.svgElement) {\r\n            // We already have the SVG element for this icon, return a copy.\r\n            return of(cloneSvg(config.svgElement));\r\n        }\r\n        else {\r\n            // Fetch the icon from the config's URL, cache it, and return a copy.\r\n            return this._loadSvgIconFromConfig(config).pipe(tap((/**\r\n             * @param {?} svg\r\n             * @return {?}\r\n             */\r\n            function (svg) { return config.svgElement = svg; })), map((/**\r\n             * @param {?} svg\r\n             * @return {?}\r\n             */\r\n            function (svg) { return cloneSvg(svg); })));\r\n        }\r\n    };\r\n    /**\r\n     * Attempts to find an icon with the specified name in any of the SVG icon sets.\r\n     * First searches the available cached icons for a nested element with a matching name, and\r\n     * if found copies the element to a new `<svg>` element. If not found, fetches all icon sets\r\n     * that have not been cached, and searches again after all fetches are completed.\r\n     * The returned Observable produces the SVG element if possible, and throws\r\n     * an error if no icon with the specified name can be found.\r\n     */\r\n    /**\r\n     * Attempts to find an icon with the specified name in any of the SVG icon sets.\r\n     * First searches the available cached icons for a nested element with a matching name, and\r\n     * if found copies the element to a new `<svg>` element. If not found, fetches all icon sets\r\n     * that have not been cached, and searches again after all fetches are completed.\r\n     * The returned Observable produces the SVG element if possible, and throws\r\n     * an error if no icon with the specified name can be found.\r\n     * @private\r\n     * @param {?} name\r\n     * @param {?} iconSetConfigs\r\n     * @return {?}\r\n     */\r\n    MatIconRegistry.prototype._getSvgFromIconSetConfigs = /**\r\n     * Attempts to find an icon with the specified name in any of the SVG icon sets.\r\n     * First searches the available cached icons for a nested element with a matching name, and\r\n     * if found copies the element to a new `<svg>` element. If not found, fetches all icon sets\r\n     * that have not been cached, and searches again after all fetches are completed.\r\n     * The returned Observable produces the SVG element if possible, and throws\r\n     * an error if no icon with the specified name can be found.\r\n     * @private\r\n     * @param {?} name\r\n     * @param {?} iconSetConfigs\r\n     * @return {?}\r\n     */\r\n    function (name, iconSetConfigs) {\r\n        var _this = this;\r\n        // For all the icon set SVG elements we've fetched, see if any contain an icon with the\r\n        // requested name.\r\n        /** @type {?} */\r\n        var namedIcon = this._extractIconWithNameFromAnySet(name, iconSetConfigs);\r\n        if (namedIcon) {\r\n            // We could cache namedIcon in _svgIconConfigs, but since we have to make a copy every\r\n            // time anyway, there's probably not much advantage compared to just always extracting\r\n            // it from the icon set.\r\n            return of(namedIcon);\r\n        }\r\n        // Not found in any cached icon sets. If there are icon sets with URLs that we haven't\r\n        // fetched, fetch them now and look for iconName in the results.\r\n        /** @type {?} */\r\n        var iconSetFetchRequests = iconSetConfigs\r\n            .filter((/**\r\n         * @param {?} iconSetConfig\r\n         * @return {?}\r\n         */\r\n        function (iconSetConfig) { return !iconSetConfig.svgElement; }))\r\n            .map((/**\r\n         * @param {?} iconSetConfig\r\n         * @return {?}\r\n         */\r\n        function (iconSetConfig) {\r\n            return _this._loadSvgIconSetFromConfig(iconSetConfig).pipe(catchError((/**\r\n             * @param {?} err\r\n             * @return {?}\r\n             */\r\n            function (err) {\r\n                /** @type {?} */\r\n                var url = _this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, iconSetConfig.url);\r\n                // Swallow errors fetching individual URLs so the\r\n                // combined Observable won't necessarily fail.\r\n                /** @type {?} */\r\n                var errorMessage = \"Loading icon set URL: \" + url + \" failed: \" + err.message;\r\n                // @breaking-change 9.0.0 _errorHandler parameter to be made required\r\n                if (_this._errorHandler) {\r\n                    _this._errorHandler.handleError(new Error(errorMessage));\r\n                }\r\n                else {\r\n                    console.error(errorMessage);\r\n                }\r\n                return of(null);\r\n            })));\r\n        }));\r\n        // Fetch all the icon set URLs. When the requests complete, every IconSet should have a\r\n        // cached SVG element (unless the request failed), and we can check again for the icon.\r\n        return forkJoin(iconSetFetchRequests).pipe(map((/**\r\n         * @return {?}\r\n         */\r\n        function () {\r\n            /** @type {?} */\r\n            var foundIcon = _this._extractIconWithNameFromAnySet(name, iconSetConfigs);\r\n            if (!foundIcon) {\r\n                throw getMatIconNameNotFoundError(name);\r\n            }\r\n            return foundIcon;\r\n        })));\r\n    };\r\n    /**\r\n     * Searches the cached SVG elements for the given icon sets for a nested icon element whose \"id\"\r\n     * tag matches the specified name. If found, copies the nested element to a new SVG element and\r\n     * returns it. Returns null if no matching element is found.\r\n     */\r\n    /**\r\n     * Searches the cached SVG elements for the given icon sets for a nested icon element whose \"id\"\r\n     * tag matches the specified name. If found, copies the nested element to a new SVG element and\r\n     * returns it. Returns null if no matching element is found.\r\n     * @private\r\n     * @param {?} iconName\r\n     * @param {?} iconSetConfigs\r\n     * @return {?}\r\n     */\r\n    MatIconRegistry.prototype._extractIconWithNameFromAnySet = /**\r\n     * Searches the cached SVG elements for the given icon sets for a nested icon element whose \"id\"\r\n     * tag matches the specified name. If found, copies the nested element to a new SVG element and\r\n     * returns it. Returns null if no matching element is found.\r\n     * @private\r\n     * @param {?} iconName\r\n     * @param {?} iconSetConfigs\r\n     * @return {?}\r\n     */\r\n    function (iconName, iconSetConfigs) {\r\n        // Iterate backwards, so icon sets added later have precedence.\r\n        for (var i = iconSetConfigs.length - 1; i >= 0; i--) {\r\n            /** @type {?} */\r\n            var config = iconSetConfigs[i];\r\n            if (config.svgElement) {\r\n                /** @type {?} */\r\n                var foundIcon = this._extractSvgIconFromSet(config.svgElement, iconName, config.options);\r\n                if (foundIcon) {\r\n                    return foundIcon;\r\n                }\r\n            }\r\n        }\r\n        return null;\r\n    };\r\n    /**\r\n     * Loads the content of the icon URL specified in the SvgIconConfig and creates an SVG element\r\n     * from it.\r\n     */\r\n    /**\r\n     * Loads the content of the icon URL specified in the SvgIconConfig and creates an SVG element\r\n     * from it.\r\n     * @private\r\n     * @param {?} config\r\n     * @return {?}\r\n     */\r\n    MatIconRegistry.prototype._loadSvgIconFromConfig = /**\r\n     * Loads the content of the icon URL specified in the SvgIconConfig and creates an SVG element\r\n     * from it.\r\n     * @private\r\n     * @param {?} config\r\n     * @return {?}\r\n     */\r\n    function (config) {\r\n        var _this = this;\r\n        return this._fetchUrl(config.url)\r\n            .pipe(map((/**\r\n         * @param {?} svgText\r\n         * @return {?}\r\n         */\r\n        function (svgText) { return _this._createSvgElementForSingleIcon(svgText, config.options); })));\r\n    };\r\n    /**\r\n     * Loads the content of the icon set URL specified in the SvgIconConfig and creates an SVG element\r\n     * from it.\r\n     */\r\n    /**\r\n     * Loads the content of the icon set URL specified in the SvgIconConfig and creates an SVG element\r\n     * from it.\r\n     * @private\r\n     * @param {?} config\r\n     * @return {?}\r\n     */\r\n    MatIconRegistry.prototype._loadSvgIconSetFromConfig = /**\r\n     * Loads the content of the icon set URL specified in the SvgIconConfig and creates an SVG element\r\n     * from it.\r\n     * @private\r\n     * @param {?} config\r\n     * @return {?}\r\n     */\r\n    function (config) {\r\n        var _this = this;\r\n        // If the SVG for this icon set has already been parsed, do nothing.\r\n        if (config.svgElement) {\r\n            return of(config.svgElement);\r\n        }\r\n        return this._fetchUrl(config.url).pipe(map((/**\r\n         * @param {?} svgText\r\n         * @return {?}\r\n         */\r\n        function (svgText) {\r\n            // It is possible that the icon set was parsed and cached by an earlier request, so parsing\r\n            // only needs to occur if the cache is yet unset.\r\n            if (!config.svgElement) {\r\n                config.svgElement = _this._svgElementFromString(svgText);\r\n            }\r\n            return config.svgElement;\r\n        })));\r\n    };\r\n    /**\r\n     * Creates a DOM element from the given SVG string, and adds default attributes.\r\n     */\r\n    /**\r\n     * Creates a DOM element from the given SVG string, and adds default attributes.\r\n     * @private\r\n     * @param {?} responseText\r\n     * @param {?=} options\r\n     * @return {?}\r\n     */\r\n    MatIconRegistry.prototype._createSvgElementForSingleIcon = /**\r\n     * Creates a DOM element from the given SVG string, and adds default attributes.\r\n     * @private\r\n     * @param {?} responseText\r\n     * @param {?=} options\r\n     * @return {?}\r\n     */\r\n    function (responseText, options) {\r\n        /** @type {?} */\r\n        var svg = this._svgElementFromString(responseText);\r\n        this._setSvgAttributes(svg, options);\r\n        return svg;\r\n    };\r\n    /**\r\n     * Searches the cached element of the given SvgIconConfig for a nested icon element whose \"id\"\r\n     * tag matches the specified name. If found, copies the nested element to a new SVG element and\r\n     * returns it. Returns null if no matching element is found.\r\n     */\r\n    /**\r\n     * Searches the cached element of the given SvgIconConfig for a nested icon element whose \"id\"\r\n     * tag matches the specified name. If found, copies the nested element to a new SVG element and\r\n     * returns it. Returns null if no matching element is found.\r\n     * @private\r\n     * @param {?} iconSet\r\n     * @param {?} iconName\r\n     * @param {?=} options\r\n     * @return {?}\r\n     */\r\n    MatIconRegistry.prototype._extractSvgIconFromSet = /**\r\n     * Searches the cached element of the given SvgIconConfig for a nested icon element whose \"id\"\r\n     * tag matches the specified name. If found, copies the nested element to a new SVG element and\r\n     * returns it. Returns null if no matching element is found.\r\n     * @private\r\n     * @param {?} iconSet\r\n     * @param {?} iconName\r\n     * @param {?=} options\r\n     * @return {?}\r\n     */\r\n    function (iconSet, iconName, options) {\r\n        // Use the `id=\"iconName\"` syntax in order to escape special\r\n        // characters in the ID (versus using the #iconName syntax).\r\n        /** @type {?} */\r\n        var iconSource = iconSet.querySelector(\"[id=\\\"\" + iconName + \"\\\"]\");\r\n        if (!iconSource) {\r\n            return null;\r\n        }\r\n        // Clone the element and remove the ID to prevent multiple elements from being added\r\n        // to the page with the same ID.\r\n        /** @type {?} */\r\n        var iconElement = (/** @type {?} */ (iconSource.cloneNode(true)));\r\n        iconElement.removeAttribute('id');\r\n        // If the icon node is itself an <svg> node, clone and return it directly. If not, set it as\r\n        // the content of a new <svg> node.\r\n        if (iconElement.nodeName.toLowerCase() === 'svg') {\r\n            return this._setSvgAttributes((/** @type {?} */ (iconElement)), options);\r\n        }\r\n        // If the node is a <symbol>, it won't be rendered so we have to convert it into <svg>. Note\r\n        // that the same could be achieved by referring to it via <use href=\"#id\">, however the <use>\r\n        // tag is problematic on Firefox, because it needs to include the current page path.\r\n        if (iconElement.nodeName.toLowerCase() === 'symbol') {\r\n            return this._setSvgAttributes(this._toSvgElement(iconElement), options);\r\n        }\r\n        // createElement('SVG') doesn't work as expected; the DOM ends up with\r\n        // the correct nodes, but the SVG content doesn't render. Instead we\r\n        // have to create an empty SVG node using innerHTML and append its content.\r\n        // Elements created using DOMParser.parseFromString have the same problem.\r\n        // http://stackoverflow.com/questions/23003278/svg-innerhtml-in-firefox-can-not-display\r\n        /** @type {?} */\r\n        var svg = this._svgElementFromString('<svg></svg>');\r\n        // Clone the node so we don't remove it from the parent icon set element.\r\n        svg.appendChild(iconElement);\r\n        return this._setSvgAttributes(svg, options);\r\n    };\r\n    /**\r\n     * Creates a DOM element from the given SVG string.\r\n     */\r\n    /**\r\n     * Creates a DOM element from the given SVG string.\r\n     * @private\r\n     * @param {?} str\r\n     * @return {?}\r\n     */\r\n    MatIconRegistry.prototype._svgElementFromString = /**\r\n     * Creates a DOM element from the given SVG string.\r\n     * @private\r\n     * @param {?} str\r\n     * @return {?}\r\n     */\r\n    function (str) {\r\n        /** @type {?} */\r\n        var div = this._document.createElement('DIV');\r\n        div.innerHTML = str;\r\n        /** @type {?} */\r\n        var svg = (/** @type {?} */ (div.querySelector('svg')));\r\n        if (!svg) {\r\n            throw Error('<svg> tag not found');\r\n        }\r\n        return svg;\r\n    };\r\n    /**\r\n     * Converts an element into an SVG node by cloning all of its children.\r\n     */\r\n    /**\r\n     * Converts an element into an SVG node by cloning all of its children.\r\n     * @private\r\n     * @param {?} element\r\n     * @return {?}\r\n     */\r\n    MatIconRegistry.prototype._toSvgElement = /**\r\n     * Converts an element into an SVG node by cloning all of its children.\r\n     * @private\r\n     * @param {?} element\r\n     * @return {?}\r\n     */\r\n    function (element) {\r\n        /** @type {?} */\r\n        var svg = this._svgElementFromString('<svg></svg>');\r\n        /** @type {?} */\r\n        var attributes = element.attributes;\r\n        // Copy over all the attributes from the `symbol` to the new SVG, except the id.\r\n        for (var i = 0; i < attributes.length; i++) {\r\n            var _a = attributes[i], name_1 = _a.name, value = _a.value;\r\n            if (name_1 !== 'id') {\r\n                svg.setAttribute(name_1, value);\r\n            }\r\n        }\r\n        for (var i = 0; i < element.childNodes.length; i++) {\r\n            if (element.childNodes[i].nodeType === this._document.ELEMENT_NODE) {\r\n                svg.appendChild(element.childNodes[i].cloneNode(true));\r\n            }\r\n        }\r\n        return svg;\r\n    };\r\n    /**\r\n     * Sets the default attributes for an SVG element to be used as an icon.\r\n     */\r\n    /**\r\n     * Sets the default attributes for an SVG element to be used as an icon.\r\n     * @private\r\n     * @param {?} svg\r\n     * @param {?=} options\r\n     * @return {?}\r\n     */\r\n    MatIconRegistry.prototype._setSvgAttributes = /**\r\n     * Sets the default attributes for an SVG element to be used as an icon.\r\n     * @private\r\n     * @param {?} svg\r\n     * @param {?=} options\r\n     * @return {?}\r\n     */\r\n    function (svg, options) {\r\n        svg.setAttribute('fit', '');\r\n        svg.setAttribute('height', '100%');\r\n        svg.setAttribute('width', '100%');\r\n        svg.setAttribute('preserveAspectRatio', 'xMidYMid meet');\r\n        svg.setAttribute('focusable', 'false'); // Disable IE11 default behavior to make SVGs focusable.\r\n        if (options && options.viewBox) {\r\n            svg.setAttribute('viewBox', options.viewBox);\r\n        }\r\n        return svg;\r\n    };\r\n    /**\r\n     * Returns an Observable which produces the string contents of the given URL. Results may be\r\n     * cached, so future calls with the same URL may not cause another HTTP request.\r\n     */\r\n    /**\r\n     * Returns an Observable which produces the string contents of the given URL. Results may be\r\n     * cached, so future calls with the same URL may not cause another HTTP request.\r\n     * @private\r\n     * @param {?} safeUrl\r\n     * @return {?}\r\n     */\r\n    MatIconRegistry.prototype._fetchUrl = /**\r\n     * Returns an Observable which produces the string contents of the given URL. Results may be\r\n     * cached, so future calls with the same URL may not cause another HTTP request.\r\n     * @private\r\n     * @param {?} safeUrl\r\n     * @return {?}\r\n     */\r\n    function (safeUrl) {\r\n        var _this = this;\r\n        if (!this._httpClient) {\r\n            throw getMatIconNoHttpProviderError();\r\n        }\r\n        if (safeUrl == null) {\r\n            throw Error(\"Cannot fetch icon from URL \\\"\" + safeUrl + \"\\\".\");\r\n        }\r\n        /** @type {?} */\r\n        var url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, safeUrl);\r\n        if (!url) {\r\n            throw getMatIconFailedToSanitizeUrlError(safeUrl);\r\n        }\r\n        // Store in-progress fetches to avoid sending a duplicate request for a URL when there is\r\n        // already a request in progress for that URL. It's necessary to call share() on the\r\n        // Observable returned by http.get() so that multiple subscribers don't cause multiple XHRs.\r\n        /** @type {?} */\r\n        var inProgressFetch = this._inProgressUrlFetches.get(url);\r\n        if (inProgressFetch) {\r\n            return inProgressFetch;\r\n        }\r\n        // TODO(jelbourn): for some reason, the `finalize` operator \"loses\" the generic type on the\r\n        // Observable. Figure out why and fix it.\r\n        /** @type {?} */\r\n        var req = this._httpClient.get(url, { responseType: 'text' }).pipe(finalize((/**\r\n         * @return {?}\r\n         */\r\n        function () { return _this._inProgressUrlFetches.delete(url); })), share());\r\n        this._inProgressUrlFetches.set(url, req);\r\n        return req;\r\n    };\r\n    /**\r\n     * Registers an icon config by name in the specified namespace.\r\n     * @param namespace Namespace in which to register the icon config.\r\n     * @param iconName Name under which to register the config.\r\n     * @param config Config to be registered.\r\n     */\r\n    /**\r\n     * Registers an icon config by name in the specified namespace.\r\n     * @private\r\n     * @template THIS\r\n     * @this {THIS}\r\n     * @param {?} namespace Namespace in which to register the icon config.\r\n     * @param {?} iconName Name under which to register the config.\r\n     * @param {?} config Config to be registered.\r\n     * @return {THIS}\r\n     */\r\n    MatIconRegistry.prototype._addSvgIconConfig = /**\r\n     * Registers an icon config by name in the specified namespace.\r\n     * @private\r\n     * @template THIS\r\n     * @this {THIS}\r\n     * @param {?} namespace Namespace in which to register the icon config.\r\n     * @param {?} iconName Name under which to register the config.\r\n     * @param {?} config Config to be registered.\r\n     * @return {THIS}\r\n     */\r\n    function (namespace, iconName, config) {\r\n        (/** @type {?} */ (this))._svgIconConfigs.set(iconKey(namespace, iconName), config);\r\n        return (/** @type {?} */ (this));\r\n    };\r\n    /**\r\n     * Registers an icon set config in the specified namespace.\r\n     * @param namespace Namespace in which to register the icon config.\r\n     * @param config Config to be registered.\r\n     */\r\n    /**\r\n     * Registers an icon set config in the specified namespace.\r\n     * @private\r\n     * @template THIS\r\n     * @this {THIS}\r\n     * @param {?} namespace Namespace in which to register the icon config.\r\n     * @param {?} config Config to be registered.\r\n     * @return {THIS}\r\n     */\r\n    MatIconRegistry.prototype._addSvgIconSetConfig = /**\r\n     * Registers an icon set config in the specified namespace.\r\n     * @private\r\n     * @template THIS\r\n     * @this {THIS}\r\n     * @param {?} namespace Namespace in which to register the icon config.\r\n     * @param {?} config Config to be registered.\r\n     * @return {THIS}\r\n     */\r\n    function (namespace, config) {\r\n        /** @type {?} */\r\n        var configNamespace = (/** @type {?} */ (this))._iconSetConfigs.get(namespace);\r\n        if (configNamespace) {\r\n            configNamespace.push(config);\r\n        }\r\n        else {\r\n            (/** @type {?} */ (this))._iconSetConfigs.set(namespace, [config]);\r\n        }\r\n        return (/** @type {?} */ (this));\r\n    };\r\n    MatIconRegistry.decorators = [\r\n        { type: Injectable, args: [{ providedIn: 'root' },] },\r\n    ];\r\n    /** @nocollapse */\r\n    MatIconRegistry.ctorParameters = function () { return [\r\n        { type: HttpClient, decorators: [{ type: Optional }] },\r\n        { type: DomSanitizer },\r\n        { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [DOCUMENT,] }] },\r\n        { type: ErrorHandler, decorators: [{ type: Optional }] }\r\n    ]; };\r\n    /** @nocollapse */ MatIconRegistry.ngInjectableDef = ɵɵdefineInjectable({ factory: function MatIconRegistry_Factory() { return new MatIconRegistry(ɵɵinject(HttpClient, 8), ɵɵinject(DomSanitizer), ɵɵinject(DOCUMENT, 8), ɵɵinject(ErrorHandler, 8)); }, token: MatIconRegistry, providedIn: \"root\" });\r\n    return MatIconRegistry;\r\n}());\r\n/**\r\n * \\@docs-private\r\n * @param {?} parentRegistry\r\n * @param {?} httpClient\r\n * @param {?} sanitizer\r\n * @param {?=} document\r\n * @param {?=} errorHandler\r\n * @return {?}\r\n */\r\nfunction ICON_REGISTRY_PROVIDER_FACTORY(parentRegistry, httpClient, sanitizer, document, errorHandler) {\r\n    return parentRegistry || new MatIconRegistry(httpClient, sanitizer, document, errorHandler);\r\n}\r\n/**\r\n * \\@docs-private\r\n * @type {?}\r\n */\r\nvar ICON_REGISTRY_PROVIDER = {\r\n    // If there is already an MatIconRegistry available, use that. Otherwise, provide a new one.\r\n    provide: MatIconRegistry,\r\n    deps: [\r\n        [new Optional(), new SkipSelf(), MatIconRegistry],\r\n        [new Optional(), HttpClient],\r\n        DomSanitizer,\r\n        [new Optional(), ErrorHandler],\r\n        [new Optional(), (/** @type {?} */ (DOCUMENT))],\r\n    ],\r\n    useFactory: ICON_REGISTRY_PROVIDER_FACTORY,\r\n};\r\n/**\r\n * Clones an SVGElement while preserving type information.\r\n * @param {?} svg\r\n * @return {?}\r\n */\r\nfunction cloneSvg(svg) {\r\n    return (/** @type {?} */ (svg.cloneNode(true)));\r\n}\r\n/**\r\n * Returns the cache key to use for an icon namespace and name.\r\n * @param {?} namespace\r\n * @param {?} name\r\n * @return {?}\r\n */\r\nfunction iconKey(namespace, name) {\r\n    return namespace + ':' + name;\r\n}\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n// Boilerplate for applying mixins to MatIcon.\r\n/**\r\n * \\@docs-private\r\n */\r\nvar \r\n// Boilerplate for applying mixins to MatIcon.\r\n/**\r\n * \\@docs-private\r\n */\r\nMatIconBase = /** @class */ (function () {\r\n    function MatIconBase(_elementRef) {\r\n        this._elementRef = _elementRef;\r\n    }\r\n    return MatIconBase;\r\n}());\r\n/** @type {?} */\r\nvar _MatIconMixinBase = mixinColor(MatIconBase);\r\n/**\r\n * Injection token used to provide the current location to `MatIcon`.\r\n * Used to handle server-side rendering and to stub out during unit tests.\r\n * \\@docs-private\r\n * @type {?}\r\n */\r\nvar MAT_ICON_LOCATION = new InjectionToken('mat-icon-location', {\r\n    providedIn: 'root',\r\n    factory: MAT_ICON_LOCATION_FACTORY\r\n});\r\n/**\r\n * \\@docs-private\r\n * @return {?}\r\n */\r\nfunction MAT_ICON_LOCATION_FACTORY() {\r\n    /** @type {?} */\r\n    var _document = inject(DOCUMENT);\r\n    /** @type {?} */\r\n    var _location = _document ? _document.location : null;\r\n    return {\r\n        // Note that this needs to be a function, rather than a property, because Angular\r\n        // will only resolve it once, but we want the current path on each call.\r\n        getPathname: (/**\r\n         * @return {?}\r\n         */\r\n        function () { return _location ? (_location.pathname + _location.search) : ''; })\r\n    };\r\n}\r\n/**\r\n * SVG attributes that accept a FuncIRI (e.g. `url(<something>)`).\r\n * @type {?}\r\n */\r\nvar funcIriAttributes = [\r\n    'clip-path',\r\n    'color-profile',\r\n    'src',\r\n    'cursor',\r\n    'fill',\r\n    'filter',\r\n    'marker',\r\n    'marker-start',\r\n    'marker-mid',\r\n    'marker-end',\r\n    'mask',\r\n    'stroke'\r\n];\r\nvar ɵ0 = /**\r\n * @param {?} attr\r\n * @return {?}\r\n */\r\nfunction (attr) { return \"[\" + attr + \"]\"; };\r\n/**\r\n * Selector that can be used to find all elements that are using a `FuncIRI`.\r\n * @type {?}\r\n */\r\nvar funcIriAttributeSelector = funcIriAttributes.map((ɵ0)).join(', ');\r\n/**\r\n * Regex that can be used to extract the id out of a FuncIRI.\r\n * @type {?}\r\n */\r\nvar funcIriPattern = /^url\\(['\"]?#(.*?)['\"]?\\)$/;\r\n/**\r\n * Component to display an icon. It can be used in the following ways:\r\n *\r\n * - Specify the svgIcon input to load an SVG icon from a URL previously registered with the\r\n *   addSvgIcon, addSvgIconInNamespace, addSvgIconSet, or addSvgIconSetInNamespace methods of\r\n *   MatIconRegistry. If the svgIcon value contains a colon it is assumed to be in the format\r\n *   \"[namespace]:[name]\", if not the value will be the name of an icon in the default namespace.\r\n *   Examples:\r\n *     `<mat-icon svgIcon=\"left-arrow\"></mat-icon>\r\n *     <mat-icon svgIcon=\"animals:cat\"></mat-icon>`\r\n *\r\n * - Use a font ligature as an icon by putting the ligature text in the content of the `<mat-icon>`\r\n *   component. By default the Material icons font is used as described at\r\n *   http://google.github.io/material-design-icons/#icon-font-for-the-web. You can specify an\r\n *   alternate font by setting the fontSet input to either the CSS class to apply to use the\r\n *   desired font, or to an alias previously registered with MatIconRegistry.registerFontClassAlias.\r\n *   Examples:\r\n *     `<mat-icon>home</mat-icon>\r\n *     <mat-icon fontSet=\"myfont\">sun</mat-icon>`\r\n *\r\n * - Specify a font glyph to be included via CSS rules by setting the fontSet input to specify the\r\n *   font, and the fontIcon input to specify the icon. Typically the fontIcon will specify a\r\n *   CSS class which causes the glyph to be displayed via a :before selector, as in\r\n *   https://fortawesome.github.io/Font-Awesome/examples/\r\n *   Example:\r\n *     `<mat-icon fontSet=\"fa\" fontIcon=\"alarm\"></mat-icon>`\r\n */\r\nvar MatIcon = /** @class */ (function (_super) {\r\n    __extends(MatIcon, _super);\r\n    function MatIcon(elementRef, _iconRegistry, ariaHidden, _location, _errorHandler) {\r\n        var _this = _super.call(this, elementRef) || this;\r\n        _this._iconRegistry = _iconRegistry;\r\n        _this._location = _location;\r\n        _this._errorHandler = _errorHandler;\r\n        _this._inline = false;\r\n        // If the user has not explicitly set aria-hidden, mark the icon as hidden, as this is\r\n        // the right thing to do for the majority of icon use-cases.\r\n        if (!ariaHidden) {\r\n            elementRef.nativeElement.setAttribute('aria-hidden', 'true');\r\n        }\r\n        return _this;\r\n    }\r\n    Object.defineProperty(MatIcon.prototype, \"inline\", {\r\n        /**\r\n         * Whether the icon should be inlined, automatically sizing the icon to match the font size of\r\n         * the element the icon is contained in.\r\n         */\r\n        get: /**\r\n         * Whether the icon should be inlined, automatically sizing the icon to match the font size of\r\n         * the element the icon is contained in.\r\n         * @return {?}\r\n         */\r\n        function () {\r\n            return this._inline;\r\n        },\r\n        set: /**\r\n         * @param {?} inline\r\n         * @return {?}\r\n         */\r\n        function (inline) {\r\n            this._inline = coerceBooleanProperty(inline);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(MatIcon.prototype, \"fontSet\", {\r\n        /** Font set that the icon is a part of. */\r\n        get: /**\r\n         * Font set that the icon is a part of.\r\n         * @return {?}\r\n         */\r\n        function () { return this._fontSet; },\r\n        set: /**\r\n         * @param {?} value\r\n         * @return {?}\r\n         */\r\n        function (value) {\r\n            this._fontSet = this._cleanupFontValue(value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(MatIcon.prototype, \"fontIcon\", {\r\n        /** Name of an icon within a font set. */\r\n        get: /**\r\n         * Name of an icon within a font set.\r\n         * @return {?}\r\n         */\r\n        function () { return this._fontIcon; },\r\n        set: /**\r\n         * @param {?} value\r\n         * @return {?}\r\n         */\r\n        function (value) {\r\n            this._fontIcon = this._cleanupFontValue(value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Splits an svgIcon binding value into its icon set and icon name components.\r\n     * Returns a 2-element array of [(icon set), (icon name)].\r\n     * The separator for the two fields is ':'. If there is no separator, an empty\r\n     * string is returned for the icon set and the entire value is returned for\r\n     * the icon name. If the argument is falsy, returns an array of two empty strings.\r\n     * Throws an error if the name contains two or more ':' separators.\r\n     * Examples:\r\n     *   `'social:cake' -> ['social', 'cake']\r\n     *   'penguin' -> ['', 'penguin']\r\n     *   null -> ['', '']\r\n     *   'a:b:c' -> (throws Error)`\r\n     */\r\n    /**\r\n     * Splits an svgIcon binding value into its icon set and icon name components.\r\n     * Returns a 2-element array of [(icon set), (icon name)].\r\n     * The separator for the two fields is ':'. If there is no separator, an empty\r\n     * string is returned for the icon set and the entire value is returned for\r\n     * the icon name. If the argument is falsy, returns an array of two empty strings.\r\n     * Throws an error if the name contains two or more ':' separators.\r\n     * Examples:\r\n     *   `'social:cake' -> ['social', 'cake']\r\n     *   'penguin' -> ['', 'penguin']\r\n     *   null -> ['', '']\r\n     *   'a:b:c' -> (throws Error)`\r\n     * @private\r\n     * @param {?} iconName\r\n     * @return {?}\r\n     */\r\n    MatIcon.prototype._splitIconName = /**\r\n     * Splits an svgIcon binding value into its icon set and icon name components.\r\n     * Returns a 2-element array of [(icon set), (icon name)].\r\n     * The separator for the two fields is ':'. If there is no separator, an empty\r\n     * string is returned for the icon set and the entire value is returned for\r\n     * the icon name. If the argument is falsy, returns an array of two empty strings.\r\n     * Throws an error if the name contains two or more ':' separators.\r\n     * Examples:\r\n     *   `'social:cake' -> ['social', 'cake']\r\n     *   'penguin' -> ['', 'penguin']\r\n     *   null -> ['', '']\r\n     *   'a:b:c' -> (throws Error)`\r\n     * @private\r\n     * @param {?} iconName\r\n     * @return {?}\r\n     */\r\n    function (iconName) {\r\n        if (!iconName) {\r\n            return ['', ''];\r\n        }\r\n        /** @type {?} */\r\n        var parts = iconName.split(':');\r\n        switch (parts.length) {\r\n            case 1: return ['', parts[0]]; // Use default namespace.\r\n            case 2: return (/** @type {?} */ (parts));\r\n            default: throw Error(\"Invalid icon name: \\\"\" + iconName + \"\\\"\");\r\n        }\r\n    };\r\n    /**\r\n     * @param {?} changes\r\n     * @return {?}\r\n     */\r\n    MatIcon.prototype.ngOnChanges = /**\r\n     * @param {?} changes\r\n     * @return {?}\r\n     */\r\n    function (changes) {\r\n        var _this = this;\r\n        // Only update the inline SVG icon if the inputs changed, to avoid unnecessary DOM operations.\r\n        /** @type {?} */\r\n        var svgIconChanges = changes['svgIcon'];\r\n        if (svgIconChanges) {\r\n            if (this.svgIcon) {\r\n                var _a = this._splitIconName(this.svgIcon), namespace_1 = _a[0], iconName_1 = _a[1];\r\n                this._iconRegistry.getNamedSvgIcon(iconName_1, namespace_1)\r\n                    .pipe(take(1))\r\n                    .subscribe((/**\r\n                 * @param {?} svg\r\n                 * @return {?}\r\n                 */\r\n                function (svg) { return _this._setSvgElement(svg); }), (/**\r\n                 * @param {?} err\r\n                 * @return {?}\r\n                 */\r\n                function (err) {\r\n                    /** @type {?} */\r\n                    var errorMessage = \"Error retrieving icon \" + namespace_1 + \":\" + iconName_1 + \"! \" + err.message;\r\n                    // @breaking-change 9.0.0 _errorHandler parameter to be made required.\r\n                    if (_this._errorHandler) {\r\n                        _this._errorHandler.handleError(new Error(errorMessage));\r\n                    }\r\n                    else {\r\n                        console.error(errorMessage);\r\n                    }\r\n                }));\r\n            }\r\n            else if (svgIconChanges.previousValue) {\r\n                this._clearSvgElement();\r\n            }\r\n        }\r\n        if (this._usingFontIcon()) {\r\n            this._updateFontIconClasses();\r\n        }\r\n    };\r\n    /**\r\n     * @return {?}\r\n     */\r\n    MatIcon.prototype.ngOnInit = /**\r\n     * @return {?}\r\n     */\r\n    function () {\r\n        // Update font classes because ngOnChanges won't be called if none of the inputs are present,\r\n        // e.g. <mat-icon>arrow</mat-icon> In this case we need to add a CSS class for the default font.\r\n        if (this._usingFontIcon()) {\r\n            this._updateFontIconClasses();\r\n        }\r\n    };\r\n    /**\r\n     * @return {?}\r\n     */\r\n    MatIcon.prototype.ngAfterViewChecked = /**\r\n     * @return {?}\r\n     */\r\n    function () {\r\n        /** @type {?} */\r\n        var cachedElements = this._elementsWithExternalReferences;\r\n        if (cachedElements && this._location && cachedElements.size) {\r\n            /** @type {?} */\r\n            var newPath = this._location.getPathname();\r\n            // We need to check whether the URL has changed on each change detection since\r\n            // the browser doesn't have an API that will let us react on link clicks and\r\n            // we can't depend on the Angular router. The references need to be updated,\r\n            // because while most browsers don't care whether the URL is correct after\r\n            // the first render, Safari will break if the user navigates to a different\r\n            // page and the SVG isn't re-rendered.\r\n            if (newPath !== this._previousPath) {\r\n                this._previousPath = newPath;\r\n                this._prependPathToReferences(newPath);\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * @return {?}\r\n     */\r\n    MatIcon.prototype.ngOnDestroy = /**\r\n     * @return {?}\r\n     */\r\n    function () {\r\n        if (this._elementsWithExternalReferences) {\r\n            this._elementsWithExternalReferences.clear();\r\n        }\r\n    };\r\n    /**\r\n     * @private\r\n     * @return {?}\r\n     */\r\n    MatIcon.prototype._usingFontIcon = /**\r\n     * @private\r\n     * @return {?}\r\n     */\r\n    function () {\r\n        return !this.svgIcon;\r\n    };\r\n    /**\r\n     * @private\r\n     * @param {?} svg\r\n     * @return {?}\r\n     */\r\n    MatIcon.prototype._setSvgElement = /**\r\n     * @private\r\n     * @param {?} svg\r\n     * @return {?}\r\n     */\r\n    function (svg) {\r\n        this._clearSvgElement();\r\n        // Workaround for IE11 and Edge ignoring `style` tags inside dynamically-created SVGs.\r\n        // See: https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/10898469/\r\n        // Do this before inserting the element into the DOM, in order to avoid a style recalculation.\r\n        /** @type {?} */\r\n        var styleTags = (/** @type {?} */ (svg.querySelectorAll('style')));\r\n        for (var i = 0; i < styleTags.length; i++) {\r\n            styleTags[i].textContent += ' ';\r\n        }\r\n        // Note: we do this fix here, rather than the icon registry, because the\r\n        // references have to point to the URL at the time that the icon was created.\r\n        if (this._location) {\r\n            /** @type {?} */\r\n            var path = this._location.getPathname();\r\n            this._previousPath = path;\r\n            this._cacheChildrenWithExternalReferences(svg);\r\n            this._prependPathToReferences(path);\r\n        }\r\n        this._elementRef.nativeElement.appendChild(svg);\r\n    };\r\n    /**\r\n     * @private\r\n     * @return {?}\r\n     */\r\n    MatIcon.prototype._clearSvgElement = /**\r\n     * @private\r\n     * @return {?}\r\n     */\r\n    function () {\r\n        /** @type {?} */\r\n        var layoutElement = this._elementRef.nativeElement;\r\n        /** @type {?} */\r\n        var childCount = layoutElement.childNodes.length;\r\n        if (this._elementsWithExternalReferences) {\r\n            this._elementsWithExternalReferences.clear();\r\n        }\r\n        // Remove existing non-element child nodes and SVGs, and add the new SVG element. Note that\r\n        // we can't use innerHTML, because IE will throw if the element has a data binding.\r\n        while (childCount--) {\r\n            /** @type {?} */\r\n            var child = layoutElement.childNodes[childCount];\r\n            // 1 corresponds to Node.ELEMENT_NODE. We remove all non-element nodes in order to get rid\r\n            // of any loose text nodes, as well as any SVG elements in order to remove any old icons.\r\n            if (child.nodeType !== 1 || child.nodeName.toLowerCase() === 'svg') {\r\n                layoutElement.removeChild(child);\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * @private\r\n     * @return {?}\r\n     */\r\n    MatIcon.prototype._updateFontIconClasses = /**\r\n     * @private\r\n     * @return {?}\r\n     */\r\n    function () {\r\n        if (!this._usingFontIcon()) {\r\n            return;\r\n        }\r\n        /** @type {?} */\r\n        var elem = this._elementRef.nativeElement;\r\n        /** @type {?} */\r\n        var fontSetClass = this.fontSet ?\r\n            this._iconRegistry.classNameForFontAlias(this.fontSet) :\r\n            this._iconRegistry.getDefaultFontSetClass();\r\n        if (fontSetClass != this._previousFontSetClass) {\r\n            if (this._previousFontSetClass) {\r\n                elem.classList.remove(this._previousFontSetClass);\r\n            }\r\n            if (fontSetClass) {\r\n                elem.classList.add(fontSetClass);\r\n            }\r\n            this._previousFontSetClass = fontSetClass;\r\n        }\r\n        if (this.fontIcon != this._previousFontIconClass) {\r\n            if (this._previousFontIconClass) {\r\n                elem.classList.remove(this._previousFontIconClass);\r\n            }\r\n            if (this.fontIcon) {\r\n                elem.classList.add(this.fontIcon);\r\n            }\r\n            this._previousFontIconClass = this.fontIcon;\r\n        }\r\n    };\r\n    /**\r\n     * Cleans up a value to be used as a fontIcon or fontSet.\r\n     * Since the value ends up being assigned as a CSS class, we\r\n     * have to trim the value and omit space-separated values.\r\n     */\r\n    /**\r\n     * Cleans up a value to be used as a fontIcon or fontSet.\r\n     * Since the value ends up being assigned as a CSS class, we\r\n     * have to trim the value and omit space-separated values.\r\n     * @private\r\n     * @param {?} value\r\n     * @return {?}\r\n     */\r\n    MatIcon.prototype._cleanupFontValue = /**\r\n     * Cleans up a value to be used as a fontIcon or fontSet.\r\n     * Since the value ends up being assigned as a CSS class, we\r\n     * have to trim the value and omit space-separated values.\r\n     * @private\r\n     * @param {?} value\r\n     * @return {?}\r\n     */\r\n    function (value) {\r\n        return typeof value === 'string' ? value.trim().split(' ')[0] : value;\r\n    };\r\n    /**\r\n     * Prepends the current path to all elements that have an attribute pointing to a `FuncIRI`\r\n     * reference. This is required because WebKit browsers require references to be prefixed with\r\n     * the current path, if the page has a `base` tag.\r\n     */\r\n    /**\r\n     * Prepends the current path to all elements that have an attribute pointing to a `FuncIRI`\r\n     * reference. This is required because WebKit browsers require references to be prefixed with\r\n     * the current path, if the page has a `base` tag.\r\n     * @private\r\n     * @param {?} path\r\n     * @return {?}\r\n     */\r\n    MatIcon.prototype._prependPathToReferences = /**\r\n     * Prepends the current path to all elements that have an attribute pointing to a `FuncIRI`\r\n     * reference. This is required because WebKit browsers require references to be prefixed with\r\n     * the current path, if the page has a `base` tag.\r\n     * @private\r\n     * @param {?} path\r\n     * @return {?}\r\n     */\r\n    function (path) {\r\n        /** @type {?} */\r\n        var elements = this._elementsWithExternalReferences;\r\n        if (elements) {\r\n            elements.forEach((/**\r\n             * @param {?} attrs\r\n             * @param {?} element\r\n             * @return {?}\r\n             */\r\n            function (attrs, element) {\r\n                attrs.forEach((/**\r\n                 * @param {?} attr\r\n                 * @return {?}\r\n                 */\r\n                function (attr) {\r\n                    element.setAttribute(attr.name, \"url('\" + path + \"#\" + attr.value + \"')\");\r\n                }));\r\n            }));\r\n        }\r\n    };\r\n    /**\r\n     * Caches the children of an SVG element that have `url()`\r\n     * references that we need to prefix with the current path.\r\n     */\r\n    /**\r\n     * Caches the children of an SVG element that have `url()`\r\n     * references that we need to prefix with the current path.\r\n     * @private\r\n     * @param {?} element\r\n     * @return {?}\r\n     */\r\n    MatIcon.prototype._cacheChildrenWithExternalReferences = /**\r\n     * Caches the children of an SVG element that have `url()`\r\n     * references that we need to prefix with the current path.\r\n     * @private\r\n     * @param {?} element\r\n     * @return {?}\r\n     */\r\n    function (element) {\r\n        /** @type {?} */\r\n        var elementsWithFuncIri = element.querySelectorAll(funcIriAttributeSelector);\r\n        /** @type {?} */\r\n        var elements = this._elementsWithExternalReferences =\r\n            this._elementsWithExternalReferences || new Map();\r\n        var _loop_1 = function (i) {\r\n            funcIriAttributes.forEach((/**\r\n             * @param {?} attr\r\n             * @return {?}\r\n             */\r\n            function (attr) {\r\n                /** @type {?} */\r\n                var elementWithReference = elementsWithFuncIri[i];\r\n                /** @type {?} */\r\n                var value = elementWithReference.getAttribute(attr);\r\n                /** @type {?} */\r\n                var match = value ? value.match(funcIriPattern) : null;\r\n                if (match) {\r\n                    /** @type {?} */\r\n                    var attributes = elements.get(elementWithReference);\r\n                    if (!attributes) {\r\n                        attributes = [];\r\n                        elements.set(elementWithReference, attributes);\r\n                    }\r\n                    (/** @type {?} */ (attributes)).push({ name: attr, value: match[1] });\r\n                }\r\n            }));\r\n        };\r\n        for (var i = 0; i < elementsWithFuncIri.length; i++) {\r\n            _loop_1(i);\r\n        }\r\n    };\r\n    MatIcon.decorators = [\r\n        { type: Component, args: [{template: '<ng-content></ng-content>',\r\n                    selector: 'mat-icon',\r\n                    exportAs: 'matIcon',\r\n                    styles: [\".mat-icon{background-repeat:no-repeat;display:inline-block;fill:currentColor;height:24px;width:24px}.mat-icon.mat-icon-inline{font-size:inherit;height:inherit;line-height:inherit;width:inherit}[dir=rtl] .mat-icon-rtl-mirror{transform:scale(-1,1)}.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-prefix .mat-icon,.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-suffix .mat-icon{display:block}.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-prefix .mat-icon-button .mat-icon,.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-suffix .mat-icon-button .mat-icon{margin:auto}\"],\r\n                    inputs: ['color'],\r\n                    host: {\r\n                        'role': 'img',\r\n                        'class': 'mat-icon notranslate',\r\n                        '[class.mat-icon-inline]': 'inline',\r\n                        '[class.mat-icon-no-color]': 'color !== \"primary\" && color !== \"accent\" && color !== \"warn\"',\r\n                    },\r\n                    encapsulation: ViewEncapsulation.None,\r\n                    changeDetection: ChangeDetectionStrategy.OnPush,\r\n                },] },\r\n    ];\r\n    /** @nocollapse */\r\n    MatIcon.ctorParameters = function () { return [\r\n        { type: ElementRef },\r\n        { type: MatIconRegistry },\r\n        { type: String, decorators: [{ type: Attribute, args: ['aria-hidden',] }] },\r\n        { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MAT_ICON_LOCATION,] }] },\r\n        { type: ErrorHandler, decorators: [{ type: Optional }] }\r\n    ]; };\r\n    MatIcon.propDecorators = {\r\n        inline: [{ type: Input }],\r\n        svgIcon: [{ type: Input }],\r\n        fontSet: [{ type: Input }],\r\n        fontIcon: [{ type: Input }]\r\n    };\r\n    return MatIcon;\r\n}(_MatIconMixinBase));\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\nvar MatIconModule = /** @class */ (function () {\r\n    function MatIconModule() {\r\n    }\r\n    MatIconModule.decorators = [\r\n        { type: NgModule, args: [{\r\n                    imports: [MatCommonModule],\r\n                    exports: [MatIcon, MatCommonModule],\r\n                    declarations: [MatIcon],\r\n                },] },\r\n    ];\r\n    return MatIconModule;\r\n}());\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n\r\nexport { MatIconModule, MAT_ICON_LOCATION_FACTORY, MAT_ICON_LOCATION, MatIcon, getMatIconNameNotFoundError, getMatIconNoHttpProviderError, getMatIconFailedToSanitizeUrlError, getMatIconFailedToSanitizeLiteralError, ICON_REGISTRY_PROVIDER_FACTORY, MatIconRegistry, ICON_REGISTRY_PROVIDER };\r\n\r\n"]}