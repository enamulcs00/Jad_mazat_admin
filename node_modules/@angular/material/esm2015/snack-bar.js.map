{"version":3,"sources":["v:/jad-admin-go/mazat_admin_panel/node_modules/@angular/material/esm2015/snack-bar.js"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2BA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CAoMC,gGAWC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CAuND,aAmBC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CAiBD,2BAcC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CAgTD,gaAGC","file":"snack-bar.js","sourcesContent":["/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nimport { Subject } from 'rxjs';\r\nimport { InjectionToken, Component, ViewEncapsulation, Inject, ChangeDetectionStrategy, ChangeDetectorRef, ElementRef, NgZone, ViewChild, NgModule, Injectable, Injector, Optional, SkipSelf, TemplateRef, ɵɵdefineInjectable, ɵɵinject, INJECTOR } from '@angular/core';\r\nimport { animate, state, style, transition, trigger } from '@angular/animations';\r\nimport { BasePortalOutlet, CdkPortalOutlet, PortalModule, ComponentPortal, PortalInjector, TemplatePortal } from '@angular/cdk/portal';\r\nimport { take, takeUntil } from 'rxjs/operators';\r\nimport { OverlayModule, Overlay, OverlayConfig } from '@angular/cdk/overlay';\r\nimport { CommonModule } from '@angular/common';\r\nimport { MatCommonModule } from '@angular/material/core';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { LiveAnnouncer } from '@angular/cdk/a11y';\r\nimport { BreakpointObserver, Breakpoints } from '@angular/cdk/layout';\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n/**\r\n * Reference to a snack bar dispatched from the snack bar service.\r\n * @template T\r\n */\r\nclass MatSnackBarRef {\r\n    /**\r\n     * @param {?} containerInstance\r\n     * @param {?} _overlayRef\r\n     */\r\n    constructor(containerInstance, _overlayRef) {\r\n        this._overlayRef = _overlayRef;\r\n        /**\r\n         * Subject for notifying the user that the snack bar has been dismissed.\r\n         */\r\n        this._afterDismissed = new Subject();\r\n        /**\r\n         * Subject for notifying the user that the snack bar has opened and appeared.\r\n         */\r\n        this._afterOpened = new Subject();\r\n        /**\r\n         * Subject for notifying the user that the snack bar action was called.\r\n         */\r\n        this._onAction = new Subject();\r\n        /**\r\n         * Whether the snack bar was dismissed using the action button.\r\n         */\r\n        this._dismissedByAction = false;\r\n        this.containerInstance = containerInstance;\r\n        // Dismiss snackbar on action.\r\n        this.onAction().subscribe((/**\r\n         * @return {?}\r\n         */\r\n        () => this.dismiss()));\r\n        containerInstance._onExit.subscribe((/**\r\n         * @return {?}\r\n         */\r\n        () => this._finishDismiss()));\r\n    }\r\n    /**\r\n     * Dismisses the snack bar.\r\n     * @return {?}\r\n     */\r\n    dismiss() {\r\n        if (!this._afterDismissed.closed) {\r\n            this.containerInstance.exit();\r\n        }\r\n        clearTimeout(this._durationTimeoutId);\r\n    }\r\n    /**\r\n     * Marks the snackbar action clicked.\r\n     * @return {?}\r\n     */\r\n    dismissWithAction() {\r\n        if (!this._onAction.closed) {\r\n            this._dismissedByAction = true;\r\n            this._onAction.next();\r\n            this._onAction.complete();\r\n        }\r\n    }\r\n    /**\r\n     * Marks the snackbar action clicked.\r\n     * @deprecated Use `dismissWithAction` instead.\r\n     * \\@breaking-change 8.0.0\r\n     * @return {?}\r\n     */\r\n    closeWithAction() {\r\n        this.dismissWithAction();\r\n    }\r\n    /**\r\n     * Dismisses the snack bar after some duration\r\n     * @param {?} duration\r\n     * @return {?}\r\n     */\r\n    _dismissAfter(duration) {\r\n        this._durationTimeoutId = setTimeout((/**\r\n         * @return {?}\r\n         */\r\n        () => this.dismiss()), duration);\r\n    }\r\n    /**\r\n     * Marks the snackbar as opened\r\n     * @return {?}\r\n     */\r\n    _open() {\r\n        if (!this._afterOpened.closed) {\r\n            this._afterOpened.next();\r\n            this._afterOpened.complete();\r\n        }\r\n    }\r\n    /**\r\n     * Cleans up the DOM after closing.\r\n     * @private\r\n     * @return {?}\r\n     */\r\n    _finishDismiss() {\r\n        this._overlayRef.dispose();\r\n        if (!this._onAction.closed) {\r\n            this._onAction.complete();\r\n        }\r\n        this._afterDismissed.next({ dismissedByAction: this._dismissedByAction });\r\n        this._afterDismissed.complete();\r\n        this._dismissedByAction = false;\r\n    }\r\n    /**\r\n     * Gets an observable that is notified when the snack bar is finished closing.\r\n     * @return {?}\r\n     */\r\n    afterDismissed() {\r\n        return this._afterDismissed.asObservable();\r\n    }\r\n    /**\r\n     * Gets an observable that is notified when the snack bar has opened and appeared.\r\n     * @return {?}\r\n     */\r\n    afterOpened() {\r\n        return this.containerInstance._onEnter;\r\n    }\r\n    /**\r\n     * Gets an observable that is notified when the snack bar action is called.\r\n     * @return {?}\r\n     */\r\n    onAction() {\r\n        return this._onAction.asObservable();\r\n    }\r\n}\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n/**\r\n * Injection token that can be used to access the data that was passed in to a snack bar.\r\n * @type {?}\r\n */\r\nconst MAT_SNACK_BAR_DATA = new InjectionToken('MatSnackBarData');\r\n/**\r\n * Configuration used when opening a snack-bar.\r\n * @template D\r\n */\r\nclass MatSnackBarConfig {\r\n    constructor() {\r\n        /**\r\n         * The politeness level for the MatAriaLiveAnnouncer announcement.\r\n         */\r\n        this.politeness = 'assertive';\r\n        /**\r\n         * Message to be announced by the LiveAnnouncer. When opening a snackbar without a custom\r\n         * component or template, the announcement message will default to the specified message.\r\n         */\r\n        this.announcementMessage = '';\r\n        /**\r\n         * The length of time in milliseconds to wait before automatically dismissing the snack bar.\r\n         */\r\n        this.duration = 0;\r\n        /**\r\n         * Data being injected into the child component.\r\n         */\r\n        this.data = null;\r\n        /**\r\n         * The horizontal position to place the snack bar.\r\n         */\r\n        this.horizontalPosition = 'center';\r\n        /**\r\n         * The vertical position to place the snack bar.\r\n         */\r\n        this.verticalPosition = 'bottom';\r\n    }\r\n}\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n/**\r\n * A component used to open as the default snack bar, matching material spec.\r\n * This should only be used internally by the snack bar service.\r\n */\r\nclass SimpleSnackBar {\r\n    /**\r\n     * @param {?} snackBarRef\r\n     * @param {?} data\r\n     */\r\n    constructor(snackBarRef, data) {\r\n        this.snackBarRef = snackBarRef;\r\n        this.data = data;\r\n    }\r\n    /**\r\n     * Performs the action on the snack bar.\r\n     * @return {?}\r\n     */\r\n    action() {\r\n        this.snackBarRef.dismissWithAction();\r\n    }\r\n    /**\r\n     * If the action button should be shown.\r\n     * @return {?}\r\n     */\r\n    get hasAction() {\r\n        return !!this.data.action;\r\n    }\r\n}\r\nSimpleSnackBar.decorators = [\r\n    { type: Component, args: [{selector: 'simple-snack-bar',\r\n                template: \"<span>{{data.message}}</span><div class=\\\"mat-simple-snackbar-action\\\" *ngIf=\\\"hasAction\\\"><button mat-button (click)=\\\"action()\\\">{{data.action}}</button></div>\",\r\n                styles: [\".mat-simple-snackbar{display:flex;justify-content:space-between;align-items:center;line-height:20px;opacity:1}.mat-simple-snackbar-action{flex-shrink:0;margin:-8px -8px -8px 8px}.mat-simple-snackbar-action button{max-height:36px;min-width:0}[dir=rtl] .mat-simple-snackbar-action{margin-left:-8px;margin-right:8px}\"],\r\n                encapsulation: ViewEncapsulation.None,\r\n                changeDetection: ChangeDetectionStrategy.OnPush,\r\n                host: {\r\n                    'class': 'mat-simple-snackbar',\r\n                }\r\n            },] },\r\n];\r\n/** @nocollapse */\r\nSimpleSnackBar.ctorParameters = () => [\r\n    { type: MatSnackBarRef },\r\n    { type: undefined, decorators: [{ type: Inject, args: [MAT_SNACK_BAR_DATA,] }] }\r\n];\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n/**\r\n * Animations used by the Material snack bar.\r\n * \\@docs-private\r\n * @type {?}\r\n */\r\nconst matSnackBarAnimations = {\r\n    /**\r\n     * Animation that shows and hides a snack bar.\r\n     */\r\n    snackBarState: trigger('state', [\r\n        state('void, hidden', style({\r\n            transform: 'scale(0.8)',\r\n            opacity: 0,\r\n        })),\r\n        state('visible', style({\r\n            transform: 'scale(1)',\r\n            opacity: 1,\r\n        })),\r\n        transition('* => visible', animate('150ms cubic-bezier(0, 0, 0.2, 1)')),\r\n        transition('* => void, * => hidden', animate('75ms cubic-bezier(0.4, 0.0, 1, 1)', style({\r\n            opacity: 0\r\n        }))),\r\n    ])\r\n};\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n/**\r\n * Internal component that wraps user-provided snack bar content.\r\n * \\@docs-private\r\n */\r\nclass MatSnackBarContainer extends BasePortalOutlet {\r\n    /**\r\n     * @param {?} _ngZone\r\n     * @param {?} _elementRef\r\n     * @param {?} _changeDetectorRef\r\n     * @param {?} snackBarConfig\r\n     */\r\n    constructor(_ngZone, _elementRef, _changeDetectorRef, snackBarConfig) {\r\n        super();\r\n        this._ngZone = _ngZone;\r\n        this._elementRef = _elementRef;\r\n        this._changeDetectorRef = _changeDetectorRef;\r\n        this.snackBarConfig = snackBarConfig;\r\n        /**\r\n         * Whether the component has been destroyed.\r\n         */\r\n        this._destroyed = false;\r\n        /**\r\n         * Subject for notifying that the snack bar has exited from view.\r\n         */\r\n        this._onExit = new Subject();\r\n        /**\r\n         * Subject for notifying that the snack bar has finished entering the view.\r\n         */\r\n        this._onEnter = new Subject();\r\n        /**\r\n         * The state of the snack bar animations.\r\n         */\r\n        this._animationState = 'void';\r\n        // Based on the ARIA spec, `alert` and `status` roles have an\r\n        // implicit `assertive` and `polite` politeness respectively.\r\n        if (snackBarConfig.politeness === 'assertive' && !snackBarConfig.announcementMessage) {\r\n            this._role = 'alert';\r\n        }\r\n        else if (snackBarConfig.politeness === 'off') {\r\n            this._role = null;\r\n        }\r\n        else {\r\n            this._role = 'status';\r\n        }\r\n    }\r\n    /**\r\n     * Attach a component portal as content to this snack bar container.\r\n     * @template T\r\n     * @param {?} portal\r\n     * @return {?}\r\n     */\r\n    attachComponentPortal(portal) {\r\n        this._assertNotAttached();\r\n        this._applySnackBarClasses();\r\n        return this._portalOutlet.attachComponentPortal(portal);\r\n    }\r\n    /**\r\n     * Attach a template portal as content to this snack bar container.\r\n     * @template C\r\n     * @param {?} portal\r\n     * @return {?}\r\n     */\r\n    attachTemplatePortal(portal) {\r\n        this._assertNotAttached();\r\n        this._applySnackBarClasses();\r\n        return this._portalOutlet.attachTemplatePortal(portal);\r\n    }\r\n    /**\r\n     * Handle end of animations, updating the state of the snackbar.\r\n     * @param {?} event\r\n     * @return {?}\r\n     */\r\n    onAnimationEnd(event) {\r\n        const { fromState, toState } = event;\r\n        if ((toState === 'void' && fromState !== 'void') || toState === 'hidden') {\r\n            this._completeExit();\r\n        }\r\n        if (toState === 'visible') {\r\n            // Note: we shouldn't use `this` inside the zone callback,\r\n            // because it can cause a memory leak.\r\n            /** @type {?} */\r\n            const onEnter = this._onEnter;\r\n            this._ngZone.run((/**\r\n             * @return {?}\r\n             */\r\n            () => {\r\n                onEnter.next();\r\n                onEnter.complete();\r\n            }));\r\n        }\r\n    }\r\n    /**\r\n     * Begin animation of snack bar entrance into view.\r\n     * @return {?}\r\n     */\r\n    enter() {\r\n        if (!this._destroyed) {\r\n            this._animationState = 'visible';\r\n            this._changeDetectorRef.detectChanges();\r\n        }\r\n    }\r\n    /**\r\n     * Begin animation of the snack bar exiting from view.\r\n     * @return {?}\r\n     */\r\n    exit() {\r\n        // Note: this one transitions to `hidden`, rather than `void`, in order to handle the case\r\n        // where multiple snack bars are opened in quick succession (e.g. two consecutive calls to\r\n        // `MatSnackBar.open`).\r\n        this._animationState = 'hidden';\r\n        return this._onExit;\r\n    }\r\n    /**\r\n     * Makes sure the exit callbacks have been invoked when the element is destroyed.\r\n     * @return {?}\r\n     */\r\n    ngOnDestroy() {\r\n        this._destroyed = true;\r\n        this._completeExit();\r\n    }\r\n    /**\r\n     * Waits for the zone to settle before removing the element. Helps prevent\r\n     * errors where we end up removing an element which is in the middle of an animation.\r\n     * @private\r\n     * @return {?}\r\n     */\r\n    _completeExit() {\r\n        this._ngZone.onMicrotaskEmpty.asObservable().pipe(take(1)).subscribe((/**\r\n         * @return {?}\r\n         */\r\n        () => {\r\n            this._onExit.next();\r\n            this._onExit.complete();\r\n        }));\r\n    }\r\n    /**\r\n     * Applies the various positioning and user-configured CSS classes to the snack bar.\r\n     * @private\r\n     * @return {?}\r\n     */\r\n    _applySnackBarClasses() {\r\n        /** @type {?} */\r\n        const element = this._elementRef.nativeElement;\r\n        /** @type {?} */\r\n        const panelClasses = this.snackBarConfig.panelClass;\r\n        if (panelClasses) {\r\n            if (Array.isArray(panelClasses)) {\r\n                // Note that we can't use a spread here, because IE doesn't support multiple arguments.\r\n                panelClasses.forEach((/**\r\n                 * @param {?} cssClass\r\n                 * @return {?}\r\n                 */\r\n                cssClass => element.classList.add(cssClass)));\r\n            }\r\n            else {\r\n                element.classList.add(panelClasses);\r\n            }\r\n        }\r\n        if (this.snackBarConfig.horizontalPosition === 'center') {\r\n            element.classList.add('mat-snack-bar-center');\r\n        }\r\n        if (this.snackBarConfig.verticalPosition === 'top') {\r\n            element.classList.add('mat-snack-bar-top');\r\n        }\r\n    }\r\n    /**\r\n     * Asserts that no content is already attached to the container.\r\n     * @private\r\n     * @return {?}\r\n     */\r\n    _assertNotAttached() {\r\n        if (this._portalOutlet.hasAttached()) {\r\n            throw Error('Attempting to attach snack bar content after content is already attached');\r\n        }\r\n    }\r\n}\r\nMatSnackBarContainer.decorators = [\r\n    { type: Component, args: [{selector: 'snack-bar-container',\r\n                template: \"<ng-template cdkPortalOutlet></ng-template>\",\r\n                styles: [\".mat-snack-bar-container{border-radius:4px;box-sizing:border-box;display:block;margin:24px;max-width:33vw;min-width:344px;padding:14px 16px;min-height:48px;transform-origin:center}@media (-ms-high-contrast:active){.mat-snack-bar-container{border:solid 1px}}.mat-snack-bar-handset{width:100%}.mat-snack-bar-handset .mat-snack-bar-container{margin:8px;max-width:100%;min-width:0;width:100%}\"],\r\n                // In Ivy embedded views will be change detected from their declaration place, rather than\r\n                // where they were stamped out. This means that we can't have the snack bar container be OnPush,\r\n                // because it might cause snack bars that were opened from a template not to be out of date.\r\n                // tslint:disable-next-line:validate-decorators\r\n                changeDetection: ChangeDetectionStrategy.Default,\r\n                encapsulation: ViewEncapsulation.None,\r\n                animations: [matSnackBarAnimations.snackBarState],\r\n                host: {\r\n                    '[attr.role]': '_role',\r\n                    'class': 'mat-snack-bar-container',\r\n                    '[@state]': '_animationState',\r\n                    '(@state.done)': 'onAnimationEnd($event)'\r\n                },\r\n            },] },\r\n];\r\n/** @nocollapse */\r\nMatSnackBarContainer.ctorParameters = () => [\r\n    { type: NgZone },\r\n    { type: ElementRef },\r\n    { type: ChangeDetectorRef },\r\n    { type: MatSnackBarConfig }\r\n];\r\nMatSnackBarContainer.propDecorators = {\r\n    _portalOutlet: [{ type: ViewChild, args: [CdkPortalOutlet, { static: true },] }]\r\n};\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\nclass MatSnackBarModule {\r\n}\r\nMatSnackBarModule.decorators = [\r\n    { type: NgModule, args: [{\r\n                imports: [\r\n                    OverlayModule,\r\n                    PortalModule,\r\n                    CommonModule,\r\n                    MatButtonModule,\r\n                    MatCommonModule,\r\n                ],\r\n                exports: [MatSnackBarContainer, MatCommonModule],\r\n                declarations: [MatSnackBarContainer, SimpleSnackBar],\r\n                entryComponents: [MatSnackBarContainer, SimpleSnackBar],\r\n            },] },\r\n];\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n/**\r\n * Injection token that can be used to specify default snack bar.\r\n * @type {?}\r\n */\r\nconst MAT_SNACK_BAR_DEFAULT_OPTIONS = new InjectionToken('mat-snack-bar-default-options', {\r\n    providedIn: 'root',\r\n    factory: MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY,\r\n});\r\n/**\r\n * \\@docs-private\r\n * @return {?}\r\n */\r\nfunction MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY() {\r\n    return new MatSnackBarConfig();\r\n}\r\n/**\r\n * Service to dispatch Material Design snack bar messages.\r\n */\r\nclass MatSnackBar {\r\n    /**\r\n     * @param {?} _overlay\r\n     * @param {?} _live\r\n     * @param {?} _injector\r\n     * @param {?} _breakpointObserver\r\n     * @param {?} _parentSnackBar\r\n     * @param {?} _defaultConfig\r\n     */\r\n    constructor(_overlay, _live, _injector, _breakpointObserver, _parentSnackBar, _defaultConfig) {\r\n        this._overlay = _overlay;\r\n        this._live = _live;\r\n        this._injector = _injector;\r\n        this._breakpointObserver = _breakpointObserver;\r\n        this._parentSnackBar = _parentSnackBar;\r\n        this._defaultConfig = _defaultConfig;\r\n        /**\r\n         * Reference to the current snack bar in the view *at this level* (in the Angular injector tree).\r\n         * If there is a parent snack-bar service, all operations should delegate to that parent\r\n         * via `_openedSnackBarRef`.\r\n         */\r\n        this._snackBarRefAtThisLevel = null;\r\n    }\r\n    /**\r\n     * Reference to the currently opened snackbar at *any* level.\r\n     * @return {?}\r\n     */\r\n    get _openedSnackBarRef() {\r\n        /** @type {?} */\r\n        const parent = this._parentSnackBar;\r\n        return parent ? parent._openedSnackBarRef : this._snackBarRefAtThisLevel;\r\n    }\r\n    /**\r\n     * @param {?} value\r\n     * @return {?}\r\n     */\r\n    set _openedSnackBarRef(value) {\r\n        if (this._parentSnackBar) {\r\n            this._parentSnackBar._openedSnackBarRef = value;\r\n        }\r\n        else {\r\n            this._snackBarRefAtThisLevel = value;\r\n        }\r\n    }\r\n    /**\r\n     * Creates and dispatches a snack bar with a custom component for the content, removing any\r\n     * currently opened snack bars.\r\n     *\r\n     * @template T\r\n     * @param {?} component Component to be instantiated.\r\n     * @param {?=} config Extra configuration for the snack bar.\r\n     * @return {?}\r\n     */\r\n    openFromComponent(component, config) {\r\n        return (/** @type {?} */ (this._attach(component, config)));\r\n    }\r\n    /**\r\n     * Creates and dispatches a snack bar with a custom template for the content, removing any\r\n     * currently opened snack bars.\r\n     *\r\n     * @param {?} template Template to be instantiated.\r\n     * @param {?=} config Extra configuration for the snack bar.\r\n     * @return {?}\r\n     */\r\n    openFromTemplate(template, config) {\r\n        return this._attach(template, config);\r\n    }\r\n    /**\r\n     * Opens a snackbar with a message and an optional action.\r\n     * @param {?} message The message to show in the snackbar.\r\n     * @param {?=} action The label for the snackbar action.\r\n     * @param {?=} config Additional configuration options for the snackbar.\r\n     * @return {?}\r\n     */\r\n    open(message, action = '', config) {\r\n        /** @type {?} */\r\n        const _config = Object.assign({}, this._defaultConfig, config);\r\n        // Since the user doesn't have access to the component, we can\r\n        // override the data to pass in our own message and action.\r\n        _config.data = { message, action };\r\n        if (!_config.announcementMessage) {\r\n            _config.announcementMessage = message;\r\n        }\r\n        return this.openFromComponent(SimpleSnackBar, _config);\r\n    }\r\n    /**\r\n     * Dismisses the currently-visible snack bar.\r\n     * @return {?}\r\n     */\r\n    dismiss() {\r\n        if (this._openedSnackBarRef) {\r\n            this._openedSnackBarRef.dismiss();\r\n        }\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    ngOnDestroy() {\r\n        // Only dismiss the snack bar at the current level on destroy.\r\n        if (this._snackBarRefAtThisLevel) {\r\n            this._snackBarRefAtThisLevel.dismiss();\r\n        }\r\n    }\r\n    /**\r\n     * Attaches the snack bar container component to the overlay.\r\n     * @private\r\n     * @param {?} overlayRef\r\n     * @param {?} config\r\n     * @return {?}\r\n     */\r\n    _attachSnackBarContainer(overlayRef, config) {\r\n        /** @type {?} */\r\n        const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\r\n        /** @type {?} */\r\n        const injector = new PortalInjector(userInjector || this._injector, new WeakMap([\r\n            [MatSnackBarConfig, config]\r\n        ]));\r\n        /** @type {?} */\r\n        const containerPortal = new ComponentPortal(MatSnackBarContainer, config.viewContainerRef, injector);\r\n        /** @type {?} */\r\n        const containerRef = overlayRef.attach(containerPortal);\r\n        containerRef.instance.snackBarConfig = config;\r\n        return containerRef.instance;\r\n    }\r\n    /**\r\n     * Places a new component or a template as the content of the snack bar container.\r\n     * @private\r\n     * @template T\r\n     * @param {?} content\r\n     * @param {?=} userConfig\r\n     * @return {?}\r\n     */\r\n    _attach(content, userConfig) {\r\n        /** @type {?} */\r\n        const config = Object.assign({}, new MatSnackBarConfig(), this._defaultConfig, userConfig);\r\n        /** @type {?} */\r\n        const overlayRef = this._createOverlay(config);\r\n        /** @type {?} */\r\n        const container = this._attachSnackBarContainer(overlayRef, config);\r\n        /** @type {?} */\r\n        const snackBarRef = new MatSnackBarRef(container, overlayRef);\r\n        if (content instanceof TemplateRef) {\r\n            /** @type {?} */\r\n            const portal = new TemplatePortal(content, (/** @type {?} */ (null)), (/** @type {?} */ ({\r\n                $implicit: config.data,\r\n                snackBarRef\r\n            })));\r\n            snackBarRef.instance = container.attachTemplatePortal(portal);\r\n        }\r\n        else {\r\n            /** @type {?} */\r\n            const injector = this._createInjector(config, snackBarRef);\r\n            /** @type {?} */\r\n            const portal = new ComponentPortal(content, undefined, injector);\r\n            /** @type {?} */\r\n            const contentRef = container.attachComponentPortal(portal);\r\n            // We can't pass this via the injector, because the injector is created earlier.\r\n            snackBarRef.instance = contentRef.instance;\r\n        }\r\n        // Subscribe to the breakpoint observer and attach the mat-snack-bar-handset class as\r\n        // appropriate. This class is applied to the overlay element because the overlay must expand to\r\n        // fill the width of the screen for full width snackbars.\r\n        this._breakpointObserver.observe(Breakpoints.HandsetPortrait).pipe(takeUntil(overlayRef.detachments())).subscribe((/**\r\n         * @param {?} state\r\n         * @return {?}\r\n         */\r\n        state$$1 => {\r\n            /** @type {?} */\r\n            const classList = overlayRef.overlayElement.classList;\r\n            /** @type {?} */\r\n            const className = 'mat-snack-bar-handset';\r\n            state$$1.matches ? classList.add(className) : classList.remove(className);\r\n        }));\r\n        this._animateSnackBar(snackBarRef, config);\r\n        this._openedSnackBarRef = snackBarRef;\r\n        return this._openedSnackBarRef;\r\n    }\r\n    /**\r\n     * Animates the old snack bar out and the new one in.\r\n     * @private\r\n     * @param {?} snackBarRef\r\n     * @param {?} config\r\n     * @return {?}\r\n     */\r\n    _animateSnackBar(snackBarRef, config) {\r\n        // When the snackbar is dismissed, clear the reference to it.\r\n        snackBarRef.afterDismissed().subscribe((/**\r\n         * @return {?}\r\n         */\r\n        () => {\r\n            // Clear the snackbar ref if it hasn't already been replaced by a newer snackbar.\r\n            if (this._openedSnackBarRef == snackBarRef) {\r\n                this._openedSnackBarRef = null;\r\n            }\r\n            if (config.announcementMessage) {\r\n                this._live.clear();\r\n            }\r\n        }));\r\n        if (this._openedSnackBarRef) {\r\n            // If a snack bar is already in view, dismiss it and enter the\r\n            // new snack bar after exit animation is complete.\r\n            this._openedSnackBarRef.afterDismissed().subscribe((/**\r\n             * @return {?}\r\n             */\r\n            () => {\r\n                snackBarRef.containerInstance.enter();\r\n            }));\r\n            this._openedSnackBarRef.dismiss();\r\n        }\r\n        else {\r\n            // If no snack bar is in view, enter the new snack bar.\r\n            snackBarRef.containerInstance.enter();\r\n        }\r\n        // If a dismiss timeout is provided, set up dismiss based on after the snackbar is opened.\r\n        if (config.duration && config.duration > 0) {\r\n            snackBarRef.afterOpened().subscribe((/**\r\n             * @return {?}\r\n             */\r\n            () => snackBarRef._dismissAfter((/** @type {?} */ (config.duration)))));\r\n        }\r\n        if (config.announcementMessage) {\r\n            this._live.announce(config.announcementMessage, config.politeness);\r\n        }\r\n    }\r\n    /**\r\n     * Creates a new overlay and places it in the correct location.\r\n     * @private\r\n     * @param {?} config The user-specified snack bar config.\r\n     * @return {?}\r\n     */\r\n    _createOverlay(config) {\r\n        /** @type {?} */\r\n        const overlayConfig = new OverlayConfig();\r\n        overlayConfig.direction = config.direction;\r\n        /** @type {?} */\r\n        let positionStrategy = this._overlay.position().global();\r\n        // Set horizontal position.\r\n        /** @type {?} */\r\n        const isRtl = config.direction === 'rtl';\r\n        /** @type {?} */\r\n        const isLeft = (config.horizontalPosition === 'left' ||\r\n            (config.horizontalPosition === 'start' && !isRtl) ||\r\n            (config.horizontalPosition === 'end' && isRtl));\r\n        /** @type {?} */\r\n        const isRight = !isLeft && config.horizontalPosition !== 'center';\r\n        if (isLeft) {\r\n            positionStrategy.left('0');\r\n        }\r\n        else if (isRight) {\r\n            positionStrategy.right('0');\r\n        }\r\n        else {\r\n            positionStrategy.centerHorizontally();\r\n        }\r\n        // Set horizontal position.\r\n        if (config.verticalPosition === 'top') {\r\n            positionStrategy.top('0');\r\n        }\r\n        else {\r\n            positionStrategy.bottom('0');\r\n        }\r\n        overlayConfig.positionStrategy = positionStrategy;\r\n        return this._overlay.create(overlayConfig);\r\n    }\r\n    /**\r\n     * Creates an injector to be used inside of a snack bar component.\r\n     * @private\r\n     * @template T\r\n     * @param {?} config Config that was used to create the snack bar.\r\n     * @param {?} snackBarRef Reference to the snack bar.\r\n     * @return {?}\r\n     */\r\n    _createInjector(config, snackBarRef) {\r\n        /** @type {?} */\r\n        const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\r\n        return new PortalInjector(userInjector || this._injector, new WeakMap([\r\n            [MatSnackBarRef, snackBarRef],\r\n            [MAT_SNACK_BAR_DATA, config.data]\r\n        ]));\r\n    }\r\n}\r\nMatSnackBar.decorators = [\r\n    { type: Injectable, args: [{ providedIn: MatSnackBarModule },] },\r\n];\r\n/** @nocollapse */\r\nMatSnackBar.ctorParameters = () => [\r\n    { type: Overlay },\r\n    { type: LiveAnnouncer },\r\n    { type: Injector },\r\n    { type: BreakpointObserver },\r\n    { type: MatSnackBar, decorators: [{ type: Optional }, { type: SkipSelf }] },\r\n    { type: MatSnackBarConfig, decorators: [{ type: Inject, args: [MAT_SNACK_BAR_DEFAULT_OPTIONS,] }] }\r\n];\r\n/** @nocollapse */ MatSnackBar.ngInjectableDef = ɵɵdefineInjectable({ factory: function MatSnackBar_Factory() { return new MatSnackBar(ɵɵinject(Overlay), ɵɵinject(LiveAnnouncer), ɵɵinject(INJECTOR), ɵɵinject(BreakpointObserver), ɵɵinject(MatSnackBar, 12), ɵɵinject(MAT_SNACK_BAR_DEFAULT_OPTIONS)); }, token: MatSnackBar, providedIn: MatSnackBarModule });\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n\r\nexport { MatSnackBarModule, MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY, MAT_SNACK_BAR_DEFAULT_OPTIONS, MatSnackBar, MatSnackBarContainer, MAT_SNACK_BAR_DATA, MatSnackBarConfig, MatSnackBarRef, SimpleSnackBar, matSnackBarAnimations };\r\n\r\n"]}