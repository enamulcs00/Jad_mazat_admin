{"version":3,"sources":["v:/jad-admin-go/mazat_admin_panel/node_modules/@angular/material/esm2015/select.js"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAmCA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CAmNC,mBAKC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CAk0CD,aAwCC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CAiDD,gEAaC","file":"select.js","sourcesContent":["/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nimport { animate, animateChild, query, state, style, transition, trigger } from '@angular/animations';\r\nimport { ActiveDescendantKeyManager, LiveAnnouncer } from '@angular/cdk/a11y';\r\nimport { Directionality } from '@angular/cdk/bidi';\r\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\r\nimport { SelectionModel } from '@angular/cdk/collections';\r\nimport { A, DOWN_ARROW, END, ENTER, HOME, LEFT_ARROW, RIGHT_ARROW, SPACE, UP_ARROW, hasModifierKey } from '@angular/cdk/keycodes';\r\nimport { CdkConnectedOverlay, Overlay, OverlayModule } from '@angular/cdk/overlay';\r\nimport { ViewportRuler } from '@angular/cdk/scrolling';\r\nimport { Attribute, ChangeDetectionStrategy, ChangeDetectorRef, Component, ContentChild, ContentChildren, Directive, ElementRef, EventEmitter, Inject, InjectionToken, Input, isDevMode, NgZone, Optional, Output, Self, ViewChild, ViewEncapsulation, NgModule } from '@angular/core';\r\nimport { FormGroupDirective, NgControl, NgForm } from '@angular/forms';\r\nimport { _countGroupLabelsBeforeOption, _getOptionScrollPosition, ErrorStateMatcher, MAT_OPTION_PARENT_COMPONENT, MatOptgroup, MatOption, mixinDisabled, mixinDisableRipple, mixinErrorState, mixinTabIndex, MatCommonModule, MatOptionModule } from '@angular/material/core';\r\nimport { MatFormField, MatFormFieldControl, MatFormFieldModule } from '@angular/material/form-field';\r\nimport { defer, merge, Subject } from 'rxjs';\r\nimport { distinctUntilChanged, filter, map, startWith, switchMap, take, takeUntil } from 'rxjs/operators';\r\nimport { CommonModule } from '@angular/common';\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n/**\r\n * The following are all the animations for the mat-select component, with each\r\n * const containing the metadata for one animation.\r\n *\r\n * The values below match the implementation of the AngularJS Material mat-select animation.\r\n * \\@docs-private\r\n * @type {?}\r\n */\r\nconst matSelectAnimations = {\r\n    /**\r\n     * This animation ensures the select's overlay panel animation (transformPanel) is called when\r\n     * closing the select.\r\n     * This is needed due to https://github.com/angular/angular/issues/23302\r\n     */\r\n    transformPanelWrap: trigger('transformPanelWrap', [\r\n        transition('* => void', query('@transformPanel', [animateChild()], { optional: true }))\r\n    ]),\r\n    /**\r\n     * This animation transforms the select's overlay panel on and off the page.\r\n     *\r\n     * When the panel is attached to the DOM, it expands its width by the amount of padding, scales it\r\n     * up to 100% on the Y axis, fades in its border, and translates slightly up and to the\r\n     * side to ensure the option text correctly overlaps the trigger text.\r\n     *\r\n     * When the panel is removed from the DOM, it simply fades out linearly.\r\n     */\r\n    transformPanel: trigger('transformPanel', [\r\n        state('void', style({\r\n            transform: 'scaleY(0.8)',\r\n            minWidth: '100%',\r\n            opacity: 0\r\n        })),\r\n        state('showing', style({\r\n            opacity: 1,\r\n            minWidth: 'calc(100% + 32px)',\r\n            // 32px = 2 * 16px padding\r\n            transform: 'scaleY(1)'\r\n        })),\r\n        state('showing-multiple', style({\r\n            opacity: 1,\r\n            minWidth: 'calc(100% + 64px)',\r\n            // 64px = 48px padding on the left + 16px padding on the right\r\n            transform: 'scaleY(1)'\r\n        })),\r\n        transition('void => *', animate('120ms cubic-bezier(0, 0, 0.2, 1)')),\r\n        transition('* => void', animate('100ms 25ms linear', style({ opacity: 0 })))\r\n    ]),\r\n    /**\r\n     * This animation fades in the background color and text content of the\r\n     * select's options. It is time delayed to occur 100ms after the overlay\r\n     * panel has transformed in.\r\n     * @deprecated Not used anymore. To be removed.\r\n     * \\@breaking-change 8.0.0\r\n     */\r\n    fadeInContent: trigger('fadeInContent', [\r\n        state('showing', style({ opacity: 1 })),\r\n        transition('void => showing', [\r\n            style({ opacity: 0 }),\r\n            animate('150ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)')\r\n        ])\r\n    ])\r\n};\r\n/**\r\n * @deprecated\r\n * \\@breaking-change 8.0.0\r\n * \\@docs-private\r\n * @type {?}\r\n */\r\nconst transformPanel = matSelectAnimations.transformPanel;\r\n/**\r\n * @deprecated\r\n * \\@breaking-change 8.0.0\r\n * \\@docs-private\r\n * @type {?}\r\n */\r\nconst fadeInContent = matSelectAnimations.fadeInContent;\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n\r\n/**\r\n * Returns an exception to be thrown when attempting to change a select's `multiple` option\r\n * after initialization.\r\n * \\@docs-private\r\n * @return {?}\r\n */\r\nfunction getMatSelectDynamicMultipleError() {\r\n    return Error('Cannot change `multiple` mode of select after initialization.');\r\n}\r\n/**\r\n * Returns an exception to be thrown when attempting to assign a non-array value to a select\r\n * in `multiple` mode. Note that `undefined` and `null` are still valid values to allow for\r\n * resetting the value.\r\n * \\@docs-private\r\n * @return {?}\r\n */\r\nfunction getMatSelectNonArrayValueError() {\r\n    return Error('Value must be an array in multiple-selection mode.');\r\n}\r\n/**\r\n * Returns an exception to be thrown when assigning a non-function value to the comparator\r\n * used to determine if a value corresponds to an option. Note that whether the function\r\n * actually takes two values and returns a boolean is not checked.\r\n * @return {?}\r\n */\r\nfunction getMatSelectNonFunctionValueError() {\r\n    return Error('`compareWith` must be a function.');\r\n}\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n/** @type {?} */\r\nlet nextUniqueId = 0;\r\n/**\r\n * The max height of the select's overlay panel\r\n * @type {?}\r\n */\r\nconst SELECT_PANEL_MAX_HEIGHT = 256;\r\n/**\r\n * The panel's padding on the x-axis\r\n * @type {?}\r\n */\r\nconst SELECT_PANEL_PADDING_X = 16;\r\n/**\r\n * The panel's x axis padding if it is indented (e.g. there is an option group).\r\n * @type {?}\r\n */\r\nconst SELECT_PANEL_INDENT_PADDING_X = SELECT_PANEL_PADDING_X * 2;\r\n/**\r\n * The height of the select items in `em` units.\r\n * @type {?}\r\n */\r\nconst SELECT_ITEM_HEIGHT_EM = 3;\r\n// TODO(josephperrott): Revert to a constant after 2018 spec updates are fully merged.\r\n/**\r\n * Distance between the panel edge and the option text in\r\n * multi-selection mode.\r\n *\r\n * Calculated as:\r\n * (SELECT_PANEL_PADDING_X * 1.5) + 16 = 40\r\n * The padding is multiplied by 1.5 because the checkbox's margin is half the padding.\r\n * The checkbox width is 16px.\r\n * @type {?}\r\n */\r\nconst SELECT_MULTIPLE_PANEL_PADDING_X = SELECT_PANEL_PADDING_X * 1.5 + 16;\r\n/**\r\n * The select panel will only \"fit\" inside the viewport if it is positioned at\r\n * this value or more away from the viewport boundary.\r\n * @type {?}\r\n */\r\nconst SELECT_PANEL_VIEWPORT_PADDING = 8;\r\n/**\r\n * Injection token that determines the scroll handling while a select is open.\r\n * @type {?}\r\n */\r\nconst MAT_SELECT_SCROLL_STRATEGY = new InjectionToken('mat-select-scroll-strategy');\r\n/**\r\n * \\@docs-private\r\n * @param {?} overlay\r\n * @return {?}\r\n */\r\nfunction MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay) {\r\n    return (/**\r\n     * @return {?}\r\n     */\r\n    () => overlay.scrollStrategies.reposition());\r\n}\r\n/**\r\n * \\@docs-private\r\n * @type {?}\r\n */\r\nconst MAT_SELECT_SCROLL_STRATEGY_PROVIDER = {\r\n    provide: MAT_SELECT_SCROLL_STRATEGY,\r\n    deps: [Overlay],\r\n    useFactory: MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY,\r\n};\r\n/**\r\n * Change event object that is emitted when the select value has changed.\r\n */\r\nclass MatSelectChange {\r\n    /**\r\n     * @param {?} source\r\n     * @param {?} value\r\n     */\r\n    constructor(source, value) {\r\n        this.source = source;\r\n        this.value = value;\r\n    }\r\n}\r\n// Boilerplate for applying mixins to MatSelect.\r\n/**\r\n * \\@docs-private\r\n */\r\nclass MatSelectBase {\r\n    /**\r\n     * @param {?} _elementRef\r\n     * @param {?} _defaultErrorStateMatcher\r\n     * @param {?} _parentForm\r\n     * @param {?} _parentFormGroup\r\n     * @param {?} ngControl\r\n     */\r\n    constructor(_elementRef, _defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl) {\r\n        this._elementRef = _elementRef;\r\n        this._defaultErrorStateMatcher = _defaultErrorStateMatcher;\r\n        this._parentForm = _parentForm;\r\n        this._parentFormGroup = _parentFormGroup;\r\n        this.ngControl = ngControl;\r\n    }\r\n}\r\n/** @type {?} */\r\nconst _MatSelectMixinBase = mixinDisableRipple(mixinTabIndex(mixinDisabled(mixinErrorState(MatSelectBase))));\r\n/**\r\n * Allows the user to customize the trigger that is displayed when the select has a value.\r\n */\r\nclass MatSelectTrigger {\r\n}\r\nMatSelectTrigger.decorators = [\r\n    { type: Directive, args: [{\r\n                selector: 'mat-select-trigger'\r\n            },] },\r\n];\r\nclass MatSelect extends _MatSelectMixinBase {\r\n    /**\r\n     * @param {?} _viewportRuler\r\n     * @param {?} _changeDetectorRef\r\n     * @param {?} _ngZone\r\n     * @param {?} _defaultErrorStateMatcher\r\n     * @param {?} elementRef\r\n     * @param {?} _dir\r\n     * @param {?} _parentForm\r\n     * @param {?} _parentFormGroup\r\n     * @param {?} _parentFormField\r\n     * @param {?} ngControl\r\n     * @param {?} tabIndex\r\n     * @param {?} scrollStrategyFactory\r\n     * @param {?=} _liveAnnouncer\r\n     */\r\n    constructor(_viewportRuler, _changeDetectorRef, _ngZone, _defaultErrorStateMatcher, elementRef, _dir, _parentForm, _parentFormGroup, _parentFormField, ngControl, tabIndex, scrollStrategyFactory, _liveAnnouncer) {\r\n        super(elementRef, _defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\r\n        this._viewportRuler = _viewportRuler;\r\n        this._changeDetectorRef = _changeDetectorRef;\r\n        this._ngZone = _ngZone;\r\n        this._dir = _dir;\r\n        this._parentFormField = _parentFormField;\r\n        this.ngControl = ngControl;\r\n        this._liveAnnouncer = _liveAnnouncer;\r\n        /**\r\n         * Whether or not the overlay panel is open.\r\n         */\r\n        this._panelOpen = false;\r\n        /**\r\n         * Whether filling out the select is required in the form.\r\n         */\r\n        this._required = false;\r\n        /**\r\n         * The scroll position of the overlay panel, calculated to center the selected option.\r\n         */\r\n        this._scrollTop = 0;\r\n        /**\r\n         * Whether the component is in multiple selection mode.\r\n         */\r\n        this._multiple = false;\r\n        /**\r\n         * Comparison function to specify which option is displayed. Defaults to object equality.\r\n         */\r\n        this._compareWith = (/**\r\n         * @param {?} o1\r\n         * @param {?} o2\r\n         * @return {?}\r\n         */\r\n        (o1, o2) => o1 === o2);\r\n        /**\r\n         * Unique id for this input.\r\n         */\r\n        this._uid = `mat-select-${nextUniqueId++}`;\r\n        /**\r\n         * Emits whenever the component is destroyed.\r\n         */\r\n        this._destroy = new Subject();\r\n        /**\r\n         * The cached font-size of the trigger element.\r\n         */\r\n        this._triggerFontSize = 0;\r\n        /**\r\n         * `View -> model callback called when value changes`\r\n         */\r\n        this._onChange = (/**\r\n         * @return {?}\r\n         */\r\n        () => { });\r\n        /**\r\n         * `View -> model callback called when select has been touched`\r\n         */\r\n        this._onTouched = (/**\r\n         * @return {?}\r\n         */\r\n        () => { });\r\n        /**\r\n         * The IDs of child options to be passed to the aria-owns attribute.\r\n         */\r\n        this._optionIds = '';\r\n        /**\r\n         * The value of the select panel's transform-origin property.\r\n         */\r\n        this._transformOrigin = 'top';\r\n        /**\r\n         * Emits when the panel element is finished transforming in.\r\n         */\r\n        this._panelDoneAnimatingStream = new Subject();\r\n        /**\r\n         * The y-offset of the overlay panel in relation to the trigger's top start corner.\r\n         * This must be adjusted to align the selected option text over the trigger text.\r\n         * when the panel opens. Will change based on the y-position of the selected option.\r\n         */\r\n        this._offsetY = 0;\r\n        /**\r\n         * This position config ensures that the top \"start\" corner of the overlay\r\n         * is aligned with with the top \"start\" of the origin by default (overlapping\r\n         * the trigger completely). If the panel cannot fit below the trigger, it\r\n         * will fall back to a position above the trigger.\r\n         */\r\n        this._positions = [\r\n            {\r\n                originX: 'start',\r\n                originY: 'top',\r\n                overlayX: 'start',\r\n                overlayY: 'top',\r\n            },\r\n            {\r\n                originX: 'start',\r\n                originY: 'bottom',\r\n                overlayX: 'start',\r\n                overlayY: 'bottom',\r\n            },\r\n        ];\r\n        /**\r\n         * Whether the component is disabling centering of the active option over the trigger.\r\n         */\r\n        this._disableOptionCentering = false;\r\n        this._focused = false;\r\n        /**\r\n         * A name for this control that can be used by `mat-form-field`.\r\n         */\r\n        this.controlType = 'mat-select';\r\n        /**\r\n         * Aria label of the select. If not specified, the placeholder will be used as label.\r\n         */\r\n        this.ariaLabel = '';\r\n        /**\r\n         * Combined stream of all of the child options' change events.\r\n         */\r\n        this.optionSelectionChanges = (/** @type {?} */ (defer((/**\r\n         * @return {?}\r\n         */\r\n        () => {\r\n            /** @type {?} */\r\n            const options = this.options;\r\n            if (options) {\r\n                return options.changes.pipe(startWith(options), switchMap((/**\r\n                 * @return {?}\r\n                 */\r\n                () => merge(...options.map((/**\r\n                 * @param {?} option\r\n                 * @return {?}\r\n                 */\r\n                option => option.onSelectionChange))))));\r\n            }\r\n            return this._ngZone.onStable\r\n                .asObservable()\r\n                .pipe(take(1), switchMap((/**\r\n             * @return {?}\r\n             */\r\n            () => this.optionSelectionChanges)));\r\n        }))));\r\n        /**\r\n         * Event emitted when the select panel has been toggled.\r\n         */\r\n        this.openedChange = new EventEmitter();\r\n        /**\r\n         * Event emitted when the select has been opened.\r\n         */\r\n        this._openedStream = this.openedChange.pipe(filter((/**\r\n         * @param {?} o\r\n         * @return {?}\r\n         */\r\n        o => o)), map((/**\r\n         * @return {?}\r\n         */\r\n        () => { })));\r\n        /**\r\n         * Event emitted when the select has been closed.\r\n         */\r\n        this._closedStream = this.openedChange.pipe(filter((/**\r\n         * @param {?} o\r\n         * @return {?}\r\n         */\r\n        o => !o)), map((/**\r\n         * @return {?}\r\n         */\r\n        () => { })));\r\n        /**\r\n         * Event emitted when the selected value has been changed by the user.\r\n         */\r\n        this.selectionChange = new EventEmitter();\r\n        /**\r\n         * Event that emits whenever the raw value of the select changes. This is here primarily\r\n         * to facilitate the two-way binding for the `value` input.\r\n         * \\@docs-private\r\n         */\r\n        this.valueChange = new EventEmitter();\r\n        if (this.ngControl) {\r\n            // Note: we provide the value accessor through here, instead of\r\n            // the `providers` to avoid running into a circular import.\r\n            this.ngControl.valueAccessor = this;\r\n        }\r\n        this._scrollStrategyFactory = scrollStrategyFactory;\r\n        this._scrollStrategy = this._scrollStrategyFactory();\r\n        this.tabIndex = parseInt(tabIndex) || 0;\r\n        // Force setter to be called in case id was not specified.\r\n        this.id = this.id;\r\n    }\r\n    /**\r\n     * Whether the select is focused.\r\n     * @return {?}\r\n     */\r\n    get focused() {\r\n        return this._focused || this._panelOpen;\r\n    }\r\n    /**\r\n     * @deprecated Setter to be removed as this property is intended to be readonly.\r\n     * \\@breaking-change 8.0.0\r\n     * @param {?} value\r\n     * @return {?}\r\n     */\r\n    set focused(value) {\r\n        this._focused = value;\r\n    }\r\n    /**\r\n     * Placeholder to be shown if no value has been selected.\r\n     * @return {?}\r\n     */\r\n    get placeholder() { return this._placeholder; }\r\n    /**\r\n     * @param {?} value\r\n     * @return {?}\r\n     */\r\n    set placeholder(value) {\r\n        this._placeholder = value;\r\n        this.stateChanges.next();\r\n    }\r\n    /**\r\n     * Whether the component is required.\r\n     * @return {?}\r\n     */\r\n    get required() { return this._required; }\r\n    /**\r\n     * @param {?} value\r\n     * @return {?}\r\n     */\r\n    set required(value) {\r\n        this._required = coerceBooleanProperty(value);\r\n        this.stateChanges.next();\r\n    }\r\n    /**\r\n     * Whether the user should be allowed to select multiple options.\r\n     * @return {?}\r\n     */\r\n    get multiple() { return this._multiple; }\r\n    /**\r\n     * @param {?} value\r\n     * @return {?}\r\n     */\r\n    set multiple(value) {\r\n        if (this._selectionModel) {\r\n            throw getMatSelectDynamicMultipleError();\r\n        }\r\n        this._multiple = coerceBooleanProperty(value);\r\n    }\r\n    /**\r\n     * Whether to center the active option over the trigger.\r\n     * @return {?}\r\n     */\r\n    get disableOptionCentering() { return this._disableOptionCentering; }\r\n    /**\r\n     * @param {?} value\r\n     * @return {?}\r\n     */\r\n    set disableOptionCentering(value) {\r\n        this._disableOptionCentering = coerceBooleanProperty(value);\r\n    }\r\n    /**\r\n     * Function to compare the option values with the selected values. The first argument\r\n     * is a value from an option. The second is a value from the selection. A boolean\r\n     * should be returned.\r\n     * @return {?}\r\n     */\r\n    get compareWith() { return this._compareWith; }\r\n    /**\r\n     * @param {?} fn\r\n     * @return {?}\r\n     */\r\n    set compareWith(fn) {\r\n        if (typeof fn !== 'function') {\r\n            throw getMatSelectNonFunctionValueError();\r\n        }\r\n        this._compareWith = fn;\r\n        if (this._selectionModel) {\r\n            // A different comparator means the selection could change.\r\n            this._initializeSelection();\r\n        }\r\n    }\r\n    /**\r\n     * Value of the select control.\r\n     * @return {?}\r\n     */\r\n    get value() { return this._value; }\r\n    /**\r\n     * @param {?} newValue\r\n     * @return {?}\r\n     */\r\n    set value(newValue) {\r\n        if (newValue !== this._value) {\r\n            this.writeValue(newValue);\r\n            this._value = newValue;\r\n        }\r\n    }\r\n    /**\r\n     * Unique id of the element.\r\n     * @return {?}\r\n     */\r\n    get id() { return this._id; }\r\n    /**\r\n     * @param {?} value\r\n     * @return {?}\r\n     */\r\n    set id(value) {\r\n        this._id = value || this._uid;\r\n        this.stateChanges.next();\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    ngOnInit() {\r\n        this._selectionModel = new SelectionModel(this.multiple);\r\n        this.stateChanges.next();\r\n        // We need `distinctUntilChanged` here, because some browsers will\r\n        // fire the animation end event twice for the same animation. See:\r\n        // https://github.com/angular/angular/issues/24084\r\n        this._panelDoneAnimatingStream\r\n            .pipe(distinctUntilChanged(), takeUntil(this._destroy))\r\n            .subscribe((/**\r\n         * @return {?}\r\n         */\r\n        () => {\r\n            if (this.panelOpen) {\r\n                this._scrollTop = 0;\r\n                this.openedChange.emit(true);\r\n            }\r\n            else {\r\n                this.openedChange.emit(false);\r\n                this.overlayDir.offsetX = 0;\r\n                this._changeDetectorRef.markForCheck();\r\n            }\r\n        }));\r\n        this._viewportRuler.change()\r\n            .pipe(takeUntil(this._destroy))\r\n            .subscribe((/**\r\n         * @return {?}\r\n         */\r\n        () => {\r\n            if (this._panelOpen) {\r\n                this._triggerRect = this.trigger.nativeElement.getBoundingClientRect();\r\n                this._changeDetectorRef.markForCheck();\r\n            }\r\n        }));\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    ngAfterContentInit() {\r\n        this._initKeyManager();\r\n        this._selectionModel.onChange.pipe(takeUntil(this._destroy)).subscribe((/**\r\n         * @param {?} event\r\n         * @return {?}\r\n         */\r\n        event => {\r\n            event.added.forEach((/**\r\n             * @param {?} option\r\n             * @return {?}\r\n             */\r\n            option => option.select()));\r\n            event.removed.forEach((/**\r\n             * @param {?} option\r\n             * @return {?}\r\n             */\r\n            option => option.deselect()));\r\n        }));\r\n        this.options.changes.pipe(startWith(null), takeUntil(this._destroy)).subscribe((/**\r\n         * @return {?}\r\n         */\r\n        () => {\r\n            this._resetOptions();\r\n            this._initializeSelection();\r\n        }));\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    ngDoCheck() {\r\n        if (this.ngControl) {\r\n            this.updateErrorState();\r\n        }\r\n    }\r\n    /**\r\n     * @param {?} changes\r\n     * @return {?}\r\n     */\r\n    ngOnChanges(changes) {\r\n        // Updating the disabled state is handled by `mixinDisabled`, but we need to additionally let\r\n        // the parent form field know to run change detection when the disabled state changes.\r\n        if (changes['disabled']) {\r\n            this.stateChanges.next();\r\n        }\r\n        if (changes['typeaheadDebounceInterval'] && this._keyManager) {\r\n            this._keyManager.withTypeAhead(this.typeaheadDebounceInterval);\r\n        }\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    ngOnDestroy() {\r\n        this._destroy.next();\r\n        this._destroy.complete();\r\n        this.stateChanges.complete();\r\n    }\r\n    /**\r\n     * Toggles the overlay panel open or closed.\r\n     * @return {?}\r\n     */\r\n    toggle() {\r\n        this.panelOpen ? this.close() : this.open();\r\n    }\r\n    /**\r\n     * Opens the overlay panel.\r\n     * @return {?}\r\n     */\r\n    open() {\r\n        if (this.disabled || !this.options || !this.options.length || this._panelOpen) {\r\n            return;\r\n        }\r\n        this._triggerRect = this.trigger.nativeElement.getBoundingClientRect();\r\n        // Note: The computed font-size will be a string pixel value (e.g. \"16px\").\r\n        // `parseInt` ignores the trailing 'px' and converts this to a number.\r\n        this._triggerFontSize = parseInt(getComputedStyle(this.trigger.nativeElement).fontSize || '0');\r\n        this._panelOpen = true;\r\n        this._keyManager.withHorizontalOrientation(null);\r\n        this._calculateOverlayPosition();\r\n        this._highlightCorrectOption();\r\n        this._changeDetectorRef.markForCheck();\r\n        // Set the font size on the panel element once it exists.\r\n        this._ngZone.onStable.asObservable().pipe(take(1)).subscribe((/**\r\n         * @return {?}\r\n         */\r\n        () => {\r\n            if (this._triggerFontSize && this.overlayDir.overlayRef &&\r\n                this.overlayDir.overlayRef.overlayElement) {\r\n                this.overlayDir.overlayRef.overlayElement.style.fontSize = `${this._triggerFontSize}px`;\r\n            }\r\n        }));\r\n    }\r\n    /**\r\n     * Closes the overlay panel and focuses the host element.\r\n     * @return {?}\r\n     */\r\n    close() {\r\n        if (this._panelOpen) {\r\n            this._panelOpen = false;\r\n            this._keyManager.withHorizontalOrientation(this._isRtl() ? 'rtl' : 'ltr');\r\n            this._changeDetectorRef.markForCheck();\r\n            this._onTouched();\r\n        }\r\n    }\r\n    /**\r\n     * Sets the select's value. Part of the ControlValueAccessor interface\r\n     * required to integrate with Angular's core forms API.\r\n     *\r\n     * @param {?} value New value to be written to the model.\r\n     * @return {?}\r\n     */\r\n    writeValue(value) {\r\n        if (this.options) {\r\n            this._setSelectionByValue(value);\r\n        }\r\n    }\r\n    /**\r\n     * Saves a callback function to be invoked when the select's value\r\n     * changes from user input. Part of the ControlValueAccessor interface\r\n     * required to integrate with Angular's core forms API.\r\n     *\r\n     * @param {?} fn Callback to be triggered when the value changes.\r\n     * @return {?}\r\n     */\r\n    registerOnChange(fn) {\r\n        this._onChange = fn;\r\n    }\r\n    /**\r\n     * Saves a callback function to be invoked when the select is blurred\r\n     * by the user. Part of the ControlValueAccessor interface required\r\n     * to integrate with Angular's core forms API.\r\n     *\r\n     * @param {?} fn Callback to be triggered when the component has been touched.\r\n     * @return {?}\r\n     */\r\n    registerOnTouched(fn) {\r\n        this._onTouched = fn;\r\n    }\r\n    /**\r\n     * Disables the select. Part of the ControlValueAccessor interface required\r\n     * to integrate with Angular's core forms API.\r\n     *\r\n     * @param {?} isDisabled Sets whether the component is disabled.\r\n     * @return {?}\r\n     */\r\n    setDisabledState(isDisabled) {\r\n        this.disabled = isDisabled;\r\n        this._changeDetectorRef.markForCheck();\r\n        this.stateChanges.next();\r\n    }\r\n    /**\r\n     * Whether or not the overlay panel is open.\r\n     * @return {?}\r\n     */\r\n    get panelOpen() {\r\n        return this._panelOpen;\r\n    }\r\n    /**\r\n     * The currently selected option.\r\n     * @return {?}\r\n     */\r\n    get selected() {\r\n        return this.multiple ? this._selectionModel.selected : this._selectionModel.selected[0];\r\n    }\r\n    /**\r\n     * The value displayed in the trigger.\r\n     * @return {?}\r\n     */\r\n    get triggerValue() {\r\n        if (this.empty) {\r\n            return '';\r\n        }\r\n        if (this._multiple) {\r\n            /** @type {?} */\r\n            const selectedOptions = this._selectionModel.selected.map((/**\r\n             * @param {?} option\r\n             * @return {?}\r\n             */\r\n            option => option.viewValue));\r\n            if (this._isRtl()) {\r\n                selectedOptions.reverse();\r\n            }\r\n            // TODO(crisbeto): delimiter should be configurable for proper localization.\r\n            return selectedOptions.join(', ');\r\n        }\r\n        return this._selectionModel.selected[0].viewValue;\r\n    }\r\n    /**\r\n     * Whether the element is in RTL mode.\r\n     * @return {?}\r\n     */\r\n    _isRtl() {\r\n        return this._dir ? this._dir.value === 'rtl' : false;\r\n    }\r\n    /**\r\n     * Handles all keydown events on the select.\r\n     * @param {?} event\r\n     * @return {?}\r\n     */\r\n    _handleKeydown(event) {\r\n        if (!this.disabled) {\r\n            this.panelOpen ? this._handleOpenKeydown(event) : this._handleClosedKeydown(event);\r\n        }\r\n    }\r\n    /**\r\n     * Handles keyboard events while the select is closed.\r\n     * @private\r\n     * @param {?} event\r\n     * @return {?}\r\n     */\r\n    _handleClosedKeydown(event) {\r\n        /** @type {?} */\r\n        const keyCode = event.keyCode;\r\n        /** @type {?} */\r\n        const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW ||\r\n            keyCode === LEFT_ARROW || keyCode === RIGHT_ARROW;\r\n        /** @type {?} */\r\n        const isOpenKey = keyCode === ENTER || keyCode === SPACE;\r\n        /** @type {?} */\r\n        const manager = this._keyManager;\r\n        // Open the select on ALT + arrow key to match the native <select>\r\n        if ((isOpenKey && !hasModifierKey(event)) || ((this.multiple || event.altKey) && isArrowKey)) {\r\n            event.preventDefault(); // prevents the page from scrolling down when pressing space\r\n            this.open();\r\n        }\r\n        else if (!this.multiple) {\r\n            /** @type {?} */\r\n            const previouslySelectedOption = this.selected;\r\n            if (keyCode === HOME || keyCode === END) {\r\n                keyCode === HOME ? manager.setFirstItemActive() : manager.setLastItemActive();\r\n                event.preventDefault();\r\n            }\r\n            else {\r\n                manager.onKeydown(event);\r\n            }\r\n            /** @type {?} */\r\n            const selectedOption = this.selected;\r\n            // Since the value has changed, we need to announce it ourselves.\r\n            // @breaking-change 8.0.0 remove null check for _liveAnnouncer.\r\n            if (this._liveAnnouncer && selectedOption && previouslySelectedOption !== selectedOption) {\r\n                // We set a duration on the live announcement, because we want the live element to be\r\n                // cleared after a while so that users can't navigate to it using the arrow keys.\r\n                this._liveAnnouncer.announce(((/** @type {?} */ (selectedOption))).viewValue, 10000);\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Handles keyboard events when the selected is open.\r\n     * @private\r\n     * @param {?} event\r\n     * @return {?}\r\n     */\r\n    _handleOpenKeydown(event) {\r\n        /** @type {?} */\r\n        const keyCode = event.keyCode;\r\n        /** @type {?} */\r\n        const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW;\r\n        /** @type {?} */\r\n        const manager = this._keyManager;\r\n        if (keyCode === HOME || keyCode === END) {\r\n            event.preventDefault();\r\n            keyCode === HOME ? manager.setFirstItemActive() : manager.setLastItemActive();\r\n        }\r\n        else if (isArrowKey && event.altKey) {\r\n            // Close the select on ALT + arrow key to match the native <select>\r\n            event.preventDefault();\r\n            this.close();\r\n        }\r\n        else if ((keyCode === ENTER || keyCode === SPACE) && manager.activeItem &&\r\n            !hasModifierKey(event)) {\r\n            event.preventDefault();\r\n            manager.activeItem._selectViaInteraction();\r\n        }\r\n        else if (this._multiple && keyCode === A && event.ctrlKey) {\r\n            event.preventDefault();\r\n            /** @type {?} */\r\n            const hasDeselectedOptions = this.options.some((/**\r\n             * @param {?} opt\r\n             * @return {?}\r\n             */\r\n            opt => !opt.disabled && !opt.selected));\r\n            this.options.forEach((/**\r\n             * @param {?} option\r\n             * @return {?}\r\n             */\r\n            option => {\r\n                if (!option.disabled) {\r\n                    hasDeselectedOptions ? option.select() : option.deselect();\r\n                }\r\n            }));\r\n        }\r\n        else {\r\n            /** @type {?} */\r\n            const previouslyFocusedIndex = manager.activeItemIndex;\r\n            manager.onKeydown(event);\r\n            if (this._multiple && isArrowKey && event.shiftKey && manager.activeItem &&\r\n                manager.activeItemIndex !== previouslyFocusedIndex) {\r\n                manager.activeItem._selectViaInteraction();\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    _onFocus() {\r\n        if (!this.disabled) {\r\n            this._focused = true;\r\n            this.stateChanges.next();\r\n        }\r\n    }\r\n    /**\r\n     * Calls the touched callback only if the panel is closed. Otherwise, the trigger will\r\n     * \"blur\" to the panel when it opens, causing a false positive.\r\n     * @return {?}\r\n     */\r\n    _onBlur() {\r\n        this._focused = false;\r\n        if (!this.disabled && !this.panelOpen) {\r\n            this._onTouched();\r\n            this._changeDetectorRef.markForCheck();\r\n            this.stateChanges.next();\r\n        }\r\n    }\r\n    /**\r\n     * Callback that is invoked when the overlay panel has been attached.\r\n     * @return {?}\r\n     */\r\n    _onAttached() {\r\n        this.overlayDir.positionChange.pipe(take(1)).subscribe((/**\r\n         * @return {?}\r\n         */\r\n        () => {\r\n            this._changeDetectorRef.detectChanges();\r\n            this._calculateOverlayOffsetX();\r\n            this.panel.nativeElement.scrollTop = this._scrollTop;\r\n        }));\r\n    }\r\n    /**\r\n     * Returns the theme to be used on the panel.\r\n     * @return {?}\r\n     */\r\n    _getPanelTheme() {\r\n        return this._parentFormField ? `mat-${this._parentFormField.color}` : '';\r\n    }\r\n    /**\r\n     * Whether the select has a value.\r\n     * @return {?}\r\n     */\r\n    get empty() {\r\n        return !this._selectionModel || this._selectionModel.isEmpty();\r\n    }\r\n    /**\r\n     * @private\r\n     * @return {?}\r\n     */\r\n    _initializeSelection() {\r\n        // Defer setting the value in order to avoid the \"Expression\r\n        // has changed after it was checked\" errors from Angular.\r\n        Promise.resolve().then((/**\r\n         * @return {?}\r\n         */\r\n        () => {\r\n            this._setSelectionByValue(this.ngControl ? this.ngControl.value : this._value);\r\n            this.stateChanges.next();\r\n        }));\r\n    }\r\n    /**\r\n     * Sets the selected option based on a value. If no option can be\r\n     * found with the designated value, the select trigger is cleared.\r\n     * @private\r\n     * @param {?} value\r\n     * @return {?}\r\n     */\r\n    _setSelectionByValue(value) {\r\n        if (this.multiple && value) {\r\n            if (!Array.isArray(value)) {\r\n                throw getMatSelectNonArrayValueError();\r\n            }\r\n            this._selectionModel.clear();\r\n            value.forEach((/**\r\n             * @param {?} currentValue\r\n             * @return {?}\r\n             */\r\n            (currentValue) => this._selectValue(currentValue)));\r\n            this._sortValues();\r\n        }\r\n        else {\r\n            this._selectionModel.clear();\r\n            /** @type {?} */\r\n            const correspondingOption = this._selectValue(value);\r\n            // Shift focus to the active item. Note that we shouldn't do this in multiple\r\n            // mode, because we don't know what option the user interacted with last.\r\n            if (correspondingOption) {\r\n                this._keyManager.setActiveItem(correspondingOption);\r\n            }\r\n            else if (!this.panelOpen) {\r\n                // Otherwise reset the highlighted option. Note that we only want to do this while\r\n                // closed, because doing it while open can shift the user's focus unnecessarily.\r\n                this._keyManager.setActiveItem(-1);\r\n            }\r\n        }\r\n        this._changeDetectorRef.markForCheck();\r\n    }\r\n    /**\r\n     * Finds and selects and option based on its value.\r\n     * @private\r\n     * @param {?} value\r\n     * @return {?} Option that has the corresponding value.\r\n     */\r\n    _selectValue(value) {\r\n        /** @type {?} */\r\n        const correspondingOption = this.options.find((/**\r\n         * @param {?} option\r\n         * @return {?}\r\n         */\r\n        (option) => {\r\n            try {\r\n                // Treat null as a special reset value.\r\n                return option.value != null && this._compareWith(option.value, value);\r\n            }\r\n            catch (error) {\r\n                if (isDevMode()) {\r\n                    // Notify developers of errors in their comparator.\r\n                    console.warn(error);\r\n                }\r\n                return false;\r\n            }\r\n        }));\r\n        if (correspondingOption) {\r\n            this._selectionModel.select(correspondingOption);\r\n        }\r\n        return correspondingOption;\r\n    }\r\n    /**\r\n     * Sets up a key manager to listen to keyboard events on the overlay panel.\r\n     * @private\r\n     * @return {?}\r\n     */\r\n    _initKeyManager() {\r\n        this._keyManager = new ActiveDescendantKeyManager(this.options)\r\n            .withTypeAhead(this.typeaheadDebounceInterval)\r\n            .withVerticalOrientation()\r\n            .withHorizontalOrientation(this._isRtl() ? 'rtl' : 'ltr')\r\n            .withAllowedModifierKeys(['shiftKey']);\r\n        this._keyManager.tabOut.pipe(takeUntil(this._destroy)).subscribe((/**\r\n         * @return {?}\r\n         */\r\n        () => {\r\n            // Restore focus to the trigger before closing. Ensures that the focus\r\n            // position won't be lost if the user got focus into the overlay.\r\n            this.focus();\r\n            this.close();\r\n        }));\r\n        this._keyManager.change.pipe(takeUntil(this._destroy)).subscribe((/**\r\n         * @return {?}\r\n         */\r\n        () => {\r\n            if (this._panelOpen && this.panel) {\r\n                this._scrollActiveOptionIntoView();\r\n            }\r\n            else if (!this._panelOpen && !this.multiple && this._keyManager.activeItem) {\r\n                this._keyManager.activeItem._selectViaInteraction();\r\n            }\r\n        }));\r\n    }\r\n    /**\r\n     * Drops current option subscriptions and IDs and resets from scratch.\r\n     * @private\r\n     * @return {?}\r\n     */\r\n    _resetOptions() {\r\n        /** @type {?} */\r\n        const changedOrDestroyed = merge(this.options.changes, this._destroy);\r\n        this.optionSelectionChanges.pipe(takeUntil(changedOrDestroyed)).subscribe((/**\r\n         * @param {?} event\r\n         * @return {?}\r\n         */\r\n        event => {\r\n            this._onSelect(event.source, event.isUserInput);\r\n            if (event.isUserInput && !this.multiple && this._panelOpen) {\r\n                this.close();\r\n                this.focus();\r\n            }\r\n        }));\r\n        // Listen to changes in the internal state of the options and react accordingly.\r\n        // Handles cases like the labels of the selected options changing.\r\n        merge(...this.options.map((/**\r\n         * @param {?} option\r\n         * @return {?}\r\n         */\r\n        option => option._stateChanges)))\r\n            .pipe(takeUntil(changedOrDestroyed))\r\n            .subscribe((/**\r\n         * @return {?}\r\n         */\r\n        () => {\r\n            this._changeDetectorRef.markForCheck();\r\n            this.stateChanges.next();\r\n        }));\r\n        this._setOptionIds();\r\n    }\r\n    /**\r\n     * Invoked when an option is clicked.\r\n     * @private\r\n     * @param {?} option\r\n     * @param {?} isUserInput\r\n     * @return {?}\r\n     */\r\n    _onSelect(option, isUserInput) {\r\n        /** @type {?} */\r\n        const wasSelected = this._selectionModel.isSelected(option);\r\n        if (option.value == null && !this._multiple) {\r\n            option.deselect();\r\n            this._selectionModel.clear();\r\n            this._propagateChanges(option.value);\r\n        }\r\n        else {\r\n            if (wasSelected !== option.selected) {\r\n                option.selected ? this._selectionModel.select(option) :\r\n                    this._selectionModel.deselect(option);\r\n            }\r\n            if (isUserInput) {\r\n                this._keyManager.setActiveItem(option);\r\n            }\r\n            if (this.multiple) {\r\n                this._sortValues();\r\n                if (isUserInput) {\r\n                    // In case the user selected the option with their mouse, we\r\n                    // want to restore focus back to the trigger, in order to\r\n                    // prevent the select keyboard controls from clashing with\r\n                    // the ones from `mat-option`.\r\n                    this.focus();\r\n                }\r\n            }\r\n        }\r\n        if (wasSelected !== this._selectionModel.isSelected(option)) {\r\n            this._propagateChanges();\r\n        }\r\n        this.stateChanges.next();\r\n    }\r\n    /**\r\n     * Sorts the selected values in the selected based on their order in the panel.\r\n     * @private\r\n     * @return {?}\r\n     */\r\n    _sortValues() {\r\n        if (this.multiple) {\r\n            /** @type {?} */\r\n            const options = this.options.toArray();\r\n            this._selectionModel.sort((/**\r\n             * @param {?} a\r\n             * @param {?} b\r\n             * @return {?}\r\n             */\r\n            (a, b) => {\r\n                return this.sortComparator ? this.sortComparator(a, b, options) :\r\n                    options.indexOf(a) - options.indexOf(b);\r\n            }));\r\n            this.stateChanges.next();\r\n        }\r\n    }\r\n    /**\r\n     * Emits change event to set the model value.\r\n     * @private\r\n     * @param {?=} fallbackValue\r\n     * @return {?}\r\n     */\r\n    _propagateChanges(fallbackValue) {\r\n        /** @type {?} */\r\n        let valueToEmit = null;\r\n        if (this.multiple) {\r\n            valueToEmit = ((/** @type {?} */ (this.selected))).map((/**\r\n             * @param {?} option\r\n             * @return {?}\r\n             */\r\n            option => option.value));\r\n        }\r\n        else {\r\n            valueToEmit = this.selected ? ((/** @type {?} */ (this.selected))).value : fallbackValue;\r\n        }\r\n        this._value = valueToEmit;\r\n        this.valueChange.emit(valueToEmit);\r\n        this._onChange(valueToEmit);\r\n        this.selectionChange.emit(new MatSelectChange(this, valueToEmit));\r\n        this._changeDetectorRef.markForCheck();\r\n    }\r\n    /**\r\n     * Records option IDs to pass to the aria-owns property.\r\n     * @private\r\n     * @return {?}\r\n     */\r\n    _setOptionIds() {\r\n        this._optionIds = this.options.map((/**\r\n         * @param {?} option\r\n         * @return {?}\r\n         */\r\n        option => option.id)).join(' ');\r\n    }\r\n    /**\r\n     * Highlights the selected item. If no option is selected, it will highlight\r\n     * the first item instead.\r\n     * @private\r\n     * @return {?}\r\n     */\r\n    _highlightCorrectOption() {\r\n        if (this._keyManager) {\r\n            if (this.empty) {\r\n                this._keyManager.setFirstItemActive();\r\n            }\r\n            else {\r\n                this._keyManager.setActiveItem(this._selectionModel.selected[0]);\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Scrolls the active option into view.\r\n     * @private\r\n     * @return {?}\r\n     */\r\n    _scrollActiveOptionIntoView() {\r\n        /** @type {?} */\r\n        const activeOptionIndex = this._keyManager.activeItemIndex || 0;\r\n        /** @type {?} */\r\n        const labelCount = _countGroupLabelsBeforeOption(activeOptionIndex, this.options, this.optionGroups);\r\n        this.panel.nativeElement.scrollTop = _getOptionScrollPosition(activeOptionIndex + labelCount, this._getItemHeight(), this.panel.nativeElement.scrollTop, SELECT_PANEL_MAX_HEIGHT);\r\n    }\r\n    /**\r\n     * Focuses the select element.\r\n     * @param {?=} options\r\n     * @return {?}\r\n     */\r\n    focus(options) {\r\n        this._elementRef.nativeElement.focus(options);\r\n    }\r\n    /**\r\n     * Gets the index of the provided option in the option list.\r\n     * @private\r\n     * @param {?} option\r\n     * @return {?}\r\n     */\r\n    _getOptionIndex(option) {\r\n        return this.options.reduce((/**\r\n         * @param {?} result\r\n         * @param {?} current\r\n         * @param {?} index\r\n         * @return {?}\r\n         */\r\n        (result, current, index) => {\r\n            return result === undefined ? (option === current ? index : undefined) : result;\r\n        }), undefined);\r\n    }\r\n    /**\r\n     * Calculates the scroll position and x- and y-offsets of the overlay panel.\r\n     * @private\r\n     * @return {?}\r\n     */\r\n    _calculateOverlayPosition() {\r\n        /** @type {?} */\r\n        const itemHeight = this._getItemHeight();\r\n        /** @type {?} */\r\n        const items = this._getItemCount();\r\n        /** @type {?} */\r\n        const panelHeight = Math.min(items * itemHeight, SELECT_PANEL_MAX_HEIGHT);\r\n        /** @type {?} */\r\n        const scrollContainerHeight = items * itemHeight;\r\n        // The farthest the panel can be scrolled before it hits the bottom\r\n        /** @type {?} */\r\n        const maxScroll = scrollContainerHeight - panelHeight;\r\n        // If no value is selected we open the popup to the first item.\r\n        /** @type {?} */\r\n        let selectedOptionOffset = this.empty ? 0 : (/** @type {?} */ (this._getOptionIndex(this._selectionModel.selected[0])));\r\n        selectedOptionOffset += _countGroupLabelsBeforeOption(selectedOptionOffset, this.options, this.optionGroups);\r\n        // We must maintain a scroll buffer so the selected option will be scrolled to the\r\n        // center of the overlay panel rather than the top.\r\n        /** @type {?} */\r\n        const scrollBuffer = panelHeight / 2;\r\n        this._scrollTop = this._calculateOverlayScroll(selectedOptionOffset, scrollBuffer, maxScroll);\r\n        this._offsetY = this._calculateOverlayOffsetY(selectedOptionOffset, scrollBuffer, maxScroll);\r\n        this._checkOverlayWithinViewport(maxScroll);\r\n    }\r\n    /**\r\n     * Calculates the scroll position of the select's overlay panel.\r\n     *\r\n     * Attempts to center the selected option in the panel. If the option is\r\n     * too high or too low in the panel to be scrolled to the center, it clamps the\r\n     * scroll position to the min or max scroll positions respectively.\r\n     * @param {?} selectedIndex\r\n     * @param {?} scrollBuffer\r\n     * @param {?} maxScroll\r\n     * @return {?}\r\n     */\r\n    _calculateOverlayScroll(selectedIndex, scrollBuffer, maxScroll) {\r\n        /** @type {?} */\r\n        const itemHeight = this._getItemHeight();\r\n        /** @type {?} */\r\n        const optionOffsetFromScrollTop = itemHeight * selectedIndex;\r\n        /** @type {?} */\r\n        const halfOptionHeight = itemHeight / 2;\r\n        // Starts at the optionOffsetFromScrollTop, which scrolls the option to the top of the\r\n        // scroll container, then subtracts the scroll buffer to scroll the option down to\r\n        // the center of the overlay panel. Half the option height must be re-added to the\r\n        // scrollTop so the option is centered based on its middle, not its top edge.\r\n        /** @type {?} */\r\n        const optimalScrollPosition = optionOffsetFromScrollTop - scrollBuffer + halfOptionHeight;\r\n        return Math.min(Math.max(0, optimalScrollPosition), maxScroll);\r\n    }\r\n    /**\r\n     * Returns the aria-label of the select component.\r\n     * @return {?}\r\n     */\r\n    _getAriaLabel() {\r\n        // If an ariaLabelledby value has been set by the consumer, the select should not overwrite the\r\n        // `aria-labelledby` value by setting the ariaLabel to the placeholder.\r\n        return this.ariaLabelledby ? null : this.ariaLabel || this.placeholder;\r\n    }\r\n    /**\r\n     * Returns the aria-labelledby of the select component.\r\n     * @return {?}\r\n     */\r\n    _getAriaLabelledby() {\r\n        if (this.ariaLabelledby) {\r\n            return this.ariaLabelledby;\r\n        }\r\n        // Note: we use `_getAriaLabel` here, because we want to check whether there's a\r\n        // computed label. `this.ariaLabel` is only the user-specified label.\r\n        if (!this._parentFormField || !this._parentFormField._hasFloatingLabel() ||\r\n            this._getAriaLabel()) {\r\n            return null;\r\n        }\r\n        return this._parentFormField._labelId || null;\r\n    }\r\n    /**\r\n     * Determines the `aria-activedescendant` to be set on the host.\r\n     * @return {?}\r\n     */\r\n    _getAriaActiveDescendant() {\r\n        if (this.panelOpen && this._keyManager && this._keyManager.activeItem) {\r\n            return this._keyManager.activeItem.id;\r\n        }\r\n        return null;\r\n    }\r\n    /**\r\n     * Sets the x-offset of the overlay panel in relation to the trigger's top start corner.\r\n     * This must be adjusted to align the selected option text over the trigger text when\r\n     * the panel opens. Will change based on LTR or RTL text direction. Note that the offset\r\n     * can't be calculated until the panel has been attached, because we need to know the\r\n     * content width in order to constrain the panel within the viewport.\r\n     * @private\r\n     * @return {?}\r\n     */\r\n    _calculateOverlayOffsetX() {\r\n        /** @type {?} */\r\n        const overlayRect = this.overlayDir.overlayRef.overlayElement.getBoundingClientRect();\r\n        /** @type {?} */\r\n        const viewportSize = this._viewportRuler.getViewportSize();\r\n        /** @type {?} */\r\n        const isRtl = this._isRtl();\r\n        /** @type {?} */\r\n        const paddingWidth = this.multiple ? SELECT_MULTIPLE_PANEL_PADDING_X + SELECT_PANEL_PADDING_X :\r\n            SELECT_PANEL_PADDING_X * 2;\r\n        /** @type {?} */\r\n        let offsetX;\r\n        // Adjust the offset, depending on the option padding.\r\n        if (this.multiple) {\r\n            offsetX = SELECT_MULTIPLE_PANEL_PADDING_X;\r\n        }\r\n        else {\r\n            /** @type {?} */\r\n            let selected = this._selectionModel.selected[0] || this.options.first;\r\n            offsetX = selected && selected.group ? SELECT_PANEL_INDENT_PADDING_X : SELECT_PANEL_PADDING_X;\r\n        }\r\n        // Invert the offset in LTR.\r\n        if (!isRtl) {\r\n            offsetX *= -1;\r\n        }\r\n        // Determine how much the select overflows on each side.\r\n        /** @type {?} */\r\n        const leftOverflow = 0 - (overlayRect.left + offsetX - (isRtl ? paddingWidth : 0));\r\n        /** @type {?} */\r\n        const rightOverflow = overlayRect.right + offsetX - viewportSize.width\r\n            + (isRtl ? 0 : paddingWidth);\r\n        // If the element overflows on either side, reduce the offset to allow it to fit.\r\n        if (leftOverflow > 0) {\r\n            offsetX += leftOverflow + SELECT_PANEL_VIEWPORT_PADDING;\r\n        }\r\n        else if (rightOverflow > 0) {\r\n            offsetX -= rightOverflow + SELECT_PANEL_VIEWPORT_PADDING;\r\n        }\r\n        // Set the offset directly in order to avoid having to go through change detection and\r\n        // potentially triggering \"changed after it was checked\" errors. Round the value to avoid\r\n        // blurry content in some browsers.\r\n        this.overlayDir.offsetX = Math.round(offsetX);\r\n        this.overlayDir.overlayRef.updatePosition();\r\n    }\r\n    /**\r\n     * Calculates the y-offset of the select's overlay panel in relation to the\r\n     * top start corner of the trigger. It has to be adjusted in order for the\r\n     * selected option to be aligned over the trigger when the panel opens.\r\n     * @private\r\n     * @param {?} selectedIndex\r\n     * @param {?} scrollBuffer\r\n     * @param {?} maxScroll\r\n     * @return {?}\r\n     */\r\n    _calculateOverlayOffsetY(selectedIndex, scrollBuffer, maxScroll) {\r\n        /** @type {?} */\r\n        const itemHeight = this._getItemHeight();\r\n        /** @type {?} */\r\n        const optionHeightAdjustment = (itemHeight - this._triggerRect.height) / 2;\r\n        /** @type {?} */\r\n        const maxOptionsDisplayed = Math.floor(SELECT_PANEL_MAX_HEIGHT / itemHeight);\r\n        /** @type {?} */\r\n        let optionOffsetFromPanelTop;\r\n        // Disable offset if requested by user by returning 0 as value to offset\r\n        if (this._disableOptionCentering) {\r\n            return 0;\r\n        }\r\n        if (this._scrollTop === 0) {\r\n            optionOffsetFromPanelTop = selectedIndex * itemHeight;\r\n        }\r\n        else if (this._scrollTop === maxScroll) {\r\n            /** @type {?} */\r\n            const firstDisplayedIndex = this._getItemCount() - maxOptionsDisplayed;\r\n            /** @type {?} */\r\n            const selectedDisplayIndex = selectedIndex - firstDisplayedIndex;\r\n            // The first item is partially out of the viewport. Therefore we need to calculate what\r\n            // portion of it is shown in the viewport and account for it in our offset.\r\n            /** @type {?} */\r\n            let partialItemHeight = itemHeight - (this._getItemCount() * itemHeight - SELECT_PANEL_MAX_HEIGHT) % itemHeight;\r\n            // Because the panel height is longer than the height of the options alone,\r\n            // there is always extra padding at the top or bottom of the panel. When\r\n            // scrolled to the very bottom, this padding is at the top of the panel and\r\n            // must be added to the offset.\r\n            optionOffsetFromPanelTop = selectedDisplayIndex * itemHeight + partialItemHeight;\r\n        }\r\n        else {\r\n            // If the option was scrolled to the middle of the panel using a scroll buffer,\r\n            // its offset will be the scroll buffer minus the half height that was added to\r\n            // center it.\r\n            optionOffsetFromPanelTop = scrollBuffer - itemHeight / 2;\r\n        }\r\n        // The final offset is the option's offset from the top, adjusted for the height difference,\r\n        // multiplied by -1 to ensure that the overlay moves in the correct direction up the page.\r\n        // The value is rounded to prevent some browsers from blurring the content.\r\n        return Math.round(optionOffsetFromPanelTop * -1 - optionHeightAdjustment);\r\n    }\r\n    /**\r\n     * Checks that the attempted overlay position will fit within the viewport.\r\n     * If it will not fit, tries to adjust the scroll position and the associated\r\n     * y-offset so the panel can open fully on-screen. If it still won't fit,\r\n     * sets the offset back to 0 to allow the fallback position to take over.\r\n     * @private\r\n     * @param {?} maxScroll\r\n     * @return {?}\r\n     */\r\n    _checkOverlayWithinViewport(maxScroll) {\r\n        /** @type {?} */\r\n        const itemHeight = this._getItemHeight();\r\n        /** @type {?} */\r\n        const viewportSize = this._viewportRuler.getViewportSize();\r\n        /** @type {?} */\r\n        const topSpaceAvailable = this._triggerRect.top - SELECT_PANEL_VIEWPORT_PADDING;\r\n        /** @type {?} */\r\n        const bottomSpaceAvailable = viewportSize.height - this._triggerRect.bottom - SELECT_PANEL_VIEWPORT_PADDING;\r\n        /** @type {?} */\r\n        const panelHeightTop = Math.abs(this._offsetY);\r\n        /** @type {?} */\r\n        const totalPanelHeight = Math.min(this._getItemCount() * itemHeight, SELECT_PANEL_MAX_HEIGHT);\r\n        /** @type {?} */\r\n        const panelHeightBottom = totalPanelHeight - panelHeightTop - this._triggerRect.height;\r\n        if (panelHeightBottom > bottomSpaceAvailable) {\r\n            this._adjustPanelUp(panelHeightBottom, bottomSpaceAvailable);\r\n        }\r\n        else if (panelHeightTop > topSpaceAvailable) {\r\n            this._adjustPanelDown(panelHeightTop, topSpaceAvailable, maxScroll);\r\n        }\r\n        else {\r\n            this._transformOrigin = this._getOriginBasedOnOption();\r\n        }\r\n    }\r\n    /**\r\n     * Adjusts the overlay panel up to fit in the viewport.\r\n     * @private\r\n     * @param {?} panelHeightBottom\r\n     * @param {?} bottomSpaceAvailable\r\n     * @return {?}\r\n     */\r\n    _adjustPanelUp(panelHeightBottom, bottomSpaceAvailable) {\r\n        // Browsers ignore fractional scroll offsets, so we need to round.\r\n        /** @type {?} */\r\n        const distanceBelowViewport = Math.round(panelHeightBottom - bottomSpaceAvailable);\r\n        // Scrolls the panel up by the distance it was extending past the boundary, then\r\n        // adjusts the offset by that amount to move the panel up into the viewport.\r\n        this._scrollTop -= distanceBelowViewport;\r\n        this._offsetY -= distanceBelowViewport;\r\n        this._transformOrigin = this._getOriginBasedOnOption();\r\n        // If the panel is scrolled to the very top, it won't be able to fit the panel\r\n        // by scrolling, so set the offset to 0 to allow the fallback position to take\r\n        // effect.\r\n        if (this._scrollTop <= 0) {\r\n            this._scrollTop = 0;\r\n            this._offsetY = 0;\r\n            this._transformOrigin = `50% bottom 0px`;\r\n        }\r\n    }\r\n    /**\r\n     * Adjusts the overlay panel down to fit in the viewport.\r\n     * @private\r\n     * @param {?} panelHeightTop\r\n     * @param {?} topSpaceAvailable\r\n     * @param {?} maxScroll\r\n     * @return {?}\r\n     */\r\n    _adjustPanelDown(panelHeightTop, topSpaceAvailable, maxScroll) {\r\n        // Browsers ignore fractional scroll offsets, so we need to round.\r\n        /** @type {?} */\r\n        const distanceAboveViewport = Math.round(panelHeightTop - topSpaceAvailable);\r\n        // Scrolls the panel down by the distance it was extending past the boundary, then\r\n        // adjusts the offset by that amount to move the panel down into the viewport.\r\n        this._scrollTop += distanceAboveViewport;\r\n        this._offsetY += distanceAboveViewport;\r\n        this._transformOrigin = this._getOriginBasedOnOption();\r\n        // If the panel is scrolled to the very bottom, it won't be able to fit the\r\n        // panel by scrolling, so set the offset to 0 to allow the fallback position\r\n        // to take effect.\r\n        if (this._scrollTop >= maxScroll) {\r\n            this._scrollTop = maxScroll;\r\n            this._offsetY = 0;\r\n            this._transformOrigin = `50% top 0px`;\r\n            return;\r\n        }\r\n    }\r\n    /**\r\n     * Sets the transform origin point based on the selected option.\r\n     * @private\r\n     * @return {?}\r\n     */\r\n    _getOriginBasedOnOption() {\r\n        /** @type {?} */\r\n        const itemHeight = this._getItemHeight();\r\n        /** @type {?} */\r\n        const optionHeightAdjustment = (itemHeight - this._triggerRect.height) / 2;\r\n        /** @type {?} */\r\n        const originY = Math.abs(this._offsetY) - optionHeightAdjustment + itemHeight / 2;\r\n        return `50% ${originY}px 0px`;\r\n    }\r\n    /**\r\n     * Calculates the amount of items in the select. This includes options and group labels.\r\n     * @private\r\n     * @return {?}\r\n     */\r\n    _getItemCount() {\r\n        return this.options.length + this.optionGroups.length;\r\n    }\r\n    /**\r\n     * Calculates the height of the select's options.\r\n     * @private\r\n     * @return {?}\r\n     */\r\n    _getItemHeight() {\r\n        return this._triggerFontSize * SELECT_ITEM_HEIGHT_EM;\r\n    }\r\n    /**\r\n     * Implemented as part of MatFormFieldControl.\r\n     * \\@docs-private\r\n     * @param {?} ids\r\n     * @return {?}\r\n     */\r\n    setDescribedByIds(ids) {\r\n        this._ariaDescribedby = ids.join(' ');\r\n    }\r\n    /**\r\n     * Implemented as part of MatFormFieldControl.\r\n     * \\@docs-private\r\n     * @return {?}\r\n     */\r\n    onContainerClick() {\r\n        this.focus();\r\n        this.open();\r\n    }\r\n    /**\r\n     * Implemented as part of MatFormFieldControl.\r\n     * \\@docs-private\r\n     * @return {?}\r\n     */\r\n    get shouldLabelFloat() {\r\n        return this._panelOpen || !this.empty;\r\n    }\r\n}\r\nMatSelect.decorators = [\r\n    { type: Component, args: [{selector: 'mat-select',\r\n                exportAs: 'matSelect',\r\n                template: \"<div cdk-overlay-origin class=\\\"mat-select-trigger\\\" aria-hidden=\\\"true\\\" (click)=\\\"toggle()\\\" #origin=\\\"cdkOverlayOrigin\\\" #trigger><div class=\\\"mat-select-value\\\" [ngSwitch]=\\\"empty\\\"><span class=\\\"mat-select-placeholder\\\" *ngSwitchCase=\\\"true\\\">{{placeholder || '\\u00A0'}}</span> <span class=\\\"mat-select-value-text\\\" *ngSwitchCase=\\\"false\\\" [ngSwitch]=\\\"!!customTrigger\\\"><span *ngSwitchDefault>{{triggerValue || '\\u00A0'}}</span><ng-content select=\\\"mat-select-trigger\\\" *ngSwitchCase=\\\"true\\\"></ng-content></span></div><div class=\\\"mat-select-arrow-wrapper\\\"><div class=\\\"mat-select-arrow\\\"></div></div></div><ng-template cdk-connected-overlay cdkConnectedOverlayLockPosition cdkConnectedOverlayHasBackdrop cdkConnectedOverlayBackdropClass=\\\"cdk-overlay-transparent-backdrop\\\" [cdkConnectedOverlayScrollStrategy]=\\\"_scrollStrategy\\\" [cdkConnectedOverlayOrigin]=\\\"origin\\\" [cdkConnectedOverlayOpen]=\\\"panelOpen\\\" [cdkConnectedOverlayPositions]=\\\"_positions\\\" [cdkConnectedOverlayMinWidth]=\\\"_triggerRect?.width\\\" [cdkConnectedOverlayOffsetY]=\\\"_offsetY\\\" (backdropClick)=\\\"close()\\\" (attach)=\\\"_onAttached()\\\" (detach)=\\\"close()\\\"><div class=\\\"mat-select-panel-wrap\\\" [@transformPanelWrap]><div #panel class=\\\"mat-select-panel {{ _getPanelTheme() }}\\\" [ngClass]=\\\"panelClass\\\" [@transformPanel]=\\\"multiple ? 'showing-multiple' : 'showing'\\\" (@transformPanel.done)=\\\"_panelDoneAnimatingStream.next($event.toState)\\\" [style.transformOrigin]=\\\"_transformOrigin\\\" [style.font-size.px]=\\\"_triggerFontSize\\\" (keydown)=\\\"_handleKeydown($event)\\\"><ng-content></ng-content></div></div></ng-template>\",\r\n                styles: [\".mat-select{display:inline-block;width:100%;outline:0}.mat-select-trigger{display:inline-table;cursor:pointer;position:relative;box-sizing:border-box}.mat-select-disabled .mat-select-trigger{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;cursor:default}.mat-select-value{display:table-cell;max-width:0;width:100%;overflow:hidden;text-overflow:ellipsis;white-space:nowrap}.mat-select-value-text{white-space:nowrap;overflow:hidden;text-overflow:ellipsis}.mat-select-arrow-wrapper{display:table-cell;vertical-align:middle}.mat-form-field-appearance-fill .mat-select-arrow-wrapper{transform:translateY(-50%)}.mat-form-field-appearance-outline .mat-select-arrow-wrapper{transform:translateY(-25%)}.mat-form-field-appearance-standard.mat-form-field-has-label .mat-select:not(.mat-select-empty) .mat-select-arrow-wrapper{transform:translateY(-50%)}.mat-form-field-appearance-standard .mat-select.mat-select-empty .mat-select-arrow-wrapper{transition:transform .4s cubic-bezier(.25,.8,.25,1)}._mat-animation-noopable.mat-form-field-appearance-standard .mat-select.mat-select-empty .mat-select-arrow-wrapper{transition:none}.mat-select-arrow{width:0;height:0;border-left:5px solid transparent;border-right:5px solid transparent;border-top:5px solid;margin:0 4px}.mat-select-panel-wrap{flex-basis:100%}.mat-select-panel{min-width:112px;max-width:280px;overflow:auto;-webkit-overflow-scrolling:touch;padding-top:0;padding-bottom:0;max-height:256px;min-width:100%;border-radius:4px}@media (-ms-high-contrast:active){.mat-select-panel{outline:solid 1px}}.mat-select-panel .mat-optgroup-label,.mat-select-panel .mat-option{font-size:inherit;line-height:3em;height:3em}.mat-form-field-type-mat-select:not(.mat-form-field-disabled) .mat-form-field-flex{cursor:pointer}.mat-form-field-type-mat-select .mat-form-field-label{width:calc(100% - 18px)}.mat-select-placeholder{transition:color .4s .133s cubic-bezier(.25,.8,.25,1)}._mat-animation-noopable .mat-select-placeholder{transition:none}.mat-form-field-hide-placeholder .mat-select-placeholder{color:transparent;-webkit-text-fill-color:transparent;transition:none;display:block}\"],\r\n                inputs: ['disabled', 'disableRipple', 'tabIndex'],\r\n                encapsulation: ViewEncapsulation.None,\r\n                changeDetection: ChangeDetectionStrategy.OnPush,\r\n                host: {\r\n                    'role': 'listbox',\r\n                    '[attr.id]': 'id',\r\n                    '[attr.tabindex]': 'tabIndex',\r\n                    '[attr.aria-label]': '_getAriaLabel()',\r\n                    '[attr.aria-labelledby]': '_getAriaLabelledby()',\r\n                    '[attr.aria-required]': 'required.toString()',\r\n                    '[attr.aria-disabled]': 'disabled.toString()',\r\n                    '[attr.aria-invalid]': 'errorState',\r\n                    '[attr.aria-owns]': 'panelOpen ? _optionIds : null',\r\n                    '[attr.aria-multiselectable]': 'multiple',\r\n                    '[attr.aria-describedby]': '_ariaDescribedby || null',\r\n                    '[attr.aria-activedescendant]': '_getAriaActiveDescendant()',\r\n                    '[class.mat-select-disabled]': 'disabled',\r\n                    '[class.mat-select-invalid]': 'errorState',\r\n                    '[class.mat-select-required]': 'required',\r\n                    '[class.mat-select-empty]': 'empty',\r\n                    'class': 'mat-select',\r\n                    '(keydown)': '_handleKeydown($event)',\r\n                    '(focus)': '_onFocus()',\r\n                    '(blur)': '_onBlur()',\r\n                },\r\n                animations: [\r\n                    matSelectAnimations.transformPanelWrap,\r\n                    matSelectAnimations.transformPanel\r\n                ],\r\n                providers: [\r\n                    { provide: MatFormFieldControl, useExisting: MatSelect },\r\n                    { provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatSelect }\r\n                ],\r\n            },] },\r\n];\r\n/** @nocollapse */\r\nMatSelect.ctorParameters = () => [\r\n    { type: ViewportRuler },\r\n    { type: ChangeDetectorRef },\r\n    { type: NgZone },\r\n    { type: ErrorStateMatcher },\r\n    { type: ElementRef },\r\n    { type: Directionality, decorators: [{ type: Optional }] },\r\n    { type: NgForm, decorators: [{ type: Optional }] },\r\n    { type: FormGroupDirective, decorators: [{ type: Optional }] },\r\n    { type: MatFormField, decorators: [{ type: Optional }] },\r\n    { type: NgControl, decorators: [{ type: Self }, { type: Optional }] },\r\n    { type: String, decorators: [{ type: Attribute, args: ['tabindex',] }] },\r\n    { type: undefined, decorators: [{ type: Inject, args: [MAT_SELECT_SCROLL_STRATEGY,] }] },\r\n    { type: LiveAnnouncer }\r\n];\r\nMatSelect.propDecorators = {\r\n    trigger: [{ type: ViewChild, args: ['trigger', { static: false },] }],\r\n    panel: [{ type: ViewChild, args: ['panel', { static: false },] }],\r\n    overlayDir: [{ type: ViewChild, args: [CdkConnectedOverlay, { static: false },] }],\r\n    options: [{ type: ContentChildren, args: [MatOption, { descendants: true },] }],\r\n    optionGroups: [{ type: ContentChildren, args: [MatOptgroup,] }],\r\n    panelClass: [{ type: Input }],\r\n    customTrigger: [{ type: ContentChild, args: [MatSelectTrigger, { static: false },] }],\r\n    placeholder: [{ type: Input }],\r\n    required: [{ type: Input }],\r\n    multiple: [{ type: Input }],\r\n    disableOptionCentering: [{ type: Input }],\r\n    compareWith: [{ type: Input }],\r\n    value: [{ type: Input }],\r\n    ariaLabel: [{ type: Input, args: ['aria-label',] }],\r\n    ariaLabelledby: [{ type: Input, args: ['aria-labelledby',] }],\r\n    errorStateMatcher: [{ type: Input }],\r\n    typeaheadDebounceInterval: [{ type: Input }],\r\n    sortComparator: [{ type: Input }],\r\n    id: [{ type: Input }],\r\n    openedChange: [{ type: Output }],\r\n    _openedStream: [{ type: Output, args: ['opened',] }],\r\n    _closedStream: [{ type: Output, args: ['closed',] }],\r\n    selectionChange: [{ type: Output }],\r\n    valueChange: [{ type: Output }]\r\n};\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\nclass MatSelectModule {\r\n}\r\nMatSelectModule.decorators = [\r\n    { type: NgModule, args: [{\r\n                imports: [\r\n                    CommonModule,\r\n                    OverlayModule,\r\n                    MatOptionModule,\r\n                    MatCommonModule,\r\n                ],\r\n                exports: [MatFormFieldModule, MatSelect, MatSelectTrigger, MatOptionModule, MatCommonModule],\r\n                declarations: [MatSelect, MatSelectTrigger],\r\n                providers: [MAT_SELECT_SCROLL_STRATEGY_PROVIDER]\r\n            },] },\r\n];\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n\r\nexport { MatSelectModule, MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY, SELECT_PANEL_MAX_HEIGHT, SELECT_PANEL_PADDING_X, SELECT_PANEL_INDENT_PADDING_X, SELECT_ITEM_HEIGHT_EM, SELECT_MULTIPLE_PANEL_PADDING_X, SELECT_PANEL_VIEWPORT_PADDING, MAT_SELECT_SCROLL_STRATEGY, MAT_SELECT_SCROLL_STRATEGY_PROVIDER, MatSelectChange, MatSelectTrigger, MatSelect, matSelectAnimations, transformPanel, fadeInContent };\r\n\r\n"]}