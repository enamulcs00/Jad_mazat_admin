{"version":3,"sources":["v:/jad-admin-go/mazat_admin_panel/node_modules/@angular/material/esm2015/core.js"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4BA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CAsKC,sozBD,ikBAGC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CA8BD,qCAQC;;;;;;;;;;;;;CAGD,yPAMC;;;;;;;;;;;;;;;;;;;;;;CAkBD,mCAGC;;;;;;;;;;;;;;;;;;CAaD,mCAGC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CAwID,kHAGC;;;;;;;;;;;;;;;;;;;;;;;;;;;CAiBD,mBAMC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CAufD,aAUC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CAwBD,2BAOC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CAkCD,aAeC;;;;;;;;;;;;;;;;;;;;;;;;;CAeD,0KAMC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CA4BD,aAiBC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CAmQD,aAuBC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CAiED,uNAOC","file":"core.js","sourcesContent":["/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nimport { Version, NgModule, InjectionToken, Optional, Inject, isDevMode, inject, LOCALE_ID, Injectable, Directive, ElementRef, Input, NgZone, Component, ViewEncapsulation, ChangeDetectionStrategy, ChangeDetectorRef, EventEmitter, Output, ɵɵdefineInjectable } from '@angular/core';\r\nimport { HAMMER_LOADER, HammerGestureConfig } from '@angular/platform-browser';\r\nimport { BidiModule } from '@angular/cdk/bidi';\r\nimport { VERSION } from '@angular/cdk';\r\nimport { coerceBooleanProperty, coerceElement } from '@angular/cdk/coercion';\r\nimport { Subject, Observable } from 'rxjs';\r\nimport { Platform, PlatformModule, normalizePassiveListenerOptions } from '@angular/cdk/platform';\r\nimport { startWith } from 'rxjs/operators';\r\nimport { isFakeMousedownFromScreenReader } from '@angular/cdk/a11y';\r\nimport { ANIMATION_MODULE_TYPE } from '@angular/platform-browser/animations';\r\nimport { ENTER, SPACE, hasModifierKey } from '@angular/cdk/keycodes';\r\nimport { CommonModule } from '@angular/common';\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n/**\r\n * Current version of Angular Material.\r\n * @type {?}\r\n */\r\nconst VERSION$1 = new Version('8.2.3');\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n\r\n/**\r\n * \\@docs-private\r\n */\r\nclass AnimationCurves {\r\n}\r\nAnimationCurves.STANDARD_CURVE = 'cubic-bezier(0.4,0.0,0.2,1)';\r\nAnimationCurves.DECELERATION_CURVE = 'cubic-bezier(0.0,0.0,0.2,1)';\r\nAnimationCurves.ACCELERATION_CURVE = 'cubic-bezier(0.4,0.0,1,1)';\r\nAnimationCurves.SHARP_CURVE = 'cubic-bezier(0.4,0.0,0.6,1)';\r\n/**\r\n * \\@docs-private\r\n */\r\nclass AnimationDurations {\r\n}\r\nAnimationDurations.COMPLEX = '375ms';\r\nAnimationDurations.ENTERING = '225ms';\r\nAnimationDurations.EXITING = '195ms';\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n// Private version constant to circumvent test/build issues,\r\n// i.e. avoid core to depend on the @angular/material primary entry-point\r\n// Can be removed once the Material primary entry-point no longer\r\n// re-exports all secondary entry-points\r\n/** @type {?} */\r\nconst VERSION$2 = new Version('8.2.3');\r\n/**\r\n * \\@docs-private\r\n * @return {?}\r\n */\r\nfunction MATERIAL_SANITY_CHECKS_FACTORY() {\r\n    return true;\r\n}\r\n/**\r\n * Injection token that configures whether the Material sanity checks are enabled.\r\n * @type {?}\r\n */\r\nconst MATERIAL_SANITY_CHECKS = new InjectionToken('mat-sanity-checks', {\r\n    providedIn: 'root',\r\n    factory: MATERIAL_SANITY_CHECKS_FACTORY,\r\n});\r\n/**\r\n * Module that captures anything that should be loaded and/or run for *all* Angular Material\r\n * components. This includes Bidi, etc.\r\n *\r\n * This module should be imported to each top-level component module (e.g., MatTabsModule).\r\n */\r\nclass MatCommonModule {\r\n    /**\r\n     * @param {?} _sanityChecksEnabled\r\n     * @param {?=} _hammerLoader\r\n     */\r\n    constructor(_sanityChecksEnabled, _hammerLoader) {\r\n        this._sanityChecksEnabled = _sanityChecksEnabled;\r\n        this._hammerLoader = _hammerLoader;\r\n        /**\r\n         * Whether we've done the global sanity checks (e.g. a theme is loaded, there is a doctype).\r\n         */\r\n        this._hasDoneGlobalChecks = false;\r\n        /**\r\n         * Whether we've already checked for HammerJs availability.\r\n         */\r\n        this._hasCheckedHammer = false;\r\n        /**\r\n         * Reference to the global `document` object.\r\n         */\r\n        this._document = typeof document === 'object' && document ? document : null;\r\n        /**\r\n         * Reference to the global 'window' object.\r\n         */\r\n        this._window = typeof window === 'object' && window ? window : null;\r\n        if (this._areChecksEnabled() && !this._hasDoneGlobalChecks) {\r\n            this._checkDoctypeIsDefined();\r\n            this._checkThemeIsPresent();\r\n            this._checkCdkVersionMatch();\r\n            this._hasDoneGlobalChecks = true;\r\n        }\r\n    }\r\n    /**\r\n     * Whether any sanity checks are enabled\r\n     * @private\r\n     * @return {?}\r\n     */\r\n    _areChecksEnabled() {\r\n        return this._sanityChecksEnabled && isDevMode() && !this._isTestEnv();\r\n    }\r\n    /**\r\n     * Whether the code is running in tests.\r\n     * @private\r\n     * @return {?}\r\n     */\r\n    _isTestEnv() {\r\n        /** @type {?} */\r\n        const window = (/** @type {?} */ (this._window));\r\n        return window && (window.__karma__ || window.jasmine);\r\n    }\r\n    /**\r\n     * @private\r\n     * @return {?}\r\n     */\r\n    _checkDoctypeIsDefined() {\r\n        if (this._document && !this._document.doctype) {\r\n            console.warn('Current document does not have a doctype. This may cause ' +\r\n                'some Angular Material components not to behave as expected.');\r\n        }\r\n    }\r\n    /**\r\n     * @private\r\n     * @return {?}\r\n     */\r\n    _checkThemeIsPresent() {\r\n        // We need to assert that the `body` is defined, because these checks run very early\r\n        // and the `body` won't be defined if the consumer put their scripts in the `head`.\r\n        if (!this._document || !this._document.body || typeof getComputedStyle !== 'function') {\r\n            return;\r\n        }\r\n        /** @type {?} */\r\n        const testElement = this._document.createElement('div');\r\n        testElement.classList.add('mat-theme-loaded-marker');\r\n        this._document.body.appendChild(testElement);\r\n        /** @type {?} */\r\n        const computedStyle = getComputedStyle(testElement);\r\n        // In some situations the computed style of the test element can be null. For example in\r\n        // Firefox, the computed style is null if an application is running inside of a hidden iframe.\r\n        // See: https://bugzilla.mozilla.org/show_bug.cgi?id=548397\r\n        if (computedStyle && computedStyle.display !== 'none') {\r\n            console.warn('Could not find Angular Material core theme. Most Material ' +\r\n                'components may not work as expected. For more info refer ' +\r\n                'to the theming guide: https://material.angular.io/guide/theming');\r\n        }\r\n        this._document.body.removeChild(testElement);\r\n    }\r\n    /**\r\n     * Checks whether the material version matches the cdk version\r\n     * @private\r\n     * @return {?}\r\n     */\r\n    _checkCdkVersionMatch() {\r\n        if (VERSION$2.full !== VERSION.full) {\r\n            console.warn('The Angular Material version (' + VERSION$2.full + ') does not match ' +\r\n                'the Angular CDK version (' + VERSION.full + ').\\n' +\r\n                'Please ensure the versions of these two packages exactly match.');\r\n        }\r\n    }\r\n    /**\r\n     * Checks whether HammerJS is available.\r\n     * @return {?}\r\n     */\r\n    _checkHammerIsAvailable() {\r\n        if (this._hasCheckedHammer || !this._window) {\r\n            return;\r\n        }\r\n        if (this._areChecksEnabled() && !((/** @type {?} */ (this._window)))['Hammer'] && !this._hammerLoader) {\r\n            console.warn('Could not find HammerJS. Certain Angular Material components may not work correctly.');\r\n        }\r\n        this._hasCheckedHammer = true;\r\n    }\r\n}\r\nMatCommonModule.decorators = [\r\n    { type: NgModule, args: [{\r\n                imports: [BidiModule],\r\n                exports: [BidiModule],\r\n            },] },\r\n];\r\n/** @nocollapse */\r\nMatCommonModule.ctorParameters = () => [\r\n    { type: Boolean, decorators: [{ type: Optional }, { type: Inject, args: [MATERIAL_SANITY_CHECKS,] }] },\r\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [HAMMER_LOADER,] }] }\r\n];\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n/**\r\n * Mixin to augment a directive with a `disabled` property.\r\n * @template T\r\n * @param {?} base\r\n * @return {?}\r\n */\r\nfunction mixinDisabled(base) {\r\n    return class extends base {\r\n        /**\r\n         * @param {...?} args\r\n         */\r\n        constructor(...args) {\r\n            super(...args);\r\n            this._disabled = false;\r\n        }\r\n        /**\r\n         * @return {?}\r\n         */\r\n        get disabled() { return this._disabled; }\r\n        /**\r\n         * @param {?} value\r\n         * @return {?}\r\n         */\r\n        set disabled(value) { this._disabled = coerceBooleanProperty(value); }\r\n    };\r\n}\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n/**\r\n * Mixin to augment a directive with a `color` property.\r\n * @template T\r\n * @param {?} base\r\n * @param {?=} defaultColor\r\n * @return {?}\r\n */\r\nfunction mixinColor(base, defaultColor) {\r\n    return class extends base {\r\n        /**\r\n         * @return {?}\r\n         */\r\n        get color() { return this._color; }\r\n        /**\r\n         * @param {?} value\r\n         * @return {?}\r\n         */\r\n        set color(value) {\r\n            /** @type {?} */\r\n            const colorPalette = value || defaultColor;\r\n            if (colorPalette !== this._color) {\r\n                if (this._color) {\r\n                    this._elementRef.nativeElement.classList.remove(`mat-${this._color}`);\r\n                }\r\n                if (colorPalette) {\r\n                    this._elementRef.nativeElement.classList.add(`mat-${colorPalette}`);\r\n                }\r\n                this._color = colorPalette;\r\n            }\r\n        }\r\n        /**\r\n         * @param {...?} args\r\n         */\r\n        constructor(...args) {\r\n            super(...args);\r\n            // Set the default color that can be specified from the mixin.\r\n            this.color = defaultColor;\r\n        }\r\n    };\r\n}\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n/**\r\n * Mixin to augment a directive with a `disableRipple` property.\r\n * @template T\r\n * @param {?} base\r\n * @return {?}\r\n */\r\nfunction mixinDisableRipple(base) {\r\n    return class extends base {\r\n        /**\r\n         * @param {...?} args\r\n         */\r\n        constructor(...args) {\r\n            super(...args);\r\n            this._disableRipple = false;\r\n        }\r\n        /**\r\n         * Whether the ripple effect is disabled or not.\r\n         * @return {?}\r\n         */\r\n        get disableRipple() { return this._disableRipple; }\r\n        /**\r\n         * @param {?} value\r\n         * @return {?}\r\n         */\r\n        set disableRipple(value) { this._disableRipple = coerceBooleanProperty(value); }\r\n    };\r\n}\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n/**\r\n * Mixin to augment a directive with a `tabIndex` property.\r\n * @template T\r\n * @param {?} base\r\n * @param {?=} defaultTabIndex\r\n * @return {?}\r\n */\r\nfunction mixinTabIndex(base, defaultTabIndex = 0) {\r\n    return class extends base {\r\n        /**\r\n         * @param {...?} args\r\n         */\r\n        constructor(...args) {\r\n            super(...args);\r\n            this._tabIndex = defaultTabIndex;\r\n        }\r\n        /**\r\n         * @return {?}\r\n         */\r\n        get tabIndex() { return this.disabled ? -1 : this._tabIndex; }\r\n        /**\r\n         * @param {?} value\r\n         * @return {?}\r\n         */\r\n        set tabIndex(value) {\r\n            // If the specified tabIndex value is null or undefined, fall back to the default value.\r\n            this._tabIndex = value != null ? value : defaultTabIndex;\r\n        }\r\n    };\r\n}\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n/**\r\n * Mixin to augment a directive with updateErrorState method.\r\n * For component with `errorState` and need to update `errorState`.\r\n * @template T\r\n * @param {?} base\r\n * @return {?}\r\n */\r\nfunction mixinErrorState(base) {\r\n    return class extends base {\r\n        /**\r\n         * @param {...?} args\r\n         */\r\n        constructor(...args) {\r\n            super(...args);\r\n            /**\r\n             * Whether the component is in an error state.\r\n             */\r\n            this.errorState = false;\r\n            /**\r\n             * Stream that emits whenever the state of the input changes such that the wrapping\r\n             * `MatFormField` needs to run change detection.\r\n             */\r\n            this.stateChanges = new Subject();\r\n        }\r\n        /**\r\n         * @return {?}\r\n         */\r\n        updateErrorState() {\r\n            /** @type {?} */\r\n            const oldState = this.errorState;\r\n            /** @type {?} */\r\n            const parent = this._parentFormGroup || this._parentForm;\r\n            /** @type {?} */\r\n            const matcher = this.errorStateMatcher || this._defaultErrorStateMatcher;\r\n            /** @type {?} */\r\n            const control = this.ngControl ? (/** @type {?} */ (this.ngControl.control)) : null;\r\n            /** @type {?} */\r\n            const newState = matcher.isErrorState(control, parent);\r\n            if (newState !== oldState) {\r\n                this.errorState = newState;\r\n                this.stateChanges.next();\r\n            }\r\n        }\r\n    };\r\n}\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n/**\r\n * Mixin to augment a directive with an initialized property that will emits when ngOnInit ends.\r\n * @template T\r\n * @param {?} base\r\n * @return {?}\r\n */\r\nfunction mixinInitialized(base) {\r\n    return class extends base {\r\n        /**\r\n         * @param {...?} args\r\n         */\r\n        constructor(...args) {\r\n            super(...args);\r\n            /**\r\n             * Whether this directive has been marked as initialized.\r\n             */\r\n            this._isInitialized = false;\r\n            /**\r\n             * List of subscribers that subscribed before the directive was initialized. Should be notified\r\n             * during _markInitialized. Set to null after pending subscribers are notified, and should\r\n             * not expect to be populated after.\r\n             */\r\n            this._pendingSubscribers = [];\r\n            /**\r\n             * Observable stream that emits when the directive initializes. If already initialized, the\r\n             * subscriber is stored to be notified once _markInitialized is called.\r\n             */\r\n            this.initialized = new Observable((/**\r\n             * @param {?} subscriber\r\n             * @return {?}\r\n             */\r\n            subscriber => {\r\n                // If initialized, immediately notify the subscriber. Otherwise store the subscriber to notify\r\n                // when _markInitialized is called.\r\n                if (this._isInitialized) {\r\n                    this._notifySubscriber(subscriber);\r\n                }\r\n                else {\r\n                    (/** @type {?} */ (this._pendingSubscribers)).push(subscriber);\r\n                }\r\n            }));\r\n        }\r\n        /**\r\n         * Marks the state as initialized and notifies pending subscribers. Should be called at the end\r\n         * of ngOnInit.\r\n         * \\@docs-private\r\n         * @return {?}\r\n         */\r\n        _markInitialized() {\r\n            if (this._isInitialized) {\r\n                throw Error('This directive has already been marked as initialized and ' +\r\n                    'should not be called twice.');\r\n            }\r\n            this._isInitialized = true;\r\n            (/** @type {?} */ (this._pendingSubscribers)).forEach(this._notifySubscriber);\r\n            this._pendingSubscribers = null;\r\n        }\r\n        /**\r\n         * Emits and completes the subscriber stream (should only emit once).\r\n         * @param {?} subscriber\r\n         * @return {?}\r\n         */\r\n        _notifySubscriber(subscriber) {\r\n            subscriber.next();\r\n            subscriber.complete();\r\n        }\r\n    };\r\n}\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n/**\r\n * InjectionToken for datepicker that can be used to override default locale code.\r\n * @type {?}\r\n */\r\nconst MAT_DATE_LOCALE = new InjectionToken('MAT_DATE_LOCALE', {\r\n    providedIn: 'root',\r\n    factory: MAT_DATE_LOCALE_FACTORY,\r\n});\r\n/**\r\n * \\@docs-private\r\n * @return {?}\r\n */\r\nfunction MAT_DATE_LOCALE_FACTORY() {\r\n    return inject(LOCALE_ID);\r\n}\r\n/**\r\n * No longer needed since MAT_DATE_LOCALE has been changed to a scoped injectable.\r\n * If you are importing and providing this in your code you can simply remove it.\r\n * @deprecated\r\n * \\@breaking-change 8.0.0\r\n * @type {?}\r\n */\r\nconst MAT_DATE_LOCALE_PROVIDER = { provide: MAT_DATE_LOCALE, useExisting: LOCALE_ID };\r\n/**\r\n * Adapts type `D` to be usable as a date by cdk-based components that work with dates.\r\n * @abstract\r\n * @template D\r\n */\r\nclass DateAdapter {\r\n    constructor() {\r\n        this._localeChanges = new Subject();\r\n    }\r\n    /**\r\n     * A stream that emits when the locale changes.\r\n     * @return {?}\r\n     */\r\n    get localeChanges() { return this._localeChanges; }\r\n    /**\r\n     * Attempts to deserialize a value to a valid date object. This is different from parsing in that\r\n     * deserialize should only accept non-ambiguous, locale-independent formats (e.g. a ISO 8601\r\n     * string). The default implementation does not allow any deserialization, it simply checks that\r\n     * the given value is already a valid date object or null. The `<mat-datepicker>` will call this\r\n     * method on all of its `\\@Input()` properties that accept dates. It is therefore possible to\r\n     * support passing values from your backend directly to these properties by overriding this method\r\n     * to also deserialize the format used by your backend.\r\n     * @param {?} value The value to be deserialized into a date object.\r\n     * @return {?} The deserialized date object, either a valid date, null if the value can be\r\n     *     deserialized into a null date (e.g. the empty string), or an invalid date.\r\n     */\r\n    deserialize(value) {\r\n        if (value == null || this.isDateInstance(value) && this.isValid(value)) {\r\n            return value;\r\n        }\r\n        return this.invalid();\r\n    }\r\n    /**\r\n     * Sets the locale used for all dates.\r\n     * @param {?} locale The new locale.\r\n     * @return {?}\r\n     */\r\n    setLocale(locale) {\r\n        this.locale = locale;\r\n        this._localeChanges.next();\r\n    }\r\n    /**\r\n     * Compares two dates.\r\n     * @param {?} first The first date to compare.\r\n     * @param {?} second The second date to compare.\r\n     * @return {?} 0 if the dates are equal, a number less than 0 if the first date is earlier,\r\n     *     a number greater than 0 if the first date is later.\r\n     */\r\n    compareDate(first, second) {\r\n        return this.getYear(first) - this.getYear(second) ||\r\n            this.getMonth(first) - this.getMonth(second) ||\r\n            this.getDate(first) - this.getDate(second);\r\n    }\r\n    /**\r\n     * Checks if two dates are equal.\r\n     * @param {?} first The first date to check.\r\n     * @param {?} second The second date to check.\r\n     * @return {?} Whether the two dates are equal.\r\n     *     Null dates are considered equal to other null dates.\r\n     */\r\n    sameDate(first, second) {\r\n        if (first && second) {\r\n            /** @type {?} */\r\n            let firstValid = this.isValid(first);\r\n            /** @type {?} */\r\n            let secondValid = this.isValid(second);\r\n            if (firstValid && secondValid) {\r\n                return !this.compareDate(first, second);\r\n            }\r\n            return firstValid == secondValid;\r\n        }\r\n        return first == second;\r\n    }\r\n    /**\r\n     * Clamp the given date between min and max dates.\r\n     * @param {?} date The date to clamp.\r\n     * @param {?=} min The minimum value to allow. If null or omitted no min is enforced.\r\n     * @param {?=} max The maximum value to allow. If null or omitted no max is enforced.\r\n     * @return {?} `min` if `date` is less than `min`, `max` if date is greater than `max`,\r\n     *     otherwise `date`.\r\n     */\r\n    clampDate(date, min, max) {\r\n        if (min && this.compareDate(date, min) < 0) {\r\n            return min;\r\n        }\r\n        if (max && this.compareDate(date, max) > 0) {\r\n            return max;\r\n        }\r\n        return date;\r\n    }\r\n}\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n/** @type {?} */\r\nconst MAT_DATE_FORMATS = new InjectionToken('mat-date-formats');\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n// TODO(mmalerba): Remove when we no longer support safari 9.\r\n/**\r\n * Whether the browser supports the Intl API.\r\n * @type {?}\r\n */\r\nlet SUPPORTS_INTL_API;\r\n// We need a try/catch around the reference to `Intl`, because accessing it in some cases can\r\n// cause IE to throw. These cases are tied to particular versions of Windows and can happen if\r\n// the consumer is providing a polyfilled `Map`. See:\r\n// https://github.com/Microsoft/ChakraCore/issues/3189\r\n// https://github.com/angular/components/issues/15687\r\ntry {\r\n    SUPPORTS_INTL_API = typeof Intl != 'undefined';\r\n}\r\ncatch (_a) {\r\n    SUPPORTS_INTL_API = false;\r\n}\r\n/**\r\n * The default month names to use if Intl API is not available.\r\n * @type {?}\r\n */\r\nconst DEFAULT_MONTH_NAMES = {\r\n    'long': [\r\n        'January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September',\r\n        'October', 'November', 'December'\r\n    ],\r\n    'short': ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],\r\n    'narrow': ['J', 'F', 'M', 'A', 'M', 'J', 'J', 'A', 'S', 'O', 'N', 'D']\r\n};\r\nconst ɵ0 = /**\r\n * @param {?} i\r\n * @return {?}\r\n */\r\ni => String(i + 1);\r\n/**\r\n * The default date names to use if Intl API is not available.\r\n * @type {?}\r\n */\r\nconst DEFAULT_DATE_NAMES = range(31, (ɵ0));\r\n/**\r\n * The default day of the week names to use if Intl API is not available.\r\n * @type {?}\r\n */\r\nconst DEFAULT_DAY_OF_WEEK_NAMES = {\r\n    'long': ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],\r\n    'short': ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],\r\n    'narrow': ['S', 'M', 'T', 'W', 'T', 'F', 'S']\r\n};\r\n/**\r\n * Matches strings that have the form of a valid RFC 3339 string\r\n * (https://tools.ietf.org/html/rfc3339). Note that the string may not actually be a valid date\r\n * because the regex will match strings an with out of bounds month, date, etc.\r\n * @type {?}\r\n */\r\nconst ISO_8601_REGEX = /^\\d{4}-\\d{2}-\\d{2}(?:T\\d{2}:\\d{2}:\\d{2}(?:\\.\\d+)?(?:Z|(?:(?:\\+|-)\\d{2}:\\d{2}))?)?$/;\r\n/**\r\n * Creates an array and fills it with values.\r\n * @template T\r\n * @param {?} length\r\n * @param {?} valueFunction\r\n * @return {?}\r\n */\r\nfunction range(length, valueFunction) {\r\n    /** @type {?} */\r\n    const valuesArray = Array(length);\r\n    for (let i = 0; i < length; i++) {\r\n        valuesArray[i] = valueFunction(i);\r\n    }\r\n    return valuesArray;\r\n}\r\n/**\r\n * Adapts the native JS Date for use with cdk-based components that work with dates.\r\n */\r\nclass NativeDateAdapter extends DateAdapter {\r\n    /**\r\n     * @param {?} matDateLocale\r\n     * @param {?} platform\r\n     */\r\n    constructor(matDateLocale, platform) {\r\n        super();\r\n        /**\r\n         * Whether to use `timeZone: 'utc'` with `Intl.DateTimeFormat` when formatting dates.\r\n         * Without this `Intl.DateTimeFormat` sometimes chooses the wrong timeZone, which can throw off\r\n         * the result. (e.g. in the en-US locale `new Date(1800, 7, 14).toLocaleDateString()`\r\n         * will produce `'8/13/1800'`.\r\n         *\r\n         * TODO(mmalerba): drop this variable. It's not being used in the code right now. We're now\r\n         * getting the string representation of a Date object from its utc representation. We're keeping\r\n         * it here for sometime, just for precaution, in case we decide to revert some of these changes\r\n         * though.\r\n         */\r\n        this.useUtcForDisplay = true;\r\n        super.setLocale(matDateLocale);\r\n        // IE does its own time zone correction, so we disable this on IE.\r\n        this.useUtcForDisplay = !platform.TRIDENT;\r\n        this._clampDate = platform.TRIDENT || platform.EDGE;\r\n    }\r\n    /**\r\n     * @param {?} date\r\n     * @return {?}\r\n     */\r\n    getYear(date) {\r\n        return date.getFullYear();\r\n    }\r\n    /**\r\n     * @param {?} date\r\n     * @return {?}\r\n     */\r\n    getMonth(date) {\r\n        return date.getMonth();\r\n    }\r\n    /**\r\n     * @param {?} date\r\n     * @return {?}\r\n     */\r\n    getDate(date) {\r\n        return date.getDate();\r\n    }\r\n    /**\r\n     * @param {?} date\r\n     * @return {?}\r\n     */\r\n    getDayOfWeek(date) {\r\n        return date.getDay();\r\n    }\r\n    /**\r\n     * @param {?} style\r\n     * @return {?}\r\n     */\r\n    getMonthNames(style) {\r\n        if (SUPPORTS_INTL_API) {\r\n            /** @type {?} */\r\n            const dtf = new Intl.DateTimeFormat(this.locale, { month: style, timeZone: 'utc' });\r\n            return range(12, (/**\r\n             * @param {?} i\r\n             * @return {?}\r\n             */\r\n            i => this._stripDirectionalityCharacters(this._format(dtf, new Date(2017, i, 1)))));\r\n        }\r\n        return DEFAULT_MONTH_NAMES[style];\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    getDateNames() {\r\n        if (SUPPORTS_INTL_API) {\r\n            /** @type {?} */\r\n            const dtf = new Intl.DateTimeFormat(this.locale, { day: 'numeric', timeZone: 'utc' });\r\n            return range(31, (/**\r\n             * @param {?} i\r\n             * @return {?}\r\n             */\r\n            i => this._stripDirectionalityCharacters(this._format(dtf, new Date(2017, 0, i + 1)))));\r\n        }\r\n        return DEFAULT_DATE_NAMES;\r\n    }\r\n    /**\r\n     * @param {?} style\r\n     * @return {?}\r\n     */\r\n    getDayOfWeekNames(style) {\r\n        if (SUPPORTS_INTL_API) {\r\n            /** @type {?} */\r\n            const dtf = new Intl.DateTimeFormat(this.locale, { weekday: style, timeZone: 'utc' });\r\n            return range(7, (/**\r\n             * @param {?} i\r\n             * @return {?}\r\n             */\r\n            i => this._stripDirectionalityCharacters(this._format(dtf, new Date(2017, 0, i + 1)))));\r\n        }\r\n        return DEFAULT_DAY_OF_WEEK_NAMES[style];\r\n    }\r\n    /**\r\n     * @param {?} date\r\n     * @return {?}\r\n     */\r\n    getYearName(date) {\r\n        if (SUPPORTS_INTL_API) {\r\n            /** @type {?} */\r\n            const dtf = new Intl.DateTimeFormat(this.locale, { year: 'numeric', timeZone: 'utc' });\r\n            return this._stripDirectionalityCharacters(this._format(dtf, date));\r\n        }\r\n        return String(this.getYear(date));\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    getFirstDayOfWeek() {\r\n        // We can't tell using native JS Date what the first day of the week is, we default to Sunday.\r\n        return 0;\r\n    }\r\n    /**\r\n     * @param {?} date\r\n     * @return {?}\r\n     */\r\n    getNumDaysInMonth(date) {\r\n        return this.getDate(this._createDateWithOverflow(this.getYear(date), this.getMonth(date) + 1, 0));\r\n    }\r\n    /**\r\n     * @param {?} date\r\n     * @return {?}\r\n     */\r\n    clone(date) {\r\n        return new Date(date.getTime());\r\n    }\r\n    /**\r\n     * @param {?} year\r\n     * @param {?} month\r\n     * @param {?} date\r\n     * @return {?}\r\n     */\r\n    createDate(year, month, date) {\r\n        // Check for invalid month and date (except upper bound on date which we have to check after\r\n        // creating the Date).\r\n        if (month < 0 || month > 11) {\r\n            throw Error(`Invalid month index \"${month}\". Month index has to be between 0 and 11.`);\r\n        }\r\n        if (date < 1) {\r\n            throw Error(`Invalid date \"${date}\". Date has to be greater than 0.`);\r\n        }\r\n        /** @type {?} */\r\n        let result = this._createDateWithOverflow(year, month, date);\r\n        // Check that the date wasn't above the upper bound for the month, causing the month to overflow\r\n        if (result.getMonth() != month) {\r\n            throw Error(`Invalid date \"${date}\" for month with index \"${month}\".`);\r\n        }\r\n        return result;\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    today() {\r\n        return new Date();\r\n    }\r\n    /**\r\n     * @param {?} value\r\n     * @return {?}\r\n     */\r\n    parse(value) {\r\n        // We have no way using the native JS Date to set the parse format or locale, so we ignore these\r\n        // parameters.\r\n        if (typeof value == 'number') {\r\n            return new Date(value);\r\n        }\r\n        return value ? new Date(Date.parse(value)) : null;\r\n    }\r\n    /**\r\n     * @param {?} date\r\n     * @param {?} displayFormat\r\n     * @return {?}\r\n     */\r\n    format(date, displayFormat) {\r\n        if (!this.isValid(date)) {\r\n            throw Error('NativeDateAdapter: Cannot format invalid date.');\r\n        }\r\n        if (SUPPORTS_INTL_API) {\r\n            // On IE and Edge the i18n API will throw a hard error that can crash the entire app\r\n            // if we attempt to format a date whose year is less than 1 or greater than 9999.\r\n            if (this._clampDate && (date.getFullYear() < 1 || date.getFullYear() > 9999)) {\r\n                date = this.clone(date);\r\n                date.setFullYear(Math.max(1, Math.min(9999, date.getFullYear())));\r\n            }\r\n            displayFormat = Object.assign({}, displayFormat, { timeZone: 'utc' });\r\n            /** @type {?} */\r\n            const dtf = new Intl.DateTimeFormat(this.locale, displayFormat);\r\n            return this._stripDirectionalityCharacters(this._format(dtf, date));\r\n        }\r\n        return this._stripDirectionalityCharacters(date.toDateString());\r\n    }\r\n    /**\r\n     * @param {?} date\r\n     * @param {?} years\r\n     * @return {?}\r\n     */\r\n    addCalendarYears(date, years) {\r\n        return this.addCalendarMonths(date, years * 12);\r\n    }\r\n    /**\r\n     * @param {?} date\r\n     * @param {?} months\r\n     * @return {?}\r\n     */\r\n    addCalendarMonths(date, months) {\r\n        /** @type {?} */\r\n        let newDate = this._createDateWithOverflow(this.getYear(date), this.getMonth(date) + months, this.getDate(date));\r\n        // It's possible to wind up in the wrong month if the original month has more days than the new\r\n        // month. In this case we want to go to the last day of the desired month.\r\n        // Note: the additional + 12 % 12 ensures we end up with a positive number, since JS % doesn't\r\n        // guarantee this.\r\n        if (this.getMonth(newDate) != ((this.getMonth(date) + months) % 12 + 12) % 12) {\r\n            newDate = this._createDateWithOverflow(this.getYear(newDate), this.getMonth(newDate), 0);\r\n        }\r\n        return newDate;\r\n    }\r\n    /**\r\n     * @param {?} date\r\n     * @param {?} days\r\n     * @return {?}\r\n     */\r\n    addCalendarDays(date, days) {\r\n        return this._createDateWithOverflow(this.getYear(date), this.getMonth(date), this.getDate(date) + days);\r\n    }\r\n    /**\r\n     * @param {?} date\r\n     * @return {?}\r\n     */\r\n    toIso8601(date) {\r\n        return [\r\n            date.getUTCFullYear(),\r\n            this._2digit(date.getUTCMonth() + 1),\r\n            this._2digit(date.getUTCDate())\r\n        ].join('-');\r\n    }\r\n    /**\r\n     * Returns the given value if given a valid Date or null. Deserializes valid ISO 8601 strings\r\n     * (https://www.ietf.org/rfc/rfc3339.txt) into valid Dates and empty string into null. Returns an\r\n     * invalid date for all other values.\r\n     * @param {?} value\r\n     * @return {?}\r\n     */\r\n    deserialize(value) {\r\n        if (typeof value === 'string') {\r\n            if (!value) {\r\n                return null;\r\n            }\r\n            // The `Date` constructor accepts formats other than ISO 8601, so we need to make sure the\r\n            // string is the right format first.\r\n            if (ISO_8601_REGEX.test(value)) {\r\n                /** @type {?} */\r\n                let date = new Date(value);\r\n                if (this.isValid(date)) {\r\n                    return date;\r\n                }\r\n            }\r\n        }\r\n        return super.deserialize(value);\r\n    }\r\n    /**\r\n     * @param {?} obj\r\n     * @return {?}\r\n     */\r\n    isDateInstance(obj) {\r\n        return obj instanceof Date;\r\n    }\r\n    /**\r\n     * @param {?} date\r\n     * @return {?}\r\n     */\r\n    isValid(date) {\r\n        return !isNaN(date.getTime());\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    invalid() {\r\n        return new Date(NaN);\r\n    }\r\n    /**\r\n     * Creates a date but allows the month and date to overflow.\r\n     * @private\r\n     * @param {?} year\r\n     * @param {?} month\r\n     * @param {?} date\r\n     * @return {?}\r\n     */\r\n    _createDateWithOverflow(year, month, date) {\r\n        /** @type {?} */\r\n        const result = new Date(year, month, date);\r\n        // We need to correct for the fact that JS native Date treats years in range [0, 99] as\r\n        // abbreviations for 19xx.\r\n        if (year >= 0 && year < 100) {\r\n            result.setFullYear(this.getYear(result) - 1900);\r\n        }\r\n        return result;\r\n    }\r\n    /**\r\n     * Pads a number to make it two digits.\r\n     * @private\r\n     * @param {?} n The number to pad.\r\n     * @return {?} The padded number.\r\n     */\r\n    _2digit(n) {\r\n        return ('00' + n).slice(-2);\r\n    }\r\n    /**\r\n     * Strip out unicode LTR and RTL characters. Edge and IE insert these into formatted dates while\r\n     * other browsers do not. We remove them to make output consistent and because they interfere with\r\n     * date parsing.\r\n     * @private\r\n     * @param {?} str The string to strip direction characters from.\r\n     * @return {?} The stripped string.\r\n     */\r\n    _stripDirectionalityCharacters(str) {\r\n        return str.replace(/[\\u200e\\u200f]/g, '');\r\n    }\r\n    /**\r\n     * When converting Date object to string, javascript built-in functions may return wrong\r\n     * results because it applies its internal DST rules. The DST rules around the world change\r\n     * very frequently, and the current valid rule is not always valid in previous years though.\r\n     * We work around this problem building a new Date object which has its internal UTC\r\n     * representation with the local date and time.\r\n     * @private\r\n     * @param {?} dtf Intl.DateTimeFormat object, containg the desired string format. It must have\r\n     *    timeZone set to 'utc' to work fine.\r\n     * @param {?} date Date from which we want to get the string representation according to dtf\r\n     * @return {?} A Date object with its UTC representation based on the passed in date info\r\n     */\r\n    _format(dtf, date) {\r\n        /** @type {?} */\r\n        const d = new Date(Date.UTC(date.getFullYear(), date.getMonth(), date.getDate(), date.getHours(), date.getMinutes(), date.getSeconds(), date.getMilliseconds()));\r\n        return dtf.format(d);\r\n    }\r\n}\r\nNativeDateAdapter.decorators = [\r\n    { type: Injectable },\r\n];\r\n/** @nocollapse */\r\nNativeDateAdapter.ctorParameters = () => [\r\n    { type: String, decorators: [{ type: Optional }, { type: Inject, args: [MAT_DATE_LOCALE,] }] },\r\n    { type: Platform }\r\n];\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n\r\n/** @type {?} */\r\nconst MAT_NATIVE_DATE_FORMATS = {\r\n    parse: {\r\n        dateInput: null,\r\n    },\r\n    display: {\r\n        dateInput: { year: 'numeric', month: 'numeric', day: 'numeric' },\r\n        monthYearLabel: { year: 'numeric', month: 'short' },\r\n        dateA11yLabel: { year: 'numeric', month: 'long', day: 'numeric' },\r\n        monthYearA11yLabel: { year: 'numeric', month: 'long' },\r\n    }\r\n};\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\nclass NativeDateModule {\r\n}\r\nNativeDateModule.decorators = [\r\n    { type: NgModule, args: [{\r\n                imports: [PlatformModule],\r\n                providers: [\r\n                    { provide: DateAdapter, useClass: NativeDateAdapter },\r\n                ],\r\n            },] },\r\n];\r\nconst ɵ0$1 = MAT_NATIVE_DATE_FORMATS;\r\nclass MatNativeDateModule {\r\n}\r\nMatNativeDateModule.decorators = [\r\n    { type: NgModule, args: [{\r\n                imports: [NativeDateModule],\r\n                providers: [{ provide: MAT_DATE_FORMATS, useValue: ɵ0$1 }],\r\n            },] },\r\n];\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n/**\r\n * Error state matcher that matches when a control is invalid and dirty.\r\n */\r\nclass ShowOnDirtyErrorStateMatcher {\r\n    /**\r\n     * @param {?} control\r\n     * @param {?} form\r\n     * @return {?}\r\n     */\r\n    isErrorState(control, form) {\r\n        return !!(control && control.invalid && (control.dirty || (form && form.submitted)));\r\n    }\r\n}\r\nShowOnDirtyErrorStateMatcher.decorators = [\r\n    { type: Injectable },\r\n];\r\n/**\r\n * Provider that defines how form controls behave with regards to displaying error messages.\r\n */\r\nclass ErrorStateMatcher {\r\n    /**\r\n     * @param {?} control\r\n     * @param {?} form\r\n     * @return {?}\r\n     */\r\n    isErrorState(control, form) {\r\n        return !!(control && control.invalid && (control.touched || (form && form.submitted)));\r\n    }\r\n}\r\nErrorStateMatcher.decorators = [\r\n    { type: Injectable, args: [{ providedIn: 'root' },] },\r\n];\r\n/** @nocollapse */ ErrorStateMatcher.ngInjectableDef = ɵɵdefineInjectable({ factory: function ErrorStateMatcher_Factory() { return new ErrorStateMatcher(); }, token: ErrorStateMatcher, providedIn: \"root\" });\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n/**\r\n * Injection token that can be used to provide options to the Hammerjs instance.\r\n * More info at http://hammerjs.github.io/api/.\r\n * @type {?}\r\n */\r\nconst MAT_HAMMER_OPTIONS = new InjectionToken('MAT_HAMMER_OPTIONS');\r\n/** @type {?} */\r\nconst ANGULAR_MATERIAL_SUPPORTED_HAMMER_GESTURES = [\r\n    'longpress',\r\n    'slide',\r\n    'slidestart',\r\n    'slideend',\r\n    'slideright',\r\n    'slideleft'\r\n];\r\nconst ɵ0$2 = /**\r\n * @return {?}\r\n */\r\n() => { }, ɵ1 = /**\r\n * @return {?}\r\n */\r\n() => { };\r\n/**\r\n * Fake HammerInstance that is used when a Hammer instance is requested when HammerJS has not\r\n * been loaded on the page.\r\n * @type {?}\r\n */\r\nconst noopHammerInstance = {\r\n    on: (ɵ0$2),\r\n    off: (ɵ1),\r\n};\r\n/**\r\n * Adjusts configuration of our gesture library, Hammer.\r\n */\r\nclass GestureConfig extends HammerGestureConfig {\r\n    /**\r\n     * @param {?=} _hammerOptions\r\n     * @param {?=} commonModule\r\n     */\r\n    constructor(_hammerOptions, commonModule) {\r\n        super();\r\n        this._hammerOptions = _hammerOptions;\r\n        /**\r\n         * List of new event names to add to the gesture support list\r\n         */\r\n        this.events = ANGULAR_MATERIAL_SUPPORTED_HAMMER_GESTURES;\r\n        if (commonModule) {\r\n            commonModule._checkHammerIsAvailable();\r\n        }\r\n    }\r\n    /**\r\n     * Builds Hammer instance manually to add custom recognizers that match the Material Design spec.\r\n     *\r\n     * Our gesture names come from the Material Design gestures spec:\r\n     * https://material.io/design/#gestures-touch-mechanics\r\n     *\r\n     * More information on default recognizers can be found in Hammer docs:\r\n     * http://hammerjs.github.io/recognizer-pan/\r\n     * http://hammerjs.github.io/recognizer-press/\r\n     *\r\n     * @param {?} element Element to which to assign the new HammerJS gestures.\r\n     * @return {?} Newly-created HammerJS instance.\r\n     */\r\n    buildHammer(element) {\r\n        /** @type {?} */\r\n        const hammer = typeof window !== 'undefined' ? ((/** @type {?} */ (window))).Hammer : null;\r\n        if (!hammer) {\r\n            // If HammerJS is not loaded here, return the noop HammerInstance. This is necessary to\r\n            // ensure that omitting HammerJS completely will not cause any errors while *also* supporting\r\n            // the lazy-loading of HammerJS via the HAMMER_LOADER token introduced in Angular 6.1.\r\n            // Because we can't depend on HAMMER_LOADER's existance until 7.0, we have to always set\r\n            // `this.events` to the set we support, instead of conditionally setting it to `[]` if\r\n            // `HAMMER_LOADER` is present (and then throwing an Error here if `window.Hammer` is\r\n            // undefined).\r\n            // @breaking-change 8.0.0\r\n            return noopHammerInstance;\r\n        }\r\n        /** @type {?} */\r\n        const mc = new hammer(element, this._hammerOptions || undefined);\r\n        // Default Hammer Recognizers.\r\n        /** @type {?} */\r\n        const pan = new hammer.Pan();\r\n        /** @type {?} */\r\n        const swipe = new hammer.Swipe();\r\n        /** @type {?} */\r\n        const press = new hammer.Press();\r\n        // Notice that a HammerJS recognizer can only depend on one other recognizer once.\r\n        // Otherwise the previous `recognizeWith` will be dropped.\r\n        // TODO: Confirm threshold numbers with Material Design UX Team\r\n        /** @type {?} */\r\n        const slide = this._createRecognizer(pan, { event: 'slide', threshold: 0 }, swipe);\r\n        /** @type {?} */\r\n        const longpress = this._createRecognizer(press, { event: 'longpress', time: 500 });\r\n        // Overwrite the default `pan` event to use the swipe event.\r\n        pan.recognizeWith(swipe);\r\n        // Since the slide event threshold is set to zero, the slide recognizer can fire and\r\n        // accidentally reset the longpress recognizer. In order to make sure that the two\r\n        // recognizers can run simultaneously but don't affect each other, we allow the slide\r\n        // recognizer to recognize while a longpress is being processed.\r\n        // See: https://github.com/hammerjs/hammer.js/blob/master/src/manager.js#L123-L124\r\n        longpress.recognizeWith(slide);\r\n        // Add customized gestures to Hammer manager\r\n        mc.add([swipe, press, pan, slide, longpress]);\r\n        return (/** @type {?} */ (mc));\r\n    }\r\n    /**\r\n     * Creates a new recognizer, without affecting the default recognizers of HammerJS\r\n     * @private\r\n     * @param {?} base\r\n     * @param {?} options\r\n     * @param {...?} inheritances\r\n     * @return {?}\r\n     */\r\n    _createRecognizer(base, options, ...inheritances) {\r\n        /** @type {?} */\r\n        let recognizer = new ((/** @type {?} */ (base.constructor)))(options);\r\n        inheritances.push(base);\r\n        inheritances.forEach((/**\r\n         * @param {?} item\r\n         * @return {?}\r\n         */\r\n        item => recognizer.recognizeWith(item)));\r\n        return recognizer;\r\n    }\r\n}\r\nGestureConfig.decorators = [\r\n    { type: Injectable },\r\n];\r\n/** @nocollapse */\r\nGestureConfig.ctorParameters = () => [\r\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MAT_HAMMER_OPTIONS,] }] },\r\n    { type: MatCommonModule, decorators: [{ type: Optional }] }\r\n];\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n/**\r\n * Shared directive to count lines inside a text area, such as a list item.\r\n * Line elements can be extracted with a \\@ContentChildren(MatLine) query, then\r\n * counted by checking the query list's length.\r\n */\r\nclass MatLine {\r\n}\r\nMatLine.decorators = [\r\n    { type: Directive, args: [{\r\n                selector: '[mat-line], [matLine]',\r\n                host: { 'class': 'mat-line' }\r\n            },] },\r\n];\r\n/**\r\n * Helper that takes a query list of lines and sets the correct class on the host.\r\n * \\@docs-private\r\n * @param {?} lines\r\n * @param {?} element\r\n * @return {?}\r\n */\r\nfunction setLines(lines, element) {\r\n    // Note: doesn't need to unsubscribe, because `changes`\r\n    // gets completed by Angular when the view is destroyed.\r\n    lines.changes.pipe(startWith(lines)).subscribe((/**\r\n     * @param {?} __0\r\n     * @return {?}\r\n     */\r\n    ({ length }) => {\r\n        setClass(element, 'mat-2-line', false);\r\n        setClass(element, 'mat-3-line', false);\r\n        setClass(element, 'mat-multi-line', false);\r\n        if (length === 2 || length === 3) {\r\n            setClass(element, `mat-${length}-line`, true);\r\n        }\r\n        else if (length > 3) {\r\n            setClass(element, `mat-multi-line`, true);\r\n        }\r\n    }));\r\n}\r\n/**\r\n * Adds or removes a class from an element.\r\n * @param {?} element\r\n * @param {?} className\r\n * @param {?} isAdd\r\n * @return {?}\r\n */\r\nfunction setClass(element, className, isAdd) {\r\n    /** @type {?} */\r\n    const classList = element.nativeElement.classList;\r\n    isAdd ? classList.add(className) : classList.remove(className);\r\n}\r\n/**\r\n * Helper that takes a query list of lines and sets the correct class on the host.\r\n * \\@docs-private\r\n * @deprecated Use `setLines` instead.\r\n * \\@breaking-change 8.0.0\r\n */\r\nclass MatLineSetter {\r\n    /**\r\n     * @param {?} lines\r\n     * @param {?} element\r\n     */\r\n    constructor(lines, element) {\r\n        setLines(lines, element);\r\n    }\r\n}\r\nclass MatLineModule {\r\n}\r\nMatLineModule.decorators = [\r\n    { type: NgModule, args: [{\r\n                imports: [MatCommonModule],\r\n                exports: [MatLine, MatCommonModule],\r\n                declarations: [MatLine],\r\n            },] },\r\n];\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n\r\n/** @enum {number} */\r\nconst RippleState = {\r\n    FADING_IN: 0, VISIBLE: 1, FADING_OUT: 2, HIDDEN: 3,\r\n};\r\nRippleState[RippleState.FADING_IN] = 'FADING_IN';\r\nRippleState[RippleState.VISIBLE] = 'VISIBLE';\r\nRippleState[RippleState.FADING_OUT] = 'FADING_OUT';\r\nRippleState[RippleState.HIDDEN] = 'HIDDEN';\r\n/**\r\n * Reference to a previously launched ripple element.\r\n */\r\nclass RippleRef {\r\n    /**\r\n     * @param {?} _renderer\r\n     * @param {?} element\r\n     * @param {?} config\r\n     */\r\n    constructor(_renderer, element, config) {\r\n        this._renderer = _renderer;\r\n        this.element = element;\r\n        this.config = config;\r\n        /**\r\n         * Current state of the ripple.\r\n         */\r\n        this.state = RippleState.HIDDEN;\r\n    }\r\n    /**\r\n     * Fades out the ripple element.\r\n     * @return {?}\r\n     */\r\n    fadeOut() {\r\n        this._renderer.fadeOutRipple(this);\r\n    }\r\n}\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n/**\r\n * Default ripple animation configuration for ripples without an explicit\r\n * animation config specified.\r\n * @type {?}\r\n */\r\nconst defaultRippleAnimationConfig = {\r\n    enterDuration: 450,\r\n    exitDuration: 400\r\n};\r\n/**\r\n * Timeout for ignoring mouse events. Mouse events will be temporary ignored after touch\r\n * events to avoid synthetic mouse events.\r\n * @type {?}\r\n */\r\nconst ignoreMouseEventsTimeout = 800;\r\n/**\r\n * Options that apply to all the event listeners that are bound by the ripple renderer.\r\n * @type {?}\r\n */\r\nconst passiveEventOptions = normalizePassiveListenerOptions({ passive: true });\r\n/**\r\n * Helper service that performs DOM manipulations. Not intended to be used outside this module.\r\n * The constructor takes a reference to the ripple directive's host element and a map of DOM\r\n * event handlers to be installed on the element that triggers ripple animations.\r\n * This will eventually become a custom renderer once Angular support exists.\r\n * \\@docs-private\r\n */\r\nclass RippleRenderer {\r\n    /**\r\n     * @param {?} _target\r\n     * @param {?} _ngZone\r\n     * @param {?} elementOrElementRef\r\n     * @param {?} platform\r\n     */\r\n    constructor(_target, _ngZone, elementOrElementRef, platform) {\r\n        this._target = _target;\r\n        this._ngZone = _ngZone;\r\n        /**\r\n         * Whether the pointer is currently down or not.\r\n         */\r\n        this._isPointerDown = false;\r\n        /**\r\n         * Events to be registered on the trigger element.\r\n         */\r\n        this._triggerEvents = new Map();\r\n        /**\r\n         * Set of currently active ripple references.\r\n         */\r\n        this._activeRipples = new Set();\r\n        /**\r\n         * Function being called whenever the trigger is being pressed using mouse.\r\n         */\r\n        this._onMousedown = (/**\r\n         * @param {?} event\r\n         * @return {?}\r\n         */\r\n        (event) => {\r\n            // Screen readers will fire fake mouse events for space/enter. Skip launching a\r\n            // ripple in this case for consistency with the non-screen-reader experience.\r\n            /** @type {?} */\r\n            const isFakeMousedown = isFakeMousedownFromScreenReader(event);\r\n            /** @type {?} */\r\n            const isSyntheticEvent = this._lastTouchStartEvent &&\r\n                Date.now() < this._lastTouchStartEvent + ignoreMouseEventsTimeout;\r\n            if (!this._target.rippleDisabled && !isFakeMousedown && !isSyntheticEvent) {\r\n                this._isPointerDown = true;\r\n                this.fadeInRipple(event.clientX, event.clientY, this._target.rippleConfig);\r\n            }\r\n        });\r\n        /**\r\n         * Function being called whenever the trigger is being pressed using touch.\r\n         */\r\n        this._onTouchStart = (/**\r\n         * @param {?} event\r\n         * @return {?}\r\n         */\r\n        (event) => {\r\n            if (!this._target.rippleDisabled) {\r\n                // Some browsers fire mouse events after a `touchstart` event. Those synthetic mouse\r\n                // events will launch a second ripple if we don't ignore mouse events for a specific\r\n                // time after a touchstart event.\r\n                this._lastTouchStartEvent = Date.now();\r\n                this._isPointerDown = true;\r\n                // Use `changedTouches` so we skip any touches where the user put\r\n                // their finger down, but used another finger to tap the element again.\r\n                /** @type {?} */\r\n                const touches = event.changedTouches;\r\n                for (let i = 0; i < touches.length; i++) {\r\n                    this.fadeInRipple(touches[i].clientX, touches[i].clientY, this._target.rippleConfig);\r\n                }\r\n            }\r\n        });\r\n        /**\r\n         * Function being called whenever the trigger is being released.\r\n         */\r\n        this._onPointerUp = (/**\r\n         * @return {?}\r\n         */\r\n        () => {\r\n            if (!this._isPointerDown) {\r\n                return;\r\n            }\r\n            this._isPointerDown = false;\r\n            // Fade-out all ripples that are visible and not persistent.\r\n            this._activeRipples.forEach((/**\r\n             * @param {?} ripple\r\n             * @return {?}\r\n             */\r\n            ripple => {\r\n                // By default, only ripples that are completely visible will fade out on pointer release.\r\n                // If the `terminateOnPointerUp` option is set, ripples that still fade in will also fade out.\r\n                /** @type {?} */\r\n                const isVisible = ripple.state === RippleState.VISIBLE ||\r\n                    ripple.config.terminateOnPointerUp && ripple.state === RippleState.FADING_IN;\r\n                if (!ripple.config.persistent && isVisible) {\r\n                    ripple.fadeOut();\r\n                }\r\n            }));\r\n        });\r\n        // Only do anything if we're on the browser.\r\n        if (platform.isBrowser) {\r\n            this._containerElement = coerceElement(elementOrElementRef);\r\n            // Specify events which need to be registered on the trigger.\r\n            this._triggerEvents\r\n                .set('mousedown', this._onMousedown)\r\n                .set('mouseup', this._onPointerUp)\r\n                .set('mouseleave', this._onPointerUp)\r\n                .set('touchstart', this._onTouchStart)\r\n                .set('touchend', this._onPointerUp)\r\n                .set('touchcancel', this._onPointerUp);\r\n        }\r\n    }\r\n    /**\r\n     * Fades in a ripple at the given coordinates.\r\n     * @param {?} x Coordinate within the element, along the X axis at which to start the ripple.\r\n     * @param {?} y Coordinate within the element, along the Y axis at which to start the ripple.\r\n     * @param {?=} config Extra ripple options.\r\n     * @return {?}\r\n     */\r\n    fadeInRipple(x, y, config = {}) {\r\n        /** @type {?} */\r\n        const containerRect = this._containerRect =\r\n            this._containerRect || this._containerElement.getBoundingClientRect();\r\n        /** @type {?} */\r\n        const animationConfig = Object.assign({}, defaultRippleAnimationConfig, config.animation);\r\n        if (config.centered) {\r\n            x = containerRect.left + containerRect.width / 2;\r\n            y = containerRect.top + containerRect.height / 2;\r\n        }\r\n        /** @type {?} */\r\n        const radius = config.radius || distanceToFurthestCorner(x, y, containerRect);\r\n        /** @type {?} */\r\n        const offsetX = x - containerRect.left;\r\n        /** @type {?} */\r\n        const offsetY = y - containerRect.top;\r\n        /** @type {?} */\r\n        const duration = animationConfig.enterDuration;\r\n        /** @type {?} */\r\n        const ripple = document.createElement('div');\r\n        ripple.classList.add('mat-ripple-element');\r\n        ripple.style.left = `${offsetX - radius}px`;\r\n        ripple.style.top = `${offsetY - radius}px`;\r\n        ripple.style.height = `${radius * 2}px`;\r\n        ripple.style.width = `${radius * 2}px`;\r\n        // If the color is not set, the default CSS color will be used.\r\n        ripple.style.backgroundColor = config.color || null;\r\n        ripple.style.transitionDuration = `${duration}ms`;\r\n        this._containerElement.appendChild(ripple);\r\n        // By default the browser does not recalculate the styles of dynamically created\r\n        // ripple elements. This is critical because then the `scale` would not animate properly.\r\n        enforceStyleRecalculation(ripple);\r\n        ripple.style.transform = 'scale(1)';\r\n        // Exposed reference to the ripple that will be returned.\r\n        /** @type {?} */\r\n        const rippleRef = new RippleRef(this, ripple, config);\r\n        rippleRef.state = RippleState.FADING_IN;\r\n        // Add the ripple reference to the list of all active ripples.\r\n        this._activeRipples.add(rippleRef);\r\n        if (!config.persistent) {\r\n            this._mostRecentTransientRipple = rippleRef;\r\n        }\r\n        // Wait for the ripple element to be completely faded in.\r\n        // Once it's faded in, the ripple can be hidden immediately if the mouse is released.\r\n        this._runTimeoutOutsideZone((/**\r\n         * @return {?}\r\n         */\r\n        () => {\r\n            /** @type {?} */\r\n            const isMostRecentTransientRipple = rippleRef === this._mostRecentTransientRipple;\r\n            rippleRef.state = RippleState.VISIBLE;\r\n            // When the timer runs out while the user has kept their pointer down, we want to\r\n            // keep only the persistent ripples and the latest transient ripple. We do this,\r\n            // because we don't want stacked transient ripples to appear after their enter\r\n            // animation has finished.\r\n            if (!config.persistent && (!isMostRecentTransientRipple || !this._isPointerDown)) {\r\n                rippleRef.fadeOut();\r\n            }\r\n        }), duration);\r\n        return rippleRef;\r\n    }\r\n    /**\r\n     * Fades out a ripple reference.\r\n     * @param {?} rippleRef\r\n     * @return {?}\r\n     */\r\n    fadeOutRipple(rippleRef) {\r\n        /** @type {?} */\r\n        const wasActive = this._activeRipples.delete(rippleRef);\r\n        if (rippleRef === this._mostRecentTransientRipple) {\r\n            this._mostRecentTransientRipple = null;\r\n        }\r\n        // Clear out the cached bounding rect if we have no more ripples.\r\n        if (!this._activeRipples.size) {\r\n            this._containerRect = null;\r\n        }\r\n        // For ripples that are not active anymore, don't re-run the fade-out animation.\r\n        if (!wasActive) {\r\n            return;\r\n        }\r\n        /** @type {?} */\r\n        const rippleEl = rippleRef.element;\r\n        /** @type {?} */\r\n        const animationConfig = Object.assign({}, defaultRippleAnimationConfig, rippleRef.config.animation);\r\n        rippleEl.style.transitionDuration = `${animationConfig.exitDuration}ms`;\r\n        rippleEl.style.opacity = '0';\r\n        rippleRef.state = RippleState.FADING_OUT;\r\n        // Once the ripple faded out, the ripple can be safely removed from the DOM.\r\n        this._runTimeoutOutsideZone((/**\r\n         * @return {?}\r\n         */\r\n        () => {\r\n            rippleRef.state = RippleState.HIDDEN;\r\n            (/** @type {?} */ (rippleEl.parentNode)).removeChild(rippleEl);\r\n        }), animationConfig.exitDuration);\r\n    }\r\n    /**\r\n     * Fades out all currently active ripples.\r\n     * @return {?}\r\n     */\r\n    fadeOutAll() {\r\n        this._activeRipples.forEach((/**\r\n         * @param {?} ripple\r\n         * @return {?}\r\n         */\r\n        ripple => ripple.fadeOut()));\r\n    }\r\n    /**\r\n     * Sets up the trigger event listeners\r\n     * @param {?} elementOrElementRef\r\n     * @return {?}\r\n     */\r\n    setupTriggerEvents(elementOrElementRef) {\r\n        /** @type {?} */\r\n        const element = coerceElement(elementOrElementRef);\r\n        if (!element || element === this._triggerElement) {\r\n            return;\r\n        }\r\n        // Remove all previously registered event listeners from the trigger element.\r\n        this._removeTriggerEvents();\r\n        this._ngZone.runOutsideAngular((/**\r\n         * @return {?}\r\n         */\r\n        () => {\r\n            this._triggerEvents.forEach((/**\r\n             * @param {?} fn\r\n             * @param {?} type\r\n             * @return {?}\r\n             */\r\n            (fn, type) => {\r\n                element.addEventListener(type, fn, passiveEventOptions);\r\n            }));\r\n        }));\r\n        this._triggerElement = element;\r\n    }\r\n    /**\r\n     * Runs a timeout outside of the Angular zone to avoid triggering the change detection.\r\n     * @private\r\n     * @param {?} fn\r\n     * @param {?=} delay\r\n     * @return {?}\r\n     */\r\n    _runTimeoutOutsideZone(fn, delay = 0) {\r\n        this._ngZone.runOutsideAngular((/**\r\n         * @return {?}\r\n         */\r\n        () => setTimeout(fn, delay)));\r\n    }\r\n    /**\r\n     * Removes previously registered event listeners from the trigger element.\r\n     * @return {?}\r\n     */\r\n    _removeTriggerEvents() {\r\n        if (this._triggerElement) {\r\n            this._triggerEvents.forEach((/**\r\n             * @param {?} fn\r\n             * @param {?} type\r\n             * @return {?}\r\n             */\r\n            (fn, type) => {\r\n                (/** @type {?} */ (this._triggerElement)).removeEventListener(type, fn, passiveEventOptions);\r\n            }));\r\n        }\r\n    }\r\n}\r\n/**\r\n * Enforces a style recalculation of a DOM element by computing its styles.\r\n * @param {?} element\r\n * @return {?}\r\n */\r\nfunction enforceStyleRecalculation(element) {\r\n    // Enforce a style recalculation by calling `getComputedStyle` and accessing any property.\r\n    // Calling `getPropertyValue` is important to let optimizers know that this is not a noop.\r\n    // See: https://gist.github.com/paulirish/5d52fb081b3570c81e3a\r\n    window.getComputedStyle(element).getPropertyValue('opacity');\r\n}\r\n/**\r\n * Returns the distance from the point (x, y) to the furthest corner of a rectangle.\r\n * @param {?} x\r\n * @param {?} y\r\n * @param {?} rect\r\n * @return {?}\r\n */\r\nfunction distanceToFurthestCorner(x, y, rect) {\r\n    /** @type {?} */\r\n    const distX = Math.max(Math.abs(x - rect.left), Math.abs(x - rect.right));\r\n    /** @type {?} */\r\n    const distY = Math.max(Math.abs(y - rect.top), Math.abs(y - rect.bottom));\r\n    return Math.sqrt(distX * distX + distY * distY);\r\n}\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n/**\r\n * Injection token that can be used to specify the global ripple options.\r\n * @type {?}\r\n */\r\nconst MAT_RIPPLE_GLOBAL_OPTIONS = new InjectionToken('mat-ripple-global-options');\r\nclass MatRipple {\r\n    /**\r\n     * @param {?} _elementRef\r\n     * @param {?} ngZone\r\n     * @param {?} platform\r\n     * @param {?=} globalOptions\r\n     * @param {?=} animationMode\r\n     */\r\n    constructor(_elementRef, ngZone, platform, globalOptions, animationMode) {\r\n        this._elementRef = _elementRef;\r\n        /**\r\n         * If set, the radius in pixels of foreground ripples when fully expanded. If unset, the radius\r\n         * will be the distance from the center of the ripple to the furthest corner of the host element's\r\n         * bounding rectangle.\r\n         */\r\n        this.radius = 0;\r\n        this._disabled = false;\r\n        /**\r\n         * Whether ripple directive is initialized and the input bindings are set.\r\n         */\r\n        this._isInitialized = false;\r\n        this._globalOptions = globalOptions || {};\r\n        this._rippleRenderer = new RippleRenderer(this, ngZone, _elementRef, platform);\r\n        if (animationMode === 'NoopAnimations') {\r\n            this._globalOptions.animation = { enterDuration: 0, exitDuration: 0 };\r\n        }\r\n    }\r\n    /**\r\n     * Whether click events will not trigger the ripple. Ripples can be still launched manually\r\n     * by using the `launch()` method.\r\n     * @return {?}\r\n     */\r\n    get disabled() { return this._disabled; }\r\n    /**\r\n     * @param {?} value\r\n     * @return {?}\r\n     */\r\n    set disabled(value) {\r\n        this._disabled = value;\r\n        this._setupTriggerEventsIfEnabled();\r\n    }\r\n    /**\r\n     * The element that triggers the ripple when click events are received.\r\n     * Defaults to the directive's host element.\r\n     * @return {?}\r\n     */\r\n    get trigger() { return this._trigger || this._elementRef.nativeElement; }\r\n    /**\r\n     * @param {?} trigger\r\n     * @return {?}\r\n     */\r\n    set trigger(trigger) {\r\n        this._trigger = trigger;\r\n        this._setupTriggerEventsIfEnabled();\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    ngOnInit() {\r\n        this._isInitialized = true;\r\n        this._setupTriggerEventsIfEnabled();\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    ngOnDestroy() {\r\n        this._rippleRenderer._removeTriggerEvents();\r\n    }\r\n    /**\r\n     * Fades out all currently showing ripple elements.\r\n     * @return {?}\r\n     */\r\n    fadeOutAll() {\r\n        this._rippleRenderer.fadeOutAll();\r\n    }\r\n    /**\r\n     * Ripple configuration from the directive's input values.\r\n     * \\@docs-private Implemented as part of RippleTarget\r\n     * @return {?}\r\n     */\r\n    get rippleConfig() {\r\n        return {\r\n            centered: this.centered,\r\n            radius: this.radius,\r\n            color: this.color,\r\n            animation: Object.assign({}, this._globalOptions.animation, this.animation),\r\n            terminateOnPointerUp: this._globalOptions.terminateOnPointerUp,\r\n        };\r\n    }\r\n    /**\r\n     * Whether ripples on pointer-down are disabled or not.\r\n     * \\@docs-private Implemented as part of RippleTarget\r\n     * @return {?}\r\n     */\r\n    get rippleDisabled() {\r\n        return this.disabled || !!this._globalOptions.disabled;\r\n    }\r\n    /**\r\n     * Sets up the trigger event listeners if ripples are enabled.\r\n     * @private\r\n     * @return {?}\r\n     */\r\n    _setupTriggerEventsIfEnabled() {\r\n        if (!this.disabled && this._isInitialized) {\r\n            this._rippleRenderer.setupTriggerEvents(this.trigger);\r\n        }\r\n    }\r\n    /**\r\n     * Launches a manual ripple at the specified coordinated or just by the ripple config.\r\n     * @param {?} configOrX\r\n     * @param {?=} y\r\n     * @param {?=} config\r\n     * @return {?}\r\n     */\r\n    launch(configOrX, y = 0, config) {\r\n        if (typeof configOrX === 'number') {\r\n            return this._rippleRenderer.fadeInRipple(configOrX, y, Object.assign({}, this.rippleConfig, config));\r\n        }\r\n        else {\r\n            return this._rippleRenderer.fadeInRipple(0, 0, Object.assign({}, this.rippleConfig, configOrX));\r\n        }\r\n    }\r\n}\r\nMatRipple.decorators = [\r\n    { type: Directive, args: [{\r\n                selector: '[mat-ripple], [matRipple]',\r\n                exportAs: 'matRipple',\r\n                host: {\r\n                    'class': 'mat-ripple',\r\n                    '[class.mat-ripple-unbounded]': 'unbounded'\r\n                }\r\n            },] },\r\n];\r\n/** @nocollapse */\r\nMatRipple.ctorParameters = () => [\r\n    { type: ElementRef },\r\n    { type: NgZone },\r\n    { type: Platform },\r\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MAT_RIPPLE_GLOBAL_OPTIONS,] }] },\r\n    { type: String, decorators: [{ type: Optional }, { type: Inject, args: [ANIMATION_MODULE_TYPE,] }] }\r\n];\r\nMatRipple.propDecorators = {\r\n    color: [{ type: Input, args: ['matRippleColor',] }],\r\n    unbounded: [{ type: Input, args: ['matRippleUnbounded',] }],\r\n    centered: [{ type: Input, args: ['matRippleCentered',] }],\r\n    radius: [{ type: Input, args: ['matRippleRadius',] }],\r\n    animation: [{ type: Input, args: ['matRippleAnimation',] }],\r\n    disabled: [{ type: Input, args: ['matRippleDisabled',] }],\r\n    trigger: [{ type: Input, args: ['matRippleTrigger',] }]\r\n};\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\nclass MatRippleModule {\r\n}\r\nMatRippleModule.decorators = [\r\n    { type: NgModule, args: [{\r\n                imports: [MatCommonModule, PlatformModule],\r\n                exports: [MatRipple, MatCommonModule],\r\n                declarations: [MatRipple],\r\n            },] },\r\n];\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n/**\r\n * Component that shows a simplified checkbox without including any kind of \"real\" checkbox.\r\n * Meant to be used when the checkbox is purely decorative and a large number of them will be\r\n * included, such as for the options in a multi-select. Uses no SVGs or complex animations.\r\n * Note that theming is meant to be handled by the parent element, e.g.\r\n * `mat-primary .mat-pseudo-checkbox`.\r\n *\r\n * Note that this component will be completely invisible to screen-reader users. This is *not*\r\n * interchangeable with `<mat-checkbox>` and should *not* be used if the user would directly\r\n * interact with the checkbox. The pseudo-checkbox should only be used as an implementation detail\r\n * of more complex components that appropriately handle selected / checked state.\r\n * \\@docs-private\r\n */\r\nclass MatPseudoCheckbox {\r\n    /**\r\n     * @param {?=} _animationMode\r\n     */\r\n    constructor(_animationMode) {\r\n        this._animationMode = _animationMode;\r\n        /**\r\n         * Display state of the checkbox.\r\n         */\r\n        this.state = 'unchecked';\r\n        /**\r\n         * Whether the checkbox is disabled.\r\n         */\r\n        this.disabled = false;\r\n    }\r\n}\r\nMatPseudoCheckbox.decorators = [\r\n    { type: Component, args: [{encapsulation: ViewEncapsulation.None,\r\n                changeDetection: ChangeDetectionStrategy.OnPush,\r\n                selector: 'mat-pseudo-checkbox',\r\n                styles: [\".mat-pseudo-checkbox{width:16px;height:16px;border:2px solid;border-radius:2px;cursor:pointer;display:inline-block;vertical-align:middle;box-sizing:border-box;position:relative;flex-shrink:0;transition:border-color 90ms cubic-bezier(0,0,.2,.1),background-color 90ms cubic-bezier(0,0,.2,.1)}.mat-pseudo-checkbox::after{position:absolute;opacity:0;content:'';border-bottom:2px solid currentColor;transition:opacity 90ms cubic-bezier(0,0,.2,.1)}.mat-pseudo-checkbox.mat-pseudo-checkbox-checked,.mat-pseudo-checkbox.mat-pseudo-checkbox-indeterminate{border-color:transparent}._mat-animation-noopable.mat-pseudo-checkbox{transition:none;animation:none}._mat-animation-noopable.mat-pseudo-checkbox::after{transition:none}.mat-pseudo-checkbox-disabled{cursor:default}.mat-pseudo-checkbox-indeterminate::after{top:5px;left:1px;width:10px;opacity:1;border-radius:2px}.mat-pseudo-checkbox-checked::after{top:2.4px;left:1px;width:8px;height:3px;border-left:2px solid currentColor;transform:rotate(-45deg);opacity:1;box-sizing:content-box}\"],\r\n                template: '',\r\n                host: {\r\n                    'class': 'mat-pseudo-checkbox',\r\n                    '[class.mat-pseudo-checkbox-indeterminate]': 'state === \"indeterminate\"',\r\n                    '[class.mat-pseudo-checkbox-checked]': 'state === \"checked\"',\r\n                    '[class.mat-pseudo-checkbox-disabled]': 'disabled',\r\n                    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\r\n                },\r\n            },] },\r\n];\r\n/** @nocollapse */\r\nMatPseudoCheckbox.ctorParameters = () => [\r\n    { type: String, decorators: [{ type: Optional }, { type: Inject, args: [ANIMATION_MODULE_TYPE,] }] }\r\n];\r\nMatPseudoCheckbox.propDecorators = {\r\n    state: [{ type: Input }],\r\n    disabled: [{ type: Input }]\r\n};\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\nclass MatPseudoCheckboxModule {\r\n}\r\nMatPseudoCheckboxModule.decorators = [\r\n    { type: NgModule, args: [{\r\n                exports: [MatPseudoCheckbox],\r\n                declarations: [MatPseudoCheckbox]\r\n            },] },\r\n];\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n// Boilerplate for applying mixins to MatOptgroup.\r\n/**\r\n * \\@docs-private\r\n */\r\nclass MatOptgroupBase {\r\n}\r\n/** @type {?} */\r\nconst _MatOptgroupMixinBase = mixinDisabled(MatOptgroupBase);\r\n// Counter for unique group ids.\r\n/** @type {?} */\r\nlet _uniqueOptgroupIdCounter = 0;\r\n/**\r\n * Component that is used to group instances of `mat-option`.\r\n */\r\nclass MatOptgroup extends _MatOptgroupMixinBase {\r\n    constructor() {\r\n        super(...arguments);\r\n        /**\r\n         * Unique id for the underlying label.\r\n         */\r\n        this._labelId = `mat-optgroup-label-${_uniqueOptgroupIdCounter++}`;\r\n    }\r\n}\r\nMatOptgroup.decorators = [\r\n    { type: Component, args: [{selector: 'mat-optgroup',\r\n                exportAs: 'matOptgroup',\r\n                template: \"<label class=\\\"mat-optgroup-label\\\" [id]=\\\"_labelId\\\">{{ label }}<ng-content></ng-content></label><ng-content select=\\\"mat-option, ng-container\\\"></ng-content>\",\r\n                encapsulation: ViewEncapsulation.None,\r\n                changeDetection: ChangeDetectionStrategy.OnPush,\r\n                inputs: ['disabled'],\r\n                styles: [\".mat-optgroup-label{white-space:nowrap;overflow:hidden;text-overflow:ellipsis;display:block;line-height:48px;height:48px;padding:0 16px;text-align:left;text-decoration:none;max-width:100%;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;cursor:default}.mat-optgroup-label[disabled]{cursor:default}[dir=rtl] .mat-optgroup-label{text-align:right}.mat-optgroup-label .mat-icon{margin-right:16px;vertical-align:middle}.mat-optgroup-label .mat-icon svg{vertical-align:top}[dir=rtl] .mat-optgroup-label .mat-icon{margin-left:16px;margin-right:0}\"],\r\n                host: {\r\n                    'class': 'mat-optgroup',\r\n                    'role': 'group',\r\n                    '[class.mat-optgroup-disabled]': 'disabled',\r\n                    '[attr.aria-disabled]': 'disabled.toString()',\r\n                    '[attr.aria-labelledby]': '_labelId',\r\n                }\r\n            },] },\r\n];\r\nMatOptgroup.propDecorators = {\r\n    label: [{ type: Input }]\r\n};\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n/**\r\n * Option IDs need to be unique across components, so this counter exists outside of\r\n * the component definition.\r\n * @type {?}\r\n */\r\nlet _uniqueIdCounter = 0;\r\n/**\r\n * Event object emitted by MatOption when selected or deselected.\r\n */\r\nclass MatOptionSelectionChange {\r\n    /**\r\n     * @param {?} source\r\n     * @param {?=} isUserInput\r\n     */\r\n    constructor(source, isUserInput = false) {\r\n        this.source = source;\r\n        this.isUserInput = isUserInput;\r\n    }\r\n}\r\n/**\r\n * Injection token used to provide the parent component to options.\r\n * @type {?}\r\n */\r\nconst MAT_OPTION_PARENT_COMPONENT = new InjectionToken('MAT_OPTION_PARENT_COMPONENT');\r\n/**\r\n * Single option inside of a `<mat-select>` element.\r\n */\r\nclass MatOption {\r\n    /**\r\n     * @param {?} _element\r\n     * @param {?} _changeDetectorRef\r\n     * @param {?} _parent\r\n     * @param {?} group\r\n     */\r\n    constructor(_element, _changeDetectorRef, _parent, group) {\r\n        this._element = _element;\r\n        this._changeDetectorRef = _changeDetectorRef;\r\n        this._parent = _parent;\r\n        this.group = group;\r\n        this._selected = false;\r\n        this._active = false;\r\n        this._disabled = false;\r\n        this._mostRecentViewValue = '';\r\n        /**\r\n         * The unique ID of the option.\r\n         */\r\n        this.id = `mat-option-${_uniqueIdCounter++}`;\r\n        /**\r\n         * Event emitted when the option is selected or deselected.\r\n         */\r\n        // tslint:disable-next-line:no-output-on-prefix\r\n        this.onSelectionChange = new EventEmitter();\r\n        /**\r\n         * Emits when the state of the option changes and any parents have to be notified.\r\n         */\r\n        this._stateChanges = new Subject();\r\n    }\r\n    /**\r\n     * Whether the wrapping component is in multiple selection mode.\r\n     * @return {?}\r\n     */\r\n    get multiple() { return this._parent && this._parent.multiple; }\r\n    /**\r\n     * Whether or not the option is currently selected.\r\n     * @return {?}\r\n     */\r\n    get selected() { return this._selected; }\r\n    /**\r\n     * Whether the option is disabled.\r\n     * @return {?}\r\n     */\r\n    get disabled() { return (this.group && this.group.disabled) || this._disabled; }\r\n    /**\r\n     * @param {?} value\r\n     * @return {?}\r\n     */\r\n    set disabled(value) { this._disabled = coerceBooleanProperty(value); }\r\n    /**\r\n     * Whether ripples for the option are disabled.\r\n     * @return {?}\r\n     */\r\n    get disableRipple() { return this._parent && this._parent.disableRipple; }\r\n    /**\r\n     * Whether or not the option is currently active and ready to be selected.\r\n     * An active option displays styles as if it is focused, but the\r\n     * focus is actually retained somewhere else. This comes in handy\r\n     * for components like autocomplete where focus must remain on the input.\r\n     * @return {?}\r\n     */\r\n    get active() {\r\n        return this._active;\r\n    }\r\n    /**\r\n     * The displayed value of the option. It is necessary to show the selected option in the\r\n     * select's trigger.\r\n     * @return {?}\r\n     */\r\n    get viewValue() {\r\n        // TODO(kara): Add input property alternative for node envs.\r\n        return (this._getHostElement().textContent || '').trim();\r\n    }\r\n    /**\r\n     * Selects the option.\r\n     * @return {?}\r\n     */\r\n    select() {\r\n        if (!this._selected) {\r\n            this._selected = true;\r\n            this._changeDetectorRef.markForCheck();\r\n            this._emitSelectionChangeEvent();\r\n        }\r\n    }\r\n    /**\r\n     * Deselects the option.\r\n     * @return {?}\r\n     */\r\n    deselect() {\r\n        if (this._selected) {\r\n            this._selected = false;\r\n            this._changeDetectorRef.markForCheck();\r\n            this._emitSelectionChangeEvent();\r\n        }\r\n    }\r\n    /**\r\n     * Sets focus onto this option.\r\n     * @param {?=} _origin\r\n     * @param {?=} options\r\n     * @return {?}\r\n     */\r\n    focus(_origin, options) {\r\n        // Note that we aren't using `_origin`, but we need to keep it because some internal consumers\r\n        // use `MatOption` in a `FocusKeyManager` and we need it to match `FocusableOption`.\r\n        /** @type {?} */\r\n        const element = this._getHostElement();\r\n        if (typeof element.focus === 'function') {\r\n            element.focus(options);\r\n        }\r\n    }\r\n    /**\r\n     * This method sets display styles on the option to make it appear\r\n     * active. This is used by the ActiveDescendantKeyManager so key\r\n     * events will display the proper options as active on arrow key events.\r\n     * @return {?}\r\n     */\r\n    setActiveStyles() {\r\n        if (!this._active) {\r\n            this._active = true;\r\n            this._changeDetectorRef.markForCheck();\r\n        }\r\n    }\r\n    /**\r\n     * This method removes display styles on the option that made it appear\r\n     * active. This is used by the ActiveDescendantKeyManager so key\r\n     * events will display the proper options as active on arrow key events.\r\n     * @return {?}\r\n     */\r\n    setInactiveStyles() {\r\n        if (this._active) {\r\n            this._active = false;\r\n            this._changeDetectorRef.markForCheck();\r\n        }\r\n    }\r\n    /**\r\n     * Gets the label to be used when determining whether the option should be focused.\r\n     * @return {?}\r\n     */\r\n    getLabel() {\r\n        return this.viewValue;\r\n    }\r\n    /**\r\n     * Ensures the option is selected when activated from the keyboard.\r\n     * @param {?} event\r\n     * @return {?}\r\n     */\r\n    _handleKeydown(event) {\r\n        if ((event.keyCode === ENTER || event.keyCode === SPACE) && !hasModifierKey(event)) {\r\n            this._selectViaInteraction();\r\n            // Prevent the page from scrolling down and form submits.\r\n            event.preventDefault();\r\n        }\r\n    }\r\n    /**\r\n     * `Selects the option while indicating the selection came from the user. Used to\r\n     * determine if the select's view -> model callback should be invoked.`\r\n     * @return {?}\r\n     */\r\n    _selectViaInteraction() {\r\n        if (!this.disabled) {\r\n            this._selected = this.multiple ? !this._selected : true;\r\n            this._changeDetectorRef.markForCheck();\r\n            this._emitSelectionChangeEvent(true);\r\n        }\r\n    }\r\n    /**\r\n     * Gets the `aria-selected` value for the option. We explicitly omit the `aria-selected`\r\n     * attribute from single-selection, unselected options. Including the `aria-selected=\"false\"`\r\n     * attributes adds a significant amount of noise to screen-reader users without providing useful\r\n     * information.\r\n     * @return {?}\r\n     */\r\n    _getAriaSelected() {\r\n        return this.selected || (this.multiple ? false : null);\r\n    }\r\n    /**\r\n     * Returns the correct tabindex for the option depending on disabled state.\r\n     * @return {?}\r\n     */\r\n    _getTabIndex() {\r\n        return this.disabled ? '-1' : '0';\r\n    }\r\n    /**\r\n     * Gets the host DOM element.\r\n     * @return {?}\r\n     */\r\n    _getHostElement() {\r\n        return this._element.nativeElement;\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    ngAfterViewChecked() {\r\n        // Since parent components could be using the option's label to display the selected values\r\n        // (e.g. `mat-select`) and they don't have a way of knowing if the option's label has changed\r\n        // we have to check for changes in the DOM ourselves and dispatch an event. These checks are\r\n        // relatively cheap, however we still limit them only to selected options in order to avoid\r\n        // hitting the DOM too often.\r\n        if (this._selected) {\r\n            /** @type {?} */\r\n            const viewValue = this.viewValue;\r\n            if (viewValue !== this._mostRecentViewValue) {\r\n                this._mostRecentViewValue = viewValue;\r\n                this._stateChanges.next();\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    ngOnDestroy() {\r\n        this._stateChanges.complete();\r\n    }\r\n    /**\r\n     * Emits the selection change event.\r\n     * @private\r\n     * @param {?=} isUserInput\r\n     * @return {?}\r\n     */\r\n    _emitSelectionChangeEvent(isUserInput = false) {\r\n        this.onSelectionChange.emit(new MatOptionSelectionChange(this, isUserInput));\r\n    }\r\n}\r\nMatOption.decorators = [\r\n    { type: Component, args: [{selector: 'mat-option',\r\n                exportAs: 'matOption',\r\n                host: {\r\n                    'role': 'option',\r\n                    '[attr.tabindex]': '_getTabIndex()',\r\n                    '[class.mat-selected]': 'selected',\r\n                    '[class.mat-option-multiple]': 'multiple',\r\n                    '[class.mat-active]': 'active',\r\n                    '[id]': 'id',\r\n                    '[attr.aria-selected]': '_getAriaSelected()',\r\n                    '[attr.aria-disabled]': 'disabled.toString()',\r\n                    '[class.mat-option-disabled]': 'disabled',\r\n                    '(click)': '_selectViaInteraction()',\r\n                    '(keydown)': '_handleKeydown($event)',\r\n                    'class': 'mat-option',\r\n                },\r\n                styles: [\".mat-option{white-space:nowrap;overflow:hidden;text-overflow:ellipsis;display:block;line-height:48px;height:48px;padding:0 16px;text-align:left;text-decoration:none;max-width:100%;position:relative;cursor:pointer;outline:0;display:flex;flex-direction:row;max-width:100%;box-sizing:border-box;align-items:center;-webkit-tap-highlight-color:transparent}.mat-option[disabled]{cursor:default}[dir=rtl] .mat-option{text-align:right}.mat-option .mat-icon{margin-right:16px;vertical-align:middle}.mat-option .mat-icon svg{vertical-align:top}[dir=rtl] .mat-option .mat-icon{margin-left:16px;margin-right:0}.mat-option[aria-disabled=true]{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;cursor:default}.mat-optgroup .mat-option:not(.mat-option-multiple){padding-left:32px}[dir=rtl] .mat-optgroup .mat-option:not(.mat-option-multiple){padding-left:16px;padding-right:32px}@media (-ms-high-contrast:active){.mat-option{margin:0 1px}.mat-option.mat-active{border:solid 1px currentColor;margin:0}}.mat-option-text{display:inline-block;flex-grow:1;overflow:hidden;text-overflow:ellipsis}.mat-option .mat-option-ripple{top:0;left:0;right:0;bottom:0;position:absolute;pointer-events:none}@media (-ms-high-contrast:active){.mat-option .mat-option-ripple{opacity:.5}}.mat-option-pseudo-checkbox{margin-right:8px}[dir=rtl] .mat-option-pseudo-checkbox{margin-left:8px;margin-right:0}\"],\r\n                template: \"<mat-pseudo-checkbox *ngIf=\\\"multiple\\\" class=\\\"mat-option-pseudo-checkbox\\\" [state]=\\\"selected ? 'checked' : ''\\\" [disabled]=\\\"disabled\\\"></mat-pseudo-checkbox><span class=\\\"mat-option-text\\\"><ng-content></ng-content></span><div class=\\\"mat-option-ripple\\\" mat-ripple [matRippleTrigger]=\\\"_getHostElement()\\\" [matRippleDisabled]=\\\"disabled || disableRipple\\\"></div>\",\r\n                encapsulation: ViewEncapsulation.None,\r\n                changeDetection: ChangeDetectionStrategy.OnPush,\r\n            },] },\r\n];\r\n/** @nocollapse */\r\nMatOption.ctorParameters = () => [\r\n    { type: ElementRef },\r\n    { type: ChangeDetectorRef },\r\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MAT_OPTION_PARENT_COMPONENT,] }] },\r\n    { type: MatOptgroup, decorators: [{ type: Optional }] }\r\n];\r\nMatOption.propDecorators = {\r\n    value: [{ type: Input }],\r\n    id: [{ type: Input }],\r\n    disabled: [{ type: Input }],\r\n    onSelectionChange: [{ type: Output }]\r\n};\r\n/**\r\n * Counts the amount of option group labels that precede the specified option.\r\n * \\@docs-private\r\n * @param {?} optionIndex Index of the option at which to start counting.\r\n * @param {?} options Flat list of all of the options.\r\n * @param {?} optionGroups Flat list of all of the option groups.\r\n * @return {?}\r\n */\r\nfunction _countGroupLabelsBeforeOption(optionIndex, options, optionGroups) {\r\n    if (optionGroups.length) {\r\n        /** @type {?} */\r\n        let optionsArray = options.toArray();\r\n        /** @type {?} */\r\n        let groups = optionGroups.toArray();\r\n        /** @type {?} */\r\n        let groupCounter = 0;\r\n        for (let i = 0; i < optionIndex + 1; i++) {\r\n            if (optionsArray[i].group && optionsArray[i].group === groups[groupCounter]) {\r\n                groupCounter++;\r\n            }\r\n        }\r\n        return groupCounter;\r\n    }\r\n    return 0;\r\n}\r\n/**\r\n * Determines the position to which to scroll a panel in order for an option to be into view.\r\n * \\@docs-private\r\n * @param {?} optionIndex Index of the option to be scrolled into the view.\r\n * @param {?} optionHeight Height of the options.\r\n * @param {?} currentScrollPosition Current scroll position of the panel.\r\n * @param {?} panelHeight Height of the panel.\r\n * @return {?}\r\n */\r\nfunction _getOptionScrollPosition(optionIndex, optionHeight, currentScrollPosition, panelHeight) {\r\n    /** @type {?} */\r\n    const optionOffset = optionIndex * optionHeight;\r\n    if (optionOffset < currentScrollPosition) {\r\n        return optionOffset;\r\n    }\r\n    if (optionOffset + optionHeight > currentScrollPosition + panelHeight) {\r\n        return Math.max(0, optionOffset - panelHeight + optionHeight);\r\n    }\r\n    return currentScrollPosition;\r\n}\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\nclass MatOptionModule {\r\n}\r\nMatOptionModule.decorators = [\r\n    { type: NgModule, args: [{\r\n                imports: [MatRippleModule, CommonModule, MatPseudoCheckboxModule],\r\n                exports: [MatOption, MatOptgroup],\r\n                declarations: [MatOption, MatOptgroup]\r\n            },] },\r\n];\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n/**\r\n * InjectionToken that can be used to specify the global label options.\r\n * @type {?}\r\n */\r\nconst MAT_LABEL_GLOBAL_OPTIONS = new InjectionToken('mat-label-global-options');\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n\r\n/**\r\n * When constructing a Date, the month is zero-based. This can be confusing, since people are\r\n * used to seeing them one-based. So we create these aliases to make writing the tests easier.\r\n * \\@docs-private\r\n * \\@breaking-change 8.0.0 Remove this with V8 since it was only targeted for testing.\r\n * @type {?}\r\n */\r\nconst JAN = 0;\r\n/** @type {?} */\r\nconst FEB = 1;\r\n/** @type {?} */\r\nconst MAR = 2;\r\n/** @type {?} */\r\nconst APR = 3;\r\n/** @type {?} */\r\nconst MAY = 4;\r\n/** @type {?} */\r\nconst JUN = 5;\r\n/** @type {?} */\r\nconst JUL = 6;\r\n/** @type {?} */\r\nconst AUG = 7;\r\n/** @type {?} */\r\nconst SEP = 8;\r\n/** @type {?} */\r\nconst OCT = 9;\r\n/** @type {?} */\r\nconst NOV = 10;\r\n/** @type {?} */\r\nconst DEC = 11;\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n\r\nexport { VERSION$1 as VERSION, AnimationCurves, AnimationDurations, MatCommonModule, MATERIAL_SANITY_CHECKS, mixinDisabled, mixinColor, mixinDisableRipple, mixinTabIndex, mixinErrorState, mixinInitialized, NativeDateModule, MatNativeDateModule, MAT_DATE_LOCALE_FACTORY, MAT_DATE_LOCALE, MAT_DATE_LOCALE_PROVIDER, DateAdapter, MAT_DATE_FORMATS, NativeDateAdapter, MAT_NATIVE_DATE_FORMATS, ShowOnDirtyErrorStateMatcher, ErrorStateMatcher, MAT_HAMMER_OPTIONS, GestureConfig, setLines, MatLine, MatLineSetter, MatLineModule, MatOptionModule, _countGroupLabelsBeforeOption, _getOptionScrollPosition, MatOptionSelectionChange, MAT_OPTION_PARENT_COMPONENT, MatOption, MatOptgroup, MAT_LABEL_GLOBAL_OPTIONS, MatRippleModule, MAT_RIPPLE_GLOBAL_OPTIONS, MatRipple, RippleState, RippleRef, defaultRippleAnimationConfig, RippleRenderer, MatPseudoCheckboxModule, MatPseudoCheckbox, JAN, FEB, MAR, APR, MAY, JUN, JUL, AUG, SEP, OCT, NOV, DEC, MATERIAL_SANITY_CHECKS_FACTORY as ɵa1 };\r\n\r\n"]}