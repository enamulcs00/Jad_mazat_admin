{"version":3,"sources":["v:/jad-admin-go/mazat_admin_panel/node_modules/@angular/material/esm2015/toolbar.js"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;AAoBA;;;;;;;;;;;;;;;;;;;;;;CAWC,mBAOC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CA0DD,aAeC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CA0BD,2BAOC","file":"toolbar.js","sourcesContent":["/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nimport { Platform } from '@angular/cdk/platform';\r\nimport { DOCUMENT } from '@angular/common';\r\nimport { ChangeDetectionStrategy, Component, ContentChildren, Directive, ElementRef, Inject, isDevMode, ViewEncapsulation, NgModule } from '@angular/core';\r\nimport { mixinColor, MatCommonModule } from '@angular/material/core';\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n// Boilerplate for applying mixins to MatToolbar.\r\n/**\r\n * \\@docs-private\r\n */\r\nclass MatToolbarBase {\r\n    /**\r\n     * @param {?} _elementRef\r\n     */\r\n    constructor(_elementRef) {\r\n        this._elementRef = _elementRef;\r\n    }\r\n}\r\n/** @type {?} */\r\nconst _MatToolbarMixinBase = mixinColor(MatToolbarBase);\r\nclass MatToolbarRow {\r\n}\r\nMatToolbarRow.decorators = [\r\n    { type: Directive, args: [{\r\n                selector: 'mat-toolbar-row',\r\n                exportAs: 'matToolbarRow',\r\n                host: { 'class': 'mat-toolbar-row' },\r\n            },] },\r\n];\r\nclass MatToolbar extends _MatToolbarMixinBase {\r\n    /**\r\n     * @param {?} elementRef\r\n     * @param {?} _platform\r\n     * @param {?=} document\r\n     */\r\n    constructor(elementRef, _platform, document) {\r\n        super(elementRef);\r\n        this._platform = _platform;\r\n        // TODO: make the document a required param when doing breaking changes.\r\n        this._document = document;\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    ngAfterViewInit() {\r\n        if (!isDevMode() || !this._platform.isBrowser) {\r\n            return;\r\n        }\r\n        this._checkToolbarMixedModes();\r\n        this._toolbarRows.changes.subscribe((/**\r\n         * @return {?}\r\n         */\r\n        () => this._checkToolbarMixedModes()));\r\n    }\r\n    /**\r\n     * Throws an exception when developers are attempting to combine the different toolbar row modes.\r\n     * @private\r\n     * @return {?}\r\n     */\r\n    _checkToolbarMixedModes() {\r\n        if (!this._toolbarRows.length) {\r\n            return;\r\n        }\r\n        // Check if there are any other DOM nodes that can display content but aren't inside of\r\n        // a <mat-toolbar-row> element.\r\n        /** @type {?} */\r\n        const isCombinedUsage = Array.from(this._elementRef.nativeElement.childNodes)\r\n            .filter((/**\r\n         * @param {?} node\r\n         * @return {?}\r\n         */\r\n        node => !(node.classList && node.classList.contains('mat-toolbar-row'))))\r\n            .filter((/**\r\n         * @param {?} node\r\n         * @return {?}\r\n         */\r\n        node => node.nodeType !== (this._document ? this._document.COMMENT_NODE : 8)))\r\n            .some((/**\r\n         * @param {?} node\r\n         * @return {?}\r\n         */\r\n        node => !!(node.textContent && node.textContent.trim())));\r\n        if (isCombinedUsage) {\r\n            throwToolbarMixedModesError();\r\n        }\r\n    }\r\n}\r\nMatToolbar.decorators = [\r\n    { type: Component, args: [{selector: 'mat-toolbar',\r\n                exportAs: 'matToolbar',\r\n                template: \"<ng-content></ng-content><ng-content select=\\\"mat-toolbar-row\\\"></ng-content>\",\r\n                styles: [\"@media (-ms-high-contrast:active){.mat-toolbar{outline:solid 1px}}.mat-toolbar-row,.mat-toolbar-single-row{display:flex;box-sizing:border-box;padding:0 16px;width:100%;flex-direction:row;align-items:center;white-space:nowrap}.mat-toolbar-multiple-rows{display:flex;box-sizing:border-box;flex-direction:column;width:100%}.mat-toolbar-multiple-rows{min-height:64px}.mat-toolbar-row,.mat-toolbar-single-row{height:64px}@media (max-width:599px){.mat-toolbar-multiple-rows{min-height:56px}.mat-toolbar-row,.mat-toolbar-single-row{height:56px}}\"],\r\n                inputs: ['color'],\r\n                host: {\r\n                    'class': 'mat-toolbar',\r\n                    '[class.mat-toolbar-multiple-rows]': '_toolbarRows.length > 0',\r\n                    '[class.mat-toolbar-single-row]': '_toolbarRows.length === 0',\r\n                },\r\n                changeDetection: ChangeDetectionStrategy.OnPush,\r\n                encapsulation: ViewEncapsulation.None,\r\n            },] },\r\n];\r\n/** @nocollapse */\r\nMatToolbar.ctorParameters = () => [\r\n    { type: ElementRef },\r\n    { type: Platform },\r\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] }\r\n];\r\nMatToolbar.propDecorators = {\r\n    _toolbarRows: [{ type: ContentChildren, args: [MatToolbarRow,] }]\r\n};\r\n/**\r\n * Throws an exception when attempting to combine the different toolbar row modes.\r\n * \\@docs-private\r\n * @return {?}\r\n */\r\nfunction throwToolbarMixedModesError() {\r\n    throw Error('MatToolbar: Attempting to combine different toolbar modes. ' +\r\n        'Either specify multiple `<mat-toolbar-row>` elements explicitly or just place content ' +\r\n        'inside of a `<mat-toolbar>` for a single row.');\r\n}\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\nclass MatToolbarModule {\r\n}\r\nMatToolbarModule.decorators = [\r\n    { type: NgModule, args: [{\r\n                imports: [MatCommonModule],\r\n                exports: [MatToolbar, MatToolbarRow, MatCommonModule],\r\n                declarations: [MatToolbar, MatToolbarRow],\r\n            },] },\r\n];\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n\r\nexport { MatToolbarModule, throwToolbarMixedModesError, MatToolbarRow, MatToolbar };\r\n\r\n"]}