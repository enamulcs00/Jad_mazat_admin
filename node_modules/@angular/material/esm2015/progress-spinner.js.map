{"version":3,"sources":["v:/jad-admin-go/mazat_admin_panel/node_modules/@angular/material/esm2015/progress-spinner.js"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAuBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8MAyPC;;;;;;;8CAO6C,AAqB5C;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CAiCD,oDAiBC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CAwCD,2BAcC","file":"progress-spinner.js","sourcesContent":["/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nimport { coerceNumberProperty } from '@angular/cdk/coercion';\r\nimport { Platform } from '@angular/cdk/platform';\r\nimport { DOCUMENT, CommonModule } from '@angular/common';\r\nimport { ChangeDetectionStrategy, Component, ElementRef, Inject, InjectionToken, Input, Optional, ViewEncapsulation, NgModule } from '@angular/core';\r\nimport { mixinColor, MatCommonModule } from '@angular/material/core';\r\nimport { ANIMATION_MODULE_TYPE } from '@angular/platform-browser/animations';\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n/**\r\n * Base reference size of the spinner.\r\n * \\@docs-private\r\n * @type {?}\r\n */\r\nconst BASE_SIZE = 100;\r\n/**\r\n * Base reference stroke width of the spinner.\r\n * \\@docs-private\r\n * @type {?}\r\n */\r\nconst BASE_STROKE_WIDTH = 10;\r\n// Boilerplate for applying mixins to MatProgressSpinner.\r\n/**\r\n * \\@docs-private\r\n */\r\nclass MatProgressSpinnerBase {\r\n    /**\r\n     * @param {?} _elementRef\r\n     */\r\n    constructor(_elementRef) {\r\n        this._elementRef = _elementRef;\r\n    }\r\n}\r\n/** @type {?} */\r\nconst _MatProgressSpinnerMixinBase = mixinColor(MatProgressSpinnerBase, 'primary');\r\n/**\r\n * Injection token to be used to override the default options for `mat-progress-spinner`.\r\n * @type {?}\r\n */\r\nconst MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS = new InjectionToken('mat-progress-spinner-default-options', {\r\n    providedIn: 'root',\r\n    factory: MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS_FACTORY,\r\n});\r\n/**\r\n * \\@docs-private\r\n * @return {?}\r\n */\r\nfunction MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS_FACTORY() {\r\n    return { diameter: BASE_SIZE };\r\n}\r\n// .0001 percentage difference is necessary in order to avoid unwanted animation frames\r\n// for example because the animation duration is 4 seconds, .1% accounts to 4ms\r\n// which are enough to see the flicker described in\r\n// https://github.com/angular/components/issues/8984\r\n/** @type {?} */\r\nconst INDETERMINATE_ANIMATION_TEMPLATE = `\r\n @keyframes mat-progress-spinner-stroke-rotate-DIAMETER {\r\n    0%      { stroke-dashoffset: START_VALUE;  transform: rotate(0); }\r\n    12.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(0); }\r\n    12.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(72.5deg); }\r\n    25%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(72.5deg); }\r\n\r\n    25.0001%   { stroke-dashoffset: START_VALUE;  transform: rotate(270deg); }\r\n    37.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(270deg); }\r\n    37.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(161.5deg); }\r\n    50%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(161.5deg); }\r\n\r\n    50.0001%  { stroke-dashoffset: START_VALUE;  transform: rotate(180deg); }\r\n    62.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(180deg); }\r\n    62.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(251.5deg); }\r\n    75%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(251.5deg); }\r\n\r\n    75.0001%  { stroke-dashoffset: START_VALUE;  transform: rotate(90deg); }\r\n    87.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(90deg); }\r\n    87.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(341.5deg); }\r\n    100%    { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(341.5deg); }\r\n  }\r\n`;\r\n/**\r\n * `<mat-progress-spinner>` component.\r\n */\r\nclass MatProgressSpinner extends _MatProgressSpinnerMixinBase {\r\n    /**\r\n     * @param {?} _elementRef\r\n     * @param {?} platform\r\n     * @param {?} _document\r\n     * @param {?} animationMode\r\n     * @param {?=} defaults\r\n     */\r\n    constructor(_elementRef, platform, _document, animationMode, defaults) {\r\n        super(_elementRef);\r\n        this._elementRef = _elementRef;\r\n        this._document = _document;\r\n        this._diameter = BASE_SIZE;\r\n        this._value = 0;\r\n        this._fallbackAnimation = false;\r\n        /**\r\n         * Mode of the progress circle\r\n         */\r\n        this.mode = 'determinate';\r\n        /** @type {?} */\r\n        const trackedDiameters = MatProgressSpinner._diameters;\r\n        // The base size is already inserted via the component's structural styles. We still\r\n        // need to track it so we don't end up adding the same styles again.\r\n        if (!trackedDiameters.has(_document.head)) {\r\n            trackedDiameters.set(_document.head, new Set([BASE_SIZE]));\r\n        }\r\n        this._fallbackAnimation = platform.EDGE || platform.TRIDENT;\r\n        this._noopAnimations = animationMode === 'NoopAnimations' &&\r\n            (!!defaults && !defaults._forceAnimations);\r\n        if (defaults) {\r\n            if (defaults.diameter) {\r\n                this.diameter = defaults.diameter;\r\n            }\r\n            if (defaults.strokeWidth) {\r\n                this.strokeWidth = defaults.strokeWidth;\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * The diameter of the progress spinner (will set width and height of svg).\r\n     * @return {?}\r\n     */\r\n    get diameter() { return this._diameter; }\r\n    /**\r\n     * @param {?} size\r\n     * @return {?}\r\n     */\r\n    set diameter(size) {\r\n        this._diameter = coerceNumberProperty(size);\r\n        // If this is set before `ngOnInit`, the style root may not have been resolved yet.\r\n        if (!this._fallbackAnimation && this._styleRoot) {\r\n            this._attachStyleNode();\r\n        }\r\n    }\r\n    /**\r\n     * Stroke width of the progress spinner.\r\n     * @return {?}\r\n     */\r\n    get strokeWidth() {\r\n        return this._strokeWidth || this.diameter / 10;\r\n    }\r\n    /**\r\n     * @param {?} value\r\n     * @return {?}\r\n     */\r\n    set strokeWidth(value) {\r\n        this._strokeWidth = coerceNumberProperty(value);\r\n    }\r\n    /**\r\n     * Value of the progress circle.\r\n     * @return {?}\r\n     */\r\n    get value() {\r\n        return this.mode === 'determinate' ? this._value : 0;\r\n    }\r\n    /**\r\n     * @param {?} newValue\r\n     * @return {?}\r\n     */\r\n    set value(newValue) {\r\n        this._value = Math.max(0, Math.min(100, coerceNumberProperty(newValue)));\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    ngOnInit() {\r\n        /** @type {?} */\r\n        const element = this._elementRef.nativeElement;\r\n        // Note that we need to look up the root node in ngOnInit, rather than the constructor, because\r\n        // Angular seems to create the element outside the shadow root and then moves it inside, if the\r\n        // node is inside an `ngIf` and a ShadowDom-encapsulated component.\r\n        this._styleRoot = _getShadowRoot(element, this._document) || this._document.head;\r\n        this._attachStyleNode();\r\n        // On IE and Edge, we can't animate the `stroke-dashoffset`\r\n        // reliably so we fall back to a non-spec animation.\r\n        /** @type {?} */\r\n        const animationClass = `mat-progress-spinner-indeterminate${this._fallbackAnimation ? '-fallback' : ''}-animation`;\r\n        element.classList.add(animationClass);\r\n    }\r\n    /**\r\n     * The radius of the spinner, adjusted for stroke width.\r\n     * @return {?}\r\n     */\r\n    get _circleRadius() {\r\n        return (this.diameter - BASE_STROKE_WIDTH) / 2;\r\n    }\r\n    /**\r\n     * The view box of the spinner's svg element.\r\n     * @return {?}\r\n     */\r\n    get _viewBox() {\r\n        /** @type {?} */\r\n        const viewBox = this._circleRadius * 2 + this.strokeWidth;\r\n        return `0 0 ${viewBox} ${viewBox}`;\r\n    }\r\n    /**\r\n     * The stroke circumference of the svg circle.\r\n     * @return {?}\r\n     */\r\n    get _strokeCircumference() {\r\n        return 2 * Math.PI * this._circleRadius;\r\n    }\r\n    /**\r\n     * The dash offset of the svg circle.\r\n     * @return {?}\r\n     */\r\n    get _strokeDashOffset() {\r\n        if (this.mode === 'determinate') {\r\n            return this._strokeCircumference * (100 - this._value) / 100;\r\n        }\r\n        // In fallback mode set the circle to 80% and rotate it with CSS.\r\n        if (this._fallbackAnimation && this.mode === 'indeterminate') {\r\n            return this._strokeCircumference * 0.2;\r\n        }\r\n        return null;\r\n    }\r\n    /**\r\n     * Stroke width of the circle in percent.\r\n     * @return {?}\r\n     */\r\n    get _circleStrokeWidth() {\r\n        return this.strokeWidth / this.diameter * 100;\r\n    }\r\n    /**\r\n     * Dynamically generates a style tag containing the correct animation for this diameter.\r\n     * @private\r\n     * @return {?}\r\n     */\r\n    _attachStyleNode() {\r\n        /** @type {?} */\r\n        const styleRoot = this._styleRoot;\r\n        /** @type {?} */\r\n        const currentDiameter = this._diameter;\r\n        /** @type {?} */\r\n        const diameters = MatProgressSpinner._diameters;\r\n        /** @type {?} */\r\n        let diametersForElement = diameters.get(styleRoot);\r\n        if (!diametersForElement || !diametersForElement.has(currentDiameter)) {\r\n            /** @type {?} */\r\n            const styleTag = this._document.createElement('style');\r\n            styleTag.setAttribute('mat-spinner-animation', currentDiameter + '');\r\n            styleTag.textContent = this._getAnimationText();\r\n            styleRoot.appendChild(styleTag);\r\n            if (!diametersForElement) {\r\n                diametersForElement = new Set();\r\n                diameters.set(styleRoot, diametersForElement);\r\n            }\r\n            diametersForElement.add(currentDiameter);\r\n        }\r\n    }\r\n    /**\r\n     * Generates animation styles adjusted for the spinner's diameter.\r\n     * @private\r\n     * @return {?}\r\n     */\r\n    _getAnimationText() {\r\n        return INDETERMINATE_ANIMATION_TEMPLATE\r\n            // Animation should begin at 5% and end at 80%\r\n            .replace(/START_VALUE/g, `${0.95 * this._strokeCircumference}`)\r\n            .replace(/END_VALUE/g, `${0.2 * this._strokeCircumference}`)\r\n            .replace(/DIAMETER/g, `${this.diameter}`);\r\n    }\r\n}\r\n/**\r\n * Tracks diameters of existing instances to de-dupe generated styles (default d = 100).\r\n * We need to keep track of which elements the diameters were attached to, because for\r\n * elements in the Shadow DOM the style tags are attached to the shadow root, rather\r\n * than the document head.\r\n */\r\nMatProgressSpinner._diameters = new WeakMap();\r\nMatProgressSpinner.decorators = [\r\n    { type: Component, args: [{selector: 'mat-progress-spinner',\r\n                exportAs: 'matProgressSpinner',\r\n                host: {\r\n                    'role': 'progressbar',\r\n                    'class': 'mat-progress-spinner',\r\n                    '[class._mat-animation-noopable]': `_noopAnimations`,\r\n                    '[style.width.px]': 'diameter',\r\n                    '[style.height.px]': 'diameter',\r\n                    '[attr.aria-valuemin]': 'mode === \"determinate\" ? 0 : null',\r\n                    '[attr.aria-valuemax]': 'mode === \"determinate\" ? 100 : null',\r\n                    '[attr.aria-valuenow]': 'mode === \"determinate\" ? value : null',\r\n                    '[attr.mode]': 'mode',\r\n                },\r\n                inputs: ['color'],\r\n                template: \"<svg [style.width.px]=\\\"diameter\\\" [style.height.px]=\\\"diameter\\\" [attr.viewBox]=\\\"_viewBox\\\" preserveAspectRatio=\\\"xMidYMid meet\\\" focusable=\\\"false\\\" [ngSwitch]=\\\"mode === 'indeterminate'\\\"><circle *ngSwitchCase=\\\"true\\\" cx=\\\"50%\\\" cy=\\\"50%\\\" [attr.r]=\\\"_circleRadius\\\" [style.animation-name]=\\\"'mat-progress-spinner-stroke-rotate-' + diameter\\\" [style.stroke-dashoffset.px]=\\\"_strokeDashOffset\\\" [style.stroke-dasharray.px]=\\\"_strokeCircumference\\\" [style.stroke-width.%]=\\\"_circleStrokeWidth\\\"></circle><circle *ngSwitchCase=\\\"false\\\" cx=\\\"50%\\\" cy=\\\"50%\\\" [attr.r]=\\\"_circleRadius\\\" [style.stroke-dashoffset.px]=\\\"_strokeDashOffset\\\" [style.stroke-dasharray.px]=\\\"_strokeCircumference\\\" [style.stroke-width.%]=\\\"_circleStrokeWidth\\\"></circle></svg>\",\r\n                styles: [\".mat-progress-spinner{display:block;position:relative}.mat-progress-spinner svg{position:absolute;transform:rotate(-90deg);top:0;left:0;transform-origin:center;overflow:visible}.mat-progress-spinner circle{fill:transparent;transform-origin:center;transition:stroke-dashoffset 225ms linear}._mat-animation-noopable.mat-progress-spinner circle{transition:none;animation:none}.mat-progress-spinner.mat-progress-spinner-indeterminate-animation[mode=indeterminate]{animation:mat-progress-spinner-linear-rotate 2s linear infinite}._mat-animation-noopable.mat-progress-spinner.mat-progress-spinner-indeterminate-animation[mode=indeterminate]{transition:none;animation:none}.mat-progress-spinner.mat-progress-spinner-indeterminate-animation[mode=indeterminate] circle{transition-property:stroke;animation-duration:4s;animation-timing-function:cubic-bezier(.35,0,.25,1);animation-iteration-count:infinite}._mat-animation-noopable.mat-progress-spinner.mat-progress-spinner-indeterminate-animation[mode=indeterminate] circle{transition:none;animation:none}.mat-progress-spinner.mat-progress-spinner-indeterminate-fallback-animation[mode=indeterminate]{animation:mat-progress-spinner-stroke-rotate-fallback 10s cubic-bezier(.87,.03,.33,1) infinite}._mat-animation-noopable.mat-progress-spinner.mat-progress-spinner-indeterminate-fallback-animation[mode=indeterminate]{transition:none;animation:none}.mat-progress-spinner.mat-progress-spinner-indeterminate-fallback-animation[mode=indeterminate] circle{transition-property:stroke}._mat-animation-noopable.mat-progress-spinner.mat-progress-spinner-indeterminate-fallback-animation[mode=indeterminate] circle{transition:none;animation:none}@keyframes mat-progress-spinner-linear-rotate{0%{transform:rotate(0)}100%{transform:rotate(360deg)}}@keyframes mat-progress-spinner-stroke-rotate-100{0%{stroke-dashoffset:268.60617px;transform:rotate(0)}12.5%{stroke-dashoffset:56.54867px;transform:rotate(0)}12.5001%{stroke-dashoffset:56.54867px;transform:rotateX(180deg) rotate(72.5deg)}25%{stroke-dashoffset:268.60617px;transform:rotateX(180deg) rotate(72.5deg)}25.0001%{stroke-dashoffset:268.60617px;transform:rotate(270deg)}37.5%{stroke-dashoffset:56.54867px;transform:rotate(270deg)}37.5001%{stroke-dashoffset:56.54867px;transform:rotateX(180deg) rotate(161.5deg)}50%{stroke-dashoffset:268.60617px;transform:rotateX(180deg) rotate(161.5deg)}50.0001%{stroke-dashoffset:268.60617px;transform:rotate(180deg)}62.5%{stroke-dashoffset:56.54867px;transform:rotate(180deg)}62.5001%{stroke-dashoffset:56.54867px;transform:rotateX(180deg) rotate(251.5deg)}75%{stroke-dashoffset:268.60617px;transform:rotateX(180deg) rotate(251.5deg)}75.0001%{stroke-dashoffset:268.60617px;transform:rotate(90deg)}87.5%{stroke-dashoffset:56.54867px;transform:rotate(90deg)}87.5001%{stroke-dashoffset:56.54867px;transform:rotateX(180deg) rotate(341.5deg)}100%{stroke-dashoffset:268.60617px;transform:rotateX(180deg) rotate(341.5deg)}}@keyframes mat-progress-spinner-stroke-rotate-fallback{0%{transform:rotate(0)}25%{transform:rotate(1170deg)}50%{transform:rotate(2340deg)}75%{transform:rotate(3510deg)}100%{transform:rotate(4680deg)}}\"],\r\n                changeDetection: ChangeDetectionStrategy.OnPush,\r\n                encapsulation: ViewEncapsulation.None,\r\n            },] },\r\n];\r\n/** @nocollapse */\r\nMatProgressSpinner.ctorParameters = () => [\r\n    { type: ElementRef },\r\n    { type: Platform },\r\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [DOCUMENT,] }] },\r\n    { type: String, decorators: [{ type: Optional }, { type: Inject, args: [ANIMATION_MODULE_TYPE,] }] },\r\n    { type: undefined, decorators: [{ type: Inject, args: [MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS,] }] }\r\n];\r\nMatProgressSpinner.propDecorators = {\r\n    diameter: [{ type: Input }],\r\n    strokeWidth: [{ type: Input }],\r\n    mode: [{ type: Input }],\r\n    value: [{ type: Input }]\r\n};\r\n/**\r\n * `<mat-spinner>` component.\r\n *\r\n * This is a component definition to be used as a convenience reference to create an\r\n * indeterminate `<mat-progress-spinner>` instance.\r\n */\r\nclass MatSpinner extends MatProgressSpinner {\r\n    /**\r\n     * @param {?} elementRef\r\n     * @param {?} platform\r\n     * @param {?} document\r\n     * @param {?} animationMode\r\n     * @param {?=} defaults\r\n     */\r\n    constructor(elementRef, platform, document, animationMode, defaults) {\r\n        super(elementRef, platform, document, animationMode, defaults);\r\n        this.mode = 'indeterminate';\r\n    }\r\n}\r\nMatSpinner.decorators = [\r\n    { type: Component, args: [{selector: 'mat-spinner',\r\n                host: {\r\n                    'role': 'progressbar',\r\n                    'mode': 'indeterminate',\r\n                    'class': 'mat-spinner mat-progress-spinner',\r\n                    '[class._mat-animation-noopable]': `_noopAnimations`,\r\n                    '[style.width.px]': 'diameter',\r\n                    '[style.height.px]': 'diameter',\r\n                },\r\n                inputs: ['color'],\r\n                template: \"<svg [style.width.px]=\\\"diameter\\\" [style.height.px]=\\\"diameter\\\" [attr.viewBox]=\\\"_viewBox\\\" preserveAspectRatio=\\\"xMidYMid meet\\\" focusable=\\\"false\\\" [ngSwitch]=\\\"mode === 'indeterminate'\\\"><circle *ngSwitchCase=\\\"true\\\" cx=\\\"50%\\\" cy=\\\"50%\\\" [attr.r]=\\\"_circleRadius\\\" [style.animation-name]=\\\"'mat-progress-spinner-stroke-rotate-' + diameter\\\" [style.stroke-dashoffset.px]=\\\"_strokeDashOffset\\\" [style.stroke-dasharray.px]=\\\"_strokeCircumference\\\" [style.stroke-width.%]=\\\"_circleStrokeWidth\\\"></circle><circle *ngSwitchCase=\\\"false\\\" cx=\\\"50%\\\" cy=\\\"50%\\\" [attr.r]=\\\"_circleRadius\\\" [style.stroke-dashoffset.px]=\\\"_strokeDashOffset\\\" [style.stroke-dasharray.px]=\\\"_strokeCircumference\\\" [style.stroke-width.%]=\\\"_circleStrokeWidth\\\"></circle></svg>\",\r\n                styles: [\".mat-progress-spinner{display:block;position:relative}.mat-progress-spinner svg{position:absolute;transform:rotate(-90deg);top:0;left:0;transform-origin:center;overflow:visible}.mat-progress-spinner circle{fill:transparent;transform-origin:center;transition:stroke-dashoffset 225ms linear}._mat-animation-noopable.mat-progress-spinner circle{transition:none;animation:none}.mat-progress-spinner.mat-progress-spinner-indeterminate-animation[mode=indeterminate]{animation:mat-progress-spinner-linear-rotate 2s linear infinite}._mat-animation-noopable.mat-progress-spinner.mat-progress-spinner-indeterminate-animation[mode=indeterminate]{transition:none;animation:none}.mat-progress-spinner.mat-progress-spinner-indeterminate-animation[mode=indeterminate] circle{transition-property:stroke;animation-duration:4s;animation-timing-function:cubic-bezier(.35,0,.25,1);animation-iteration-count:infinite}._mat-animation-noopable.mat-progress-spinner.mat-progress-spinner-indeterminate-animation[mode=indeterminate] circle{transition:none;animation:none}.mat-progress-spinner.mat-progress-spinner-indeterminate-fallback-animation[mode=indeterminate]{animation:mat-progress-spinner-stroke-rotate-fallback 10s cubic-bezier(.87,.03,.33,1) infinite}._mat-animation-noopable.mat-progress-spinner.mat-progress-spinner-indeterminate-fallback-animation[mode=indeterminate]{transition:none;animation:none}.mat-progress-spinner.mat-progress-spinner-indeterminate-fallback-animation[mode=indeterminate] circle{transition-property:stroke}._mat-animation-noopable.mat-progress-spinner.mat-progress-spinner-indeterminate-fallback-animation[mode=indeterminate] circle{transition:none;animation:none}@keyframes mat-progress-spinner-linear-rotate{0%{transform:rotate(0)}100%{transform:rotate(360deg)}}@keyframes mat-progress-spinner-stroke-rotate-100{0%{stroke-dashoffset:268.60617px;transform:rotate(0)}12.5%{stroke-dashoffset:56.54867px;transform:rotate(0)}12.5001%{stroke-dashoffset:56.54867px;transform:rotateX(180deg) rotate(72.5deg)}25%{stroke-dashoffset:268.60617px;transform:rotateX(180deg) rotate(72.5deg)}25.0001%{stroke-dashoffset:268.60617px;transform:rotate(270deg)}37.5%{stroke-dashoffset:56.54867px;transform:rotate(270deg)}37.5001%{stroke-dashoffset:56.54867px;transform:rotateX(180deg) rotate(161.5deg)}50%{stroke-dashoffset:268.60617px;transform:rotateX(180deg) rotate(161.5deg)}50.0001%{stroke-dashoffset:268.60617px;transform:rotate(180deg)}62.5%{stroke-dashoffset:56.54867px;transform:rotate(180deg)}62.5001%{stroke-dashoffset:56.54867px;transform:rotateX(180deg) rotate(251.5deg)}75%{stroke-dashoffset:268.60617px;transform:rotateX(180deg) rotate(251.5deg)}75.0001%{stroke-dashoffset:268.60617px;transform:rotate(90deg)}87.5%{stroke-dashoffset:56.54867px;transform:rotate(90deg)}87.5001%{stroke-dashoffset:56.54867px;transform:rotateX(180deg) rotate(341.5deg)}100%{stroke-dashoffset:268.60617px;transform:rotateX(180deg) rotate(341.5deg)}}@keyframes mat-progress-spinner-stroke-rotate-fallback{0%{transform:rotate(0)}25%{transform:rotate(1170deg)}50%{transform:rotate(2340deg)}75%{transform:rotate(3510deg)}100%{transform:rotate(4680deg)}}\"],\r\n                changeDetection: ChangeDetectionStrategy.OnPush,\r\n                encapsulation: ViewEncapsulation.None,\r\n            },] },\r\n];\r\n/** @nocollapse */\r\nMatSpinner.ctorParameters = () => [\r\n    { type: ElementRef },\r\n    { type: Platform },\r\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [DOCUMENT,] }] },\r\n    { type: String, decorators: [{ type: Optional }, { type: Inject, args: [ANIMATION_MODULE_TYPE,] }] },\r\n    { type: undefined, decorators: [{ type: Inject, args: [MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS,] }] }\r\n];\r\n/**\r\n * Gets the shadow root of an element, if supported and the element is inside the Shadow DOM.\r\n * @param {?} element\r\n * @param {?} _document\r\n * @return {?}\r\n */\r\nfunction _getShadowRoot(element, _document) {\r\n    // TODO(crisbeto): see whether we should move this into the CDK\r\n    // feature detection utilities once #15616 gets merged in.\r\n    if (typeof window !== 'undefined') {\r\n        /** @type {?} */\r\n        const head = _document.head;\r\n        // Check whether the browser supports Shadow DOM.\r\n        if (head && (((/** @type {?} */ (head))).createShadowRoot || head.attachShadow)) {\r\n            /** @type {?} */\r\n            const rootNode = element.getRootNode ? element.getRootNode() : null;\r\n            // We need to take the `ShadowRoot` off of `window`, because the built-in types are\r\n            // incorrect. See https://github.com/Microsoft/TypeScript/issues/27929.\r\n            if (rootNode instanceof ((/** @type {?} */ (window))).ShadowRoot) {\r\n                return rootNode;\r\n            }\r\n        }\r\n    }\r\n    return null;\r\n}\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\nclass MatProgressSpinnerModule {\r\n}\r\nMatProgressSpinnerModule.decorators = [\r\n    { type: NgModule, args: [{\r\n                imports: [MatCommonModule, CommonModule],\r\n                exports: [\r\n                    MatProgressSpinner,\r\n                    MatSpinner,\r\n                    MatCommonModule\r\n                ],\r\n                declarations: [\r\n                    MatProgressSpinner,\r\n                    MatSpinner\r\n                ],\r\n            },] },\r\n];\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n\r\nexport { MatProgressSpinner, MatSpinner, MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS, MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS_FACTORY, MatProgressSpinnerModule };\r\n\r\n"]}