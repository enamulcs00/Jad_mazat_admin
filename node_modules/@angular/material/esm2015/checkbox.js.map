{"version":3,"sources":["v:/jad-admin-go/mazat_admin_panel/node_modules/@angular/material/esm2015/checkbox.js"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAwmcC,aAqBC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CA+CD,mBAOC;;;;;;;;;;;;;;;;;;;;;CAWD,8MAMC;;;;;;;;;;;;;;;;;;;;;;;;CAED,+CAUC","file":"checkbox.js","sourcesContent":["/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nimport { InjectionToken, Attribute, ChangeDetectionStrategy, ChangeDetectorRef, Component, ElementRef, EventEmitter, forwardRef, Inject, Input, NgZone, Optional, Output, ViewChild, ViewEncapsulation, Directive, NgModule } from '@angular/core';\r\nimport { FocusMonitor } from '@angular/cdk/a11y';\r\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\r\nimport { NG_VALUE_ACCESSOR, CheckboxRequiredValidator, NG_VALIDATORS } from '@angular/forms';\r\nimport { MatRipple, mixinColor, mixinDisabled, mixinDisableRipple, mixinTabIndex, MatCommonModule, MatRippleModule } from '@angular/material/core';\r\nimport { ANIMATION_MODULE_TYPE } from '@angular/platform-browser/animations';\r\nimport { ObserversModule } from '@angular/cdk/observers';\r\nimport { CommonModule } from '@angular/common';\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n/**\r\n * Injection token that can be used to specify the checkbox click behavior.\r\n * @type {?}\r\n */\r\nconst MAT_CHECKBOX_CLICK_ACTION = new InjectionToken('mat-checkbox-click-action');\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n// Increasing integer for generating unique ids for checkbox components.\r\n/** @type {?} */\r\nlet nextUniqueId = 0;\r\n/**\r\n * Provider Expression that allows mat-checkbox to register as a ControlValueAccessor.\r\n * This allows it to support [(ngModel)].\r\n * \\@docs-private\r\n * @type {?}\r\n */\r\nconst MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR = {\r\n    provide: NG_VALUE_ACCESSOR,\r\n    useExisting: forwardRef((/**\r\n     * @return {?}\r\n     */\r\n    () => MatCheckbox)),\r\n    multi: true\r\n};\r\n/** @enum {number} */\r\nconst TransitionCheckState = {\r\n    /** The initial state of the component before any user interaction. */\r\n    Init: 0,\r\n    /** The state representing the component when it's becoming checked. */\r\n    Checked: 1,\r\n    /** The state representing the component when it's becoming unchecked. */\r\n    Unchecked: 2,\r\n    /** The state representing the component when it's becoming indeterminate. */\r\n    Indeterminate: 3,\r\n};\r\nTransitionCheckState[TransitionCheckState.Init] = 'Init';\r\nTransitionCheckState[TransitionCheckState.Checked] = 'Checked';\r\nTransitionCheckState[TransitionCheckState.Unchecked] = 'Unchecked';\r\nTransitionCheckState[TransitionCheckState.Indeterminate] = 'Indeterminate';\r\n/**\r\n * Change event object emitted by MatCheckbox.\r\n */\r\nclass MatCheckboxChange {\r\n}\r\n// Boilerplate for applying mixins to MatCheckbox.\r\n/**\r\n * \\@docs-private\r\n */\r\nclass MatCheckboxBase {\r\n    /**\r\n     * @param {?} _elementRef\r\n     */\r\n    constructor(_elementRef) {\r\n        this._elementRef = _elementRef;\r\n    }\r\n}\r\n/** @type {?} */\r\nconst _MatCheckboxMixinBase = mixinTabIndex(mixinColor(mixinDisableRipple(mixinDisabled(MatCheckboxBase)), 'accent'));\r\n/**\r\n * A material design checkbox component. Supports all of the functionality of an HTML5 checkbox,\r\n * and exposes a similar API. A MatCheckbox can be either checked, unchecked, indeterminate, or\r\n * disabled. Note that all additional accessibility attributes are taken care of by the component,\r\n * so there is no need to provide them yourself. However, if you want to omit a label and still\r\n * have the checkbox be accessible, you may supply an [aria-label] input.\r\n * See: https://material.io/design/components/selection-controls.html\r\n */\r\nclass MatCheckbox extends _MatCheckboxMixinBase {\r\n    /**\r\n     * @param {?} elementRef\r\n     * @param {?} _changeDetectorRef\r\n     * @param {?} _focusMonitor\r\n     * @param {?} _ngZone\r\n     * @param {?} tabIndex\r\n     * @param {?} _clickAction\r\n     * @param {?=} _animationMode\r\n     */\r\n    constructor(elementRef, _changeDetectorRef, _focusMonitor, _ngZone, tabIndex, _clickAction, _animationMode) {\r\n        super(elementRef);\r\n        this._changeDetectorRef = _changeDetectorRef;\r\n        this._focusMonitor = _focusMonitor;\r\n        this._ngZone = _ngZone;\r\n        this._clickAction = _clickAction;\r\n        this._animationMode = _animationMode;\r\n        /**\r\n         * Attached to the aria-label attribute of the host element. In most cases, aria-labelledby will\r\n         * take precedence so this may be omitted.\r\n         */\r\n        this.ariaLabel = '';\r\n        /**\r\n         * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\r\n         */\r\n        this.ariaLabelledby = null;\r\n        this._uniqueId = `mat-checkbox-${++nextUniqueId}`;\r\n        /**\r\n         * A unique id for the checkbox input. If none is supplied, it will be auto-generated.\r\n         */\r\n        this.id = this._uniqueId;\r\n        /**\r\n         * Whether the label should appear after or before the checkbox. Defaults to 'after'\r\n         */\r\n        this.labelPosition = 'after';\r\n        /**\r\n         * Name value will be applied to the input element if present\r\n         */\r\n        this.name = null;\r\n        /**\r\n         * Event emitted when the checkbox's `checked` value changes.\r\n         */\r\n        this.change = new EventEmitter();\r\n        /**\r\n         * Event emitted when the checkbox's `indeterminate` value changes.\r\n         */\r\n        this.indeterminateChange = new EventEmitter();\r\n        /**\r\n         * Called when the checkbox is blurred. Needed to properly implement ControlValueAccessor.\r\n         * \\@docs-private\r\n         */\r\n        this._onTouched = (/**\r\n         * @return {?}\r\n         */\r\n        () => { });\r\n        this._currentAnimationClass = '';\r\n        this._currentCheckState = TransitionCheckState.Init;\r\n        this._controlValueAccessorChangeFn = (/**\r\n         * @return {?}\r\n         */\r\n        () => { });\r\n        this._checked = false;\r\n        this._disabled = false;\r\n        this._indeterminate = false;\r\n        this.tabIndex = parseInt(tabIndex) || 0;\r\n        this._focusMonitor.monitor(elementRef, true).subscribe((/**\r\n         * @param {?} focusOrigin\r\n         * @return {?}\r\n         */\r\n        focusOrigin => {\r\n            if (!focusOrigin) {\r\n                // When a focused element becomes disabled, the browser *immediately* fires a blur event.\r\n                // Angular does not expect events to be raised during change detection, so any state change\r\n                // (such as a form control's 'ng-touched') will cause a changed-after-checked error.\r\n                // See https://github.com/angular/angular/issues/17793. To work around this, we defer\r\n                // telling the form control it has been touched until the next tick.\r\n                Promise.resolve().then((/**\r\n                 * @return {?}\r\n                 */\r\n                () => {\r\n                    this._onTouched();\r\n                    _changeDetectorRef.markForCheck();\r\n                }));\r\n            }\r\n        }));\r\n    }\r\n    /**\r\n     * Returns the unique id for the visual hidden input.\r\n     * @return {?}\r\n     */\r\n    get inputId() { return `${this.id || this._uniqueId}-input`; }\r\n    /**\r\n     * Whether the checkbox is required.\r\n     * @return {?}\r\n     */\r\n    get required() { return this._required; }\r\n    /**\r\n     * @param {?} value\r\n     * @return {?}\r\n     */\r\n    set required(value) { this._required = coerceBooleanProperty(value); }\r\n    // TODO: Delete next major revision.\r\n    /**\r\n     * @return {?}\r\n     */\r\n    ngAfterViewChecked() { }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    ngOnDestroy() {\r\n        this._focusMonitor.stopMonitoring(this._elementRef);\r\n    }\r\n    /**\r\n     * Whether the checkbox is checked.\r\n     * @return {?}\r\n     */\r\n    get checked() { return this._checked; }\r\n    /**\r\n     * @param {?} value\r\n     * @return {?}\r\n     */\r\n    set checked(value) {\r\n        if (value != this.checked) {\r\n            this._checked = value;\r\n            this._changeDetectorRef.markForCheck();\r\n        }\r\n    }\r\n    /**\r\n     * Whether the checkbox is disabled. This fully overrides the implementation provided by\r\n     * mixinDisabled, but the mixin is still required because mixinTabIndex requires it.\r\n     * @return {?}\r\n     */\r\n    get disabled() { return this._disabled; }\r\n    /**\r\n     * @param {?} value\r\n     * @return {?}\r\n     */\r\n    set disabled(value) {\r\n        /** @type {?} */\r\n        const newValue = coerceBooleanProperty(value);\r\n        if (newValue !== this.disabled) {\r\n            this._disabled = newValue;\r\n            this._changeDetectorRef.markForCheck();\r\n        }\r\n    }\r\n    /**\r\n     * Whether the checkbox is indeterminate. This is also known as \"mixed\" mode and can be used to\r\n     * represent a checkbox with three states, e.g. a checkbox that represents a nested list of\r\n     * checkable items. Note that whenever checkbox is manually clicked, indeterminate is immediately\r\n     * set to false.\r\n     * @return {?}\r\n     */\r\n    get indeterminate() { return this._indeterminate; }\r\n    /**\r\n     * @param {?} value\r\n     * @return {?}\r\n     */\r\n    set indeterminate(value) {\r\n        /** @type {?} */\r\n        const changed = value != this._indeterminate;\r\n        this._indeterminate = value;\r\n        if (changed) {\r\n            if (this._indeterminate) {\r\n                this._transitionCheckState(TransitionCheckState.Indeterminate);\r\n            }\r\n            else {\r\n                this._transitionCheckState(this.checked ? TransitionCheckState.Checked : TransitionCheckState.Unchecked);\r\n            }\r\n            this.indeterminateChange.emit(this._indeterminate);\r\n        }\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    _isRippleDisabled() {\r\n        return this.disableRipple || this.disabled;\r\n    }\r\n    /**\r\n     * Method being called whenever the label text changes.\r\n     * @return {?}\r\n     */\r\n    _onLabelTextChange() {\r\n        // Since the event of the `cdkObserveContent` directive runs outside of the zone, the checkbox\r\n        // component will be only marked for check, but no actual change detection runs automatically.\r\n        // Instead of going back into the zone in order to trigger a change detection which causes\r\n        // *all* components to be checked (if explicitly marked or not using OnPush), we only trigger\r\n        // an explicit change detection for the checkbox view and its children.\r\n        this._changeDetectorRef.detectChanges();\r\n    }\r\n    // Implemented as part of ControlValueAccessor.\r\n    /**\r\n     * @param {?} value\r\n     * @return {?}\r\n     */\r\n    writeValue(value) {\r\n        this.checked = !!value;\r\n    }\r\n    // Implemented as part of ControlValueAccessor.\r\n    /**\r\n     * @param {?} fn\r\n     * @return {?}\r\n     */\r\n    registerOnChange(fn) {\r\n        this._controlValueAccessorChangeFn = fn;\r\n    }\r\n    // Implemented as part of ControlValueAccessor.\r\n    /**\r\n     * @param {?} fn\r\n     * @return {?}\r\n     */\r\n    registerOnTouched(fn) {\r\n        this._onTouched = fn;\r\n    }\r\n    // Implemented as part of ControlValueAccessor.\r\n    /**\r\n     * @param {?} isDisabled\r\n     * @return {?}\r\n     */\r\n    setDisabledState(isDisabled) {\r\n        this.disabled = isDisabled;\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    _getAriaChecked() {\r\n        return this.checked ? 'true' : (this.indeterminate ? 'mixed' : 'false');\r\n    }\r\n    /**\r\n     * @private\r\n     * @param {?} newState\r\n     * @return {?}\r\n     */\r\n    _transitionCheckState(newState) {\r\n        /** @type {?} */\r\n        let oldState = this._currentCheckState;\r\n        /** @type {?} */\r\n        let element = this._elementRef.nativeElement;\r\n        if (oldState === newState) {\r\n            return;\r\n        }\r\n        if (this._currentAnimationClass.length > 0) {\r\n            element.classList.remove(this._currentAnimationClass);\r\n        }\r\n        this._currentAnimationClass = this._getAnimationClassForCheckStateTransition(oldState, newState);\r\n        this._currentCheckState = newState;\r\n        if (this._currentAnimationClass.length > 0) {\r\n            element.classList.add(this._currentAnimationClass);\r\n            // Remove the animation class to avoid animation when the checkbox is moved between containers\r\n            /** @type {?} */\r\n            const animationClass = this._currentAnimationClass;\r\n            this._ngZone.runOutsideAngular((/**\r\n             * @return {?}\r\n             */\r\n            () => {\r\n                setTimeout((/**\r\n                 * @return {?}\r\n                 */\r\n                () => {\r\n                    element.classList.remove(animationClass);\r\n                }), 1000);\r\n            }));\r\n        }\r\n    }\r\n    /**\r\n     * @private\r\n     * @return {?}\r\n     */\r\n    _emitChangeEvent() {\r\n        /** @type {?} */\r\n        const event = new MatCheckboxChange();\r\n        event.source = this;\r\n        event.checked = this.checked;\r\n        this._controlValueAccessorChangeFn(this.checked);\r\n        this.change.emit(event);\r\n    }\r\n    /**\r\n     * Toggles the `checked` state of the checkbox.\r\n     * @return {?}\r\n     */\r\n    toggle() {\r\n        this.checked = !this.checked;\r\n    }\r\n    /**\r\n     * Event handler for checkbox input element.\r\n     * Toggles checked state if element is not disabled.\r\n     * Do not toggle on (change) event since IE doesn't fire change event when\r\n     *   indeterminate checkbox is clicked.\r\n     * @param {?} event\r\n     * @return {?}\r\n     */\r\n    _onInputClick(event) {\r\n        // We have to stop propagation for click events on the visual hidden input element.\r\n        // By default, when a user clicks on a label element, a generated click event will be\r\n        // dispatched on the associated input element. Since we are using a label element as our\r\n        // root container, the click event on the `checkbox` will be executed twice.\r\n        // The real click event will bubble up, and the generated click event also tries to bubble up.\r\n        // This will lead to multiple click events.\r\n        // Preventing bubbling for the second event will solve that issue.\r\n        event.stopPropagation();\r\n        // If resetIndeterminate is false, and the current state is indeterminate, do nothing on click\r\n        if (!this.disabled && this._clickAction !== 'noop') {\r\n            // When user manually click on the checkbox, `indeterminate` is set to false.\r\n            if (this.indeterminate && this._clickAction !== 'check') {\r\n                Promise.resolve().then((/**\r\n                 * @return {?}\r\n                 */\r\n                () => {\r\n                    this._indeterminate = false;\r\n                    this.indeterminateChange.emit(this._indeterminate);\r\n                }));\r\n            }\r\n            this.toggle();\r\n            this._transitionCheckState(this._checked ? TransitionCheckState.Checked : TransitionCheckState.Unchecked);\r\n            // Emit our custom change event if the native input emitted one.\r\n            // It is important to only emit it, if the native input triggered one, because\r\n            // we don't want to trigger a change event, when the `checked` variable changes for example.\r\n            this._emitChangeEvent();\r\n        }\r\n        else if (!this.disabled && this._clickAction === 'noop') {\r\n            // Reset native input when clicked with noop. The native checkbox becomes checked after\r\n            // click, reset it to be align with `checked` value of `mat-checkbox`.\r\n            this._inputElement.nativeElement.checked = this.checked;\r\n            this._inputElement.nativeElement.indeterminate = this.indeterminate;\r\n        }\r\n    }\r\n    /**\r\n     * Focuses the checkbox.\r\n     * @param {?=} origin\r\n     * @param {?=} options\r\n     * @return {?}\r\n     */\r\n    focus(origin = 'keyboard', options) {\r\n        this._focusMonitor.focusVia(this._inputElement, origin, options);\r\n    }\r\n    /**\r\n     * @param {?} event\r\n     * @return {?}\r\n     */\r\n    _onInteractionEvent(event) {\r\n        // We always have to stop propagation on the change event.\r\n        // Otherwise the change event, from the input element, will bubble up and\r\n        // emit its event object to the `change` output.\r\n        event.stopPropagation();\r\n    }\r\n    /**\r\n     * @private\r\n     * @param {?} oldState\r\n     * @param {?} newState\r\n     * @return {?}\r\n     */\r\n    _getAnimationClassForCheckStateTransition(oldState, newState) {\r\n        // Don't transition if animations are disabled.\r\n        if (this._animationMode === 'NoopAnimations') {\r\n            return '';\r\n        }\r\n        /** @type {?} */\r\n        let animSuffix = '';\r\n        switch (oldState) {\r\n            case TransitionCheckState.Init:\r\n                // Handle edge case where user interacts with checkbox that does not have [(ngModel)] or\r\n                // [checked] bound to it.\r\n                if (newState === TransitionCheckState.Checked) {\r\n                    animSuffix = 'unchecked-checked';\r\n                }\r\n                else if (newState == TransitionCheckState.Indeterminate) {\r\n                    animSuffix = 'unchecked-indeterminate';\r\n                }\r\n                else {\r\n                    return '';\r\n                }\r\n                break;\r\n            case TransitionCheckState.Unchecked:\r\n                animSuffix = newState === TransitionCheckState.Checked ?\r\n                    'unchecked-checked' : 'unchecked-indeterminate';\r\n                break;\r\n            case TransitionCheckState.Checked:\r\n                animSuffix = newState === TransitionCheckState.Unchecked ?\r\n                    'checked-unchecked' : 'checked-indeterminate';\r\n                break;\r\n            case TransitionCheckState.Indeterminate:\r\n                animSuffix = newState === TransitionCheckState.Checked ?\r\n                    'indeterminate-checked' : 'indeterminate-unchecked';\r\n                break;\r\n        }\r\n        return `mat-checkbox-anim-${animSuffix}`;\r\n    }\r\n}\r\nMatCheckbox.decorators = [\r\n    { type: Component, args: [{selector: 'mat-checkbox',\r\n                template: \"<label [attr.for]=\\\"inputId\\\" class=\\\"mat-checkbox-layout\\\" #label><div class=\\\"mat-checkbox-inner-container\\\" [class.mat-checkbox-inner-container-no-side-margin]=\\\"!checkboxLabel.textContent || !checkboxLabel.textContent.trim()\\\"><input #input class=\\\"mat-checkbox-input cdk-visually-hidden\\\" type=\\\"checkbox\\\" [id]=\\\"inputId\\\" [required]=\\\"required\\\" [checked]=\\\"checked\\\" [attr.value]=\\\"value\\\" [disabled]=\\\"disabled\\\" [attr.name]=\\\"name\\\" [tabIndex]=\\\"tabIndex\\\" [indeterminate]=\\\"indeterminate\\\" [attr.aria-label]=\\\"ariaLabel || null\\\" [attr.aria-labelledby]=\\\"ariaLabelledby\\\" [attr.aria-checked]=\\\"_getAriaChecked()\\\" (change)=\\\"_onInteractionEvent($event)\\\" (click)=\\\"_onInputClick($event)\\\"><div matRipple class=\\\"mat-checkbox-ripple\\\" [matRippleTrigger]=\\\"label\\\" [matRippleDisabled]=\\\"_isRippleDisabled()\\\" [matRippleRadius]=\\\"20\\\" [matRippleCentered]=\\\"true\\\" [matRippleAnimation]=\\\"{enterDuration: 150}\\\"><div class=\\\"mat-ripple-element mat-checkbox-persistent-ripple\\\"></div></div><div class=\\\"mat-checkbox-frame\\\"></div><div class=\\\"mat-checkbox-background\\\"><svg version=\\\"1.1\\\" focusable=\\\"false\\\" class=\\\"mat-checkbox-checkmark\\\" viewBox=\\\"0 0 24 24\\\" xml:space=\\\"preserve\\\"><path class=\\\"mat-checkbox-checkmark-path\\\" fill=\\\"none\\\" stroke=\\\"white\\\" d=\\\"M4.1,12.7 9,17.6 20.3,6.3\\\"/></svg><div class=\\\"mat-checkbox-mixedmark\\\"></div></div></div><span class=\\\"mat-checkbox-label\\\" #checkboxLabel (cdkObserveContent)=\\\"_onLabelTextChange()\\\"><span style=\\\"display:none\\\">&nbsp;</span><ng-content></ng-content></span></label>\",\r\n                styles: [\"@keyframes mat-checkbox-fade-in-background{0%{opacity:0}50%{opacity:1}}@keyframes mat-checkbox-fade-out-background{0%,50%{opacity:1}100%{opacity:0}}@keyframes mat-checkbox-unchecked-checked-checkmark-path{0%,50%{stroke-dashoffset:22.91026}50%{animation-timing-function:cubic-bezier(0,0,.2,.1)}100%{stroke-dashoffset:0}}@keyframes mat-checkbox-unchecked-indeterminate-mixedmark{0%,68.2%{transform:scaleX(0)}68.2%{animation-timing-function:cubic-bezier(0,0,0,1)}100%{transform:scaleX(1)}}@keyframes mat-checkbox-checked-unchecked-checkmark-path{from{animation-timing-function:cubic-bezier(.4,0,1,1);stroke-dashoffset:0}to{stroke-dashoffset:-22.91026}}@keyframes mat-checkbox-checked-indeterminate-checkmark{from{animation-timing-function:cubic-bezier(0,0,.2,.1);opacity:1;transform:rotate(0)}to{opacity:0;transform:rotate(45deg)}}@keyframes mat-checkbox-indeterminate-checked-checkmark{from{animation-timing-function:cubic-bezier(.14,0,0,1);opacity:0;transform:rotate(45deg)}to{opacity:1;transform:rotate(360deg)}}@keyframes mat-checkbox-checked-indeterminate-mixedmark{from{animation-timing-function:cubic-bezier(0,0,.2,.1);opacity:0;transform:rotate(-45deg)}to{opacity:1;transform:rotate(0)}}@keyframes mat-checkbox-indeterminate-checked-mixedmark{from{animation-timing-function:cubic-bezier(.14,0,0,1);opacity:1;transform:rotate(0)}to{opacity:0;transform:rotate(315deg)}}@keyframes mat-checkbox-indeterminate-unchecked-mixedmark{0%{animation-timing-function:linear;opacity:1;transform:scaleX(1)}100%,32.8%{opacity:0;transform:scaleX(0)}}.mat-checkbox-background,.mat-checkbox-frame{top:0;left:0;right:0;bottom:0;position:absolute;border-radius:2px;box-sizing:border-box;pointer-events:none}.mat-checkbox{transition:background .4s cubic-bezier(.25,.8,.25,1),box-shadow 280ms cubic-bezier(.4,0,.2,1);cursor:pointer;-webkit-tap-highlight-color:transparent}._mat-animation-noopable.mat-checkbox{transition:none;animation:none}.mat-checkbox .mat-ripple-element:not(.mat-checkbox-persistent-ripple){opacity:.16}.mat-checkbox-layout{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;cursor:inherit;align-items:baseline;vertical-align:middle;display:inline-flex;white-space:nowrap}.mat-checkbox-label{-webkit-user-select:auto;-moz-user-select:auto;-ms-user-select:auto;user-select:auto}.mat-checkbox-inner-container{display:inline-block;height:16px;line-height:0;margin:auto;margin-right:8px;order:0;position:relative;vertical-align:middle;white-space:nowrap;width:16px;flex-shrink:0}[dir=rtl] .mat-checkbox-inner-container{margin-left:8px;margin-right:auto}.mat-checkbox-inner-container-no-side-margin{margin-left:0;margin-right:0}.mat-checkbox-frame{background-color:transparent;transition:border-color 90ms cubic-bezier(0,0,.2,.1);border-width:2px;border-style:solid}._mat-animation-noopable .mat-checkbox-frame{transition:none}@media (-ms-high-contrast:active){.mat-checkbox.cdk-keyboard-focused .mat-checkbox-frame{border-style:dotted}}.mat-checkbox-background{align-items:center;display:inline-flex;justify-content:center;transition:background-color 90ms cubic-bezier(0,0,.2,.1),opacity 90ms cubic-bezier(0,0,.2,.1)}._mat-animation-noopable .mat-checkbox-background{transition:none}.mat-checkbox-persistent-ripple{width:100%;height:100%;transform:none}.mat-checkbox-inner-container:hover .mat-checkbox-persistent-ripple{opacity:.04}.mat-checkbox.cdk-keyboard-focused .mat-checkbox-persistent-ripple{opacity:.12}.mat-checkbox-persistent-ripple,.mat-checkbox.mat-checkbox-disabled .mat-checkbox-inner-container:hover .mat-checkbox-persistent-ripple{opacity:0}@media (hover:none){.mat-checkbox-inner-container:hover .mat-checkbox-persistent-ripple{display:none}}.mat-checkbox-checkmark{top:0;left:0;right:0;bottom:0;position:absolute;width:100%}.mat-checkbox-checkmark-path{stroke-dashoffset:22.91026;stroke-dasharray:22.91026;stroke-width:2.13333px}.mat-checkbox-mixedmark{width:calc(100% - 6px);height:2px;opacity:0;transform:scaleX(0) rotate(0);border-radius:2px}@media (-ms-high-contrast:active){.mat-checkbox-mixedmark{height:0;border-top:solid 2px;margin-top:2px}}.mat-checkbox-label-before .mat-checkbox-inner-container{order:1;margin-left:8px;margin-right:auto}[dir=rtl] .mat-checkbox-label-before .mat-checkbox-inner-container{margin-left:auto;margin-right:8px}.mat-checkbox-checked .mat-checkbox-checkmark{opacity:1}.mat-checkbox-checked .mat-checkbox-checkmark-path{stroke-dashoffset:0}.mat-checkbox-checked .mat-checkbox-mixedmark{transform:scaleX(1) rotate(-45deg)}.mat-checkbox-indeterminate .mat-checkbox-checkmark{opacity:0;transform:rotate(45deg)}.mat-checkbox-indeterminate .mat-checkbox-checkmark-path{stroke-dashoffset:0}.mat-checkbox-indeterminate .mat-checkbox-mixedmark{opacity:1;transform:scaleX(1) rotate(0)}.mat-checkbox-unchecked .mat-checkbox-background{background-color:transparent}.mat-checkbox-disabled{cursor:default}.mat-checkbox-anim-unchecked-checked .mat-checkbox-background{animation:180ms linear 0s mat-checkbox-fade-in-background}.mat-checkbox-anim-unchecked-checked .mat-checkbox-checkmark-path{animation:180ms linear 0s mat-checkbox-unchecked-checked-checkmark-path}.mat-checkbox-anim-unchecked-indeterminate .mat-checkbox-background{animation:180ms linear 0s mat-checkbox-fade-in-background}.mat-checkbox-anim-unchecked-indeterminate .mat-checkbox-mixedmark{animation:90ms linear 0s mat-checkbox-unchecked-indeterminate-mixedmark}.mat-checkbox-anim-checked-unchecked .mat-checkbox-background{animation:180ms linear 0s mat-checkbox-fade-out-background}.mat-checkbox-anim-checked-unchecked .mat-checkbox-checkmark-path{animation:90ms linear 0s mat-checkbox-checked-unchecked-checkmark-path}.mat-checkbox-anim-checked-indeterminate .mat-checkbox-checkmark{animation:90ms linear 0s mat-checkbox-checked-indeterminate-checkmark}.mat-checkbox-anim-checked-indeterminate .mat-checkbox-mixedmark{animation:90ms linear 0s mat-checkbox-checked-indeterminate-mixedmark}.mat-checkbox-anim-indeterminate-checked .mat-checkbox-checkmark{animation:.5s linear 0s mat-checkbox-indeterminate-checked-checkmark}.mat-checkbox-anim-indeterminate-checked .mat-checkbox-mixedmark{animation:.5s linear 0s mat-checkbox-indeterminate-checked-mixedmark}.mat-checkbox-anim-indeterminate-unchecked .mat-checkbox-background{animation:180ms linear 0s mat-checkbox-fade-out-background}.mat-checkbox-anim-indeterminate-unchecked .mat-checkbox-mixedmark{animation:.3s linear 0s mat-checkbox-indeterminate-unchecked-mixedmark}.mat-checkbox-input{bottom:0;left:50%}.mat-checkbox .mat-checkbox-ripple{position:absolute;left:calc(50% - 20px);top:calc(50% - 20px);height:40px;width:40px;z-index:1;pointer-events:none}\"],\r\n                exportAs: 'matCheckbox',\r\n                host: {\r\n                    'class': 'mat-checkbox',\r\n                    '[id]': 'id',\r\n                    '[attr.tabindex]': 'null',\r\n                    '[class.mat-checkbox-indeterminate]': 'indeterminate',\r\n                    '[class.mat-checkbox-checked]': 'checked',\r\n                    '[class.mat-checkbox-disabled]': 'disabled',\r\n                    '[class.mat-checkbox-label-before]': 'labelPosition == \"before\"',\r\n                    '[class._mat-animation-noopable]': `_animationMode === 'NoopAnimations'`,\r\n                },\r\n                providers: [MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR],\r\n                inputs: ['disableRipple', 'color', 'tabIndex'],\r\n                encapsulation: ViewEncapsulation.None,\r\n                changeDetection: ChangeDetectionStrategy.OnPush\r\n            },] },\r\n];\r\n/** @nocollapse */\r\nMatCheckbox.ctorParameters = () => [\r\n    { type: ElementRef },\r\n    { type: ChangeDetectorRef },\r\n    { type: FocusMonitor },\r\n    { type: NgZone },\r\n    { type: String, decorators: [{ type: Attribute, args: ['tabindex',] }] },\r\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MAT_CHECKBOX_CLICK_ACTION,] }] },\r\n    { type: String, decorators: [{ type: Optional }, { type: Inject, args: [ANIMATION_MODULE_TYPE,] }] }\r\n];\r\nMatCheckbox.propDecorators = {\r\n    ariaLabel: [{ type: Input, args: ['aria-label',] }],\r\n    ariaLabelledby: [{ type: Input, args: ['aria-labelledby',] }],\r\n    id: [{ type: Input }],\r\n    required: [{ type: Input }],\r\n    labelPosition: [{ type: Input }],\r\n    name: [{ type: Input }],\r\n    change: [{ type: Output }],\r\n    indeterminateChange: [{ type: Output }],\r\n    value: [{ type: Input }],\r\n    _inputElement: [{ type: ViewChild, args: ['input', { static: false },] }],\r\n    ripple: [{ type: ViewChild, args: [MatRipple, { static: false },] }],\r\n    checked: [{ type: Input }],\r\n    disabled: [{ type: Input }],\r\n    indeterminate: [{ type: Input }]\r\n};\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n/** @type {?} */\r\nconst MAT_CHECKBOX_REQUIRED_VALIDATOR = {\r\n    provide: NG_VALIDATORS,\r\n    useExisting: forwardRef((/**\r\n     * @return {?}\r\n     */\r\n    () => MatCheckboxRequiredValidator)),\r\n    multi: true\r\n};\r\n/**\r\n * Validator for Material checkbox's required attribute in template-driven checkbox.\r\n * Current CheckboxRequiredValidator only work with `input type=checkbox` and does not\r\n * work with `mat-checkbox`.\r\n */\r\nclass MatCheckboxRequiredValidator extends CheckboxRequiredValidator {\r\n}\r\nMatCheckboxRequiredValidator.decorators = [\r\n    { type: Directive, args: [{\r\n                selector: `mat-checkbox[required][formControlName],\r\n             mat-checkbox[required][formControl], mat-checkbox[required][ngModel]`,\r\n                providers: [MAT_CHECKBOX_REQUIRED_VALIDATOR],\r\n            },] },\r\n];\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n/**\r\n * This module is used by both original and MDC-based checkbox implementations.\r\n */\r\n// tslint:disable-next-line:class-name\r\nclass _MatCheckboxRequiredValidatorModule {\r\n}\r\n_MatCheckboxRequiredValidatorModule.decorators = [\r\n    { type: NgModule, args: [{\r\n                exports: [MatCheckboxRequiredValidator],\r\n                declarations: [MatCheckboxRequiredValidator],\r\n            },] },\r\n];\r\nclass MatCheckboxModule {\r\n}\r\nMatCheckboxModule.decorators = [\r\n    { type: NgModule, args: [{\r\n                imports: [\r\n                    CommonModule, MatRippleModule, MatCommonModule, ObserversModule,\r\n                    _MatCheckboxRequiredValidatorModule\r\n                ],\r\n                exports: [MatCheckbox, MatCommonModule, _MatCheckboxRequiredValidatorModule],\r\n                declarations: [MatCheckbox],\r\n            },] },\r\n];\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n\r\nexport { MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR, TransitionCheckState, MatCheckboxChange, MatCheckbox, MAT_CHECKBOX_CLICK_ACTION, _MatCheckboxRequiredValidatorModule, MatCheckboxModule, MAT_CHECKBOX_REQUIRED_VALIDATOR, MatCheckboxRequiredValidator };\r\n\r\n"]}