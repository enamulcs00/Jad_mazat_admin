{"version":3,"sources":["v:/jad-admin-go/mazat_admin_panel/node_modules/@angular/material/esm2015/paginator.js"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAwBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CAmDC,gMAGC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CAoUD,aAaC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CAsBD,aAaC","file":"paginator.js","sourcesContent":["/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nimport { Injectable, Optional, SkipSelf, NgModule, ChangeDetectionStrategy, ChangeDetectorRef, Component, EventEmitter, Input, Output, ViewEncapsulation, ɵɵdefineInjectable } from '@angular/core';\r\nimport { Subject } from 'rxjs';\r\nimport { coerceNumberProperty, coerceBooleanProperty } from '@angular/cdk/coercion';\r\nimport { mixinInitialized, mixinDisabled } from '@angular/material/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatSelectModule } from '@angular/material/select';\r\nimport { MatTooltipModule } from '@angular/material/tooltip';\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n/**\r\n * To modify the labels and text displayed, create a new instance of MatPaginatorIntl and\r\n * include it in a custom provider\r\n */\r\nclass MatPaginatorIntl {\r\n    constructor() {\r\n        /**\r\n         * Stream to emit from when labels are changed. Use this to notify components when the labels have\r\n         * changed after initialization.\r\n         */\r\n        this.changes = new Subject();\r\n        /**\r\n         * A label for the page size selector.\r\n         */\r\n        this.itemsPerPageLabel = 'Items per page:';\r\n        /**\r\n         * A label for the button that increments the current page.\r\n         */\r\n        this.nextPageLabel = 'Next page';\r\n        /**\r\n         * A label for the button that decrements the current page.\r\n         */\r\n        this.previousPageLabel = 'Previous page';\r\n        /**\r\n         * A label for the button that moves to the first page.\r\n         */\r\n        this.firstPageLabel = 'First page';\r\n        /**\r\n         * A label for the button that moves to the last page.\r\n         */\r\n        this.lastPageLabel = 'Last page';\r\n        /**\r\n         * A label for the range of items within the current page and the length of the whole list.\r\n         */\r\n        this.getRangeLabel = (/**\r\n         * @param {?} page\r\n         * @param {?} pageSize\r\n         * @param {?} length\r\n         * @return {?}\r\n         */\r\n        (page, pageSize, length) => {\r\n            if (length == 0 || pageSize == 0) {\r\n                return `0 of ${length}`;\r\n            }\r\n            length = Math.max(length, 0);\r\n            /** @type {?} */\r\n            const startIndex = page * pageSize;\r\n            // If the start index exceeds the list length, do not try and fix the end index to the end.\r\n            /** @type {?} */\r\n            const endIndex = startIndex < length ?\r\n                Math.min(startIndex + pageSize, length) :\r\n                startIndex + pageSize;\r\n            return `${startIndex + 1} – ${endIndex} of ${length}`;\r\n        });\r\n    }\r\n}\r\nMatPaginatorIntl.decorators = [\r\n    { type: Injectable, args: [{ providedIn: 'root' },] },\r\n];\r\n/** @nocollapse */ MatPaginatorIntl.ngInjectableDef = ɵɵdefineInjectable({ factory: function MatPaginatorIntl_Factory() { return new MatPaginatorIntl(); }, token: MatPaginatorIntl, providedIn: \"root\" });\r\n/**\r\n * \\@docs-private\r\n * @param {?} parentIntl\r\n * @return {?}\r\n */\r\nfunction MAT_PAGINATOR_INTL_PROVIDER_FACTORY(parentIntl) {\r\n    return parentIntl || new MatPaginatorIntl();\r\n}\r\n/**\r\n * \\@docs-private\r\n * @type {?}\r\n */\r\nconst MAT_PAGINATOR_INTL_PROVIDER = {\r\n    // If there is already an MatPaginatorIntl available, use that. Otherwise, provide a new one.\r\n    provide: MatPaginatorIntl,\r\n    deps: [[new Optional(), new SkipSelf(), MatPaginatorIntl]],\r\n    useFactory: MAT_PAGINATOR_INTL_PROVIDER_FACTORY\r\n};\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n/**\r\n * The default page size if there is no page size and there are no provided page size options.\r\n * @type {?}\r\n */\r\nconst DEFAULT_PAGE_SIZE = 50;\r\n/**\r\n * Change event object that is emitted when the user selects a\r\n * different page size or navigates to another page.\r\n */\r\nclass PageEvent {\r\n}\r\n// Boilerplate for applying mixins to MatPaginator.\r\n/**\r\n * \\@docs-private\r\n */\r\nclass MatPaginatorBase {\r\n}\r\n/** @type {?} */\r\nconst _MatPaginatorBase = mixinDisabled(mixinInitialized(MatPaginatorBase));\r\n/**\r\n * Component to provide navigation between paged information. Displays the size of the current\r\n * page, user-selectable options to change that size, what items are being shown, and\r\n * navigational button to go to the previous or next page.\r\n */\r\nclass MatPaginator extends _MatPaginatorBase {\r\n    /**\r\n     * @param {?} _intl\r\n     * @param {?} _changeDetectorRef\r\n     */\r\n    constructor(_intl, _changeDetectorRef) {\r\n        super();\r\n        this._intl = _intl;\r\n        this._changeDetectorRef = _changeDetectorRef;\r\n        this._pageIndex = 0;\r\n        this._length = 0;\r\n        this._pageSizeOptions = [];\r\n        this._hidePageSize = false;\r\n        this._showFirstLastButtons = false;\r\n        /**\r\n         * Event emitted when the paginator changes the page size or page index.\r\n         */\r\n        this.page = new EventEmitter();\r\n        this._intlChanges = _intl.changes.subscribe((/**\r\n         * @return {?}\r\n         */\r\n        () => this._changeDetectorRef.markForCheck()));\r\n    }\r\n    /**\r\n     * The zero-based page index of the displayed list of items. Defaulted to 0.\r\n     * @return {?}\r\n     */\r\n    get pageIndex() { return this._pageIndex; }\r\n    /**\r\n     * @param {?} value\r\n     * @return {?}\r\n     */\r\n    set pageIndex(value) {\r\n        this._pageIndex = Math.max(coerceNumberProperty(value), 0);\r\n        this._changeDetectorRef.markForCheck();\r\n    }\r\n    /**\r\n     * The length of the total number of items that are being paginated. Defaulted to 0.\r\n     * @return {?}\r\n     */\r\n    get length() { return this._length; }\r\n    /**\r\n     * @param {?} value\r\n     * @return {?}\r\n     */\r\n    set length(value) {\r\n        this._length = coerceNumberProperty(value);\r\n        this._changeDetectorRef.markForCheck();\r\n    }\r\n    /**\r\n     * Number of items to display on a page. By default set to 50.\r\n     * @return {?}\r\n     */\r\n    get pageSize() { return this._pageSize; }\r\n    /**\r\n     * @param {?} value\r\n     * @return {?}\r\n     */\r\n    set pageSize(value) {\r\n        this._pageSize = Math.max(coerceNumberProperty(value), 0);\r\n        this._updateDisplayedPageSizeOptions();\r\n    }\r\n    /**\r\n     * The set of provided page size options to display to the user.\r\n     * @return {?}\r\n     */\r\n    get pageSizeOptions() { return this._pageSizeOptions; }\r\n    /**\r\n     * @param {?} value\r\n     * @return {?}\r\n     */\r\n    set pageSizeOptions(value) {\r\n        this._pageSizeOptions = (value || []).map((/**\r\n         * @param {?} p\r\n         * @return {?}\r\n         */\r\n        p => coerceNumberProperty(p)));\r\n        this._updateDisplayedPageSizeOptions();\r\n    }\r\n    /**\r\n     * Whether to hide the page size selection UI from the user.\r\n     * @return {?}\r\n     */\r\n    get hidePageSize() { return this._hidePageSize; }\r\n    /**\r\n     * @param {?} value\r\n     * @return {?}\r\n     */\r\n    set hidePageSize(value) {\r\n        this._hidePageSize = coerceBooleanProperty(value);\r\n    }\r\n    /**\r\n     * Whether to show the first/last buttons UI to the user.\r\n     * @return {?}\r\n     */\r\n    get showFirstLastButtons() { return this._showFirstLastButtons; }\r\n    /**\r\n     * @param {?} value\r\n     * @return {?}\r\n     */\r\n    set showFirstLastButtons(value) {\r\n        this._showFirstLastButtons = coerceBooleanProperty(value);\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    ngOnInit() {\r\n        this._initialized = true;\r\n        this._updateDisplayedPageSizeOptions();\r\n        this._markInitialized();\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    ngOnDestroy() {\r\n        this._intlChanges.unsubscribe();\r\n    }\r\n    /**\r\n     * Advances to the next page if it exists.\r\n     * @return {?}\r\n     */\r\n    nextPage() {\r\n        if (!this.hasNextPage()) {\r\n            return;\r\n        }\r\n        /** @type {?} */\r\n        const previousPageIndex = this.pageIndex;\r\n        this.pageIndex++;\r\n        this._emitPageEvent(previousPageIndex);\r\n    }\r\n    /**\r\n     * Move back to the previous page if it exists.\r\n     * @return {?}\r\n     */\r\n    previousPage() {\r\n        if (!this.hasPreviousPage()) {\r\n            return;\r\n        }\r\n        /** @type {?} */\r\n        const previousPageIndex = this.pageIndex;\r\n        this.pageIndex--;\r\n        this._emitPageEvent(previousPageIndex);\r\n    }\r\n    /**\r\n     * Move to the first page if not already there.\r\n     * @return {?}\r\n     */\r\n    firstPage() {\r\n        // hasPreviousPage being false implies at the start\r\n        if (!this.hasPreviousPage()) {\r\n            return;\r\n        }\r\n        /** @type {?} */\r\n        const previousPageIndex = this.pageIndex;\r\n        this.pageIndex = 0;\r\n        this._emitPageEvent(previousPageIndex);\r\n    }\r\n    /**\r\n     * Move to the last page if not already there.\r\n     * @return {?}\r\n     */\r\n    lastPage() {\r\n        // hasNextPage being false implies at the end\r\n        if (!this.hasNextPage()) {\r\n            return;\r\n        }\r\n        /** @type {?} */\r\n        const previousPageIndex = this.pageIndex;\r\n        this.pageIndex = this.getNumberOfPages() - 1;\r\n        this._emitPageEvent(previousPageIndex);\r\n    }\r\n    /**\r\n     * Whether there is a previous page.\r\n     * @return {?}\r\n     */\r\n    hasPreviousPage() {\r\n        return this.pageIndex >= 1 && this.pageSize != 0;\r\n    }\r\n    /**\r\n     * Whether there is a next page.\r\n     * @return {?}\r\n     */\r\n    hasNextPage() {\r\n        /** @type {?} */\r\n        const maxPageIndex = this.getNumberOfPages() - 1;\r\n        return this.pageIndex < maxPageIndex && this.pageSize != 0;\r\n    }\r\n    /**\r\n     * Calculate the number of pages\r\n     * @return {?}\r\n     */\r\n    getNumberOfPages() {\r\n        if (!this.pageSize) {\r\n            return 0;\r\n        }\r\n        return Math.ceil(this.length / this.pageSize);\r\n    }\r\n    /**\r\n     * Changes the page size so that the first item displayed on the page will still be\r\n     * displayed using the new page size.\r\n     *\r\n     * For example, if the page size is 10 and on the second page (items indexed 10-19) then\r\n     * switching so that the page size is 5 will set the third page as the current page so\r\n     * that the 10th item will still be displayed.\r\n     * @param {?} pageSize\r\n     * @return {?}\r\n     */\r\n    _changePageSize(pageSize) {\r\n        // Current page needs to be updated to reflect the new page size. Navigate to the page\r\n        // containing the previous page's first item.\r\n        /** @type {?} */\r\n        const startIndex = this.pageIndex * this.pageSize;\r\n        /** @type {?} */\r\n        const previousPageIndex = this.pageIndex;\r\n        this.pageIndex = Math.floor(startIndex / pageSize) || 0;\r\n        this.pageSize = pageSize;\r\n        this._emitPageEvent(previousPageIndex);\r\n    }\r\n    /**\r\n     * Checks whether the buttons for going forwards should be disabled.\r\n     * @return {?}\r\n     */\r\n    _nextButtonsDisabled() {\r\n        return this.disabled || !this.hasNextPage();\r\n    }\r\n    /**\r\n     * Checks whether the buttons for going backwards should be disabled.\r\n     * @return {?}\r\n     */\r\n    _previousButtonsDisabled() {\r\n        return this.disabled || !this.hasPreviousPage();\r\n    }\r\n    /**\r\n     * Updates the list of page size options to display to the user. Includes making sure that\r\n     * the page size is an option and that the list is sorted.\r\n     * @private\r\n     * @return {?}\r\n     */\r\n    _updateDisplayedPageSizeOptions() {\r\n        if (!this._initialized) {\r\n            return;\r\n        }\r\n        // If no page size is provided, use the first page size option or the default page size.\r\n        if (!this.pageSize) {\r\n            this._pageSize = this.pageSizeOptions.length != 0 ?\r\n                this.pageSizeOptions[0] :\r\n                DEFAULT_PAGE_SIZE;\r\n        }\r\n        this._displayedPageSizeOptions = this.pageSizeOptions.slice();\r\n        if (this._displayedPageSizeOptions.indexOf(this.pageSize) === -1) {\r\n            this._displayedPageSizeOptions.push(this.pageSize);\r\n        }\r\n        // Sort the numbers using a number-specific sort function.\r\n        this._displayedPageSizeOptions.sort((/**\r\n         * @param {?} a\r\n         * @param {?} b\r\n         * @return {?}\r\n         */\r\n        (a, b) => a - b));\r\n        this._changeDetectorRef.markForCheck();\r\n    }\r\n    /**\r\n     * Emits an event notifying that a change of the paginator's properties has been triggered.\r\n     * @private\r\n     * @param {?} previousPageIndex\r\n     * @return {?}\r\n     */\r\n    _emitPageEvent(previousPageIndex) {\r\n        this.page.emit({\r\n            previousPageIndex,\r\n            pageIndex: this.pageIndex,\r\n            pageSize: this.pageSize,\r\n            length: this.length\r\n        });\r\n    }\r\n}\r\nMatPaginator.decorators = [\r\n    { type: Component, args: [{selector: 'mat-paginator',\r\n                exportAs: 'matPaginator',\r\n                template: \"<div class=\\\"mat-paginator-outer-container\\\"><div class=\\\"mat-paginator-container\\\"><div class=\\\"mat-paginator-page-size\\\" *ngIf=\\\"!hidePageSize\\\"><div class=\\\"mat-paginator-page-size-label\\\">{{_intl.itemsPerPageLabel}}</div><mat-form-field *ngIf=\\\"_displayedPageSizeOptions.length > 1\\\" [color]=\\\"color\\\" class=\\\"mat-paginator-page-size-select\\\"><mat-select [value]=\\\"pageSize\\\" [disabled]=\\\"disabled\\\" [aria-label]=\\\"_intl.itemsPerPageLabel\\\" (selectionChange)=\\\"_changePageSize($event.value)\\\"><mat-option *ngFor=\\\"let pageSizeOption of _displayedPageSizeOptions\\\" [value]=\\\"pageSizeOption\\\">{{pageSizeOption}}</mat-option></mat-select></mat-form-field><div *ngIf=\\\"_displayedPageSizeOptions.length <= 1\\\">{{pageSize}}</div></div><div class=\\\"mat-paginator-range-actions\\\"><div class=\\\"mat-paginator-range-label\\\">{{_intl.getRangeLabel(pageIndex, pageSize, length)}}</div><button mat-icon-button type=\\\"button\\\" class=\\\"mat-paginator-navigation-first\\\" (click)=\\\"firstPage()\\\" [attr.aria-label]=\\\"_intl.firstPageLabel\\\" [matTooltip]=\\\"_intl.firstPageLabel\\\" [matTooltipDisabled]=\\\"_previousButtonsDisabled()\\\" [matTooltipPosition]=\\\"'above'\\\" [disabled]=\\\"_previousButtonsDisabled()\\\" *ngIf=\\\"showFirstLastButtons\\\"><svg class=\\\"mat-paginator-icon\\\" viewBox=\\\"0 0 24 24\\\" focusable=\\\"false\\\"><path d=\\\"M18.41 16.59L13.82 12l4.59-4.59L17 6l-6 6 6 6zM6 6h2v12H6z\\\"/></svg></button> <button mat-icon-button type=\\\"button\\\" class=\\\"mat-paginator-navigation-previous\\\" (click)=\\\"previousPage()\\\" [attr.aria-label]=\\\"_intl.previousPageLabel\\\" [matTooltip]=\\\"_intl.previousPageLabel\\\" [matTooltipDisabled]=\\\"_previousButtonsDisabled()\\\" [matTooltipPosition]=\\\"'above'\\\" [disabled]=\\\"_previousButtonsDisabled()\\\"><svg class=\\\"mat-paginator-icon\\\" viewBox=\\\"0 0 24 24\\\" focusable=\\\"false\\\"><path d=\\\"M15.41 7.41L14 6l-6 6 6 6 1.41-1.41L10.83 12z\\\"/></svg></button> <button mat-icon-button type=\\\"button\\\" class=\\\"mat-paginator-navigation-next\\\" (click)=\\\"nextPage()\\\" [attr.aria-label]=\\\"_intl.nextPageLabel\\\" [matTooltip]=\\\"_intl.nextPageLabel\\\" [matTooltipDisabled]=\\\"_nextButtonsDisabled()\\\" [matTooltipPosition]=\\\"'above'\\\" [disabled]=\\\"_nextButtonsDisabled()\\\"><svg class=\\\"mat-paginator-icon\\\" viewBox=\\\"0 0 24 24\\\" focusable=\\\"false\\\"><path d=\\\"M10 6L8.59 7.41 13.17 12l-4.58 4.59L10 18l6-6z\\\"/></svg></button> <button mat-icon-button type=\\\"button\\\" class=\\\"mat-paginator-navigation-last\\\" (click)=\\\"lastPage()\\\" [attr.aria-label]=\\\"_intl.lastPageLabel\\\" [matTooltip]=\\\"_intl.lastPageLabel\\\" [matTooltipDisabled]=\\\"_nextButtonsDisabled()\\\" [matTooltipPosition]=\\\"'above'\\\" [disabled]=\\\"_nextButtonsDisabled()\\\" *ngIf=\\\"showFirstLastButtons\\\"><svg class=\\\"mat-paginator-icon\\\" viewBox=\\\"0 0 24 24\\\" focusable=\\\"false\\\"><path d=\\\"M5.59 7.41L10.18 12l-4.59 4.59L7 18l6-6-6-6zM16 6h2v12h-2z\\\"/></svg></button></div></div></div>\",\r\n                styles: [\".mat-paginator{display:block}.mat-paginator-outer-container{display:flex}.mat-paginator-container{display:flex;align-items:center;justify-content:flex-end;min-height:56px;padding:0 8px;flex-wrap:wrap-reverse;width:100%}.mat-paginator-page-size{display:flex;align-items:baseline;margin-right:8px}[dir=rtl] .mat-paginator-page-size{margin-right:0;margin-left:8px}.mat-paginator-page-size-label{margin:0 4px}.mat-paginator-page-size-select{margin:6px 4px 0 4px;width:56px}.mat-paginator-page-size-select.mat-form-field-appearance-outline{width:64px}.mat-paginator-page-size-select.mat-form-field-appearance-fill{width:64px}.mat-paginator-range-label{margin:0 32px 0 24px}.mat-paginator-range-actions{display:flex;align-items:center}.mat-paginator-icon{width:28px;fill:currentColor}[dir=rtl] .mat-paginator-icon{transform:rotate(180deg)}\"],\r\n                inputs: ['disabled'],\r\n                host: {\r\n                    'class': 'mat-paginator',\r\n                },\r\n                changeDetection: ChangeDetectionStrategy.OnPush,\r\n                encapsulation: ViewEncapsulation.None,\r\n            },] },\r\n];\r\n/** @nocollapse */\r\nMatPaginator.ctorParameters = () => [\r\n    { type: MatPaginatorIntl },\r\n    { type: ChangeDetectorRef }\r\n];\r\nMatPaginator.propDecorators = {\r\n    color: [{ type: Input }],\r\n    pageIndex: [{ type: Input }],\r\n    length: [{ type: Input }],\r\n    pageSize: [{ type: Input }],\r\n    pageSizeOptions: [{ type: Input }],\r\n    hidePageSize: [{ type: Input }],\r\n    showFirstLastButtons: [{ type: Input }],\r\n    page: [{ type: Output }]\r\n};\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\nclass MatPaginatorModule {\r\n}\r\nMatPaginatorModule.decorators = [\r\n    { type: NgModule, args: [{\r\n                imports: [\r\n                    CommonModule,\r\n                    MatButtonModule,\r\n                    MatSelectModule,\r\n                    MatTooltipModule,\r\n                ],\r\n                exports: [MatPaginator],\r\n                declarations: [MatPaginator],\r\n                providers: [MAT_PAGINATOR_INTL_PROVIDER],\r\n            },] },\r\n];\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n\r\nexport { MatPaginatorModule, PageEvent, MatPaginator, MAT_PAGINATOR_INTL_PROVIDER_FACTORY, MatPaginatorIntl, MAT_PAGINATOR_INTL_PROVIDER };\r\n\r\n"]}