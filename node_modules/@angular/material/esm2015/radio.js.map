{"version":3,"sources":["v:/jad-admin-go/mazat_admin_panel/node_modules/@angular/material/esm2015/radio.js"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAqBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CA2TC,aAWC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CA6TD,aA6BC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CAgCD,2BAOC","file":"radio.js","sourcesContent":["/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nimport { FocusMonitor } from '@angular/cdk/a11y';\r\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\r\nimport { UniqueSelectionDispatcher } from '@angular/cdk/collections';\r\nimport { ChangeDetectionStrategy, ChangeDetectorRef, Component, ContentChildren, Directive, ElementRef, EventEmitter, forwardRef, Inject, InjectionToken, Input, Optional, Output, ViewChild, ViewEncapsulation, NgModule } from '@angular/core';\r\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\r\nimport { mixinDisableRipple, mixinTabIndex, MatCommonModule, MatRippleModule } from '@angular/material/core';\r\nimport { ANIMATION_MODULE_TYPE } from '@angular/platform-browser/animations';\r\nimport { CommonModule } from '@angular/common';\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n/** @type {?} */\r\nconst MAT_RADIO_DEFAULT_OPTIONS = new InjectionToken('mat-radio-default-options', {\r\n    providedIn: 'root',\r\n    factory: MAT_RADIO_DEFAULT_OPTIONS_FACTORY\r\n});\r\n/**\r\n * @return {?}\r\n */\r\nfunction MAT_RADIO_DEFAULT_OPTIONS_FACTORY() {\r\n    return {\r\n        color: 'accent'\r\n    };\r\n}\r\n// Increasing integer for generating unique ids for radio components.\r\n/** @type {?} */\r\nlet nextUniqueId = 0;\r\n/**\r\n * Provider Expression that allows mat-radio-group to register as a ControlValueAccessor. This\r\n * allows it to support [(ngModel)] and ngControl.\r\n * \\@docs-private\r\n * @type {?}\r\n */\r\nconst MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR = {\r\n    provide: NG_VALUE_ACCESSOR,\r\n    useExisting: forwardRef((/**\r\n     * @return {?}\r\n     */\r\n    () => MatRadioGroup)),\r\n    multi: true\r\n};\r\n/**\r\n * Change event object emitted by MatRadio and MatRadioGroup.\r\n */\r\nclass MatRadioChange {\r\n    /**\r\n     * @param {?} source\r\n     * @param {?} value\r\n     */\r\n    constructor(source, value) {\r\n        this.source = source;\r\n        this.value = value;\r\n    }\r\n}\r\n/**\r\n * A group of radio buttons. May contain one or more `<mat-radio-button>` elements.\r\n */\r\nclass MatRadioGroup {\r\n    /**\r\n     * @param {?} _changeDetector\r\n     */\r\n    constructor(_changeDetector) {\r\n        this._changeDetector = _changeDetector;\r\n        /**\r\n         * Selected value for the radio group.\r\n         */\r\n        this._value = null;\r\n        /**\r\n         * The HTML name attribute applied to radio buttons in this group.\r\n         */\r\n        this._name = `mat-radio-group-${nextUniqueId++}`;\r\n        /**\r\n         * The currently selected radio button. Should match value.\r\n         */\r\n        this._selected = null;\r\n        /**\r\n         * Whether the `value` has been set to its initial value.\r\n         */\r\n        this._isInitialized = false;\r\n        /**\r\n         * Whether the labels should appear after or before the radio-buttons. Defaults to 'after'\r\n         */\r\n        this._labelPosition = 'after';\r\n        /**\r\n         * Whether the radio group is disabled.\r\n         */\r\n        this._disabled = false;\r\n        /**\r\n         * Whether the radio group is required.\r\n         */\r\n        this._required = false;\r\n        /**\r\n         * The method to be called in order to update ngModel\r\n         */\r\n        this._controlValueAccessorChangeFn = (/**\r\n         * @return {?}\r\n         */\r\n        () => { });\r\n        /**\r\n         * onTouch function registered via registerOnTouch (ControlValueAccessor).\r\n         * \\@docs-private\r\n         */\r\n        this.onTouched = (/**\r\n         * @return {?}\r\n         */\r\n        () => { });\r\n        /**\r\n         * Event emitted when the group value changes.\r\n         * Change events are only emitted when the value changes due to user interaction with\r\n         * a radio button (the same behavior as `<input type-\"radio\">`).\r\n         */\r\n        this.change = new EventEmitter();\r\n    }\r\n    /**\r\n     * Name of the radio button group. All radio buttons inside this group will use this name.\r\n     * @return {?}\r\n     */\r\n    get name() { return this._name; }\r\n    /**\r\n     * @param {?} value\r\n     * @return {?}\r\n     */\r\n    set name(value) {\r\n        this._name = value;\r\n        this._updateRadioButtonNames();\r\n    }\r\n    /**\r\n     * Whether the labels should appear after or before the radio-buttons. Defaults to 'after'\r\n     * @return {?}\r\n     */\r\n    get labelPosition() {\r\n        return this._labelPosition;\r\n    }\r\n    /**\r\n     * @param {?} v\r\n     * @return {?}\r\n     */\r\n    set labelPosition(v) {\r\n        this._labelPosition = v === 'before' ? 'before' : 'after';\r\n        this._markRadiosForCheck();\r\n    }\r\n    /**\r\n     * Value for the radio-group. Should equal the value of the selected radio button if there is\r\n     * a corresponding radio button with a matching value. If there is not such a corresponding\r\n     * radio button, this value persists to be applied in case a new radio button is added with a\r\n     * matching value.\r\n     * @return {?}\r\n     */\r\n    get value() { return this._value; }\r\n    /**\r\n     * @param {?} newValue\r\n     * @return {?}\r\n     */\r\n    set value(newValue) {\r\n        if (this._value !== newValue) {\r\n            // Set this before proceeding to ensure no circular loop occurs with selection.\r\n            this._value = newValue;\r\n            this._updateSelectedRadioFromValue();\r\n            this._checkSelectedRadioButton();\r\n        }\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    _checkSelectedRadioButton() {\r\n        if (this._selected && !this._selected.checked) {\r\n            this._selected.checked = true;\r\n        }\r\n    }\r\n    /**\r\n     * The currently selected radio button. If set to a new radio button, the radio group value\r\n     * will be updated to match the new selected button.\r\n     * @return {?}\r\n     */\r\n    get selected() { return this._selected; }\r\n    /**\r\n     * @param {?} selected\r\n     * @return {?}\r\n     */\r\n    set selected(selected) {\r\n        this._selected = selected;\r\n        this.value = selected ? selected.value : null;\r\n        this._checkSelectedRadioButton();\r\n    }\r\n    /**\r\n     * Whether the radio group is disabled\r\n     * @return {?}\r\n     */\r\n    get disabled() { return this._disabled; }\r\n    /**\r\n     * @param {?} value\r\n     * @return {?}\r\n     */\r\n    set disabled(value) {\r\n        this._disabled = coerceBooleanProperty(value);\r\n        this._markRadiosForCheck();\r\n    }\r\n    /**\r\n     * Whether the radio group is required\r\n     * @return {?}\r\n     */\r\n    get required() { return this._required; }\r\n    /**\r\n     * @param {?} value\r\n     * @return {?}\r\n     */\r\n    set required(value) {\r\n        this._required = coerceBooleanProperty(value);\r\n        this._markRadiosForCheck();\r\n    }\r\n    /**\r\n     * Initialize properties once content children are available.\r\n     * This allows us to propagate relevant attributes to associated buttons.\r\n     * @return {?}\r\n     */\r\n    ngAfterContentInit() {\r\n        // Mark this component as initialized in AfterContentInit because the initial value can\r\n        // possibly be set by NgModel on MatRadioGroup, and it is possible that the OnInit of the\r\n        // NgModel occurs *after* the OnInit of the MatRadioGroup.\r\n        this._isInitialized = true;\r\n    }\r\n    /**\r\n     * Mark this group as being \"touched\" (for ngModel). Meant to be called by the contained\r\n     * radio buttons upon their blur.\r\n     * @return {?}\r\n     */\r\n    _touch() {\r\n        if (this.onTouched) {\r\n            this.onTouched();\r\n        }\r\n    }\r\n    /**\r\n     * @private\r\n     * @return {?}\r\n     */\r\n    _updateRadioButtonNames() {\r\n        if (this._radios) {\r\n            this._radios.forEach((/**\r\n             * @param {?} radio\r\n             * @return {?}\r\n             */\r\n            radio => {\r\n                radio.name = this.name;\r\n                radio._markForCheck();\r\n            }));\r\n        }\r\n    }\r\n    /**\r\n     * Updates the `selected` radio button from the internal _value state.\r\n     * @private\r\n     * @return {?}\r\n     */\r\n    _updateSelectedRadioFromValue() {\r\n        // If the value already matches the selected radio, do nothing.\r\n        /** @type {?} */\r\n        const isAlreadySelected = this._selected !== null && this._selected.value === this._value;\r\n        if (this._radios && !isAlreadySelected) {\r\n            this._selected = null;\r\n            this._radios.forEach((/**\r\n             * @param {?} radio\r\n             * @return {?}\r\n             */\r\n            radio => {\r\n                radio.checked = this.value === radio.value;\r\n                if (radio.checked) {\r\n                    this._selected = radio;\r\n                }\r\n            }));\r\n        }\r\n    }\r\n    /**\r\n     * Dispatch change event with current selection and group value.\r\n     * @return {?}\r\n     */\r\n    _emitChangeEvent() {\r\n        if (this._isInitialized) {\r\n            this.change.emit(new MatRadioChange((/** @type {?} */ (this._selected)), this._value));\r\n        }\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    _markRadiosForCheck() {\r\n        if (this._radios) {\r\n            this._radios.forEach((/**\r\n             * @param {?} radio\r\n             * @return {?}\r\n             */\r\n            radio => radio._markForCheck()));\r\n        }\r\n    }\r\n    /**\r\n     * Sets the model value. Implemented as part of ControlValueAccessor.\r\n     * @param {?} value\r\n     * @return {?}\r\n     */\r\n    writeValue(value) {\r\n        this.value = value;\r\n        this._changeDetector.markForCheck();\r\n    }\r\n    /**\r\n     * Registers a callback to be triggered when the model value changes.\r\n     * Implemented as part of ControlValueAccessor.\r\n     * @param {?} fn Callback to be registered.\r\n     * @return {?}\r\n     */\r\n    registerOnChange(fn) {\r\n        this._controlValueAccessorChangeFn = fn;\r\n    }\r\n    /**\r\n     * Registers a callback to be triggered when the control is touched.\r\n     * Implemented as part of ControlValueAccessor.\r\n     * @param {?} fn Callback to be registered.\r\n     * @return {?}\r\n     */\r\n    registerOnTouched(fn) {\r\n        this.onTouched = fn;\r\n    }\r\n    /**\r\n     * Sets the disabled state of the control. Implemented as a part of ControlValueAccessor.\r\n     * @param {?} isDisabled Whether the control should be disabled.\r\n     * @return {?}\r\n     */\r\n    setDisabledState(isDisabled) {\r\n        this.disabled = isDisabled;\r\n        this._changeDetector.markForCheck();\r\n    }\r\n}\r\nMatRadioGroup.decorators = [\r\n    { type: Directive, args: [{\r\n                selector: 'mat-radio-group',\r\n                exportAs: 'matRadioGroup',\r\n                providers: [MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR],\r\n                host: {\r\n                    'role': 'radiogroup',\r\n                    'class': 'mat-radio-group',\r\n                },\r\n            },] },\r\n];\r\n/** @nocollapse */\r\nMatRadioGroup.ctorParameters = () => [\r\n    { type: ChangeDetectorRef }\r\n];\r\nMatRadioGroup.propDecorators = {\r\n    change: [{ type: Output }],\r\n    _radios: [{ type: ContentChildren, args: [forwardRef((/**\r\n                 * @return {?}\r\n                 */\r\n                () => MatRadioButton)), { descendants: true },] }],\r\n    color: [{ type: Input }],\r\n    name: [{ type: Input }],\r\n    labelPosition: [{ type: Input }],\r\n    value: [{ type: Input }],\r\n    selected: [{ type: Input }],\r\n    disabled: [{ type: Input }],\r\n    required: [{ type: Input }]\r\n};\r\n// Boilerplate for applying mixins to MatRadioButton.\r\n/**\r\n * \\@docs-private\r\n */\r\nclass MatRadioButtonBase {\r\n    /**\r\n     * @param {?} _elementRef\r\n     */\r\n    constructor(_elementRef) {\r\n        this._elementRef = _elementRef;\r\n    }\r\n}\r\n// As per Material design specifications the selection control radio should use the accent color\r\n// palette by default. https://material.io/guidelines/components/selection-controls.html\r\n/** @type {?} */\r\nconst _MatRadioButtonMixinBase = mixinDisableRipple(mixinTabIndex(MatRadioButtonBase));\r\n/**\r\n * A Material design radio-button. Typically placed inside of `<mat-radio-group>` elements.\r\n */\r\nclass MatRadioButton extends _MatRadioButtonMixinBase {\r\n    /**\r\n     * @param {?} radioGroup\r\n     * @param {?} elementRef\r\n     * @param {?} _changeDetector\r\n     * @param {?} _focusMonitor\r\n     * @param {?} _radioDispatcher\r\n     * @param {?=} _animationMode\r\n     * @param {?=} _providerOverride\r\n     */\r\n    constructor(radioGroup, elementRef, _changeDetector, _focusMonitor, _radioDispatcher, _animationMode, _providerOverride) {\r\n        super(elementRef);\r\n        this._changeDetector = _changeDetector;\r\n        this._focusMonitor = _focusMonitor;\r\n        this._radioDispatcher = _radioDispatcher;\r\n        this._animationMode = _animationMode;\r\n        this._providerOverride = _providerOverride;\r\n        this._uniqueId = `mat-radio-${++nextUniqueId}`;\r\n        /**\r\n         * The unique ID for the radio button.\r\n         */\r\n        this.id = this._uniqueId;\r\n        /**\r\n         * Event emitted when the checked state of this radio button changes.\r\n         * Change events are only emitted when the value changes due to user interaction with\r\n         * the radio button (the same behavior as `<input type-\"radio\">`).\r\n         */\r\n        this.change = new EventEmitter();\r\n        /**\r\n         * Whether this radio is checked.\r\n         */\r\n        this._checked = false;\r\n        /**\r\n         * Value assigned to this radio.\r\n         */\r\n        this._value = null;\r\n        /**\r\n         * Unregister function for _radioDispatcher\r\n         */\r\n        this._removeUniqueSelectionListener = (/**\r\n         * @return {?}\r\n         */\r\n        () => { });\r\n        // Assertions. Ideally these should be stripped out by the compiler.\r\n        // TODO(jelbourn): Assert that there's no name binding AND a parent radio group.\r\n        this.radioGroup = radioGroup;\r\n        this._removeUniqueSelectionListener =\r\n            _radioDispatcher.listen((/**\r\n             * @param {?} id\r\n             * @param {?} name\r\n             * @return {?}\r\n             */\r\n            (id, name) => {\r\n                if (id !== this.id && name === this.name) {\r\n                    this.checked = false;\r\n                }\r\n            }));\r\n    }\r\n    /**\r\n     * Whether this radio button is checked.\r\n     * @return {?}\r\n     */\r\n    get checked() { return this._checked; }\r\n    /**\r\n     * @param {?} value\r\n     * @return {?}\r\n     */\r\n    set checked(value) {\r\n        /** @type {?} */\r\n        const newCheckedState = coerceBooleanProperty(value);\r\n        if (this._checked !== newCheckedState) {\r\n            this._checked = newCheckedState;\r\n            if (newCheckedState && this.radioGroup && this.radioGroup.value !== this.value) {\r\n                this.radioGroup.selected = this;\r\n            }\r\n            else if (!newCheckedState && this.radioGroup && this.radioGroup.value === this.value) {\r\n                // When unchecking the selected radio button, update the selected radio\r\n                // property on the group.\r\n                this.radioGroup.selected = null;\r\n            }\r\n            if (newCheckedState) {\r\n                // Notify all radio buttons with the same name to un-check.\r\n                this._radioDispatcher.notify(this.id, this.name);\r\n            }\r\n            this._changeDetector.markForCheck();\r\n        }\r\n    }\r\n    /**\r\n     * The value of this radio button.\r\n     * @return {?}\r\n     */\r\n    get value() { return this._value; }\r\n    /**\r\n     * @param {?} value\r\n     * @return {?}\r\n     */\r\n    set value(value) {\r\n        if (this._value !== value) {\r\n            this._value = value;\r\n            if (this.radioGroup !== null) {\r\n                if (!this.checked) {\r\n                    // Update checked when the value changed to match the radio group's value\r\n                    this.checked = this.radioGroup.value === value;\r\n                }\r\n                if (this.checked) {\r\n                    this.radioGroup.selected = this;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Whether the label should appear after or before the radio button. Defaults to 'after'\r\n     * @return {?}\r\n     */\r\n    get labelPosition() {\r\n        return this._labelPosition || (this.radioGroup && this.radioGroup.labelPosition) || 'after';\r\n    }\r\n    /**\r\n     * @param {?} value\r\n     * @return {?}\r\n     */\r\n    set labelPosition(value) {\r\n        this._labelPosition = value;\r\n    }\r\n    /**\r\n     * Whether the radio button is disabled.\r\n     * @return {?}\r\n     */\r\n    get disabled() {\r\n        return this._disabled || (this.radioGroup !== null && this.radioGroup.disabled);\r\n    }\r\n    /**\r\n     * @param {?} value\r\n     * @return {?}\r\n     */\r\n    set disabled(value) {\r\n        /** @type {?} */\r\n        const newDisabledState = coerceBooleanProperty(value);\r\n        if (this._disabled !== newDisabledState) {\r\n            this._disabled = newDisabledState;\r\n            this._changeDetector.markForCheck();\r\n        }\r\n    }\r\n    /**\r\n     * Whether the radio button is required.\r\n     * @return {?}\r\n     */\r\n    get required() {\r\n        return this._required || (this.radioGroup && this.radioGroup.required);\r\n    }\r\n    /**\r\n     * @param {?} value\r\n     * @return {?}\r\n     */\r\n    set required(value) {\r\n        this._required = coerceBooleanProperty(value);\r\n    }\r\n    /**\r\n     * Theme color of the radio button.\r\n     * @return {?}\r\n     */\r\n    get color() {\r\n        return this._color ||\r\n            (this.radioGroup && this.radioGroup.color) ||\r\n            this._providerOverride && this._providerOverride.color || 'accent';\r\n    }\r\n    /**\r\n     * @param {?} newValue\r\n     * @return {?}\r\n     */\r\n    set color(newValue) { this._color = newValue; }\r\n    /**\r\n     * ID of the native input element inside `<mat-radio-button>`\r\n     * @return {?}\r\n     */\r\n    get inputId() { return `${this.id || this._uniqueId}-input`; }\r\n    /**\r\n     * Focuses the radio button.\r\n     * @param {?=} options\r\n     * @return {?}\r\n     */\r\n    focus(options) {\r\n        this._focusMonitor.focusVia(this._inputElement, 'keyboard', options);\r\n    }\r\n    /**\r\n     * Marks the radio button as needing checking for change detection.\r\n     * This method is exposed because the parent radio group will directly\r\n     * update bound properties of the radio button.\r\n     * @return {?}\r\n     */\r\n    _markForCheck() {\r\n        // When group value changes, the button will not be notified. Use `markForCheck` to explicit\r\n        // update radio button's status\r\n        this._changeDetector.markForCheck();\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    ngOnInit() {\r\n        if (this.radioGroup) {\r\n            // If the radio is inside a radio group, determine if it should be checked\r\n            this.checked = this.radioGroup.value === this._value;\r\n            // Copy name from parent radio group\r\n            this.name = this.radioGroup.name;\r\n        }\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    ngAfterViewInit() {\r\n        this._focusMonitor\r\n            .monitor(this._elementRef, true)\r\n            .subscribe((/**\r\n         * @param {?} focusOrigin\r\n         * @return {?}\r\n         */\r\n        focusOrigin => {\r\n            if (!focusOrigin && this.radioGroup) {\r\n                this.radioGroup._touch();\r\n            }\r\n        }));\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    ngOnDestroy() {\r\n        this._focusMonitor.stopMonitoring(this._elementRef);\r\n        this._removeUniqueSelectionListener();\r\n    }\r\n    /**\r\n     * Dispatch change event with current value.\r\n     * @private\r\n     * @return {?}\r\n     */\r\n    _emitChangeEvent() {\r\n        this.change.emit(new MatRadioChange(this, this._value));\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    _isRippleDisabled() {\r\n        return this.disableRipple || this.disabled;\r\n    }\r\n    /**\r\n     * @param {?} event\r\n     * @return {?}\r\n     */\r\n    _onInputClick(event) {\r\n        // We have to stop propagation for click events on the visual hidden input element.\r\n        // By default, when a user clicks on a label element, a generated click event will be\r\n        // dispatched on the associated input element. Since we are using a label element as our\r\n        // root container, the click event on the `radio-button` will be executed twice.\r\n        // The real click event will bubble up, and the generated click event also tries to bubble up.\r\n        // This will lead to multiple click events.\r\n        // Preventing bubbling for the second event will solve that issue.\r\n        event.stopPropagation();\r\n    }\r\n    /**\r\n     * Triggered when the radio button received a click or the input recognized any change.\r\n     * Clicking on a label element, will trigger a change event on the associated input.\r\n     * @param {?} event\r\n     * @return {?}\r\n     */\r\n    _onInputChange(event) {\r\n        // We always have to stop propagation on the change event.\r\n        // Otherwise the change event, from the input element, will bubble up and\r\n        // emit its event object to the `change` output.\r\n        event.stopPropagation();\r\n        /** @type {?} */\r\n        const groupValueChanged = this.radioGroup && this.value !== this.radioGroup.value;\r\n        this.checked = true;\r\n        this._emitChangeEvent();\r\n        if (this.radioGroup) {\r\n            this.radioGroup._controlValueAccessorChangeFn(this.value);\r\n            if (groupValueChanged) {\r\n                this.radioGroup._emitChangeEvent();\r\n            }\r\n        }\r\n    }\r\n}\r\nMatRadioButton.decorators = [\r\n    { type: Component, args: [{selector: 'mat-radio-button',\r\n                template: \"<label [attr.for]=\\\"inputId\\\" class=\\\"mat-radio-label\\\" #label><div class=\\\"mat-radio-container\\\"><div class=\\\"mat-radio-outer-circle\\\"></div><div class=\\\"mat-radio-inner-circle\\\"></div><div mat-ripple class=\\\"mat-radio-ripple\\\" [matRippleTrigger]=\\\"label\\\" [matRippleDisabled]=\\\"_isRippleDisabled()\\\" [matRippleCentered]=\\\"true\\\" [matRippleRadius]=\\\"20\\\" [matRippleAnimation]=\\\"{enterDuration: 150}\\\"><div class=\\\"mat-ripple-element mat-radio-persistent-ripple\\\"></div></div><input #input class=\\\"mat-radio-input cdk-visually-hidden\\\" type=\\\"radio\\\" [id]=\\\"inputId\\\" [checked]=\\\"checked\\\" [disabled]=\\\"disabled\\\" [tabIndex]=\\\"tabIndex\\\" [attr.name]=\\\"name\\\" [attr.value]=\\\"value\\\" [required]=\\\"required\\\" [attr.aria-label]=\\\"ariaLabel\\\" [attr.aria-labelledby]=\\\"ariaLabelledby\\\" [attr.aria-describedby]=\\\"ariaDescribedby\\\" (change)=\\\"_onInputChange($event)\\\" (click)=\\\"_onInputClick($event)\\\"></div><div class=\\\"mat-radio-label-content\\\" [class.mat-radio-label-before]=\\\"labelPosition == 'before'\\\"><span style=\\\"display:none\\\">&nbsp;</span><ng-content></ng-content></div></label>\",\r\n                styles: [\".mat-radio-button{display:inline-block;-webkit-tap-highlight-color:transparent;outline:0}.mat-radio-label{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;cursor:pointer;display:inline-flex;align-items:center;white-space:nowrap;vertical-align:middle;width:100%}.mat-radio-container{box-sizing:border-box;display:inline-block;position:relative;width:20px;height:20px;flex-shrink:0}.mat-radio-outer-circle{box-sizing:border-box;height:20px;left:0;position:absolute;top:0;transition:border-color ease 280ms;width:20px;border-width:2px;border-style:solid;border-radius:50%}._mat-animation-noopable .mat-radio-outer-circle{transition:none}.mat-radio-inner-circle{border-radius:50%;box-sizing:border-box;height:20px;left:0;position:absolute;top:0;transition:transform ease 280ms,background-color ease 280ms;width:20px;transform:scale(.001)}._mat-animation-noopable .mat-radio-inner-circle{transition:none}.mat-radio-checked .mat-radio-inner-circle{transform:scale(.5)}@media (-ms-high-contrast:active){.mat-radio-checked .mat-radio-inner-circle{border:solid 10px}}.mat-radio-label-content{-webkit-user-select:auto;-moz-user-select:auto;-ms-user-select:auto;user-select:auto;display:inline-block;order:0;line-height:inherit;padding-left:8px;padding-right:0}[dir=rtl] .mat-radio-label-content{padding-right:8px;padding-left:0}.mat-radio-label-content.mat-radio-label-before{order:-1;padding-left:0;padding-right:8px}[dir=rtl] .mat-radio-label-content.mat-radio-label-before{padding-right:0;padding-left:8px}.mat-radio-disabled,.mat-radio-disabled .mat-radio-label{cursor:default}.mat-radio-button .mat-radio-ripple{position:absolute;left:calc(50% - 20px);top:calc(50% - 20px);height:40px;width:40px;z-index:1;pointer-events:none}.mat-radio-button .mat-radio-ripple .mat-ripple-element:not(.mat-radio-persistent-ripple){opacity:.16}.mat-radio-persistent-ripple{width:100%;height:100%;transform:none}.mat-radio-container:hover .mat-radio-persistent-ripple{opacity:.04}.mat-radio-button:not(.mat-radio-disabled).cdk-keyboard-focused .mat-radio-persistent-ripple,.mat-radio-button:not(.mat-radio-disabled).cdk-program-focused .mat-radio-persistent-ripple{opacity:.12}.mat-radio-disabled .mat-radio-container:hover .mat-radio-persistent-ripple,.mat-radio-persistent-ripple{opacity:0}@media (hover:none){.mat-radio-container:hover .mat-radio-persistent-ripple{display:none}}.mat-radio-input{bottom:0;left:50%}@media (-ms-high-contrast:active){.mat-radio-disabled{opacity:.5}}\"],\r\n                inputs: ['disableRipple', 'tabIndex'],\r\n                encapsulation: ViewEncapsulation.None,\r\n                exportAs: 'matRadioButton',\r\n                host: {\r\n                    'class': 'mat-radio-button',\r\n                    '[class.mat-radio-checked]': 'checked',\r\n                    '[class.mat-radio-disabled]': 'disabled',\r\n                    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\r\n                    '[class.mat-primary]': 'color === \"primary\"',\r\n                    '[class.mat-accent]': 'color === \"accent\"',\r\n                    '[class.mat-warn]': 'color === \"warn\"',\r\n                    // Needs to be -1 so the `focus` event still fires.\r\n                    '[attr.tabindex]': '-1',\r\n                    '[attr.id]': 'id',\r\n                    '[attr.aria-label]': 'null',\r\n                    '[attr.aria-labelledby]': 'null',\r\n                    '[attr.aria-describedby]': 'null',\r\n                    // Note: under normal conditions focus shouldn't land on this element, however it may be\r\n                    // programmatically set, for example inside of a focus trap, in this case we want to forward\r\n                    // the focus to the native element.\r\n                    '(focus)': '_inputElement.nativeElement.focus()',\r\n                },\r\n                changeDetection: ChangeDetectionStrategy.OnPush,\r\n            },] },\r\n];\r\n/** @nocollapse */\r\nMatRadioButton.ctorParameters = () => [\r\n    { type: MatRadioGroup, decorators: [{ type: Optional }] },\r\n    { type: ElementRef },\r\n    { type: ChangeDetectorRef },\r\n    { type: FocusMonitor },\r\n    { type: UniqueSelectionDispatcher },\r\n    { type: String, decorators: [{ type: Optional }, { type: Inject, args: [ANIMATION_MODULE_TYPE,] }] },\r\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MAT_RADIO_DEFAULT_OPTIONS,] }] }\r\n];\r\nMatRadioButton.propDecorators = {\r\n    id: [{ type: Input }],\r\n    name: [{ type: Input }],\r\n    ariaLabel: [{ type: Input, args: ['aria-label',] }],\r\n    ariaLabelledby: [{ type: Input, args: ['aria-labelledby',] }],\r\n    ariaDescribedby: [{ type: Input, args: ['aria-describedby',] }],\r\n    checked: [{ type: Input }],\r\n    value: [{ type: Input }],\r\n    labelPosition: [{ type: Input }],\r\n    disabled: [{ type: Input }],\r\n    required: [{ type: Input }],\r\n    color: [{ type: Input }],\r\n    change: [{ type: Output }],\r\n    _inputElement: [{ type: ViewChild, args: ['input', { static: false },] }]\r\n};\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\nclass MatRadioModule {\r\n}\r\nMatRadioModule.decorators = [\r\n    { type: NgModule, args: [{\r\n                imports: [CommonModule, MatRippleModule, MatCommonModule],\r\n                exports: [MatRadioGroup, MatRadioButton, MatCommonModule],\r\n                declarations: [MatRadioGroup, MatRadioButton],\r\n            },] },\r\n];\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n\r\nexport { MatRadioModule, MAT_RADIO_DEFAULT_OPTIONS_FACTORY, MAT_RADIO_DEFAULT_OPTIONS, MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR, MatRadioChange, MatRadioGroup, MatRadioButton };\r\n\r\n"]}