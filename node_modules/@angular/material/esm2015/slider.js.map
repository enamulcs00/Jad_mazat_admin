{"version":3,"sources":["v:/jad-admin-go/mazat_admin_panel/node_modules/@angular/material/esm2015/slider.js"],"names":[],"mappingsk0BC,aA8CC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CA+BD,2BAQC","file":"slider.js","sourcesContent":["/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nimport { FocusMonitor } from '@angular/cdk/a11y';\r\nimport { Directionality } from '@angular/cdk/bidi';\r\nimport { coerceBooleanProperty, coerceNumberProperty } from '@angular/cdk/coercion';\r\nimport { DOWN_ARROW, END, HOME, LEFT_ARROW, PAGE_DOWN, PAGE_UP, RIGHT_ARROW, UP_ARROW, hasModifierKey } from '@angular/cdk/keycodes';\r\nimport { Attribute, ChangeDetectionStrategy, ChangeDetectorRef, Component, ElementRef, EventEmitter, forwardRef, Inject, Input, Optional, Output, ViewChild, ViewEncapsulation, NgModule } from '@angular/core';\r\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\r\nimport { mixinColor, mixinDisabled, mixinTabIndex, GestureConfig, MatCommonModule } from '@angular/material/core';\r\nimport { ANIMATION_MODULE_TYPE } from '@angular/platform-browser/animations';\r\nimport { Subscription } from 'rxjs';\r\nimport { CommonModule } from '@angular/common';\r\nimport { HAMMER_GESTURE_CONFIG } from '@angular/platform-browser';\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n/**\r\n * Visually, a 30px separation between tick marks looks best. This is very subjective but it is\r\n * the default separation we chose.\r\n * @type {?}\r\n */\r\nconst MIN_AUTO_TICK_SEPARATION = 30;\r\n/**\r\n * The thumb gap size for a disabled slider.\r\n * @type {?}\r\n */\r\nconst DISABLED_THUMB_GAP = 7;\r\n/**\r\n * The thumb gap size for a non-active slider at its minimum value.\r\n * @type {?}\r\n */\r\nconst MIN_VALUE_NONACTIVE_THUMB_GAP = 7;\r\n/**\r\n * The thumb gap size for an active slider at its minimum value.\r\n * @type {?}\r\n */\r\nconst MIN_VALUE_ACTIVE_THUMB_GAP = 10;\r\n/**\r\n * Provider Expression that allows mat-slider to register as a ControlValueAccessor.\r\n * This allows it to support [(ngModel)] and [formControl].\r\n * \\@docs-private\r\n * @type {?}\r\n */\r\nconst MAT_SLIDER_VALUE_ACCESSOR = {\r\n    provide: NG_VALUE_ACCESSOR,\r\n    useExisting: forwardRef((/**\r\n     * @return {?}\r\n     */\r\n    () => MatSlider)),\r\n    multi: true\r\n};\r\n/**\r\n * A simple change event emitted by the MatSlider component.\r\n */\r\nclass MatSliderChange {\r\n}\r\n// Boilerplate for applying mixins to MatSlider.\r\n/**\r\n * \\@docs-private\r\n */\r\nclass MatSliderBase {\r\n    /**\r\n     * @param {?} _elementRef\r\n     */\r\n    constructor(_elementRef) {\r\n        this._elementRef = _elementRef;\r\n    }\r\n}\r\n/** @type {?} */\r\nconst _MatSliderMixinBase = mixinTabIndex(mixinColor(mixinDisabled(MatSliderBase), 'accent'));\r\n/**\r\n * Allows users to select from a range of values by moving the slider thumb. It is similar in\r\n * behavior to the native `<input type=\"range\">` element.\r\n */\r\nclass MatSlider extends _MatSliderMixinBase {\r\n    /**\r\n     * @param {?} elementRef\r\n     * @param {?} _focusMonitor\r\n     * @param {?} _changeDetectorRef\r\n     * @param {?} _dir\r\n     * @param {?} tabIndex\r\n     * @param {?=} _animationMode\r\n     */\r\n    constructor(elementRef, _focusMonitor, _changeDetectorRef, _dir, tabIndex, _animationMode) {\r\n        super(elementRef);\r\n        this._focusMonitor = _focusMonitor;\r\n        this._changeDetectorRef = _changeDetectorRef;\r\n        this._dir = _dir;\r\n        this._animationMode = _animationMode;\r\n        this._invert = false;\r\n        this._max = 100;\r\n        this._min = 0;\r\n        this._step = 1;\r\n        this._thumbLabel = false;\r\n        this._tickInterval = 0;\r\n        this._value = null;\r\n        this._vertical = false;\r\n        /**\r\n         * Event emitted when the slider value has changed.\r\n         */\r\n        this.change = new EventEmitter();\r\n        /**\r\n         * Event emitted when the slider thumb moves.\r\n         */\r\n        this.input = new EventEmitter();\r\n        /**\r\n         * Emits when the raw value of the slider changes. This is here primarily\r\n         * to facilitate the two-way binding for the `value` input.\r\n         * \\@docs-private\r\n         */\r\n        this.valueChange = new EventEmitter();\r\n        /**\r\n         * onTouch function registered via registerOnTouch (ControlValueAccessor).\r\n         */\r\n        this.onTouched = (/**\r\n         * @return {?}\r\n         */\r\n        () => { });\r\n        this._percent = 0;\r\n        /**\r\n         * Whether or not the thumb is sliding.\r\n         * Used to determine if there should be a transition for the thumb and fill track.\r\n         */\r\n        this._isSliding = false;\r\n        /**\r\n         * Whether or not the slider is active (clicked or sliding).\r\n         * Used to shrink and grow the thumb as according to the Material Design spec.\r\n         */\r\n        this._isActive = false;\r\n        /**\r\n         * The size of a tick interval as a percentage of the size of the track.\r\n         */\r\n        this._tickIntervalPercent = 0;\r\n        /**\r\n         * The dimensions of the slider.\r\n         */\r\n        this._sliderDimensions = null;\r\n        this._controlValueAccessorChangeFn = (/**\r\n         * @return {?}\r\n         */\r\n        () => { });\r\n        /**\r\n         * Subscription to the Directionality change EventEmitter.\r\n         */\r\n        this._dirChangeSubscription = Subscription.EMPTY;\r\n        this.tabIndex = parseInt(tabIndex) || 0;\r\n    }\r\n    /**\r\n     * Whether the slider is inverted.\r\n     * @return {?}\r\n     */\r\n    get invert() { return this._invert; }\r\n    /**\r\n     * @param {?} value\r\n     * @return {?}\r\n     */\r\n    set invert(value) {\r\n        this._invert = coerceBooleanProperty(value);\r\n    }\r\n    /**\r\n     * The maximum value that the slider can have.\r\n     * @return {?}\r\n     */\r\n    get max() { return this._max; }\r\n    /**\r\n     * @param {?} v\r\n     * @return {?}\r\n     */\r\n    set max(v) {\r\n        this._max = coerceNumberProperty(v, this._max);\r\n        this._percent = this._calculatePercentage(this._value);\r\n        // Since this also modifies the percentage, we need to let the change detection know.\r\n        this._changeDetectorRef.markForCheck();\r\n    }\r\n    /**\r\n     * The minimum value that the slider can have.\r\n     * @return {?}\r\n     */\r\n    get min() { return this._min; }\r\n    /**\r\n     * @param {?} v\r\n     * @return {?}\r\n     */\r\n    set min(v) {\r\n        this._min = coerceNumberProperty(v, this._min);\r\n        // If the value wasn't explicitly set by the user, set it to the min.\r\n        if (this._value === null) {\r\n            this.value = this._min;\r\n        }\r\n        this._percent = this._calculatePercentage(this._value);\r\n        // Since this also modifies the percentage, we need to let the change detection know.\r\n        this._changeDetectorRef.markForCheck();\r\n    }\r\n    /**\r\n     * The values at which the thumb will snap.\r\n     * @return {?}\r\n     */\r\n    get step() { return this._step; }\r\n    /**\r\n     * @param {?} v\r\n     * @return {?}\r\n     */\r\n    set step(v) {\r\n        this._step = coerceNumberProperty(v, this._step);\r\n        if (this._step % 1 !== 0) {\r\n            this._roundToDecimal = (/** @type {?} */ (this._step.toString().split('.').pop())).length;\r\n        }\r\n        // Since this could modify the label, we need to notify the change detection.\r\n        this._changeDetectorRef.markForCheck();\r\n    }\r\n    /**\r\n     * Whether or not to show the thumb label.\r\n     * @return {?}\r\n     */\r\n    get thumbLabel() { return this._thumbLabel; }\r\n    /**\r\n     * @param {?} value\r\n     * @return {?}\r\n     */\r\n    set thumbLabel(value) { this._thumbLabel = coerceBooleanProperty(value); }\r\n    /**\r\n     * How often to show ticks. Relative to the step so that a tick always appears on a step.\r\n     * Ex: Tick interval of 4 with a step of 3 will draw a tick every 4 steps (every 12 values).\r\n     * @return {?}\r\n     */\r\n    get tickInterval() { return this._tickInterval; }\r\n    /**\r\n     * @param {?} value\r\n     * @return {?}\r\n     */\r\n    set tickInterval(value) {\r\n        if (value === 'auto') {\r\n            this._tickInterval = 'auto';\r\n        }\r\n        else if (typeof value === 'number' || typeof value === 'string') {\r\n            this._tickInterval = coerceNumberProperty(value, (/** @type {?} */ (this._tickInterval)));\r\n        }\r\n        else {\r\n            this._tickInterval = 0;\r\n        }\r\n    }\r\n    /**\r\n     * Value of the slider.\r\n     * @return {?}\r\n     */\r\n    get value() {\r\n        // If the value needs to be read and it is still uninitialized, initialize it to the min.\r\n        if (this._value === null) {\r\n            this.value = this._min;\r\n        }\r\n        return this._value;\r\n    }\r\n    /**\r\n     * @param {?} v\r\n     * @return {?}\r\n     */\r\n    set value(v) {\r\n        if (v !== this._value) {\r\n            /** @type {?} */\r\n            let value = coerceNumberProperty(v);\r\n            // While incrementing by a decimal we can end up with values like 33.300000000000004.\r\n            // Truncate it to ensure that it matches the label and to make it easier to work with.\r\n            if (this._roundToDecimal) {\r\n                value = parseFloat(value.toFixed(this._roundToDecimal));\r\n            }\r\n            this._value = value;\r\n            this._percent = this._calculatePercentage(this._value);\r\n            // Since this also modifies the percentage, we need to let the change detection know.\r\n            this._changeDetectorRef.markForCheck();\r\n        }\r\n    }\r\n    /**\r\n     * Whether the slider is vertical.\r\n     * @return {?}\r\n     */\r\n    get vertical() { return this._vertical; }\r\n    /**\r\n     * @param {?} value\r\n     * @return {?}\r\n     */\r\n    set vertical(value) {\r\n        this._vertical = coerceBooleanProperty(value);\r\n    }\r\n    /**\r\n     * The value to be used for display purposes.\r\n     * @return {?}\r\n     */\r\n    get displayValue() {\r\n        if (this.displayWith) {\r\n            // Value is never null but since setters and getters cannot have\r\n            // different types, the value getter is also typed to return null.\r\n            return this.displayWith((/** @type {?} */ (this.value)));\r\n        }\r\n        // Note that this could be improved further by rounding something like 0.999 to 1 or\r\n        // 0.899 to 0.9, however it is very performance sensitive, because it gets called on\r\n        // every change detection cycle.\r\n        if (this._roundToDecimal && this.value && this.value % 1 !== 0) {\r\n            return this.value.toFixed(this._roundToDecimal);\r\n        }\r\n        return this.value || 0;\r\n    }\r\n    /**\r\n     * set focus to the host element\r\n     * @param {?=} options\r\n     * @return {?}\r\n     */\r\n    focus(options) {\r\n        this._focusHostElement(options);\r\n    }\r\n    /**\r\n     * blur the host element\r\n     * @return {?}\r\n     */\r\n    blur() {\r\n        this._blurHostElement();\r\n    }\r\n    /**\r\n     * The percentage of the slider that coincides with the value.\r\n     * @return {?}\r\n     */\r\n    get percent() { return this._clamp(this._percent); }\r\n    /**\r\n     * Whether the axis of the slider is inverted.\r\n     * (i.e. whether moving the thumb in the positive x or y direction decreases the slider's value).\r\n     * @return {?}\r\n     */\r\n    get _invertAxis() {\r\n        // Standard non-inverted mode for a vertical slider should be dragging the thumb from bottom to\r\n        // top. However from a y-axis standpoint this is inverted.\r\n        return this.vertical ? !this.invert : this.invert;\r\n    }\r\n    /**\r\n     * Whether the slider is at its minimum value.\r\n     * @return {?}\r\n     */\r\n    get _isMinValue() {\r\n        return this.percent === 0;\r\n    }\r\n    /**\r\n     * The amount of space to leave between the slider thumb and the track fill & track background\r\n     * elements.\r\n     * @return {?}\r\n     */\r\n    get _thumbGap() {\r\n        if (this.disabled) {\r\n            return DISABLED_THUMB_GAP;\r\n        }\r\n        if (this._isMinValue && !this.thumbLabel) {\r\n            return this._isActive ? MIN_VALUE_ACTIVE_THUMB_GAP : MIN_VALUE_NONACTIVE_THUMB_GAP;\r\n        }\r\n        return 0;\r\n    }\r\n    /**\r\n     * CSS styles for the track background element.\r\n     * @return {?}\r\n     */\r\n    get _trackBackgroundStyles() {\r\n        /** @type {?} */\r\n        const axis = this.vertical ? 'Y' : 'X';\r\n        /** @type {?} */\r\n        const scale = this.vertical ? `1, ${1 - this.percent}, 1` : `${1 - this.percent}, 1, 1`;\r\n        /** @type {?} */\r\n        const sign = this._shouldInvertMouseCoords() ? '-' : '';\r\n        return {\r\n            // scale3d avoids some rendering issues in Chrome. See #12071.\r\n            transform: `translate${axis}(${sign}${this._thumbGap}px) scale3d(${scale})`\r\n        };\r\n    }\r\n    /**\r\n     * CSS styles for the track fill element.\r\n     * @return {?}\r\n     */\r\n    get _trackFillStyles() {\r\n        /** @type {?} */\r\n        const axis = this.vertical ? 'Y' : 'X';\r\n        /** @type {?} */\r\n        const scale = this.vertical ? `1, ${this.percent}, 1` : `${this.percent}, 1, 1`;\r\n        /** @type {?} */\r\n        const sign = this._shouldInvertMouseCoords() ? '' : '-';\r\n        return {\r\n            // scale3d avoids some rendering issues in Chrome. See #12071.\r\n            transform: `translate${axis}(${sign}${this._thumbGap}px) scale3d(${scale})`\r\n        };\r\n    }\r\n    /**\r\n     * CSS styles for the ticks container element.\r\n     * @return {?}\r\n     */\r\n    get _ticksContainerStyles() {\r\n        /** @type {?} */\r\n        let axis = this.vertical ? 'Y' : 'X';\r\n        // For a horizontal slider in RTL languages we push the ticks container off the left edge\r\n        // instead of the right edge to avoid causing a horizontal scrollbar to appear.\r\n        /** @type {?} */\r\n        let sign = !this.vertical && this._getDirection() == 'rtl' ? '' : '-';\r\n        /** @type {?} */\r\n        let offset = this._tickIntervalPercent / 2 * 100;\r\n        return {\r\n            'transform': `translate${axis}(${sign}${offset}%)`\r\n        };\r\n    }\r\n    /**\r\n     * CSS styles for the ticks element.\r\n     * @return {?}\r\n     */\r\n    get _ticksStyles() {\r\n        /** @type {?} */\r\n        let tickSize = this._tickIntervalPercent * 100;\r\n        /** @type {?} */\r\n        let backgroundSize = this.vertical ? `2px ${tickSize}%` : `${tickSize}% 2px`;\r\n        /** @type {?} */\r\n        let axis = this.vertical ? 'Y' : 'X';\r\n        // Depending on the direction we pushed the ticks container, push the ticks the opposite\r\n        // direction to re-center them but clip off the end edge. In RTL languages we need to flip the\r\n        // ticks 180 degrees so we're really cutting off the end edge abd not the start.\r\n        /** @type {?} */\r\n        let sign = !this.vertical && this._getDirection() == 'rtl' ? '-' : '';\r\n        /** @type {?} */\r\n        let rotate = !this.vertical && this._getDirection() == 'rtl' ? ' rotate(180deg)' : '';\r\n        /** @type {?} */\r\n        let styles = {\r\n            'backgroundSize': backgroundSize,\r\n            // Without translateZ ticks sometimes jitter as the slider moves on Chrome & Firefox.\r\n            'transform': `translateZ(0) translate${axis}(${sign}${tickSize / 2}%)${rotate}`\r\n        };\r\n        if (this._isMinValue && this._thumbGap) {\r\n            /** @type {?} */\r\n            let side = this.vertical ?\r\n                (this._invertAxis ? 'Bottom' : 'Top') :\r\n                (this._invertAxis ? 'Right' : 'Left');\r\n            styles[`padding${side}`] = `${this._thumbGap}px`;\r\n        }\r\n        return styles;\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    get _thumbContainerStyles() {\r\n        /** @type {?} */\r\n        let axis = this.vertical ? 'Y' : 'X';\r\n        // For a horizontal slider in RTL languages we push the thumb container off the left edge\r\n        // instead of the right edge to avoid causing a horizontal scrollbar to appear.\r\n        /** @type {?} */\r\n        let invertOffset = (this._getDirection() == 'rtl' && !this.vertical) ? !this._invertAxis : this._invertAxis;\r\n        /** @type {?} */\r\n        let offset = (invertOffset ? this.percent : 1 - this.percent) * 100;\r\n        return {\r\n            'transform': `translate${axis}(-${offset}%)`\r\n        };\r\n    }\r\n    /**\r\n     * Whether mouse events should be converted to a slider position by calculating their distance\r\n     * from the right or bottom edge of the slider as opposed to the top or left.\r\n     * @return {?}\r\n     */\r\n    _shouldInvertMouseCoords() {\r\n        return (this._getDirection() == 'rtl' && !this.vertical) ? !this._invertAxis : this._invertAxis;\r\n    }\r\n    /**\r\n     * The language direction for this slider element.\r\n     * @private\r\n     * @return {?}\r\n     */\r\n    _getDirection() {\r\n        return (this._dir && this._dir.value == 'rtl') ? 'rtl' : 'ltr';\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    ngOnInit() {\r\n        this._focusMonitor\r\n            .monitor(this._elementRef, true)\r\n            .subscribe((/**\r\n         * @param {?} origin\r\n         * @return {?}\r\n         */\r\n        (origin) => {\r\n            this._isActive = !!origin && origin !== 'keyboard';\r\n            this._changeDetectorRef.detectChanges();\r\n        }));\r\n        if (this._dir) {\r\n            this._dirChangeSubscription = this._dir.change.subscribe((/**\r\n             * @return {?}\r\n             */\r\n            () => {\r\n                this._changeDetectorRef.markForCheck();\r\n            }));\r\n        }\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    ngOnDestroy() {\r\n        this._focusMonitor.stopMonitoring(this._elementRef);\r\n        this._dirChangeSubscription.unsubscribe();\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    _onMouseenter() {\r\n        if (this.disabled) {\r\n            return;\r\n        }\r\n        // We save the dimensions of the slider here so we can use them to update the spacing of the\r\n        // ticks and determine where on the slider click and slide events happen.\r\n        this._sliderDimensions = this._getSliderDimensions();\r\n        this._updateTickIntervalPercent();\r\n    }\r\n    /**\r\n     * @param {?} event\r\n     * @return {?}\r\n     */\r\n    _onMousedown(event) {\r\n        // Don't do anything if the slider is disabled or the\r\n        // user is using anything other than the main mouse button.\r\n        if (this.disabled || event.button !== 0) {\r\n            return;\r\n        }\r\n        /** @type {?} */\r\n        const oldValue = this.value;\r\n        this._isSliding = false;\r\n        this._focusHostElement();\r\n        this._updateValueFromPosition({ x: event.clientX, y: event.clientY });\r\n        // Emit a change and input event if the value changed.\r\n        if (oldValue != this.value) {\r\n            this._emitInputEvent();\r\n            this._emitChangeEvent();\r\n        }\r\n    }\r\n    /**\r\n     * @param {?} event\r\n     * @return {?}\r\n     */\r\n    _onSlide(event) {\r\n        if (this.disabled) {\r\n            return;\r\n        }\r\n        // The slide start event sometimes fails to fire on iOS, so if we're not already in the sliding\r\n        // state, call the slide start handler manually.\r\n        if (!this._isSliding) {\r\n            this._onSlideStart(null);\r\n        }\r\n        // Prevent the slide from selecting anything else.\r\n        event.preventDefault();\r\n        /** @type {?} */\r\n        let oldValue = this.value;\r\n        this._updateValueFromPosition({ x: event.center.x, y: event.center.y });\r\n        // Native range elements always emit `input` events when the value changed while sliding.\r\n        if (oldValue != this.value) {\r\n            this._emitInputEvent();\r\n        }\r\n    }\r\n    /**\r\n     * @param {?} event\r\n     * @return {?}\r\n     */\r\n    _onSlideStart(event) {\r\n        if (this.disabled || this._isSliding) {\r\n            return;\r\n        }\r\n        // Simulate mouseenter in case this is a mobile device.\r\n        this._onMouseenter();\r\n        this._isSliding = true;\r\n        this._focusHostElement();\r\n        this._valueOnSlideStart = this.value;\r\n        if (event) {\r\n            this._updateValueFromPosition({ x: event.center.x, y: event.center.y });\r\n            event.preventDefault();\r\n        }\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    _onSlideEnd() {\r\n        this._isSliding = false;\r\n        if (this._valueOnSlideStart != this.value && !this.disabled) {\r\n            this._emitChangeEvent();\r\n        }\r\n        this._valueOnSlideStart = null;\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    _onFocus() {\r\n        // We save the dimensions of the slider here so we can use them to update the spacing of the\r\n        // ticks and determine where on the slider click and slide events happen.\r\n        this._sliderDimensions = this._getSliderDimensions();\r\n        this._updateTickIntervalPercent();\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    _onBlur() {\r\n        this.onTouched();\r\n    }\r\n    /**\r\n     * @param {?} event\r\n     * @return {?}\r\n     */\r\n    _onKeydown(event) {\r\n        if (this.disabled || hasModifierKey(event)) {\r\n            return;\r\n        }\r\n        /** @type {?} */\r\n        const oldValue = this.value;\r\n        switch (event.keyCode) {\r\n            case PAGE_UP:\r\n                this._increment(10);\r\n                break;\r\n            case PAGE_DOWN:\r\n                this._increment(-10);\r\n                break;\r\n            case END:\r\n                this.value = this.max;\r\n                break;\r\n            case HOME:\r\n                this.value = this.min;\r\n                break;\r\n            case LEFT_ARROW:\r\n                // NOTE: For a sighted user it would make more sense that when they press an arrow key on an\r\n                // inverted slider the thumb moves in that direction. However for a blind user, nothing\r\n                // about the slider indicates that it is inverted. They will expect left to be decrement,\r\n                // regardless of how it appears on the screen. For speakers ofRTL languages, they probably\r\n                // expect left to mean increment. Therefore we flip the meaning of the side arrow keys for\r\n                // RTL. For inverted sliders we prefer a good a11y experience to having it \"look right\" for\r\n                // sighted users, therefore we do not swap the meaning.\r\n                this._increment(this._getDirection() == 'rtl' ? 1 : -1);\r\n                break;\r\n            case UP_ARROW:\r\n                this._increment(1);\r\n                break;\r\n            case RIGHT_ARROW:\r\n                // See comment on LEFT_ARROW about the conditions under which we flip the meaning.\r\n                this._increment(this._getDirection() == 'rtl' ? -1 : 1);\r\n                break;\r\n            case DOWN_ARROW:\r\n                this._increment(-1);\r\n                break;\r\n            default:\r\n                // Return if the key is not one that we explicitly handle to avoid calling preventDefault on\r\n                // it.\r\n                return;\r\n        }\r\n        if (oldValue != this.value) {\r\n            this._emitInputEvent();\r\n            this._emitChangeEvent();\r\n        }\r\n        this._isSliding = true;\r\n        event.preventDefault();\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    _onKeyup() {\r\n        this._isSliding = false;\r\n    }\r\n    /**\r\n     * Increments the slider by the given number of steps (negative number decrements).\r\n     * @private\r\n     * @param {?} numSteps\r\n     * @return {?}\r\n     */\r\n    _increment(numSteps) {\r\n        this.value = this._clamp((this.value || 0) + this.step * numSteps, this.min, this.max);\r\n    }\r\n    /**\r\n     * Calculate the new value from the new physical location. The value will always be snapped.\r\n     * @private\r\n     * @param {?} pos\r\n     * @return {?}\r\n     */\r\n    _updateValueFromPosition(pos) {\r\n        if (!this._sliderDimensions) {\r\n            return;\r\n        }\r\n        /** @type {?} */\r\n        let offset = this.vertical ? this._sliderDimensions.top : this._sliderDimensions.left;\r\n        /** @type {?} */\r\n        let size = this.vertical ? this._sliderDimensions.height : this._sliderDimensions.width;\r\n        /** @type {?} */\r\n        let posComponent = this.vertical ? pos.y : pos.x;\r\n        // The exact value is calculated from the event and used to find the closest snap value.\r\n        /** @type {?} */\r\n        let percent = this._clamp((posComponent - offset) / size);\r\n        if (this._shouldInvertMouseCoords()) {\r\n            percent = 1 - percent;\r\n        }\r\n        // Since the steps may not divide cleanly into the max value, if the user\r\n        // slid to 0 or 100 percent, we jump to the min/max value. This approach\r\n        // is slightly more intuitive than using `Math.ceil` below, because it\r\n        // follows the user's pointer closer.\r\n        if (percent === 0) {\r\n            this.value = this.min;\r\n        }\r\n        else if (percent === 1) {\r\n            this.value = this.max;\r\n        }\r\n        else {\r\n            /** @type {?} */\r\n            const exactValue = this._calculateValue(percent);\r\n            // This calculation finds the closest step by finding the closest\r\n            // whole number divisible by the step relative to the min.\r\n            /** @type {?} */\r\n            const closestValue = Math.round((exactValue - this.min) / this.step) * this.step + this.min;\r\n            // The value needs to snap to the min and max.\r\n            this.value = this._clamp(closestValue, this.min, this.max);\r\n        }\r\n    }\r\n    /**\r\n     * Emits a change event if the current value is different from the last emitted value.\r\n     * @private\r\n     * @return {?}\r\n     */\r\n    _emitChangeEvent() {\r\n        this._controlValueAccessorChangeFn(this.value);\r\n        this.valueChange.emit(this.value);\r\n        this.change.emit(this._createChangeEvent());\r\n    }\r\n    /**\r\n     * Emits an input event when the current value is different from the last emitted value.\r\n     * @private\r\n     * @return {?}\r\n     */\r\n    _emitInputEvent() {\r\n        this.input.emit(this._createChangeEvent());\r\n    }\r\n    /**\r\n     * Updates the amount of space between ticks as a percentage of the width of the slider.\r\n     * @private\r\n     * @return {?}\r\n     */\r\n    _updateTickIntervalPercent() {\r\n        if (!this.tickInterval || !this._sliderDimensions) {\r\n            return;\r\n        }\r\n        if (this.tickInterval == 'auto') {\r\n            /** @type {?} */\r\n            let trackSize = this.vertical ? this._sliderDimensions.height : this._sliderDimensions.width;\r\n            /** @type {?} */\r\n            let pixelsPerStep = trackSize * this.step / (this.max - this.min);\r\n            /** @type {?} */\r\n            let stepsPerTick = Math.ceil(MIN_AUTO_TICK_SEPARATION / pixelsPerStep);\r\n            /** @type {?} */\r\n            let pixelsPerTick = stepsPerTick * this.step;\r\n            this._tickIntervalPercent = pixelsPerTick / trackSize;\r\n        }\r\n        else {\r\n            this._tickIntervalPercent = this.tickInterval * this.step / (this.max - this.min);\r\n        }\r\n    }\r\n    /**\r\n     * Creates a slider change object from the specified value.\r\n     * @private\r\n     * @param {?=} value\r\n     * @return {?}\r\n     */\r\n    _createChangeEvent(value = this.value) {\r\n        /** @type {?} */\r\n        let event = new MatSliderChange();\r\n        event.source = this;\r\n        event.value = value;\r\n        return event;\r\n    }\r\n    /**\r\n     * Calculates the percentage of the slider that a value is.\r\n     * @private\r\n     * @param {?} value\r\n     * @return {?}\r\n     */\r\n    _calculatePercentage(value) {\r\n        return ((value || 0) - this.min) / (this.max - this.min);\r\n    }\r\n    /**\r\n     * Calculates the value a percentage of the slider corresponds to.\r\n     * @private\r\n     * @param {?} percentage\r\n     * @return {?}\r\n     */\r\n    _calculateValue(percentage) {\r\n        return this.min + percentage * (this.max - this.min);\r\n    }\r\n    /**\r\n     * Return a number between two numbers.\r\n     * @private\r\n     * @param {?} value\r\n     * @param {?=} min\r\n     * @param {?=} max\r\n     * @return {?}\r\n     */\r\n    _clamp(value, min = 0, max = 1) {\r\n        return Math.max(min, Math.min(value, max));\r\n    }\r\n    /**\r\n     * Get the bounding client rect of the slider track element.\r\n     * The track is used rather than the native element to ignore the extra space that the thumb can\r\n     * take up.\r\n     * @private\r\n     * @return {?}\r\n     */\r\n    _getSliderDimensions() {\r\n        return this._sliderWrapper ? this._sliderWrapper.nativeElement.getBoundingClientRect() : null;\r\n    }\r\n    /**\r\n     * Focuses the native element.\r\n     * Currently only used to allow a blur event to fire but will be used with keyboard input later.\r\n     * @private\r\n     * @param {?=} options\r\n     * @return {?}\r\n     */\r\n    _focusHostElement(options) {\r\n        this._elementRef.nativeElement.focus(options);\r\n    }\r\n    /**\r\n     * Blurs the native element.\r\n     * @private\r\n     * @return {?}\r\n     */\r\n    _blurHostElement() {\r\n        this._elementRef.nativeElement.blur();\r\n    }\r\n    /**\r\n     * Sets the model value. Implemented as part of ControlValueAccessor.\r\n     * @param {?} value\r\n     * @return {?}\r\n     */\r\n    writeValue(value) {\r\n        this.value = value;\r\n    }\r\n    /**\r\n     * Registers a callback to be triggered when the value has changed.\r\n     * Implemented as part of ControlValueAccessor.\r\n     * @param {?} fn Callback to be registered.\r\n     * @return {?}\r\n     */\r\n    registerOnChange(fn) {\r\n        this._controlValueAccessorChangeFn = fn;\r\n    }\r\n    /**\r\n     * Registers a callback to be triggered when the component is touched.\r\n     * Implemented as part of ControlValueAccessor.\r\n     * @param {?} fn Callback to be registered.\r\n     * @return {?}\r\n     */\r\n    registerOnTouched(fn) {\r\n        this.onTouched = fn;\r\n    }\r\n    /**\r\n     * Sets whether the component should be disabled.\r\n     * Implemented as part of ControlValueAccessor.\r\n     * @param {?} isDisabled\r\n     * @return {?}\r\n     */\r\n    setDisabledState(isDisabled) {\r\n        this.disabled = isDisabled;\r\n    }\r\n}\r\nMatSlider.decorators = [\r\n    { type: Component, args: [{selector: 'mat-slider',\r\n                exportAs: 'matSlider',\r\n                providers: [MAT_SLIDER_VALUE_ACCESSOR],\r\n                host: {\r\n                    '(focus)': '_onFocus()',\r\n                    '(blur)': '_onBlur()',\r\n                    '(mousedown)': '_onMousedown($event)',\r\n                    '(keydown)': '_onKeydown($event)',\r\n                    '(keyup)': '_onKeyup()',\r\n                    '(mouseenter)': '_onMouseenter()',\r\n                    '(slide)': '_onSlide($event)',\r\n                    '(slideend)': '_onSlideEnd()',\r\n                    '(slidestart)': '_onSlideStart($event)',\r\n                    // On Safari starting to slide temporarily triggers text selection mode which\r\n                    // show the wrong cursor. We prevent it by stopping the `selectstart` event.\r\n                    '(selectstart)': '$event.preventDefault()',\r\n                    'class': 'mat-slider',\r\n                    'role': 'slider',\r\n                    '[tabIndex]': 'tabIndex',\r\n                    '[attr.aria-disabled]': 'disabled',\r\n                    '[attr.aria-valuemax]': 'max',\r\n                    '[attr.aria-valuemin]': 'min',\r\n                    '[attr.aria-valuenow]': 'value',\r\n                    '[attr.aria-orientation]': 'vertical ? \"vertical\" : \"horizontal\"',\r\n                    '[class.mat-slider-disabled]': 'disabled',\r\n                    '[class.mat-slider-has-ticks]': 'tickInterval',\r\n                    '[class.mat-slider-horizontal]': '!vertical',\r\n                    '[class.mat-slider-axis-inverted]': '_invertAxis',\r\n                    // Class binding which is only used by the test harness as there is no other\r\n                    // way for the harness to detect if mouse coordinates need to be inverted.\r\n                    '[class.mat-slider-invert-mouse-coords]': '_shouldInvertMouseCoords()',\r\n                    '[class.mat-slider-sliding]': '_isSliding',\r\n                    '[class.mat-slider-thumb-label-showing]': 'thumbLabel',\r\n                    '[class.mat-slider-vertical]': 'vertical',\r\n                    '[class.mat-slider-min-value]': '_isMinValue',\r\n                    '[class.mat-slider-hide-last-tick]': 'disabled || _isMinValue && _thumbGap && _invertAxis',\r\n                    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\r\n                },\r\n                template: \"<div class=\\\"mat-slider-wrapper\\\" #sliderWrapper><div class=\\\"mat-slider-track-wrapper\\\"><div class=\\\"mat-slider-track-background\\\" [ngStyle]=\\\"_trackBackgroundStyles\\\"></div><div class=\\\"mat-slider-track-fill\\\" [ngStyle]=\\\"_trackFillStyles\\\"></div></div><div class=\\\"mat-slider-ticks-container\\\" [ngStyle]=\\\"_ticksContainerStyles\\\"><div class=\\\"mat-slider-ticks\\\" [ngStyle]=\\\"_ticksStyles\\\"></div></div><div class=\\\"mat-slider-thumb-container\\\" [ngStyle]=\\\"_thumbContainerStyles\\\"><div class=\\\"mat-slider-focus-ring\\\"></div><div class=\\\"mat-slider-thumb\\\"></div><div class=\\\"mat-slider-thumb-label\\\"><span class=\\\"mat-slider-thumb-label-text\\\">{{displayValue}}</span></div></div></div>\",\r\n                styles: [\".mat-slider{display:inline-block;position:relative;box-sizing:border-box;padding:8px;outline:0;vertical-align:middle}.mat-slider.mat-slider-sliding:not(.mat-slider-disabled),.mat-slider:not(.mat-slider-disabled):active{cursor:-webkit-grabbing;cursor:grabbing}.mat-slider-wrapper{position:absolute}.mat-slider-track-wrapper{position:absolute;top:0;left:0;overflow:hidden}.mat-slider-track-fill{position:absolute;transform-origin:0 0;transition:transform .4s cubic-bezier(.25,.8,.25,1),background-color .4s cubic-bezier(.25,.8,.25,1)}.mat-slider-track-background{position:absolute;transform-origin:100% 100%;transition:transform .4s cubic-bezier(.25,.8,.25,1),background-color .4s cubic-bezier(.25,.8,.25,1)}.mat-slider-ticks-container{position:absolute;left:0;top:0;overflow:hidden}.mat-slider-ticks{background-repeat:repeat;background-clip:content-box;box-sizing:border-box;opacity:0;transition:opacity .4s cubic-bezier(.25,.8,.25,1)}.mat-slider-thumb-container{position:absolute;z-index:1;transition:transform .4s cubic-bezier(.25,.8,.25,1)}.mat-slider-focus-ring{position:absolute;width:30px;height:30px;border-radius:50%;transform:scale(0);opacity:0;transition:transform .4s cubic-bezier(.25,.8,.25,1),background-color .4s cubic-bezier(.25,.8,.25,1),opacity .4s cubic-bezier(.25,.8,.25,1)}.mat-slider.cdk-keyboard-focused .mat-slider-focus-ring,.mat-slider.cdk-program-focused .mat-slider-focus-ring{transform:scale(1);opacity:1}.mat-slider:not(.mat-slider-disabled):not(.mat-slider-sliding) .mat-slider-thumb,.mat-slider:not(.mat-slider-disabled):not(.mat-slider-sliding) .mat-slider-thumb-label{cursor:-webkit-grab;cursor:grab}.mat-slider-thumb{position:absolute;right:-10px;bottom:-10px;box-sizing:border-box;width:20px;height:20px;border:3px solid transparent;border-radius:50%;transform:scale(.7);transition:transform .4s cubic-bezier(.25,.8,.25,1),background-color .4s cubic-bezier(.25,.8,.25,1),border-color .4s cubic-bezier(.25,.8,.25,1)}.mat-slider-thumb-label{display:none;align-items:center;justify-content:center;position:absolute;width:28px;height:28px;border-radius:50%;transition:transform .4s cubic-bezier(.25,.8,.25,1),border-radius .4s cubic-bezier(.25,.8,.25,1),background-color .4s cubic-bezier(.25,.8,.25,1)}@media (-ms-high-contrast:active){.mat-slider-thumb-label{outline:solid 1px}}.mat-slider-thumb-label-text{z-index:1;opacity:0;transition:opacity .4s cubic-bezier(.25,.8,.25,1)}.mat-slider-sliding .mat-slider-thumb-container,.mat-slider-sliding .mat-slider-track-background,.mat-slider-sliding .mat-slider-track-fill{transition-duration:0s}.mat-slider-has-ticks .mat-slider-wrapper::after{content:'';position:absolute;border-width:0;border-style:solid;opacity:0;transition:opacity .4s cubic-bezier(.25,.8,.25,1)}.mat-slider-has-ticks.cdk-focused:not(.mat-slider-hide-last-tick) .mat-slider-wrapper::after,.mat-slider-has-ticks:hover:not(.mat-slider-hide-last-tick) .mat-slider-wrapper::after{opacity:1}.mat-slider-has-ticks.cdk-focused:not(.mat-slider-disabled) .mat-slider-ticks,.mat-slider-has-ticks:hover:not(.mat-slider-disabled) .mat-slider-ticks{opacity:1}.mat-slider-thumb-label-showing .mat-slider-focus-ring{display:none}.mat-slider-thumb-label-showing .mat-slider-thumb-label{display:flex}.mat-slider-axis-inverted .mat-slider-track-fill{transform-origin:100% 100%}.mat-slider-axis-inverted .mat-slider-track-background{transform-origin:0 0}.mat-slider:not(.mat-slider-disabled).cdk-focused.mat-slider-thumb-label-showing .mat-slider-thumb{transform:scale(0)}.mat-slider:not(.mat-slider-disabled).cdk-focused .mat-slider-thumb-label{border-radius:50% 50% 0}.mat-slider:not(.mat-slider-disabled).cdk-focused .mat-slider-thumb-label-text{opacity:1}.mat-slider:not(.mat-slider-disabled).cdk-mouse-focused .mat-slider-thumb,.mat-slider:not(.mat-slider-disabled).cdk-program-focused .mat-slider-thumb,.mat-slider:not(.mat-slider-disabled).cdk-touch-focused .mat-slider-thumb{border-width:2px;transform:scale(1)}.mat-slider-disabled .mat-slider-focus-ring{transform:scale(0);opacity:0}.mat-slider-disabled .mat-slider-thumb{border-width:4px;transform:scale(.5)}.mat-slider-disabled .mat-slider-thumb-label{display:none}.mat-slider-horizontal{height:48px;min-width:128px}.mat-slider-horizontal .mat-slider-wrapper{height:2px;top:23px;left:8px;right:8px}.mat-slider-horizontal .mat-slider-wrapper::after{height:2px;border-left-width:2px;right:0;top:0}.mat-slider-horizontal .mat-slider-track-wrapper{height:2px;width:100%}.mat-slider-horizontal .mat-slider-track-fill{height:2px;width:100%;transform:scaleX(0)}.mat-slider-horizontal .mat-slider-track-background{height:2px;width:100%;transform:scaleX(1)}.mat-slider-horizontal .mat-slider-ticks-container{height:2px;width:100%}@media (-ms-high-contrast:active){.mat-slider-horizontal .mat-slider-ticks-container{height:0;outline:solid 2px;top:1px}}.mat-slider-horizontal .mat-slider-ticks{height:2px;width:100%}.mat-slider-horizontal .mat-slider-thumb-container{width:100%;height:0;top:50%}.mat-slider-horizontal .mat-slider-focus-ring{top:-15px;right:-15px}.mat-slider-horizontal .mat-slider-thumb-label{right:-14px;top:-40px;transform:translateY(26px) scale(.01) rotate(45deg)}.mat-slider-horizontal .mat-slider-thumb-label-text{transform:rotate(-45deg)}.mat-slider-horizontal.cdk-focused .mat-slider-thumb-label{transform:rotate(45deg)}@media (-ms-high-contrast:active){.mat-slider-horizontal.cdk-focused .mat-slider-thumb-label,.mat-slider-horizontal.cdk-focused .mat-slider-thumb-label-text{transform:none}}.mat-slider-vertical{width:48px;min-height:128px}.mat-slider-vertical .mat-slider-wrapper{width:2px;top:8px;bottom:8px;left:23px}.mat-slider-vertical .mat-slider-wrapper::after{width:2px;border-top-width:2px;bottom:0;left:0}.mat-slider-vertical .mat-slider-track-wrapper{height:100%;width:2px}.mat-slider-vertical .mat-slider-track-fill{height:100%;width:2px;transform:scaleY(0)}.mat-slider-vertical .mat-slider-track-background{height:100%;width:2px;transform:scaleY(1)}.mat-slider-vertical .mat-slider-ticks-container{width:2px;height:100%}@media (-ms-high-contrast:active){.mat-slider-vertical .mat-slider-ticks-container{width:0;outline:solid 2px;left:1px}}.mat-slider-vertical .mat-slider-focus-ring{bottom:-15px;left:-15px}.mat-slider-vertical .mat-slider-ticks{width:2px;height:100%}.mat-slider-vertical .mat-slider-thumb-container{height:100%;width:0;left:50%}.mat-slider-vertical .mat-slider-thumb{-webkit-backface-visibility:hidden;backface-visibility:hidden}.mat-slider-vertical .mat-slider-thumb-label{bottom:-14px;left:-40px;transform:translateX(26px) scale(.01) rotate(-45deg)}.mat-slider-vertical .mat-slider-thumb-label-text{transform:rotate(45deg)}.mat-slider-vertical.cdk-focused .mat-slider-thumb-label{transform:rotate(-45deg)}[dir=rtl] .mat-slider-wrapper::after{left:0;right:auto}[dir=rtl] .mat-slider-horizontal .mat-slider-track-fill{transform-origin:100% 100%}[dir=rtl] .mat-slider-horizontal .mat-slider-track-background{transform-origin:0 0}[dir=rtl] .mat-slider-horizontal.mat-slider-axis-inverted .mat-slider-track-fill{transform-origin:0 0}[dir=rtl] .mat-slider-horizontal.mat-slider-axis-inverted .mat-slider-track-background{transform-origin:100% 100%}.mat-slider._mat-animation-noopable .mat-slider-focus-ring,.mat-slider._mat-animation-noopable .mat-slider-has-ticks .mat-slider-wrapper::after,.mat-slider._mat-animation-noopable .mat-slider-thumb,.mat-slider._mat-animation-noopable .mat-slider-thumb-container,.mat-slider._mat-animation-noopable .mat-slider-thumb-label,.mat-slider._mat-animation-noopable .mat-slider-thumb-label-text,.mat-slider._mat-animation-noopable .mat-slider-ticks,.mat-slider._mat-animation-noopable .mat-slider-track-background,.mat-slider._mat-animation-noopable .mat-slider-track-fill{transition:none}\"],\r\n                inputs: ['disabled', 'color', 'tabIndex'],\r\n                encapsulation: ViewEncapsulation.None,\r\n                changeDetection: ChangeDetectionStrategy.OnPush,\r\n            },] },\r\n];\r\n/** @nocollapse */\r\nMatSlider.ctorParameters = () => [\r\n    { type: ElementRef },\r\n    { type: FocusMonitor },\r\n    { type: ChangeDetectorRef },\r\n    { type: Directionality, decorators: [{ type: Optional }] },\r\n    { type: String, decorators: [{ type: Attribute, args: ['tabindex',] }] },\r\n    { type: String, decorators: [{ type: Optional }, { type: Inject, args: [ANIMATION_MODULE_TYPE,] }] }\r\n];\r\nMatSlider.propDecorators = {\r\n    invert: [{ type: Input }],\r\n    max: [{ type: Input }],\r\n    min: [{ type: Input }],\r\n    step: [{ type: Input }],\r\n    thumbLabel: [{ type: Input }],\r\n    tickInterval: [{ type: Input }],\r\n    value: [{ type: Input }],\r\n    displayWith: [{ type: Input }],\r\n    vertical: [{ type: Input }],\r\n    change: [{ type: Output }],\r\n    input: [{ type: Output }],\r\n    valueChange: [{ type: Output }],\r\n    _sliderWrapper: [{ type: ViewChild, args: ['sliderWrapper', { static: false },] }]\r\n};\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\nclass MatSliderModule {\r\n}\r\nMatSliderModule.decorators = [\r\n    { type: NgModule, args: [{\r\n                imports: [CommonModule, MatCommonModule],\r\n                exports: [MatSlider, MatCommonModule],\r\n                declarations: [MatSlider],\r\n                providers: [{ provide: HAMMER_GESTURE_CONFIG, useClass: GestureConfig }]\r\n            },] },\r\n];\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n\r\nexport { MatSliderModule, MAT_SLIDER_VALUE_ACCESSOR, MatSliderChange, MatSlider };\r\n\r\n"]}