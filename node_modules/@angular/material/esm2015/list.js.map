{"version":3,"sources":["v:/jad-admin-go/mazat_admin_panel/node_modules/@angular/material/esm2015/list.js"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2BA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CAgCC,uFAcC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CA0CD,oKAaC;;;;;;;;;;;;;;;;;;;;CAUD,mBAMC;;;;;;;;;;;;;;;;CAMD,mBAMC;;;;;;;;;;;;;;;;CAMD,mBAMC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CAgED,aAeC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CA+RD,aA6BC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CAkbD,aAoBC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CAoBD,4BA6BC","file":"list.js","sourcesContent":["/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nimport { ChangeDetectionStrategy, Component, ContentChild, ContentChildren, Directive, ElementRef, Optional, ViewEncapsulation, ChangeDetectorRef, Attribute, EventEmitter, forwardRef, Inject, Input, Output, ViewChild, NgModule } from '@angular/core';\r\nimport { MatLine, setLines, mixinDisableRipple, MatCommonModule, MatLineModule, MatPseudoCheckboxModule, MatRippleModule } from '@angular/material/core';\r\nimport { Subject } from 'rxjs';\r\nimport { takeUntil } from 'rxjs/operators';\r\nimport { FocusKeyManager } from '@angular/cdk/a11y';\r\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\r\nimport { SelectionModel } from '@angular/cdk/collections';\r\nimport { SPACE, ENTER, HOME, END, UP_ARROW, DOWN_ARROW, A, hasModifierKey } from '@angular/cdk/keycodes';\r\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\r\nimport { CommonModule } from '@angular/common';\r\nimport { MatDividerModule } from '@angular/material/divider';\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n// Boilerplate for applying mixins to MatList.\r\n/**\r\n * \\@docs-private\r\n */\r\nclass MatListBase {\r\n}\r\n/** @type {?} */\r\nconst _MatListMixinBase = mixinDisableRipple(MatListBase);\r\n// Boilerplate for applying mixins to MatListItem.\r\n/**\r\n * \\@docs-private\r\n */\r\nclass MatListItemBase {\r\n}\r\n/** @type {?} */\r\nconst _MatListItemMixinBase = mixinDisableRipple(MatListItemBase);\r\nclass MatNavList extends _MatListMixinBase {\r\n    constructor() {\r\n        super(...arguments);\r\n        /**\r\n         * Emits when the state of the list changes.\r\n         */\r\n        this._stateChanges = new Subject();\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    ngOnChanges() {\r\n        this._stateChanges.next();\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    ngOnDestroy() {\r\n        this._stateChanges.complete();\r\n    }\r\n}\r\nMatNavList.decorators = [\r\n    { type: Component, args: [{selector: 'mat-nav-list',\r\n                exportAs: 'matNavList',\r\n                host: {\r\n                    'role': 'navigation',\r\n                    'class': 'mat-nav-list mat-list-base'\r\n                },\r\n                template: \"<ng-content></ng-content>\",\r\n                styles: [\".mat-subheader{display:flex;box-sizing:border-box;padding:16px;align-items:center}.mat-list-base .mat-subheader{margin:0}.mat-list-base{padding-top:8px;display:block;-webkit-tap-highlight-color:transparent}.mat-list-base .mat-subheader{height:48px;line-height:16px}.mat-list-base .mat-subheader:first-child{margin-top:-8px}.mat-list-base .mat-list-item,.mat-list-base .mat-list-option{display:block;height:48px;-webkit-tap-highlight-color:transparent;width:100%;padding:0}.mat-list-base .mat-list-item .mat-list-item-content,.mat-list-base .mat-list-option .mat-list-item-content{display:flex;flex-direction:row;align-items:center;box-sizing:border-box;padding:0 16px;position:relative;height:inherit}.mat-list-base .mat-list-item .mat-list-item-content-reverse,.mat-list-base .mat-list-option .mat-list-item-content-reverse{display:flex;align-items:center;padding:0 16px;flex-direction:row-reverse;justify-content:space-around}.mat-list-base .mat-list-item .mat-list-item-ripple,.mat-list-base .mat-list-option .mat-list-item-ripple{top:0;left:0;right:0;bottom:0;position:absolute;pointer-events:none}.mat-list-base .mat-list-item.mat-list-item-with-avatar,.mat-list-base .mat-list-option.mat-list-item-with-avatar{height:56px}.mat-list-base .mat-list-item.mat-2-line,.mat-list-base .mat-list-option.mat-2-line{height:72px}.mat-list-base .mat-list-item.mat-3-line,.mat-list-base .mat-list-option.mat-3-line{height:88px}.mat-list-base .mat-list-item.mat-multi-line,.mat-list-base .mat-list-option.mat-multi-line{height:auto}.mat-list-base .mat-list-item.mat-multi-line .mat-list-item-content,.mat-list-base .mat-list-option.mat-multi-line .mat-list-item-content{padding-top:16px;padding-bottom:16px}.mat-list-base .mat-list-item .mat-list-text,.mat-list-base .mat-list-option .mat-list-text{display:flex;flex-direction:column;width:100%;box-sizing:border-box;overflow:hidden;padding:0}.mat-list-base .mat-list-item .mat-list-text>*,.mat-list-base .mat-list-option .mat-list-text>*{margin:0;padding:0;font-weight:400;font-size:inherit}.mat-list-base .mat-list-item .mat-list-text:empty,.mat-list-base .mat-list-option .mat-list-text:empty{display:none}.mat-list-base .mat-list-item.mat-list-item-with-avatar .mat-list-item-content .mat-list-text,.mat-list-base .mat-list-item.mat-list-option .mat-list-item-content .mat-list-text,.mat-list-base .mat-list-option.mat-list-item-with-avatar .mat-list-item-content .mat-list-text,.mat-list-base .mat-list-option.mat-list-option .mat-list-item-content .mat-list-text{padding-right:0;padding-left:16px}[dir=rtl] .mat-list-base .mat-list-item.mat-list-item-with-avatar .mat-list-item-content .mat-list-text,[dir=rtl] .mat-list-base .mat-list-item.mat-list-option .mat-list-item-content .mat-list-text,[dir=rtl] .mat-list-base .mat-list-option.mat-list-item-with-avatar .mat-list-item-content .mat-list-text,[dir=rtl] .mat-list-base .mat-list-option.mat-list-option .mat-list-item-content .mat-list-text{padding-right:16px;padding-left:0}.mat-list-base .mat-list-item.mat-list-item-with-avatar .mat-list-item-content-reverse .mat-list-text,.mat-list-base .mat-list-item.mat-list-option .mat-list-item-content-reverse .mat-list-text,.mat-list-base .mat-list-option.mat-list-item-with-avatar .mat-list-item-content-reverse .mat-list-text,.mat-list-base .mat-list-option.mat-list-option .mat-list-item-content-reverse .mat-list-text{padding-left:0;padding-right:16px}[dir=rtl] .mat-list-base .mat-list-item.mat-list-item-with-avatar .mat-list-item-content-reverse .mat-list-text,[dir=rtl] .mat-list-base .mat-list-item.mat-list-option .mat-list-item-content-reverse .mat-list-text,[dir=rtl] .mat-list-base .mat-list-option.mat-list-item-with-avatar .mat-list-item-content-reverse .mat-list-text,[dir=rtl] .mat-list-base .mat-list-option.mat-list-option .mat-list-item-content-reverse .mat-list-text{padding-right:0;padding-left:16px}.mat-list-base .mat-list-item.mat-list-item-with-avatar.mat-list-option .mat-list-item-content .mat-list-text,.mat-list-base .mat-list-item.mat-list-item-with-avatar.mat-list-option .mat-list-item-content-reverse .mat-list-text,.mat-list-base .mat-list-option.mat-list-item-with-avatar.mat-list-option .mat-list-item-content .mat-list-text,.mat-list-base .mat-list-option.mat-list-item-with-avatar.mat-list-option .mat-list-item-content-reverse .mat-list-text{padding-right:16px;padding-left:16px}.mat-list-base .mat-list-item .mat-list-avatar,.mat-list-base .mat-list-option .mat-list-avatar{flex-shrink:0;width:40px;height:40px;border-radius:50%;object-fit:cover}.mat-list-base .mat-list-item .mat-list-avatar~.mat-divider-inset,.mat-list-base .mat-list-option .mat-list-avatar~.mat-divider-inset{margin-left:72px;width:calc(100% - 72px)}[dir=rtl] .mat-list-base .mat-list-item .mat-list-avatar~.mat-divider-inset,[dir=rtl] .mat-list-base .mat-list-option .mat-list-avatar~.mat-divider-inset{margin-left:auto;margin-right:72px}.mat-list-base .mat-list-item .mat-list-icon,.mat-list-base .mat-list-option .mat-list-icon{flex-shrink:0;width:24px;height:24px;font-size:24px;box-sizing:content-box;border-radius:50%;padding:4px}.mat-list-base .mat-list-item .mat-list-icon~.mat-divider-inset,.mat-list-base .mat-list-option .mat-list-icon~.mat-divider-inset{margin-left:64px;width:calc(100% - 64px)}[dir=rtl] .mat-list-base .mat-list-item .mat-list-icon~.mat-divider-inset,[dir=rtl] .mat-list-base .mat-list-option .mat-list-icon~.mat-divider-inset{margin-left:auto;margin-right:64px}.mat-list-base .mat-list-item .mat-divider,.mat-list-base .mat-list-option .mat-divider{position:absolute;bottom:0;left:0;width:100%;margin:0}[dir=rtl] .mat-list-base .mat-list-item .mat-divider,[dir=rtl] .mat-list-base .mat-list-option .mat-divider{margin-left:auto;margin-right:0}.mat-list-base .mat-list-item .mat-divider.mat-divider-inset,.mat-list-base .mat-list-option .mat-divider.mat-divider-inset{position:absolute}.mat-list-base[dense]{padding-top:4px;display:block}.mat-list-base[dense] .mat-subheader{height:40px;line-height:8px}.mat-list-base[dense] .mat-subheader:first-child{margin-top:-4px}.mat-list-base[dense] .mat-list-item,.mat-list-base[dense] .mat-list-option{display:block;height:40px;-webkit-tap-highlight-color:transparent;width:100%;padding:0}.mat-list-base[dense] .mat-list-item .mat-list-item-content,.mat-list-base[dense] .mat-list-option .mat-list-item-content{display:flex;flex-direction:row;align-items:center;box-sizing:border-box;padding:0 16px;position:relative;height:inherit}.mat-list-base[dense] .mat-list-item .mat-list-item-content-reverse,.mat-list-base[dense] .mat-list-option .mat-list-item-content-reverse{display:flex;align-items:center;padding:0 16px;flex-direction:row-reverse;justify-content:space-around}.mat-list-base[dense] .mat-list-item .mat-list-item-ripple,.mat-list-base[dense] .mat-list-option .mat-list-item-ripple{top:0;left:0;right:0;bottom:0;position:absolute;pointer-events:none}.mat-list-base[dense] .mat-list-item.mat-list-item-with-avatar,.mat-list-base[dense] .mat-list-option.mat-list-item-with-avatar{height:48px}.mat-list-base[dense] .mat-list-item.mat-2-line,.mat-list-base[dense] .mat-list-option.mat-2-line{height:60px}.mat-list-base[dense] .mat-list-item.mat-3-line,.mat-list-base[dense] .mat-list-option.mat-3-line{height:76px}.mat-list-base[dense] .mat-list-item.mat-multi-line,.mat-list-base[dense] .mat-list-option.mat-multi-line{height:auto}.mat-list-base[dense] .mat-list-item.mat-multi-line .mat-list-item-content,.mat-list-base[dense] .mat-list-option.mat-multi-line .mat-list-item-content{padding-top:16px;padding-bottom:16px}.mat-list-base[dense] .mat-list-item .mat-list-text,.mat-list-base[dense] .mat-list-option .mat-list-text{display:flex;flex-direction:column;width:100%;box-sizing:border-box;overflow:hidden;padding:0}.mat-list-base[dense] .mat-list-item .mat-list-text>*,.mat-list-base[dense] .mat-list-option .mat-list-text>*{margin:0;padding:0;font-weight:400;font-size:inherit}.mat-list-base[dense] .mat-list-item .mat-list-text:empty,.mat-list-base[dense] .mat-list-option .mat-list-text:empty{display:none}.mat-list-base[dense] .mat-list-item.mat-list-item-with-avatar .mat-list-item-content .mat-list-text,.mat-list-base[dense] .mat-list-item.mat-list-option .mat-list-item-content .mat-list-text,.mat-list-base[dense] .mat-list-option.mat-list-item-with-avatar .mat-list-item-content .mat-list-text,.mat-list-base[dense] .mat-list-option.mat-list-option .mat-list-item-content .mat-list-text{padding-right:0;padding-left:16px}[dir=rtl] .mat-list-base[dense] .mat-list-item.mat-list-item-with-avatar .mat-list-item-content .mat-list-text,[dir=rtl] .mat-list-base[dense] .mat-list-item.mat-list-option .mat-list-item-content .mat-list-text,[dir=rtl] .mat-list-base[dense] .mat-list-option.mat-list-item-with-avatar .mat-list-item-content .mat-list-text,[dir=rtl] .mat-list-base[dense] .mat-list-option.mat-list-option .mat-list-item-content .mat-list-text{padding-right:16px;padding-left:0}.mat-list-base[dense] .mat-list-item.mat-list-item-with-avatar .mat-list-item-content-reverse .mat-list-text,.mat-list-base[dense] .mat-list-item.mat-list-option .mat-list-item-content-reverse .mat-list-text,.mat-list-base[dense] .mat-list-option.mat-list-item-with-avatar .mat-list-item-content-reverse .mat-list-text,.mat-list-base[dense] .mat-list-option.mat-list-option .mat-list-item-content-reverse .mat-list-text{padding-left:0;padding-right:16px}[dir=rtl] .mat-list-base[dense] .mat-list-item.mat-list-item-with-avatar .mat-list-item-content-reverse .mat-list-text,[dir=rtl] .mat-list-base[dense] .mat-list-item.mat-list-option .mat-list-item-content-reverse .mat-list-text,[dir=rtl] .mat-list-base[dense] .mat-list-option.mat-list-item-with-avatar .mat-list-item-content-reverse .mat-list-text,[dir=rtl] .mat-list-base[dense] .mat-list-option.mat-list-option .mat-list-item-content-reverse .mat-list-text{padding-right:0;padding-left:16px}.mat-list-base[dense] .mat-list-item.mat-list-item-with-avatar.mat-list-option .mat-list-item-content .mat-list-text,.mat-list-base[dense] .mat-list-item.mat-list-item-with-avatar.mat-list-option .mat-list-item-content-reverse .mat-list-text,.mat-list-base[dense] .mat-list-option.mat-list-item-with-avatar.mat-list-option .mat-list-item-content .mat-list-text,.mat-list-base[dense] .mat-list-option.mat-list-item-with-avatar.mat-list-option .mat-list-item-content-reverse .mat-list-text{padding-right:16px;padding-left:16px}.mat-list-base[dense] .mat-list-item .mat-list-avatar,.mat-list-base[dense] .mat-list-option .mat-list-avatar{flex-shrink:0;width:36px;height:36px;border-radius:50%;object-fit:cover}.mat-list-base[dense] .mat-list-item .mat-list-avatar~.mat-divider-inset,.mat-list-base[dense] .mat-list-option .mat-list-avatar~.mat-divider-inset{margin-left:68px;width:calc(100% - 68px)}[dir=rtl] .mat-list-base[dense] .mat-list-item .mat-list-avatar~.mat-divider-inset,[dir=rtl] .mat-list-base[dense] .mat-list-option .mat-list-avatar~.mat-divider-inset{margin-left:auto;margin-right:68px}.mat-list-base[dense] .mat-list-item .mat-list-icon,.mat-list-base[dense] .mat-list-option .mat-list-icon{flex-shrink:0;width:20px;height:20px;font-size:20px;box-sizing:content-box;border-radius:50%;padding:4px}.mat-list-base[dense] .mat-list-item .mat-list-icon~.mat-divider-inset,.mat-list-base[dense] .mat-list-option .mat-list-icon~.mat-divider-inset{margin-left:60px;width:calc(100% - 60px)}[dir=rtl] .mat-list-base[dense] .mat-list-item .mat-list-icon~.mat-divider-inset,[dir=rtl] .mat-list-base[dense] .mat-list-option .mat-list-icon~.mat-divider-inset{margin-left:auto;margin-right:60px}.mat-list-base[dense] .mat-list-item .mat-divider,.mat-list-base[dense] .mat-list-option .mat-divider{position:absolute;bottom:0;left:0;width:100%;margin:0}[dir=rtl] .mat-list-base[dense] .mat-list-item .mat-divider,[dir=rtl] .mat-list-base[dense] .mat-list-option .mat-divider{margin-left:auto;margin-right:0}.mat-list-base[dense] .mat-list-item .mat-divider.mat-divider-inset,.mat-list-base[dense] .mat-list-option .mat-divider.mat-divider-inset{position:absolute}.mat-nav-list a{text-decoration:none;color:inherit}.mat-nav-list .mat-list-item{cursor:pointer;outline:0}mat-action-list button{background:0 0;color:inherit;border:none;font:inherit;outline:inherit;-webkit-tap-highlight-color:transparent;text-align:left}[dir=rtl] mat-action-list button{text-align:right}mat-action-list button::-moz-focus-inner{border:0}mat-action-list .mat-list-item{cursor:pointer;outline:inherit}.mat-list-option:not(.mat-list-item-disabled){cursor:pointer;outline:0}@media (-ms-high-contrast:active){.mat-selection-list:focus{outline-style:dotted}.mat-list-option:focus,.mat-list-option:hover,.mat-nav-list .mat-list-item:focus,.mat-nav-list .mat-list-item:hover,mat-action-list .mat-list-item:focus,mat-action-list .mat-list-item:hover{outline:dotted 1px}}@media (hover:none){.mat-action-list .mat-list-item:not(.mat-list-item-disabled):hover,.mat-list-option:not(.mat-list-item-disabled):hover,.mat-nav-list .mat-list-item:not(.mat-list-item-disabled):hover{background:0 0}}\"],\r\n                inputs: ['disableRipple'],\r\n                encapsulation: ViewEncapsulation.None,\r\n                changeDetection: ChangeDetectionStrategy.OnPush,\r\n            },] },\r\n];\r\nclass MatList extends _MatListMixinBase {\r\n    /**\r\n     * @param {?} _elementRef\r\n     */\r\n    constructor(_elementRef) {\r\n        super();\r\n        this._elementRef = _elementRef;\r\n        /**\r\n         * Emits when the state of the list changes.\r\n         */\r\n        this._stateChanges = new Subject();\r\n        if (this._getListType() === 'action-list') {\r\n            _elementRef.nativeElement.classList.add('mat-action-list');\r\n        }\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    _getListType() {\r\n        /** @type {?} */\r\n        const nodeName = this._elementRef.nativeElement.nodeName.toLowerCase();\r\n        if (nodeName === 'mat-list') {\r\n            return 'list';\r\n        }\r\n        if (nodeName === 'mat-action-list') {\r\n            return 'action-list';\r\n        }\r\n        return null;\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    ngOnChanges() {\r\n        this._stateChanges.next();\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    ngOnDestroy() {\r\n        this._stateChanges.complete();\r\n    }\r\n}\r\nMatList.decorators = [\r\n    { type: Component, args: [{selector: 'mat-list, mat-action-list',\r\n                exportAs: 'matList',\r\n                template: \"<ng-content></ng-content>\",\r\n                host: {\r\n                    'class': 'mat-list mat-list-base'\r\n                },\r\n                styles: [\".mat-subheader{display:flex;box-sizing:border-box;padding:16px;align-items:center}.mat-list-base .mat-subheader{margin:0}.mat-list-base{padding-top:8px;display:block;-webkit-tap-highlight-color:transparent}.mat-list-base .mat-subheader{height:48px;line-height:16px}.mat-list-base .mat-subheader:first-child{margin-top:-8px}.mat-list-base .mat-list-item,.mat-list-base .mat-list-option{display:block;height:48px;-webkit-tap-highlight-color:transparent;width:100%;padding:0}.mat-list-base .mat-list-item .mat-list-item-content,.mat-list-base .mat-list-option .mat-list-item-content{display:flex;flex-direction:row;align-items:center;box-sizing:border-box;padding:0 16px;position:relative;height:inherit}.mat-list-base .mat-list-item .mat-list-item-content-reverse,.mat-list-base .mat-list-option .mat-list-item-content-reverse{display:flex;align-items:center;padding:0 16px;flex-direction:row-reverse;justify-content:space-around}.mat-list-base .mat-list-item .mat-list-item-ripple,.mat-list-base .mat-list-option .mat-list-item-ripple{top:0;left:0;right:0;bottom:0;position:absolute;pointer-events:none}.mat-list-base .mat-list-item.mat-list-item-with-avatar,.mat-list-base .mat-list-option.mat-list-item-with-avatar{height:56px}.mat-list-base .mat-list-item.mat-2-line,.mat-list-base .mat-list-option.mat-2-line{height:72px}.mat-list-base .mat-list-item.mat-3-line,.mat-list-base .mat-list-option.mat-3-line{height:88px}.mat-list-base .mat-list-item.mat-multi-line,.mat-list-base .mat-list-option.mat-multi-line{height:auto}.mat-list-base .mat-list-item.mat-multi-line .mat-list-item-content,.mat-list-base .mat-list-option.mat-multi-line .mat-list-item-content{padding-top:16px;padding-bottom:16px}.mat-list-base .mat-list-item .mat-list-text,.mat-list-base .mat-list-option .mat-list-text{display:flex;flex-direction:column;width:100%;box-sizing:border-box;overflow:hidden;padding:0}.mat-list-base .mat-list-item .mat-list-text>*,.mat-list-base .mat-list-option .mat-list-text>*{margin:0;padding:0;font-weight:400;font-size:inherit}.mat-list-base .mat-list-item .mat-list-text:empty,.mat-list-base .mat-list-option .mat-list-text:empty{display:none}.mat-list-base .mat-list-item.mat-list-item-with-avatar .mat-list-item-content .mat-list-text,.mat-list-base .mat-list-item.mat-list-option .mat-list-item-content .mat-list-text,.mat-list-base .mat-list-option.mat-list-item-with-avatar .mat-list-item-content .mat-list-text,.mat-list-base .mat-list-option.mat-list-option .mat-list-item-content .mat-list-text{padding-right:0;padding-left:16px}[dir=rtl] .mat-list-base .mat-list-item.mat-list-item-with-avatar .mat-list-item-content .mat-list-text,[dir=rtl] .mat-list-base .mat-list-item.mat-list-option .mat-list-item-content .mat-list-text,[dir=rtl] .mat-list-base .mat-list-option.mat-list-item-with-avatar .mat-list-item-content .mat-list-text,[dir=rtl] .mat-list-base .mat-list-option.mat-list-option .mat-list-item-content .mat-list-text{padding-right:16px;padding-left:0}.mat-list-base .mat-list-item.mat-list-item-with-avatar .mat-list-item-content-reverse .mat-list-text,.mat-list-base .mat-list-item.mat-list-option .mat-list-item-content-reverse .mat-list-text,.mat-list-base .mat-list-option.mat-list-item-with-avatar .mat-list-item-content-reverse .mat-list-text,.mat-list-base .mat-list-option.mat-list-option .mat-list-item-content-reverse .mat-list-text{padding-left:0;padding-right:16px}[dir=rtl] .mat-list-base .mat-list-item.mat-list-item-with-avatar .mat-list-item-content-reverse .mat-list-text,[dir=rtl] .mat-list-base .mat-list-item.mat-list-option .mat-list-item-content-reverse .mat-list-text,[dir=rtl] .mat-list-base .mat-list-option.mat-list-item-with-avatar .mat-list-item-content-reverse .mat-list-text,[dir=rtl] .mat-list-base .mat-list-option.mat-list-option .mat-list-item-content-reverse .mat-list-text{padding-right:0;padding-left:16px}.mat-list-base .mat-list-item.mat-list-item-with-avatar.mat-list-option .mat-list-item-content .mat-list-text,.mat-list-base .mat-list-item.mat-list-item-with-avatar.mat-list-option .mat-list-item-content-reverse .mat-list-text,.mat-list-base .mat-list-option.mat-list-item-with-avatar.mat-list-option .mat-list-item-content .mat-list-text,.mat-list-base .mat-list-option.mat-list-item-with-avatar.mat-list-option .mat-list-item-content-reverse .mat-list-text{padding-right:16px;padding-left:16px}.mat-list-base .mat-list-item .mat-list-avatar,.mat-list-base .mat-list-option .mat-list-avatar{flex-shrink:0;width:40px;height:40px;border-radius:50%;object-fit:cover}.mat-list-base .mat-list-item .mat-list-avatar~.mat-divider-inset,.mat-list-base .mat-list-option .mat-list-avatar~.mat-divider-inset{margin-left:72px;width:calc(100% - 72px)}[dir=rtl] .mat-list-base .mat-list-item .mat-list-avatar~.mat-divider-inset,[dir=rtl] .mat-list-base .mat-list-option .mat-list-avatar~.mat-divider-inset{margin-left:auto;margin-right:72px}.mat-list-base .mat-list-item .mat-list-icon,.mat-list-base .mat-list-option .mat-list-icon{flex-shrink:0;width:24px;height:24px;font-size:24px;box-sizing:content-box;border-radius:50%;padding:4px}.mat-list-base .mat-list-item .mat-list-icon~.mat-divider-inset,.mat-list-base .mat-list-option .mat-list-icon~.mat-divider-inset{margin-left:64px;width:calc(100% - 64px)}[dir=rtl] .mat-list-base .mat-list-item .mat-list-icon~.mat-divider-inset,[dir=rtl] .mat-list-base .mat-list-option .mat-list-icon~.mat-divider-inset{margin-left:auto;margin-right:64px}.mat-list-base .mat-list-item .mat-divider,.mat-list-base .mat-list-option .mat-divider{position:absolute;bottom:0;left:0;width:100%;margin:0}[dir=rtl] .mat-list-base .mat-list-item .mat-divider,[dir=rtl] .mat-list-base .mat-list-option .mat-divider{margin-left:auto;margin-right:0}.mat-list-base .mat-list-item .mat-divider.mat-divider-inset,.mat-list-base .mat-list-option .mat-divider.mat-divider-inset{position:absolute}.mat-list-base[dense]{padding-top:4px;display:block}.mat-list-base[dense] .mat-subheader{height:40px;line-height:8px}.mat-list-base[dense] .mat-subheader:first-child{margin-top:-4px}.mat-list-base[dense] .mat-list-item,.mat-list-base[dense] .mat-list-option{display:block;height:40px;-webkit-tap-highlight-color:transparent;width:100%;padding:0}.mat-list-base[dense] .mat-list-item .mat-list-item-content,.mat-list-base[dense] .mat-list-option .mat-list-item-content{display:flex;flex-direction:row;align-items:center;box-sizing:border-box;padding:0 16px;position:relative;height:inherit}.mat-list-base[dense] .mat-list-item .mat-list-item-content-reverse,.mat-list-base[dense] .mat-list-option .mat-list-item-content-reverse{display:flex;align-items:center;padding:0 16px;flex-direction:row-reverse;justify-content:space-around}.mat-list-base[dense] .mat-list-item .mat-list-item-ripple,.mat-list-base[dense] .mat-list-option .mat-list-item-ripple{top:0;left:0;right:0;bottom:0;position:absolute;pointer-events:none}.mat-list-base[dense] .mat-list-item.mat-list-item-with-avatar,.mat-list-base[dense] .mat-list-option.mat-list-item-with-avatar{height:48px}.mat-list-base[dense] .mat-list-item.mat-2-line,.mat-list-base[dense] .mat-list-option.mat-2-line{height:60px}.mat-list-base[dense] .mat-list-item.mat-3-line,.mat-list-base[dense] .mat-list-option.mat-3-line{height:76px}.mat-list-base[dense] .mat-list-item.mat-multi-line,.mat-list-base[dense] .mat-list-option.mat-multi-line{height:auto}.mat-list-base[dense] .mat-list-item.mat-multi-line .mat-list-item-content,.mat-list-base[dense] .mat-list-option.mat-multi-line .mat-list-item-content{padding-top:16px;padding-bottom:16px}.mat-list-base[dense] .mat-list-item .mat-list-text,.mat-list-base[dense] .mat-list-option .mat-list-text{display:flex;flex-direction:column;width:100%;box-sizing:border-box;overflow:hidden;padding:0}.mat-list-base[dense] .mat-list-item .mat-list-text>*,.mat-list-base[dense] .mat-list-option .mat-list-text>*{margin:0;padding:0;font-weight:400;font-size:inherit}.mat-list-base[dense] .mat-list-item .mat-list-text:empty,.mat-list-base[dense] .mat-list-option .mat-list-text:empty{display:none}.mat-list-base[dense] .mat-list-item.mat-list-item-with-avatar .mat-list-item-content .mat-list-text,.mat-list-base[dense] .mat-list-item.mat-list-option .mat-list-item-content .mat-list-text,.mat-list-base[dense] .mat-list-option.mat-list-item-with-avatar .mat-list-item-content .mat-list-text,.mat-list-base[dense] .mat-list-option.mat-list-option .mat-list-item-content .mat-list-text{padding-right:0;padding-left:16px}[dir=rtl] .mat-list-base[dense] .mat-list-item.mat-list-item-with-avatar .mat-list-item-content .mat-list-text,[dir=rtl] .mat-list-base[dense] .mat-list-item.mat-list-option .mat-list-item-content .mat-list-text,[dir=rtl] .mat-list-base[dense] .mat-list-option.mat-list-item-with-avatar .mat-list-item-content .mat-list-text,[dir=rtl] .mat-list-base[dense] .mat-list-option.mat-list-option .mat-list-item-content .mat-list-text{padding-right:16px;padding-left:0}.mat-list-base[dense] .mat-list-item.mat-list-item-with-avatar .mat-list-item-content-reverse .mat-list-text,.mat-list-base[dense] .mat-list-item.mat-list-option .mat-list-item-content-reverse .mat-list-text,.mat-list-base[dense] .mat-list-option.mat-list-item-with-avatar .mat-list-item-content-reverse .mat-list-text,.mat-list-base[dense] .mat-list-option.mat-list-option .mat-list-item-content-reverse .mat-list-text{padding-left:0;padding-right:16px}[dir=rtl] .mat-list-base[dense] .mat-list-item.mat-list-item-with-avatar .mat-list-item-content-reverse .mat-list-text,[dir=rtl] .mat-list-base[dense] .mat-list-item.mat-list-option .mat-list-item-content-reverse .mat-list-text,[dir=rtl] .mat-list-base[dense] .mat-list-option.mat-list-item-with-avatar .mat-list-item-content-reverse .mat-list-text,[dir=rtl] .mat-list-base[dense] .mat-list-option.mat-list-option .mat-list-item-content-reverse .mat-list-text{padding-right:0;padding-left:16px}.mat-list-base[dense] .mat-list-item.mat-list-item-with-avatar.mat-list-option .mat-list-item-content .mat-list-text,.mat-list-base[dense] .mat-list-item.mat-list-item-with-avatar.mat-list-option .mat-list-item-content-reverse .mat-list-text,.mat-list-base[dense] .mat-list-option.mat-list-item-with-avatar.mat-list-option .mat-list-item-content .mat-list-text,.mat-list-base[dense] .mat-list-option.mat-list-item-with-avatar.mat-list-option .mat-list-item-content-reverse .mat-list-text{padding-right:16px;padding-left:16px}.mat-list-base[dense] .mat-list-item .mat-list-avatar,.mat-list-base[dense] .mat-list-option .mat-list-avatar{flex-shrink:0;width:36px;height:36px;border-radius:50%;object-fit:cover}.mat-list-base[dense] .mat-list-item .mat-list-avatar~.mat-divider-inset,.mat-list-base[dense] .mat-list-option .mat-list-avatar~.mat-divider-inset{margin-left:68px;width:calc(100% - 68px)}[dir=rtl] .mat-list-base[dense] .mat-list-item .mat-list-avatar~.mat-divider-inset,[dir=rtl] .mat-list-base[dense] .mat-list-option .mat-list-avatar~.mat-divider-inset{margin-left:auto;margin-right:68px}.mat-list-base[dense] .mat-list-item .mat-list-icon,.mat-list-base[dense] .mat-list-option .mat-list-icon{flex-shrink:0;width:20px;height:20px;font-size:20px;box-sizing:content-box;border-radius:50%;padding:4px}.mat-list-base[dense] .mat-list-item .mat-list-icon~.mat-divider-inset,.mat-list-base[dense] .mat-list-option .mat-list-icon~.mat-divider-inset{margin-left:60px;width:calc(100% - 60px)}[dir=rtl] .mat-list-base[dense] .mat-list-item .mat-list-icon~.mat-divider-inset,[dir=rtl] .mat-list-base[dense] .mat-list-option .mat-list-icon~.mat-divider-inset{margin-left:auto;margin-right:60px}.mat-list-base[dense] .mat-list-item .mat-divider,.mat-list-base[dense] .mat-list-option .mat-divider{position:absolute;bottom:0;left:0;width:100%;margin:0}[dir=rtl] .mat-list-base[dense] .mat-list-item .mat-divider,[dir=rtl] .mat-list-base[dense] .mat-list-option .mat-divider{margin-left:auto;margin-right:0}.mat-list-base[dense] .mat-list-item .mat-divider.mat-divider-inset,.mat-list-base[dense] .mat-list-option .mat-divider.mat-divider-inset{position:absolute}.mat-nav-list a{text-decoration:none;color:inherit}.mat-nav-list .mat-list-item{cursor:pointer;outline:0}mat-action-list button{background:0 0;color:inherit;border:none;font:inherit;outline:inherit;-webkit-tap-highlight-color:transparent;text-align:left}[dir=rtl] mat-action-list button{text-align:right}mat-action-list button::-moz-focus-inner{border:0}mat-action-list .mat-list-item{cursor:pointer;outline:inherit}.mat-list-option:not(.mat-list-item-disabled){cursor:pointer;outline:0}@media (-ms-high-contrast:active){.mat-selection-list:focus{outline-style:dotted}.mat-list-option:focus,.mat-list-option:hover,.mat-nav-list .mat-list-item:focus,.mat-nav-list .mat-list-item:hover,mat-action-list .mat-list-item:focus,mat-action-list .mat-list-item:hover{outline:dotted 1px}}@media (hover:none){.mat-action-list .mat-list-item:not(.mat-list-item-disabled):hover,.mat-list-option:not(.mat-list-item-disabled):hover,.mat-nav-list .mat-list-item:not(.mat-list-item-disabled):hover{background:0 0}}\"],\r\n                inputs: ['disableRipple'],\r\n                encapsulation: ViewEncapsulation.None,\r\n                changeDetection: ChangeDetectionStrategy.OnPush,\r\n            },] },\r\n];\r\n/** @nocollapse */\r\nMatList.ctorParameters = () => [\r\n    { type: ElementRef }\r\n];\r\n/**\r\n * Directive whose purpose is to add the mat- CSS styling to this selector.\r\n * \\@docs-private\r\n */\r\nclass MatListAvatarCssMatStyler {\r\n}\r\nMatListAvatarCssMatStyler.decorators = [\r\n    { type: Directive, args: [{\r\n                selector: '[mat-list-avatar], [matListAvatar]',\r\n                host: { 'class': 'mat-list-avatar' }\r\n            },] },\r\n];\r\n/**\r\n * Directive whose purpose is to add the mat- CSS styling to this selector.\r\n * \\@docs-private\r\n */\r\nclass MatListIconCssMatStyler {\r\n}\r\nMatListIconCssMatStyler.decorators = [\r\n    { type: Directive, args: [{\r\n                selector: '[mat-list-icon], [matListIcon]',\r\n                host: { 'class': 'mat-list-icon' }\r\n            },] },\r\n];\r\n/**\r\n * Directive whose purpose is to add the mat- CSS styling to this selector.\r\n * \\@docs-private\r\n */\r\nclass MatListSubheaderCssMatStyler {\r\n}\r\nMatListSubheaderCssMatStyler.decorators = [\r\n    { type: Directive, args: [{\r\n                selector: '[mat-subheader], [matSubheader]',\r\n                host: { 'class': 'mat-subheader' }\r\n            },] },\r\n];\r\n/**\r\n * An item within a Material Design list.\r\n */\r\nclass MatListItem extends _MatListItemMixinBase {\r\n    /**\r\n     * @param {?} _element\r\n     * @param {?} _changeDetectorRef\r\n     * @param {?=} navList\r\n     * @param {?=} list\r\n     */\r\n    constructor(_element, _changeDetectorRef, navList, list) {\r\n        super();\r\n        this._element = _element;\r\n        this._isInteractiveList = false;\r\n        this._destroyed = new Subject();\r\n        this._isInteractiveList = !!(navList || (list && list._getListType() === 'action-list'));\r\n        this._list = navList || list;\r\n        // If no type attributed is specified for <button>, set it to \"button\".\r\n        // If a type attribute is already specified, do nothing.\r\n        /** @type {?} */\r\n        const element = this._getHostElement();\r\n        if (element.nodeName.toLowerCase() === 'button' && !element.hasAttribute('type')) {\r\n            element.setAttribute('type', 'button');\r\n        }\r\n        if (this._list) {\r\n            // React to changes in the state of the parent list since\r\n            // some of the item's properties depend on it (e.g. `disableRipple`).\r\n            this._list._stateChanges.pipe(takeUntil(this._destroyed)).subscribe((/**\r\n             * @return {?}\r\n             */\r\n            () => {\r\n                _changeDetectorRef.markForCheck();\r\n            }));\r\n        }\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    ngAfterContentInit() {\r\n        setLines(this._lines, this._element);\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    ngOnDestroy() {\r\n        this._destroyed.next();\r\n        this._destroyed.complete();\r\n    }\r\n    /**\r\n     * Whether this list item should show a ripple effect when clicked.\r\n     * @return {?}\r\n     */\r\n    _isRippleDisabled() {\r\n        return !this._isInteractiveList || this.disableRipple ||\r\n            !!(this._list && this._list.disableRipple);\r\n    }\r\n    /**\r\n     * Retrieves the DOM element of the component host.\r\n     * @return {?}\r\n     */\r\n    _getHostElement() {\r\n        return this._element.nativeElement;\r\n    }\r\n}\r\nMatListItem.decorators = [\r\n    { type: Component, args: [{selector: 'mat-list-item, a[mat-list-item], button[mat-list-item]',\r\n                exportAs: 'matListItem',\r\n                host: {\r\n                    'class': 'mat-list-item',\r\n                    // @breaking-change 8.0.0 Remove `mat-list-item-avatar` in favor of `mat-list-item-with-avatar`.\r\n                    '[class.mat-list-item-avatar]': '_avatar || _icon',\r\n                    '[class.mat-list-item-with-avatar]': '_avatar || _icon',\r\n                },\r\n                inputs: ['disableRipple'],\r\n                template: \"<div class=\\\"mat-list-item-content\\\"><div class=\\\"mat-list-item-ripple\\\" mat-ripple [matRippleTrigger]=\\\"_getHostElement()\\\" [matRippleDisabled]=\\\"_isRippleDisabled()\\\"></div><ng-content select=\\\"[mat-list-avatar], [mat-list-icon], [matListAvatar], [matListIcon]\\\"></ng-content><div class=\\\"mat-list-text\\\"><ng-content select=\\\"[mat-line], [matLine]\\\"></ng-content></div><ng-content></ng-content></div>\",\r\n                encapsulation: ViewEncapsulation.None,\r\n                changeDetection: ChangeDetectionStrategy.OnPush,\r\n            },] },\r\n];\r\n/** @nocollapse */\r\nMatListItem.ctorParameters = () => [\r\n    { type: ElementRef },\r\n    { type: ChangeDetectorRef },\r\n    { type: MatNavList, decorators: [{ type: Optional }] },\r\n    { type: MatList, decorators: [{ type: Optional }] }\r\n];\r\nMatListItem.propDecorators = {\r\n    _lines: [{ type: ContentChildren, args: [MatLine, { descendants: true },] }],\r\n    _avatar: [{ type: ContentChild, args: [MatListAvatarCssMatStyler, { static: false },] }],\r\n    _icon: [{ type: ContentChild, args: [MatListIconCssMatStyler, { static: false },] }]\r\n};\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n/**\r\n * \\@docs-private\r\n */\r\nclass MatSelectionListBase {\r\n}\r\n/** @type {?} */\r\nconst _MatSelectionListMixinBase = mixinDisableRipple(MatSelectionListBase);\r\n/**\r\n * \\@docs-private\r\n */\r\nclass MatListOptionBase {\r\n}\r\n/** @type {?} */\r\nconst _MatListOptionMixinBase = mixinDisableRipple(MatListOptionBase);\r\n/**\r\n * \\@docs-private\r\n * @type {?}\r\n */\r\nconst MAT_SELECTION_LIST_VALUE_ACCESSOR = {\r\n    provide: NG_VALUE_ACCESSOR,\r\n    useExisting: forwardRef((/**\r\n     * @return {?}\r\n     */\r\n    () => MatSelectionList)),\r\n    multi: true\r\n};\r\n/**\r\n * Change event that is being fired whenever the selected state of an option changes.\r\n */\r\nclass MatSelectionListChange {\r\n    /**\r\n     * @param {?} source\r\n     * @param {?} option\r\n     */\r\n    constructor(source, option) {\r\n        this.source = source;\r\n        this.option = option;\r\n    }\r\n}\r\n/**\r\n * Component for list-options of selection-list. Each list-option can automatically\r\n * generate a checkbox and can put current item into the selectionModel of selection-list\r\n * if the current item is selected.\r\n */\r\nclass MatListOption extends _MatListOptionMixinBase {\r\n    /**\r\n     * @param {?} _element\r\n     * @param {?} _changeDetector\r\n     * @param {?} selectionList\r\n     */\r\n    constructor(_element, _changeDetector, selectionList) {\r\n        super();\r\n        this._element = _element;\r\n        this._changeDetector = _changeDetector;\r\n        this.selectionList = selectionList;\r\n        this._selected = false;\r\n        this._disabled = false;\r\n        this._hasFocus = false;\r\n        /**\r\n         * Whether the label should appear before or after the checkbox. Defaults to 'after'\r\n         */\r\n        this.checkboxPosition = 'after';\r\n    }\r\n    /**\r\n     * Theme color of the list option. This sets the color of the checkbox.\r\n     * @return {?}\r\n     */\r\n    get color() { return this._color || this.selectionList.color; }\r\n    /**\r\n     * @param {?} newValue\r\n     * @return {?}\r\n     */\r\n    set color(newValue) { this._color = newValue; }\r\n    /**\r\n     * Value of the option\r\n     * @return {?}\r\n     */\r\n    get value() { return this._value; }\r\n    /**\r\n     * @param {?} newValue\r\n     * @return {?}\r\n     */\r\n    set value(newValue) {\r\n        if (this.selected && newValue !== this.value) {\r\n            this.selected = false;\r\n        }\r\n        this._value = newValue;\r\n    }\r\n    /**\r\n     * Whether the option is disabled.\r\n     * @return {?}\r\n     */\r\n    get disabled() { return this._disabled || (this.selectionList && this.selectionList.disabled); }\r\n    /**\r\n     * @param {?} value\r\n     * @return {?}\r\n     */\r\n    set disabled(value) {\r\n        /** @type {?} */\r\n        const newValue = coerceBooleanProperty(value);\r\n        if (newValue !== this._disabled) {\r\n            this._disabled = newValue;\r\n            this._changeDetector.markForCheck();\r\n        }\r\n    }\r\n    /**\r\n     * Whether the option is selected.\r\n     * @return {?}\r\n     */\r\n    get selected() { return this.selectionList.selectedOptions.isSelected(this); }\r\n    /**\r\n     * @param {?} value\r\n     * @return {?}\r\n     */\r\n    set selected(value) {\r\n        /** @type {?} */\r\n        const isSelected = coerceBooleanProperty(value);\r\n        if (isSelected !== this._selected) {\r\n            this._setSelected(isSelected);\r\n            this.selectionList._reportValueChange();\r\n        }\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    ngOnInit() {\r\n        /** @type {?} */\r\n        const list = this.selectionList;\r\n        if (list._value && list._value.some((/**\r\n         * @param {?} value\r\n         * @return {?}\r\n         */\r\n        value => list.compareWith(value, this._value)))) {\r\n            this._setSelected(true);\r\n        }\r\n        /** @type {?} */\r\n        const wasSelected = this._selected;\r\n        // List options that are selected at initialization can't be reported properly to the form\r\n        // control. This is because it takes some time until the selection-list knows about all\r\n        // available options. Also it can happen that the ControlValueAccessor has an initial value\r\n        // that should be used instead. Deferring the value change report to the next tick ensures\r\n        // that the form control value is not being overwritten.\r\n        Promise.resolve().then((/**\r\n         * @return {?}\r\n         */\r\n        () => {\r\n            if (this._selected || wasSelected) {\r\n                this.selected = true;\r\n                this._changeDetector.markForCheck();\r\n            }\r\n        }));\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    ngAfterContentInit() {\r\n        setLines(this._lines, this._element);\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    ngOnDestroy() {\r\n        if (this.selected) {\r\n            // We have to delay this until the next tick in order\r\n            // to avoid changed after checked errors.\r\n            Promise.resolve().then((/**\r\n             * @return {?}\r\n             */\r\n            () => {\r\n                this.selected = false;\r\n            }));\r\n        }\r\n        /** @type {?} */\r\n        const hadFocus = this._hasFocus;\r\n        /** @type {?} */\r\n        const newActiveItem = this.selectionList._removeOptionFromList(this);\r\n        // Only move focus if this option was focused at the time it was destroyed.\r\n        if (hadFocus && newActiveItem) {\r\n            newActiveItem.focus();\r\n        }\r\n    }\r\n    /**\r\n     * Toggles the selection state of the option.\r\n     * @return {?}\r\n     */\r\n    toggle() {\r\n        this.selected = !this.selected;\r\n    }\r\n    /**\r\n     * Allows for programmatic focusing of the option.\r\n     * @return {?}\r\n     */\r\n    focus() {\r\n        this._element.nativeElement.focus();\r\n    }\r\n    /**\r\n     * Returns the list item's text label. Implemented as a part of the FocusKeyManager.\r\n     * \\@docs-private\r\n     * @return {?}\r\n     */\r\n    getLabel() {\r\n        return this._text ? (this._text.nativeElement.textContent || '') : '';\r\n    }\r\n    /**\r\n     * Whether this list item should show a ripple effect when clicked.\r\n     * @return {?}\r\n     */\r\n    _isRippleDisabled() {\r\n        return this.disabled || this.disableRipple || this.selectionList.disableRipple;\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    _handleClick() {\r\n        if (!this.disabled) {\r\n            this.toggle();\r\n            // Emit a change event if the selected state of the option changed through user interaction.\r\n            this.selectionList._emitChangeEvent(this);\r\n        }\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    _handleFocus() {\r\n        this.selectionList._setFocusedOption(this);\r\n        this._hasFocus = true;\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    _handleBlur() {\r\n        this.selectionList._onTouched();\r\n        this._hasFocus = false;\r\n    }\r\n    /**\r\n     * Retrieves the DOM element of the component host.\r\n     * @return {?}\r\n     */\r\n    _getHostElement() {\r\n        return this._element.nativeElement;\r\n    }\r\n    /**\r\n     * Sets the selected state of the option. Returns whether the value has changed.\r\n     * @param {?} selected\r\n     * @return {?}\r\n     */\r\n    _setSelected(selected) {\r\n        if (selected === this._selected) {\r\n            return false;\r\n        }\r\n        this._selected = selected;\r\n        if (selected) {\r\n            this.selectionList.selectedOptions.select(this);\r\n        }\r\n        else {\r\n            this.selectionList.selectedOptions.deselect(this);\r\n        }\r\n        this._changeDetector.markForCheck();\r\n        return true;\r\n    }\r\n    /**\r\n     * Notifies Angular that the option needs to be checked in the next change detection run. Mainly\r\n     * used to trigger an update of the list option if the disabled state of the selection list\r\n     * changed.\r\n     * @return {?}\r\n     */\r\n    _markForCheck() {\r\n        this._changeDetector.markForCheck();\r\n    }\r\n}\r\nMatListOption.decorators = [\r\n    { type: Component, args: [{selector: 'mat-list-option',\r\n                exportAs: 'matListOption',\r\n                inputs: ['disableRipple'],\r\n                host: {\r\n                    'role': 'option',\r\n                    'class': 'mat-list-item mat-list-option',\r\n                    '(focus)': '_handleFocus()',\r\n                    '(blur)': '_handleBlur()',\r\n                    '(click)': '_handleClick()',\r\n                    'tabindex': '-1',\r\n                    '[class.mat-list-item-disabled]': 'disabled',\r\n                    '[class.mat-list-item-with-avatar]': '_avatar || _icon',\r\n                    // Manually set the \"primary\" or \"warn\" class if the color has been explicitly\r\n                    // set to \"primary\" or \"warn\". The pseudo checkbox picks up these classes for\r\n                    // its theme.\r\n                    '[class.mat-primary]': 'color === \"primary\"',\r\n                    // Even though accent is the default, we need to set this class anyway, because the  list might\r\n                    // be placed inside a parent that has one of the other colors with a higher specificity.\r\n                    '[class.mat-accent]': 'color !== \"primary\" && color !== \"warn\"',\r\n                    '[class.mat-warn]': 'color === \"warn\"',\r\n                    '[attr.aria-selected]': 'selected',\r\n                    '[attr.aria-disabled]': 'disabled',\r\n                },\r\n                template: \"<div class=\\\"mat-list-item-content\\\" [class.mat-list-item-content-reverse]=\\\"checkboxPosition == 'after'\\\"><div mat-ripple class=\\\"mat-list-item-ripple\\\" [matRippleTrigger]=\\\"_getHostElement()\\\" [matRippleDisabled]=\\\"_isRippleDisabled()\\\"></div><mat-pseudo-checkbox [state]=\\\"selected ? 'checked' : 'unchecked'\\\" [disabled]=\\\"disabled\\\"></mat-pseudo-checkbox><div class=\\\"mat-list-text\\\" #text><ng-content></ng-content></div><ng-content select=\\\"[mat-list-avatar], [mat-list-icon], [matListAvatar], [matListIcon]\\\"></ng-content></div>\",\r\n                encapsulation: ViewEncapsulation.None,\r\n                changeDetection: ChangeDetectionStrategy.OnPush,\r\n            },] },\r\n];\r\n/** @nocollapse */\r\nMatListOption.ctorParameters = () => [\r\n    { type: ElementRef },\r\n    { type: ChangeDetectorRef },\r\n    { type: MatSelectionList, decorators: [{ type: Inject, args: [forwardRef((/**\r\n                     * @return {?}\r\n                     */\r\n                    () => MatSelectionList)),] }] }\r\n];\r\nMatListOption.propDecorators = {\r\n    _avatar: [{ type: ContentChild, args: [MatListAvatarCssMatStyler, { static: false },] }],\r\n    _icon: [{ type: ContentChild, args: [MatListIconCssMatStyler, { static: false },] }],\r\n    _lines: [{ type: ContentChildren, args: [MatLine,] }],\r\n    _text: [{ type: ViewChild, args: ['text', { static: false },] }],\r\n    checkboxPosition: [{ type: Input }],\r\n    color: [{ type: Input }],\r\n    value: [{ type: Input }],\r\n    disabled: [{ type: Input }],\r\n    selected: [{ type: Input }]\r\n};\r\n/**\r\n * Material Design list component where each item is a selectable option. Behaves as a listbox.\r\n */\r\nclass MatSelectionList extends _MatSelectionListMixinBase {\r\n    /**\r\n     * @param {?} _element\r\n     * @param {?} tabIndex\r\n     */\r\n    constructor(_element, tabIndex) {\r\n        super();\r\n        this._element = _element;\r\n        /**\r\n         * Emits a change event whenever the selected state of an option changes.\r\n         */\r\n        this.selectionChange = new EventEmitter();\r\n        /**\r\n         * Tabindex of the selection list.\r\n         */\r\n        this.tabIndex = 0;\r\n        /**\r\n         * Theme color of the selection list. This sets the checkbox color for all list options.\r\n         */\r\n        this.color = 'accent';\r\n        /**\r\n         * Function used for comparing an option against the selected value when determining which\r\n         * options should appear as selected. The first argument is the value of an options. The second\r\n         * one is a value from the selected value. A boolean must be returned.\r\n         */\r\n        this.compareWith = (/**\r\n         * @param {?} a1\r\n         * @param {?} a2\r\n         * @return {?}\r\n         */\r\n        (a1, a2) => a1 === a2);\r\n        this._disabled = false;\r\n        /**\r\n         * The currently selected options.\r\n         */\r\n        this.selectedOptions = new SelectionModel(true);\r\n        /**\r\n         * View to model callback that should be called whenever the selected options change.\r\n         */\r\n        this._onChange = (/**\r\n         * @param {?} _\r\n         * @return {?}\r\n         */\r\n        (_) => { });\r\n        /**\r\n         * Emits when the list has been destroyed.\r\n         */\r\n        this._destroyed = new Subject();\r\n        /**\r\n         * View to model callback that should be called if the list or its options lost focus.\r\n         */\r\n        this._onTouched = (/**\r\n         * @return {?}\r\n         */\r\n        () => { });\r\n        this.tabIndex = parseInt(tabIndex) || 0;\r\n    }\r\n    /**\r\n     * Whether the selection list is disabled.\r\n     * @return {?}\r\n     */\r\n    get disabled() { return this._disabled; }\r\n    /**\r\n     * @param {?} value\r\n     * @return {?}\r\n     */\r\n    set disabled(value) {\r\n        this._disabled = coerceBooleanProperty(value);\r\n        // The `MatSelectionList` and `MatListOption` are using the `OnPush` change detection\r\n        // strategy. Therefore the options will not check for any changes if the `MatSelectionList`\r\n        // changed its state. Since we know that a change to `disabled` property of the list affects\r\n        // the state of the options, we manually mark each option for check.\r\n        this._markOptionsForCheck();\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    ngAfterContentInit() {\r\n        this._keyManager = new FocusKeyManager(this.options)\r\n            .withWrap()\r\n            .withTypeAhead()\r\n            // Allow disabled items to be focusable. For accessibility reasons, there must be a way for\r\n            // screenreader users, that allows reading the different options of the list.\r\n            .skipPredicate((/**\r\n         * @return {?}\r\n         */\r\n        () => false))\r\n            .withAllowedModifierKeys(['shiftKey']);\r\n        if (this._value) {\r\n            this._setOptionsFromValues(this._value);\r\n        }\r\n        // Sync external changes to the model back to the options.\r\n        this.selectedOptions.onChange.pipe(takeUntil(this._destroyed)).subscribe((/**\r\n         * @param {?} event\r\n         * @return {?}\r\n         */\r\n        event => {\r\n            if (event.added) {\r\n                for (let item of event.added) {\r\n                    item.selected = true;\r\n                }\r\n            }\r\n            if (event.removed) {\r\n                for (let item of event.removed) {\r\n                    item.selected = false;\r\n                }\r\n            }\r\n        }));\r\n    }\r\n    /**\r\n     * @param {?} changes\r\n     * @return {?}\r\n     */\r\n    ngOnChanges(changes) {\r\n        /** @type {?} */\r\n        const disableRippleChanges = changes['disableRipple'];\r\n        /** @type {?} */\r\n        const colorChanges = changes['color'];\r\n        if ((disableRippleChanges && !disableRippleChanges.firstChange) ||\r\n            (colorChanges && !colorChanges.firstChange)) {\r\n            this._markOptionsForCheck();\r\n        }\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    ngOnDestroy() {\r\n        this._destroyed.next();\r\n        this._destroyed.complete();\r\n        this._isDestroyed = true;\r\n    }\r\n    /**\r\n     * Focuses the selection list.\r\n     * @param {?=} options\r\n     * @return {?}\r\n     */\r\n    focus(options) {\r\n        this._element.nativeElement.focus(options);\r\n    }\r\n    /**\r\n     * Selects all of the options.\r\n     * @return {?}\r\n     */\r\n    selectAll() {\r\n        this._setAllOptionsSelected(true);\r\n    }\r\n    /**\r\n     * Deselects all of the options.\r\n     * @return {?}\r\n     */\r\n    deselectAll() {\r\n        this._setAllOptionsSelected(false);\r\n    }\r\n    /**\r\n     * Sets the focused option of the selection-list.\r\n     * @param {?} option\r\n     * @return {?}\r\n     */\r\n    _setFocusedOption(option) {\r\n        this._keyManager.updateActiveItem(option);\r\n    }\r\n    /**\r\n     * Removes an option from the selection list and updates the active item.\r\n     * @param {?} option\r\n     * @return {?} Currently-active item.\r\n     */\r\n    _removeOptionFromList(option) {\r\n        /** @type {?} */\r\n        const optionIndex = this._getOptionIndex(option);\r\n        if (optionIndex > -1 && this._keyManager.activeItemIndex === optionIndex) {\r\n            // Check whether the option is the last item\r\n            if (optionIndex > 0) {\r\n                this._keyManager.updateActiveItem(optionIndex - 1);\r\n            }\r\n            else if (optionIndex === 0 && this.options.length > 1) {\r\n                this._keyManager.updateActiveItem(Math.min(optionIndex + 1, this.options.length - 1));\r\n            }\r\n        }\r\n        return this._keyManager.activeItem;\r\n    }\r\n    /**\r\n     * Passes relevant key presses to our key manager.\r\n     * @param {?} event\r\n     * @return {?}\r\n     */\r\n    _keydown(event) {\r\n        /** @type {?} */\r\n        const keyCode = event.keyCode;\r\n        /** @type {?} */\r\n        const manager = this._keyManager;\r\n        /** @type {?} */\r\n        const previousFocusIndex = manager.activeItemIndex;\r\n        /** @type {?} */\r\n        const hasModifier = hasModifierKey(event);\r\n        switch (keyCode) {\r\n            case SPACE:\r\n            case ENTER:\r\n                if (!hasModifier) {\r\n                    this._toggleFocusedOption();\r\n                    // Always prevent space from scrolling the page since the list has focus\r\n                    event.preventDefault();\r\n                }\r\n                break;\r\n            case HOME:\r\n            case END:\r\n                if (!hasModifier) {\r\n                    keyCode === HOME ? manager.setFirstItemActive() : manager.setLastItemActive();\r\n                    event.preventDefault();\r\n                }\r\n                break;\r\n            case A:\r\n                if (hasModifierKey(event, 'ctrlKey')) {\r\n                    this.options.find((/**\r\n                     * @param {?} option\r\n                     * @return {?}\r\n                     */\r\n                    option => !option.selected)) ? this.selectAll() : this.deselectAll();\r\n                    event.preventDefault();\r\n                }\r\n                break;\r\n            default:\r\n                manager.onKeydown(event);\r\n        }\r\n        if ((keyCode === UP_ARROW || keyCode === DOWN_ARROW) && event.shiftKey &&\r\n            manager.activeItemIndex !== previousFocusIndex) {\r\n            this._toggleFocusedOption();\r\n        }\r\n    }\r\n    /**\r\n     * Reports a value change to the ControlValueAccessor\r\n     * @return {?}\r\n     */\r\n    _reportValueChange() {\r\n        // Stop reporting value changes after the list has been destroyed. This avoids\r\n        // cases where the list might wrongly reset its value once it is removed, but\r\n        // the form control is still live.\r\n        if (this.options && !this._isDestroyed) {\r\n            /** @type {?} */\r\n            const value = this._getSelectedOptionValues();\r\n            this._onChange(value);\r\n            this._value = value;\r\n        }\r\n    }\r\n    /**\r\n     * Emits a change event if the selected state of an option changed.\r\n     * @param {?} option\r\n     * @return {?}\r\n     */\r\n    _emitChangeEvent(option) {\r\n        this.selectionChange.emit(new MatSelectionListChange(this, option));\r\n    }\r\n    /**\r\n     * Implemented as part of ControlValueAccessor.\r\n     * @param {?} values\r\n     * @return {?}\r\n     */\r\n    writeValue(values) {\r\n        this._value = values;\r\n        if (this.options) {\r\n            this._setOptionsFromValues(values || []);\r\n        }\r\n    }\r\n    /**\r\n     * Implemented as a part of ControlValueAccessor.\r\n     * @param {?} isDisabled\r\n     * @return {?}\r\n     */\r\n    setDisabledState(isDisabled) {\r\n        this.disabled = isDisabled;\r\n    }\r\n    /**\r\n     * Implemented as part of ControlValueAccessor.\r\n     * @param {?} fn\r\n     * @return {?}\r\n     */\r\n    registerOnChange(fn) {\r\n        this._onChange = fn;\r\n    }\r\n    /**\r\n     * Implemented as part of ControlValueAccessor.\r\n     * @param {?} fn\r\n     * @return {?}\r\n     */\r\n    registerOnTouched(fn) {\r\n        this._onTouched = fn;\r\n    }\r\n    /**\r\n     * Sets the selected options based on the specified values.\r\n     * @private\r\n     * @param {?} values\r\n     * @return {?}\r\n     */\r\n    _setOptionsFromValues(values) {\r\n        this.options.forEach((/**\r\n         * @param {?} option\r\n         * @return {?}\r\n         */\r\n        option => option._setSelected(false)));\r\n        values.forEach((/**\r\n         * @param {?} value\r\n         * @return {?}\r\n         */\r\n        value => {\r\n            /** @type {?} */\r\n            const correspondingOption = this.options.find((/**\r\n             * @param {?} option\r\n             * @return {?}\r\n             */\r\n            option => {\r\n                // Skip options that are already in the model. This allows us to handle cases\r\n                // where the same primitive value is selected multiple times.\r\n                return option.selected ? false : this.compareWith(option.value, value);\r\n            }));\r\n            if (correspondingOption) {\r\n                correspondingOption._setSelected(true);\r\n            }\r\n        }));\r\n    }\r\n    /**\r\n     * Returns the values of the selected options.\r\n     * @private\r\n     * @return {?}\r\n     */\r\n    _getSelectedOptionValues() {\r\n        return this.options.filter((/**\r\n         * @param {?} option\r\n         * @return {?}\r\n         */\r\n        option => option.selected)).map((/**\r\n         * @param {?} option\r\n         * @return {?}\r\n         */\r\n        option => option.value));\r\n    }\r\n    /**\r\n     * Toggles the state of the currently focused option if enabled.\r\n     * @private\r\n     * @return {?}\r\n     */\r\n    _toggleFocusedOption() {\r\n        /** @type {?} */\r\n        let focusedIndex = this._keyManager.activeItemIndex;\r\n        if (focusedIndex != null && this._isValidIndex(focusedIndex)) {\r\n            /** @type {?} */\r\n            let focusedOption = this.options.toArray()[focusedIndex];\r\n            if (focusedOption && !focusedOption.disabled) {\r\n                focusedOption.toggle();\r\n                // Emit a change event because the focused option changed its state through user\r\n                // interaction.\r\n                this._emitChangeEvent(focusedOption);\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Sets the selected state on all of the options\r\n     * and emits an event if anything changed.\r\n     * @private\r\n     * @param {?} isSelected\r\n     * @return {?}\r\n     */\r\n    _setAllOptionsSelected(isSelected) {\r\n        // Keep track of whether anything changed, because we only want to\r\n        // emit the changed event when something actually changed.\r\n        /** @type {?} */\r\n        let hasChanged = false;\r\n        this.options.forEach((/**\r\n         * @param {?} option\r\n         * @return {?}\r\n         */\r\n        option => {\r\n            if (option._setSelected(isSelected)) {\r\n                hasChanged = true;\r\n            }\r\n        }));\r\n        if (hasChanged) {\r\n            this._reportValueChange();\r\n        }\r\n    }\r\n    /**\r\n     * Utility to ensure all indexes are valid.\r\n     * @private\r\n     * @param {?} index The index to be checked.\r\n     * @return {?} True if the index is valid for our list of options.\r\n     */\r\n    _isValidIndex(index) {\r\n        return index >= 0 && index < this.options.length;\r\n    }\r\n    /**\r\n     * Returns the index of the specified list option.\r\n     * @private\r\n     * @param {?} option\r\n     * @return {?}\r\n     */\r\n    _getOptionIndex(option) {\r\n        return this.options.toArray().indexOf(option);\r\n    }\r\n    /**\r\n     * Marks all the options to be checked in the next change detection run.\r\n     * @private\r\n     * @return {?}\r\n     */\r\n    _markOptionsForCheck() {\r\n        if (this.options) {\r\n            this.options.forEach((/**\r\n             * @param {?} option\r\n             * @return {?}\r\n             */\r\n            option => option._markForCheck()));\r\n        }\r\n    }\r\n}\r\nMatSelectionList.decorators = [\r\n    { type: Component, args: [{selector: 'mat-selection-list',\r\n                exportAs: 'matSelectionList',\r\n                inputs: ['disableRipple'],\r\n                host: {\r\n                    'role': 'listbox',\r\n                    '[tabIndex]': 'tabIndex',\r\n                    'class': 'mat-selection-list mat-list-base',\r\n                    '(blur)': '_onTouched()',\r\n                    '(keydown)': '_keydown($event)',\r\n                    'aria-multiselectable': 'true',\r\n                    '[attr.aria-disabled]': 'disabled.toString()',\r\n                },\r\n                template: '<ng-content></ng-content>',\r\n                styles: [\".mat-subheader{display:flex;box-sizing:border-box;padding:16px;align-items:center}.mat-list-base .mat-subheader{margin:0}.mat-list-base{padding-top:8px;display:block;-webkit-tap-highlight-color:transparent}.mat-list-base .mat-subheader{height:48px;line-height:16px}.mat-list-base .mat-subheader:first-child{margin-top:-8px}.mat-list-base .mat-list-item,.mat-list-base .mat-list-option{display:block;height:48px;-webkit-tap-highlight-color:transparent;width:100%;padding:0}.mat-list-base .mat-list-item .mat-list-item-content,.mat-list-base .mat-list-option .mat-list-item-content{display:flex;flex-direction:row;align-items:center;box-sizing:border-box;padding:0 16px;position:relative;height:inherit}.mat-list-base .mat-list-item .mat-list-item-content-reverse,.mat-list-base .mat-list-option .mat-list-item-content-reverse{display:flex;align-items:center;padding:0 16px;flex-direction:row-reverse;justify-content:space-around}.mat-list-base .mat-list-item .mat-list-item-ripple,.mat-list-base .mat-list-option .mat-list-item-ripple{top:0;left:0;right:0;bottom:0;position:absolute;pointer-events:none}.mat-list-base .mat-list-item.mat-list-item-with-avatar,.mat-list-base .mat-list-option.mat-list-item-with-avatar{height:56px}.mat-list-base .mat-list-item.mat-2-line,.mat-list-base .mat-list-option.mat-2-line{height:72px}.mat-list-base .mat-list-item.mat-3-line,.mat-list-base .mat-list-option.mat-3-line{height:88px}.mat-list-base .mat-list-item.mat-multi-line,.mat-list-base .mat-list-option.mat-multi-line{height:auto}.mat-list-base .mat-list-item.mat-multi-line .mat-list-item-content,.mat-list-base .mat-list-option.mat-multi-line .mat-list-item-content{padding-top:16px;padding-bottom:16px}.mat-list-base .mat-list-item .mat-list-text,.mat-list-base .mat-list-option .mat-list-text{display:flex;flex-direction:column;width:100%;box-sizing:border-box;overflow:hidden;padding:0}.mat-list-base .mat-list-item .mat-list-text>*,.mat-list-base .mat-list-option .mat-list-text>*{margin:0;padding:0;font-weight:400;font-size:inherit}.mat-list-base .mat-list-item .mat-list-text:empty,.mat-list-base .mat-list-option .mat-list-text:empty{display:none}.mat-list-base .mat-list-item.mat-list-item-with-avatar .mat-list-item-content .mat-list-text,.mat-list-base .mat-list-item.mat-list-option .mat-list-item-content .mat-list-text,.mat-list-base .mat-list-option.mat-list-item-with-avatar .mat-list-item-content .mat-list-text,.mat-list-base .mat-list-option.mat-list-option .mat-list-item-content .mat-list-text{padding-right:0;padding-left:16px}[dir=rtl] .mat-list-base .mat-list-item.mat-list-item-with-avatar .mat-list-item-content .mat-list-text,[dir=rtl] .mat-list-base .mat-list-item.mat-list-option .mat-list-item-content .mat-list-text,[dir=rtl] .mat-list-base .mat-list-option.mat-list-item-with-avatar .mat-list-item-content .mat-list-text,[dir=rtl] .mat-list-base .mat-list-option.mat-list-option .mat-list-item-content .mat-list-text{padding-right:16px;padding-left:0}.mat-list-base .mat-list-item.mat-list-item-with-avatar .mat-list-item-content-reverse .mat-list-text,.mat-list-base .mat-list-item.mat-list-option .mat-list-item-content-reverse .mat-list-text,.mat-list-base .mat-list-option.mat-list-item-with-avatar .mat-list-item-content-reverse .mat-list-text,.mat-list-base .mat-list-option.mat-list-option .mat-list-item-content-reverse .mat-list-text{padding-left:0;padding-right:16px}[dir=rtl] .mat-list-base .mat-list-item.mat-list-item-with-avatar .mat-list-item-content-reverse .mat-list-text,[dir=rtl] .mat-list-base .mat-list-item.mat-list-option .mat-list-item-content-reverse .mat-list-text,[dir=rtl] .mat-list-base .mat-list-option.mat-list-item-with-avatar .mat-list-item-content-reverse .mat-list-text,[dir=rtl] .mat-list-base .mat-list-option.mat-list-option .mat-list-item-content-reverse .mat-list-text{padding-right:0;padding-left:16px}.mat-list-base .mat-list-item.mat-list-item-with-avatar.mat-list-option .mat-list-item-content .mat-list-text,.mat-list-base .mat-list-item.mat-list-item-with-avatar.mat-list-option .mat-list-item-content-reverse .mat-list-text,.mat-list-base .mat-list-option.mat-list-item-with-avatar.mat-list-option .mat-list-item-content .mat-list-text,.mat-list-base .mat-list-option.mat-list-item-with-avatar.mat-list-option .mat-list-item-content-reverse .mat-list-text{padding-right:16px;padding-left:16px}.mat-list-base .mat-list-item .mat-list-avatar,.mat-list-base .mat-list-option .mat-list-avatar{flex-shrink:0;width:40px;height:40px;border-radius:50%;object-fit:cover}.mat-list-base .mat-list-item .mat-list-avatar~.mat-divider-inset,.mat-list-base .mat-list-option .mat-list-avatar~.mat-divider-inset{margin-left:72px;width:calc(100% - 72px)}[dir=rtl] .mat-list-base .mat-list-item .mat-list-avatar~.mat-divider-inset,[dir=rtl] .mat-list-base .mat-list-option .mat-list-avatar~.mat-divider-inset{margin-left:auto;margin-right:72px}.mat-list-base .mat-list-item .mat-list-icon,.mat-list-base .mat-list-option .mat-list-icon{flex-shrink:0;width:24px;height:24px;font-size:24px;box-sizing:content-box;border-radius:50%;padding:4px}.mat-list-base .mat-list-item .mat-list-icon~.mat-divider-inset,.mat-list-base .mat-list-option .mat-list-icon~.mat-divider-inset{margin-left:64px;width:calc(100% - 64px)}[dir=rtl] .mat-list-base .mat-list-item .mat-list-icon~.mat-divider-inset,[dir=rtl] .mat-list-base .mat-list-option .mat-list-icon~.mat-divider-inset{margin-left:auto;margin-right:64px}.mat-list-base .mat-list-item .mat-divider,.mat-list-base .mat-list-option .mat-divider{position:absolute;bottom:0;left:0;width:100%;margin:0}[dir=rtl] .mat-list-base .mat-list-item .mat-divider,[dir=rtl] .mat-list-base .mat-list-option .mat-divider{margin-left:auto;margin-right:0}.mat-list-base .mat-list-item .mat-divider.mat-divider-inset,.mat-list-base .mat-list-option .mat-divider.mat-divider-inset{position:absolute}.mat-list-base[dense]{padding-top:4px;display:block}.mat-list-base[dense] .mat-subheader{height:40px;line-height:8px}.mat-list-base[dense] .mat-subheader:first-child{margin-top:-4px}.mat-list-base[dense] .mat-list-item,.mat-list-base[dense] .mat-list-option{display:block;height:40px;-webkit-tap-highlight-color:transparent;width:100%;padding:0}.mat-list-base[dense] .mat-list-item .mat-list-item-content,.mat-list-base[dense] .mat-list-option .mat-list-item-content{display:flex;flex-direction:row;align-items:center;box-sizing:border-box;padding:0 16px;position:relative;height:inherit}.mat-list-base[dense] .mat-list-item .mat-list-item-content-reverse,.mat-list-base[dense] .mat-list-option .mat-list-item-content-reverse{display:flex;align-items:center;padding:0 16px;flex-direction:row-reverse;justify-content:space-around}.mat-list-base[dense] .mat-list-item .mat-list-item-ripple,.mat-list-base[dense] .mat-list-option .mat-list-item-ripple{top:0;left:0;right:0;bottom:0;position:absolute;pointer-events:none}.mat-list-base[dense] .mat-list-item.mat-list-item-with-avatar,.mat-list-base[dense] .mat-list-option.mat-list-item-with-avatar{height:48px}.mat-list-base[dense] .mat-list-item.mat-2-line,.mat-list-base[dense] .mat-list-option.mat-2-line{height:60px}.mat-list-base[dense] .mat-list-item.mat-3-line,.mat-list-base[dense] .mat-list-option.mat-3-line{height:76px}.mat-list-base[dense] .mat-list-item.mat-multi-line,.mat-list-base[dense] .mat-list-option.mat-multi-line{height:auto}.mat-list-base[dense] .mat-list-item.mat-multi-line .mat-list-item-content,.mat-list-base[dense] .mat-list-option.mat-multi-line .mat-list-item-content{padding-top:16px;padding-bottom:16px}.mat-list-base[dense] .mat-list-item .mat-list-text,.mat-list-base[dense] .mat-list-option .mat-list-text{display:flex;flex-direction:column;width:100%;box-sizing:border-box;overflow:hidden;padding:0}.mat-list-base[dense] .mat-list-item .mat-list-text>*,.mat-list-base[dense] .mat-list-option .mat-list-text>*{margin:0;padding:0;font-weight:400;font-size:inherit}.mat-list-base[dense] .mat-list-item .mat-list-text:empty,.mat-list-base[dense] .mat-list-option .mat-list-text:empty{display:none}.mat-list-base[dense] .mat-list-item.mat-list-item-with-avatar .mat-list-item-content .mat-list-text,.mat-list-base[dense] .mat-list-item.mat-list-option .mat-list-item-content .mat-list-text,.mat-list-base[dense] .mat-list-option.mat-list-item-with-avatar .mat-list-item-content .mat-list-text,.mat-list-base[dense] .mat-list-option.mat-list-option .mat-list-item-content .mat-list-text{padding-right:0;padding-left:16px}[dir=rtl] .mat-list-base[dense] .mat-list-item.mat-list-item-with-avatar .mat-list-item-content .mat-list-text,[dir=rtl] .mat-list-base[dense] .mat-list-item.mat-list-option .mat-list-item-content .mat-list-text,[dir=rtl] .mat-list-base[dense] .mat-list-option.mat-list-item-with-avatar .mat-list-item-content .mat-list-text,[dir=rtl] .mat-list-base[dense] .mat-list-option.mat-list-option .mat-list-item-content .mat-list-text{padding-right:16px;padding-left:0}.mat-list-base[dense] .mat-list-item.mat-list-item-with-avatar .mat-list-item-content-reverse .mat-list-text,.mat-list-base[dense] .mat-list-item.mat-list-option .mat-list-item-content-reverse .mat-list-text,.mat-list-base[dense] .mat-list-option.mat-list-item-with-avatar .mat-list-item-content-reverse .mat-list-text,.mat-list-base[dense] .mat-list-option.mat-list-option .mat-list-item-content-reverse .mat-list-text{padding-left:0;padding-right:16px}[dir=rtl] .mat-list-base[dense] .mat-list-item.mat-list-item-with-avatar .mat-list-item-content-reverse .mat-list-text,[dir=rtl] .mat-list-base[dense] .mat-list-item.mat-list-option .mat-list-item-content-reverse .mat-list-text,[dir=rtl] .mat-list-base[dense] .mat-list-option.mat-list-item-with-avatar .mat-list-item-content-reverse .mat-list-text,[dir=rtl] .mat-list-base[dense] .mat-list-option.mat-list-option .mat-list-item-content-reverse .mat-list-text{padding-right:0;padding-left:16px}.mat-list-base[dense] .mat-list-item.mat-list-item-with-avatar.mat-list-option .mat-list-item-content .mat-list-text,.mat-list-base[dense] .mat-list-item.mat-list-item-with-avatar.mat-list-option .mat-list-item-content-reverse .mat-list-text,.mat-list-base[dense] .mat-list-option.mat-list-item-with-avatar.mat-list-option .mat-list-item-content .mat-list-text,.mat-list-base[dense] .mat-list-option.mat-list-item-with-avatar.mat-list-option .mat-list-item-content-reverse .mat-list-text{padding-right:16px;padding-left:16px}.mat-list-base[dense] .mat-list-item .mat-list-avatar,.mat-list-base[dense] .mat-list-option .mat-list-avatar{flex-shrink:0;width:36px;height:36px;border-radius:50%;object-fit:cover}.mat-list-base[dense] .mat-list-item .mat-list-avatar~.mat-divider-inset,.mat-list-base[dense] .mat-list-option .mat-list-avatar~.mat-divider-inset{margin-left:68px;width:calc(100% - 68px)}[dir=rtl] .mat-list-base[dense] .mat-list-item .mat-list-avatar~.mat-divider-inset,[dir=rtl] .mat-list-base[dense] .mat-list-option .mat-list-avatar~.mat-divider-inset{margin-left:auto;margin-right:68px}.mat-list-base[dense] .mat-list-item .mat-list-icon,.mat-list-base[dense] .mat-list-option .mat-list-icon{flex-shrink:0;width:20px;height:20px;font-size:20px;box-sizing:content-box;border-radius:50%;padding:4px}.mat-list-base[dense] .mat-list-item .mat-list-icon~.mat-divider-inset,.mat-list-base[dense] .mat-list-option .mat-list-icon~.mat-divider-inset{margin-left:60px;width:calc(100% - 60px)}[dir=rtl] .mat-list-base[dense] .mat-list-item .mat-list-icon~.mat-divider-inset,[dir=rtl] .mat-list-base[dense] .mat-list-option .mat-list-icon~.mat-divider-inset{margin-left:auto;margin-right:60px}.mat-list-base[dense] .mat-list-item .mat-divider,.mat-list-base[dense] .mat-list-option .mat-divider{position:absolute;bottom:0;left:0;width:100%;margin:0}[dir=rtl] .mat-list-base[dense] .mat-list-item .mat-divider,[dir=rtl] .mat-list-base[dense] .mat-list-option .mat-divider{margin-left:auto;margin-right:0}.mat-list-base[dense] .mat-list-item .mat-divider.mat-divider-inset,.mat-list-base[dense] .mat-list-option .mat-divider.mat-divider-inset{position:absolute}.mat-nav-list a{text-decoration:none;color:inherit}.mat-nav-list .mat-list-item{cursor:pointer;outline:0}mat-action-list button{background:0 0;color:inherit;border:none;font:inherit;outline:inherit;-webkit-tap-highlight-color:transparent;text-align:left}[dir=rtl] mat-action-list button{text-align:right}mat-action-list button::-moz-focus-inner{border:0}mat-action-list .mat-list-item{cursor:pointer;outline:inherit}.mat-list-option:not(.mat-list-item-disabled){cursor:pointer;outline:0}@media (-ms-high-contrast:active){.mat-selection-list:focus{outline-style:dotted}.mat-list-option:focus,.mat-list-option:hover,.mat-nav-list .mat-list-item:focus,.mat-nav-list .mat-list-item:hover,mat-action-list .mat-list-item:focus,mat-action-list .mat-list-item:hover{outline:dotted 1px}}@media (hover:none){.mat-action-list .mat-list-item:not(.mat-list-item-disabled):hover,.mat-list-option:not(.mat-list-item-disabled):hover,.mat-nav-list .mat-list-item:not(.mat-list-item-disabled):hover{background:0 0}}\"],\r\n                encapsulation: ViewEncapsulation.None,\r\n                providers: [MAT_SELECTION_LIST_VALUE_ACCESSOR],\r\n                changeDetection: ChangeDetectionStrategy.OnPush\r\n            },] },\r\n];\r\n/** @nocollapse */\r\nMatSelectionList.ctorParameters = () => [\r\n    { type: ElementRef },\r\n    { type: String, decorators: [{ type: Attribute, args: ['tabindex',] }] }\r\n];\r\nMatSelectionList.propDecorators = {\r\n    options: [{ type: ContentChildren, args: [MatListOption, { descendants: true },] }],\r\n    selectionChange: [{ type: Output }],\r\n    tabIndex: [{ type: Input }],\r\n    color: [{ type: Input }],\r\n    compareWith: [{ type: Input }],\r\n    disabled: [{ type: Input }]\r\n};\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\nclass MatListModule {\r\n}\r\nMatListModule.decorators = [\r\n    { type: NgModule, args: [{\r\n                imports: [MatLineModule, MatRippleModule, MatCommonModule, MatPseudoCheckboxModule, CommonModule],\r\n                exports: [\r\n                    MatList,\r\n                    MatNavList,\r\n                    MatListItem,\r\n                    MatListAvatarCssMatStyler,\r\n                    MatLineModule,\r\n                    MatCommonModule,\r\n                    MatListIconCssMatStyler,\r\n                    MatListSubheaderCssMatStyler,\r\n                    MatPseudoCheckboxModule,\r\n                    MatSelectionList,\r\n                    MatListOption,\r\n                    MatDividerModule\r\n                ],\r\n                declarations: [\r\n                    MatList,\r\n                    MatNavList,\r\n                    MatListItem,\r\n                    MatListAvatarCssMatStyler,\r\n                    MatListIconCssMatStyler,\r\n                    MatListSubheaderCssMatStyler,\r\n                    MatSelectionList,\r\n                    MatListOption\r\n                ],\r\n            },] },\r\n];\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n\r\nexport { MatListModule, MatNavList, MatList, MatListAvatarCssMatStyler, MatListIconCssMatStyler, MatListSubheaderCssMatStyler, MatListItem, MAT_SELECTION_LIST_VALUE_ACCESSOR, MatSelectionListChange, MatListOption, MatSelectionList };\r\n\r\n"]}