{"version":3,"sources":["v:/jad-admin-go/mazat_admin_panel/node_modules/@angular/material/esm2015/slide-toggle.js"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAyaAwBC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CAkDD,mBAOC;;;;;;;;;;;;;;;;;;;;;CAWD,uNAMC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CAED,2BAmBC","file":"slide-toggle.js","sourcesContent":["/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nimport { InjectionToken, Attribute, ChangeDetectionStrategy, ChangeDetectorRef, Component, ElementRef, EventEmitter, forwardRef, Input, Output, ViewChild, ViewEncapsulation, NgZone, Optional, Inject, Directive, NgModule } from '@angular/core';\r\nimport { FocusMonitor } from '@angular/cdk/a11y';\r\nimport { Directionality } from '@angular/cdk/bidi';\r\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\r\nimport { NG_VALUE_ACCESSOR, CheckboxRequiredValidator, NG_VALIDATORS } from '@angular/forms';\r\nimport { mixinColor, mixinDisabled, mixinDisableRipple, mixinTabIndex, GestureConfig, MatCommonModule, MatRippleModule } from '@angular/material/core';\r\nimport { ANIMATION_MODULE_TYPE } from '@angular/platform-browser/animations';\r\nimport { ObserversModule } from '@angular/cdk/observers';\r\nimport { HAMMER_GESTURE_CONFIG } from '@angular/platform-browser';\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n/**\r\n * Injection token to be used to override the default options for `mat-slide-toggle`.\r\n * @type {?}\r\n */\r\nconst MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS = new InjectionToken('mat-slide-toggle-default-options', {\r\n    providedIn: 'root',\r\n    factory: (/**\r\n     * @return {?}\r\n     */\r\n    () => ({ disableToggleValue: false, disableDragValue: false }))\r\n});\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n// Increasing integer for generating unique ids for slide-toggle components.\r\n/** @type {?} */\r\nlet nextUniqueId = 0;\r\n/**\r\n * \\@docs-private\r\n * @type {?}\r\n */\r\nconst MAT_SLIDE_TOGGLE_VALUE_ACCESSOR = {\r\n    provide: NG_VALUE_ACCESSOR,\r\n    useExisting: forwardRef((/**\r\n     * @return {?}\r\n     */\r\n    () => MatSlideToggle)),\r\n    multi: true\r\n};\r\n/**\r\n * Change event object emitted by a MatSlideToggle.\r\n */\r\nclass MatSlideToggleChange {\r\n    /**\r\n     * @param {?} source\r\n     * @param {?} checked\r\n     */\r\n    constructor(source, checked) {\r\n        this.source = source;\r\n        this.checked = checked;\r\n    }\r\n}\r\n// Boilerplate for applying mixins to MatSlideToggle.\r\n/**\r\n * \\@docs-private\r\n */\r\nclass MatSlideToggleBase {\r\n    /**\r\n     * @param {?} _elementRef\r\n     */\r\n    constructor(_elementRef) {\r\n        this._elementRef = _elementRef;\r\n    }\r\n}\r\n/** @type {?} */\r\nconst _MatSlideToggleMixinBase = mixinTabIndex(mixinColor(mixinDisableRipple(mixinDisabled(MatSlideToggleBase)), 'accent'));\r\n/**\r\n * Represents a slidable \"switch\" toggle that can be moved between on and off.\r\n */\r\nclass MatSlideToggle extends _MatSlideToggleMixinBase {\r\n    /**\r\n     * @param {?} elementRef\r\n     * @param {?} _focusMonitor\r\n     * @param {?} _changeDetectorRef\r\n     * @param {?} tabIndex\r\n     * @param {?} _ngZone\r\n     * @param {?} defaults\r\n     * @param {?=} _animationMode\r\n     * @param {?=} _dir\r\n     */\r\n    constructor(elementRef, _focusMonitor, _changeDetectorRef, tabIndex, _ngZone, defaults, _animationMode, _dir) {\r\n        super(elementRef);\r\n        this._focusMonitor = _focusMonitor;\r\n        this._changeDetectorRef = _changeDetectorRef;\r\n        this._ngZone = _ngZone;\r\n        this.defaults = defaults;\r\n        this._animationMode = _animationMode;\r\n        this._dir = _dir;\r\n        this._onChange = (/**\r\n         * @param {?} _\r\n         * @return {?}\r\n         */\r\n        (_) => { });\r\n        this._onTouched = (/**\r\n         * @return {?}\r\n         */\r\n        () => { });\r\n        this._uniqueId = `mat-slide-toggle-${++nextUniqueId}`;\r\n        this._required = false;\r\n        this._checked = false;\r\n        /**\r\n         * Whether the thumb is currently being dragged.\r\n         */\r\n        this._dragging = false;\r\n        /**\r\n         * Name value will be applied to the input element if present.\r\n         */\r\n        this.name = null;\r\n        /**\r\n         * A unique id for the slide-toggle input. If none is supplied, it will be auto-generated.\r\n         */\r\n        this.id = this._uniqueId;\r\n        /**\r\n         * Whether the label should appear after or before the slide-toggle. Defaults to 'after'.\r\n         */\r\n        this.labelPosition = 'after';\r\n        /**\r\n         * Used to set the aria-label attribute on the underlying input element.\r\n         */\r\n        this.ariaLabel = null;\r\n        /**\r\n         * Used to set the aria-labelledby attribute on the underlying input element.\r\n         */\r\n        this.ariaLabelledby = null;\r\n        /**\r\n         * An event will be dispatched each time the slide-toggle changes its value.\r\n         */\r\n        this.change = new EventEmitter();\r\n        /**\r\n         * An event will be dispatched each time the slide-toggle input is toggled.\r\n         * This event is always emitted when the user toggles the slide toggle, but this does not mean\r\n         * the slide toggle's value has changed. The event does not fire when the user drags to change\r\n         * the slide toggle value.\r\n         */\r\n        this.toggleChange = new EventEmitter();\r\n        /**\r\n         * An event will be dispatched each time the slide-toggle is dragged.\r\n         * This event is always emitted when the user drags the slide toggle to make a change greater\r\n         * than 50%. It does not mean the slide toggle's value is changed. The event is not emitted when\r\n         * the user toggles the slide toggle to change its value.\r\n         */\r\n        this.dragChange = new EventEmitter();\r\n        this.tabIndex = parseInt(tabIndex) || 0;\r\n    }\r\n    /**\r\n     * Whether the slide-toggle is required.\r\n     * @return {?}\r\n     */\r\n    get required() { return this._required; }\r\n    /**\r\n     * @param {?} value\r\n     * @return {?}\r\n     */\r\n    set required(value) { this._required = coerceBooleanProperty(value); }\r\n    /**\r\n     * Whether the slide-toggle element is checked or not.\r\n     * @return {?}\r\n     */\r\n    get checked() { return this._checked; }\r\n    /**\r\n     * @param {?} value\r\n     * @return {?}\r\n     */\r\n    set checked(value) {\r\n        this._checked = coerceBooleanProperty(value);\r\n        this._changeDetectorRef.markForCheck();\r\n    }\r\n    /**\r\n     * Returns the unique id for the visual hidden input.\r\n     * @return {?}\r\n     */\r\n    get inputId() { return `${this.id || this._uniqueId}-input`; }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    ngAfterContentInit() {\r\n        this._focusMonitor\r\n            .monitor(this._elementRef, true)\r\n            .subscribe((/**\r\n         * @param {?} focusOrigin\r\n         * @return {?}\r\n         */\r\n        focusOrigin => {\r\n            if (!focusOrigin) {\r\n                // When a focused element becomes disabled, the browser *immediately* fires a blur event.\r\n                // Angular does not expect events to be raised during change detection, so any state\r\n                // change (such as a form control's 'ng-touched') will cause a changed-after-checked\r\n                // error. See https://github.com/angular/angular/issues/17793. To work around this,\r\n                // we defer telling the form control it has been touched until the next tick.\r\n                Promise.resolve().then((/**\r\n                 * @return {?}\r\n                 */\r\n                () => this._onTouched()));\r\n            }\r\n        }));\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    ngOnDestroy() {\r\n        this._focusMonitor.stopMonitoring(this._elementRef);\r\n    }\r\n    /**\r\n     * Method being called whenever the underlying input emits a change event.\r\n     * @param {?} event\r\n     * @return {?}\r\n     */\r\n    _onChangeEvent(event) {\r\n        // We always have to stop propagation on the change event.\r\n        // Otherwise the change event, from the input element, will bubble up and\r\n        // emit its event object to the component's `change` output.\r\n        event.stopPropagation();\r\n        if (!this._dragging) {\r\n            this.toggleChange.emit();\r\n        }\r\n        // Releasing the pointer over the `<label>` element while dragging triggers another\r\n        // click event on the `<label>` element. This means that the checked state of the underlying\r\n        // input changed unintentionally and needs to be changed back. Or when the slide toggle's config\r\n        // disabled toggle change event by setting `disableToggleValue: true`, the slide toggle's value\r\n        // does not change, and the checked state of the underlying input needs to be changed back.\r\n        if (this._dragging || this.defaults.disableToggleValue) {\r\n            this._inputElement.nativeElement.checked = this.checked;\r\n            return;\r\n        }\r\n        // Sync the value from the underlying input element with the component instance.\r\n        this.checked = this._inputElement.nativeElement.checked;\r\n        // Emit our custom change event only if the underlying input emitted one. This ensures that\r\n        // there is no change event, when the checked state changes programmatically.\r\n        this._emitChangeEvent();\r\n    }\r\n    /**\r\n     * Method being called whenever the slide-toggle has been clicked.\r\n     * @param {?} event\r\n     * @return {?}\r\n     */\r\n    _onInputClick(event) {\r\n        // We have to stop propagation for click events on the visual hidden input element.\r\n        // By default, when a user clicks on a label element, a generated click event will be\r\n        // dispatched on the associated input element. Since we are using a label element as our\r\n        // root container, the click event on the `slide-toggle` will be executed twice.\r\n        // The real click event will bubble up, and the generated click event also tries to bubble up.\r\n        // This will lead to multiple click events.\r\n        // Preventing bubbling for the second event will solve that issue.\r\n        event.stopPropagation();\r\n    }\r\n    /**\r\n     * Implemented as part of ControlValueAccessor.\r\n     * @param {?} value\r\n     * @return {?}\r\n     */\r\n    writeValue(value) {\r\n        this.checked = !!value;\r\n    }\r\n    /**\r\n     * Implemented as part of ControlValueAccessor.\r\n     * @param {?} fn\r\n     * @return {?}\r\n     */\r\n    registerOnChange(fn) {\r\n        this._onChange = fn;\r\n    }\r\n    /**\r\n     * Implemented as part of ControlValueAccessor.\r\n     * @param {?} fn\r\n     * @return {?}\r\n     */\r\n    registerOnTouched(fn) {\r\n        this._onTouched = fn;\r\n    }\r\n    /**\r\n     * Implemented as a part of ControlValueAccessor.\r\n     * @param {?} isDisabled\r\n     * @return {?}\r\n     */\r\n    setDisabledState(isDisabled) {\r\n        this.disabled = isDisabled;\r\n        this._changeDetectorRef.markForCheck();\r\n    }\r\n    /**\r\n     * Focuses the slide-toggle.\r\n     * @param {?=} options\r\n     * @return {?}\r\n     */\r\n    focus(options) {\r\n        this._focusMonitor.focusVia(this._inputElement, 'keyboard', options);\r\n    }\r\n    /**\r\n     * Toggles the checked state of the slide-toggle.\r\n     * @return {?}\r\n     */\r\n    toggle() {\r\n        this.checked = !this.checked;\r\n        this._onChange(this.checked);\r\n    }\r\n    /**\r\n     * Emits a change event on the `change` output. Also notifies the FormControl about the change.\r\n     * @private\r\n     * @return {?}\r\n     */\r\n    _emitChangeEvent() {\r\n        this._onChange(this.checked);\r\n        this.change.emit(new MatSlideToggleChange(this, this.checked));\r\n    }\r\n    /**\r\n     * Retrieves the percentage of thumb from the moved distance. Percentage as fraction of 100.\r\n     * @private\r\n     * @param {?} distance\r\n     * @return {?}\r\n     */\r\n    _getDragPercentage(distance) {\r\n        /** @type {?} */\r\n        let percentage = (distance / this._thumbBarWidth) * 100;\r\n        // When the toggle was initially checked, then we have to start the drag at the end.\r\n        if (this._previousChecked) {\r\n            percentage += 100;\r\n        }\r\n        return Math.max(0, Math.min(percentage, 100));\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    _onDragStart() {\r\n        if (!this.disabled && !this._dragging) {\r\n            /** @type {?} */\r\n            const thumbEl = this._thumbEl.nativeElement;\r\n            this._thumbBarWidth = this._thumbBarEl.nativeElement.clientWidth - thumbEl.clientWidth;\r\n            thumbEl.classList.add('mat-dragging');\r\n            this._previousChecked = this.checked;\r\n            this._dragging = true;\r\n        }\r\n    }\r\n    /**\r\n     * @param {?} event\r\n     * @return {?}\r\n     */\r\n    _onDrag(event) {\r\n        if (this._dragging) {\r\n            /** @type {?} */\r\n            const direction = this._dir && this._dir.value === 'rtl' ? -1 : 1;\r\n            this._dragPercentage = this._getDragPercentage(event.deltaX * direction);\r\n            // Calculate the moved distance based on the thumb bar width.\r\n            /** @type {?} */\r\n            const dragX = (this._dragPercentage / 100) * this._thumbBarWidth * direction;\r\n            this._thumbEl.nativeElement.style.transform = `translate3d(${dragX}px, 0, 0)`;\r\n        }\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    _onDragEnd() {\r\n        if (this._dragging) {\r\n            /** @type {?} */\r\n            const newCheckedValue = this._dragPercentage > 50;\r\n            if (newCheckedValue !== this.checked) {\r\n                this.dragChange.emit();\r\n                if (!this.defaults.disableDragValue) {\r\n                    this.checked = newCheckedValue;\r\n                    this._emitChangeEvent();\r\n                }\r\n            }\r\n            // The drag should be stopped outside of the current event handler, otherwise the\r\n            // click event will be fired before it and will revert the drag change.\r\n            this._ngZone.runOutsideAngular((/**\r\n             * @return {?}\r\n             */\r\n            () => setTimeout((/**\r\n             * @return {?}\r\n             */\r\n            () => {\r\n                if (this._dragging) {\r\n                    this._dragging = false;\r\n                    this._thumbEl.nativeElement.classList.remove('mat-dragging');\r\n                    // Reset the transform because the component will take care\r\n                    // of the thumb position after drag.\r\n                    this._thumbEl.nativeElement.style.transform = '';\r\n                }\r\n            }))));\r\n        }\r\n    }\r\n    /**\r\n     * Method being called whenever the label text changes.\r\n     * @return {?}\r\n     */\r\n    _onLabelTextChange() {\r\n        // Since the event of the `cdkObserveContent` directive runs outside of the zone, the\r\n        // slide-toggle component will be only marked for check, but no actual change detection runs\r\n        // automatically. Instead of going back into the zone in order to trigger a change detection\r\n        // which causes *all* components to be checked (if explicitly marked or not using OnPush),\r\n        // we only trigger an explicit change detection for the slide-toggle view and its children.\r\n        this._changeDetectorRef.detectChanges();\r\n    }\r\n}\r\nMatSlideToggle.decorators = [\r\n    { type: Component, args: [{selector: 'mat-slide-toggle',\r\n                exportAs: 'matSlideToggle',\r\n                host: {\r\n                    'class': 'mat-slide-toggle',\r\n                    '[id]': 'id',\r\n                    // Needs to be `-1` so it can still receive programmatic focus.\r\n                    '[attr.tabindex]': 'disabled ? null : -1',\r\n                    '[attr.aria-label]': 'null',\r\n                    '[attr.aria-labelledby]': 'null',\r\n                    '[class.mat-checked]': 'checked',\r\n                    '[class.mat-disabled]': 'disabled',\r\n                    '[class.mat-slide-toggle-label-before]': 'labelPosition == \"before\"',\r\n                    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\r\n                    '(focus)': '_inputElement.nativeElement.focus()',\r\n                },\r\n                template: \"<label [attr.for]=\\\"inputId\\\" class=\\\"mat-slide-toggle-label\\\" #label><div #toggleBar class=\\\"mat-slide-toggle-bar\\\" [class.mat-slide-toggle-bar-no-side-margin]=\\\"!labelContent.textContent || !labelContent.textContent.trim()\\\"><input #input class=\\\"mat-slide-toggle-input cdk-visually-hidden\\\" type=\\\"checkbox\\\" role=\\\"switch\\\" [id]=\\\"inputId\\\" [required]=\\\"required\\\" [tabIndex]=\\\"tabIndex\\\" [checked]=\\\"checked\\\" [disabled]=\\\"disabled\\\" [attr.name]=\\\"name\\\" [attr.aria-checked]=\\\"checked.toString()\\\" [attr.aria-label]=\\\"ariaLabel\\\" [attr.aria-labelledby]=\\\"ariaLabelledby\\\" (change)=\\\"_onChangeEvent($event)\\\" (click)=\\\"_onInputClick($event)\\\"><div class=\\\"mat-slide-toggle-thumb-container\\\" #thumbContainer (slidestart)=\\\"_onDragStart()\\\" (slide)=\\\"_onDrag($event)\\\" (slideend)=\\\"_onDragEnd()\\\"><div class=\\\"mat-slide-toggle-thumb\\\"></div><div class=\\\"mat-slide-toggle-ripple\\\" mat-ripple [matRippleTrigger]=\\\"label\\\" [matRippleDisabled]=\\\"disableRipple || disabled\\\" [matRippleCentered]=\\\"true\\\" [matRippleRadius]=\\\"20\\\" [matRippleAnimation]=\\\"{enterDuration: 150}\\\"><div class=\\\"mat-ripple-element mat-slide-toggle-persistent-ripple\\\"></div></div></div></div><span class=\\\"mat-slide-toggle-content\\\" #labelContent (cdkObserveContent)=\\\"_onLabelTextChange()\\\"><span style=\\\"display:none\\\">&nbsp;</span><ng-content></ng-content></span></label>\",\r\n                styles: [\".mat-slide-toggle{display:inline-block;height:24px;max-width:100%;line-height:24px;white-space:nowrap;outline:0;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;-webkit-tap-highlight-color:transparent}.mat-slide-toggle.mat-checked .mat-slide-toggle-thumb-container{transform:translate3d(16px,0,0)}[dir=rtl] .mat-slide-toggle.mat-checked .mat-slide-toggle-thumb-container{transform:translate3d(-16px,0,0)}.mat-slide-toggle.mat-disabled{opacity:.38}.mat-slide-toggle.mat-disabled .mat-slide-toggle-label,.mat-slide-toggle.mat-disabled .mat-slide-toggle-thumb-container{cursor:default}.mat-slide-toggle-label{display:flex;flex:1;flex-direction:row;align-items:center;height:inherit;cursor:pointer}.mat-slide-toggle-content{white-space:nowrap;overflow:hidden;text-overflow:ellipsis}.mat-slide-toggle-label-before .mat-slide-toggle-label{order:1}.mat-slide-toggle-label-before .mat-slide-toggle-bar{order:2}.mat-slide-toggle-bar,[dir=rtl] .mat-slide-toggle-label-before .mat-slide-toggle-bar{margin-right:8px;margin-left:0}.mat-slide-toggle-label-before .mat-slide-toggle-bar,[dir=rtl] .mat-slide-toggle-bar{margin-left:8px;margin-right:0}.mat-slide-toggle-bar-no-side-margin{margin-left:0;margin-right:0}.mat-slide-toggle-thumb-container{position:absolute;z-index:1;width:20px;height:20px;top:-3px;left:0;transform:translate3d(0,0,0);transition:all 80ms linear;transition-property:transform;cursor:-webkit-grab;cursor:grab}.mat-slide-toggle-thumb-container.mat-dragging{transition-duration:0s}.mat-slide-toggle-thumb-container:active{cursor:-webkit-grabbing;cursor:grabbing}._mat-animation-noopable .mat-slide-toggle-thumb-container{transition:none}[dir=rtl] .mat-slide-toggle-thumb-container{left:auto;right:0}.mat-slide-toggle-thumb{height:20px;width:20px;border-radius:50%}.mat-slide-toggle-bar{position:relative;width:36px;height:14px;flex-shrink:0;border-radius:8px}.mat-slide-toggle-input{bottom:0;left:10px}[dir=rtl] .mat-slide-toggle-input{left:auto;right:10px}.mat-slide-toggle-bar,.mat-slide-toggle-thumb{transition:all 80ms linear;transition-property:background-color;transition-delay:50ms}._mat-animation-noopable .mat-slide-toggle-bar,._mat-animation-noopable .mat-slide-toggle-thumb{transition:none}.mat-slide-toggle .mat-slide-toggle-ripple{position:absolute;top:calc(50% - 20px);left:calc(50% - 20px);height:40px;width:40px;z-index:1;pointer-events:none}.mat-slide-toggle .mat-slide-toggle-ripple .mat-ripple-element:not(.mat-slide-toggle-persistent-ripple){opacity:.12}.mat-slide-toggle-persistent-ripple{width:100%;height:100%;transform:none}.mat-slide-toggle-bar:hover .mat-slide-toggle-persistent-ripple{opacity:.04}.mat-slide-toggle:not(.mat-disabled).cdk-keyboard-focused .mat-slide-toggle-persistent-ripple{opacity:.12}.mat-slide-toggle-persistent-ripple,.mat-slide-toggle.mat-disabled .mat-slide-toggle-bar:hover .mat-slide-toggle-persistent-ripple{opacity:0}@media (hover:none){.mat-slide-toggle-bar:hover .mat-slide-toggle-persistent-ripple{display:none}}@media (-ms-high-contrast:active){.mat-slide-toggle-thumb{background:#fff;border:1px solid #000}.mat-slide-toggle.mat-checked .mat-slide-toggle-thumb{background:#000;border:1px solid #fff}.mat-slide-toggle-bar{background:#fff}.mat-slide-toggle.cdk-keyboard-focused .mat-slide-toggle-bar{outline:1px dotted;outline-offset:5px}}@media (-ms-high-contrast:black-on-white){.mat-slide-toggle-bar{border:1px solid #000}}\"],\r\n                providers: [MAT_SLIDE_TOGGLE_VALUE_ACCESSOR],\r\n                inputs: ['disabled', 'disableRipple', 'color', 'tabIndex'],\r\n                encapsulation: ViewEncapsulation.None,\r\n                changeDetection: ChangeDetectionStrategy.OnPush,\r\n            },] },\r\n];\r\n/** @nocollapse */\r\nMatSlideToggle.ctorParameters = () => [\r\n    { type: ElementRef },\r\n    { type: FocusMonitor },\r\n    { type: ChangeDetectorRef },\r\n    { type: String, decorators: [{ type: Attribute, args: ['tabindex',] }] },\r\n    { type: NgZone },\r\n    { type: undefined, decorators: [{ type: Inject, args: [MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS,] }] },\r\n    { type: String, decorators: [{ type: Optional }, { type: Inject, args: [ANIMATION_MODULE_TYPE,] }] },\r\n    { type: Directionality, decorators: [{ type: Optional }] }\r\n];\r\nMatSlideToggle.propDecorators = {\r\n    _thumbEl: [{ type: ViewChild, args: ['thumbContainer', { static: false },] }],\r\n    _thumbBarEl: [{ type: ViewChild, args: ['toggleBar', { static: false },] }],\r\n    name: [{ type: Input }],\r\n    id: [{ type: Input }],\r\n    labelPosition: [{ type: Input }],\r\n    ariaLabel: [{ type: Input, args: ['aria-label',] }],\r\n    ariaLabelledby: [{ type: Input, args: ['aria-labelledby',] }],\r\n    required: [{ type: Input }],\r\n    checked: [{ type: Input }],\r\n    change: [{ type: Output }],\r\n    toggleChange: [{ type: Output }],\r\n    dragChange: [{ type: Output }],\r\n    _inputElement: [{ type: ViewChild, args: ['input', { static: false },] }]\r\n};\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n/** @type {?} */\r\nconst MAT_SLIDE_TOGGLE_REQUIRED_VALIDATOR = {\r\n    provide: NG_VALIDATORS,\r\n    useExisting: forwardRef((/**\r\n     * @return {?}\r\n     */\r\n    () => MatSlideToggleRequiredValidator)),\r\n    multi: true\r\n};\r\n/**\r\n * Validator for Material slide-toggle components with the required attribute in a\r\n * template-driven form. The default validator for required form controls asserts\r\n * that the control value is not undefined but that is not appropriate for a slide-toggle\r\n * where the value is always defined.\r\n *\r\n * Required slide-toggle form controls are valid when checked.\r\n */\r\nclass MatSlideToggleRequiredValidator extends CheckboxRequiredValidator {\r\n}\r\nMatSlideToggleRequiredValidator.decorators = [\r\n    { type: Directive, args: [{\r\n                selector: `mat-slide-toggle[required][formControlName],\r\n             mat-slide-toggle[required][formControl], mat-slide-toggle[required][ngModel]`,\r\n                providers: [MAT_SLIDE_TOGGLE_REQUIRED_VALIDATOR],\r\n            },] },\r\n];\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n/**\r\n * This module is used by both original and MDC-based slide-toggle implementations.\r\n */\r\n// tslint:disable-next-line:class-name\r\nclass _MatSlideToggleRequiredValidatorModule {\r\n}\r\n_MatSlideToggleRequiredValidatorModule.decorators = [\r\n    { type: NgModule, args: [{\r\n                exports: [MatSlideToggleRequiredValidator],\r\n                declarations: [MatSlideToggleRequiredValidator],\r\n            },] },\r\n];\r\nclass MatSlideToggleModule {\r\n}\r\nMatSlideToggleModule.decorators = [\r\n    { type: NgModule, args: [{\r\n                imports: [\r\n                    _MatSlideToggleRequiredValidatorModule,\r\n                    MatRippleModule,\r\n                    MatCommonModule,\r\n                    ObserversModule,\r\n                ],\r\n                exports: [\r\n                    _MatSlideToggleRequiredValidatorModule,\r\n                    MatSlideToggle,\r\n                    MatCommonModule\r\n                ],\r\n                declarations: [MatSlideToggle],\r\n                providers: [\r\n                    { provide: HAMMER_GESTURE_CONFIG, useClass: GestureConfig }\r\n                ],\r\n            },] },\r\n];\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n\r\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n\r\nexport { _MatSlideToggleRequiredValidatorModule, MatSlideToggleModule, MAT_SLIDE_TOGGLE_VALUE_ACCESSOR, MatSlideToggleChange, MatSlideToggle, MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS, MAT_SLIDE_TOGGLE_REQUIRED_VALIDATOR, MatSlideToggleRequiredValidator };\r\n\r\n"]}